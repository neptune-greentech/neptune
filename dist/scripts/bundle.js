/*! For license information please see bundle.js.LICENSE.txt */
!function(){var t={878:function(t){t.exports=function(){"use strict";function t(t){return"number"==typeof t}function e(t){return"[object Object]"===Object.prototype.toString.call(t)}function r(t){return e(t)||function(t){return Array.isArray(t)}(t)}function n(t){return Math.abs(t)}function i(t){return t?t/n(t):0}function o(t,e){return n(t-e)}function a(t){return c(t).map(Number)}function s(t){return t[u(t)]}function u(t){return Math.max(0,t.length-1)}function c(t){return Object.keys(t)}function l(t,r){return[t,r].reduce((function(t,r){return c(r).forEach((function(n){var i=t[n],o=r[n],a=e(i)&&e(o);t[n]=a?l(i,o):o})),t}),{})}function f(t,e){var n=c(t),i=c(e);return n.length===i.length&&n.every((function(n){var i=t[n],o=e[n];return"function"==typeof i?"".concat(i)==="".concat(o):r(i)&&r(o)?f(i,o):i===o}))}function d(e,r){var n={start:function(){return 0},center:function(t){return i(t)/2},end:i};function i(t){return r-t}return{measure:function(i){return t(e)?r*Number(e):n[e](i)}}}function p(t,e){var r=n(t-e);function i(e){return e<t}function o(t){return t>e}function a(t){return i(t)||o(t)}return{length:r,max:e,min:t,constrain:function(r){return a(r)?i(r)?t:e:r},reachedAny:a,reachedMax:o,reachedMin:i,removeOffset:function(t){return r?t-r*Math.ceil((t-e)/r):t}}}function h(t,e,r){var i=p(0,t),o=i.min,a=i.constrain,s=t+1,u=c(e);function c(t){return r?n((s+t)%s):a(t)}function l(){return u}function f(t){return u=c(t),d}var d={add:function(t){return f(l()+t)},clone:function(){return h(t,l(),r)},get:l,set:f,min:o,max:t};return d}function g(){var t=[],e={add:function(r,n,i,o){return void 0===o&&(o=!1),r.addEventListener(n,i,o),t.push((function(){return r.removeEventListener(n,i,o)})),e},removeAll:function(){return t=t.filter((function(t){return t()})),e}};return e}function m(e){var r=e;function n(t){return r/=t,o}function i(e){return t(e)?e:e.get()}var o={add:function(t){return r+=i(t),o},divide:n,get:function(){return r},multiply:function(t){return r*=t,o},normalize:function(){return 0!==r&&n(r),o},set:function(t){return r=i(t),o},subtract:function(t){return r-=i(t),o}};return o}function y(t,e,r,a,s,u,c,l,f,d,p,h,y,_,v,x){var b=t.cross,w=["INPUT","SELECT","TEXTAREA"],S=m(0),T=g(),k=g(),q=y.measure(20),A={mouse:300,touch:400},M={mouse:500,touch:600},E=v?5:16,O=0,C=0,P=!1,z=!1,D=!1,L=!1;function R(t){if(!(L="mousedown"===t.type)||0===t.button){var e,n=o(a.get(),u.get())>=2,i=L||!n,c=(e=t.target.nodeName||"",!(w.indexOf(e)>-1)),l=n||L&&c;P=!0,s.pointerDown(t),S.set(a),a.set(u),f.useBaseMass().useSpeed(80),function(){var t=L?document:r;k.add(t,"touchmove",I).add(t,"touchend",B).add(t,"mousemove",I).add(t,"mouseup",B)}(),O=s.readPoint(t),C=s.readPoint(t,b),h.emit("pointerDown"),i&&(D=!1),l&&t.preventDefault()}}function I(t){if(!z&&!L){if(!t.cancelable)return B(t);var r=s.readPoint(t),n=s.readPoint(t,b),i=o(r,O),u=o(n,C);if(!(z=i>u)&&!D)return B(t)}var l=s.pointerMove(t);!D&&l&&(D=!0),c.start(),a.add(e.apply(l)),t.preventDefault()}function B(t){var r=d.byDistance(0,!1).index!==p.get(),u=s.pointerUp(t)*(v?M:A)[L?"mouse":"touch"],c=function(t,e){var r=p.clone().add(-1*i(t)),o=r.get()===p.min||r.get()===p.max,a=d.byDistance(t,!v).distance;return v||n(t)<q?a:!_&&o?.4*a:x&&e?.5*a:d.byIndex(r.get(),0).distance}(e.apply(u),r),g=function(t,e){if(0===t||0===e)return 0;if(n(t)<=n(e))return 0;var r=o(n(t),n(e));return n(r/t)}(u,c),m=o(a.get(),S.get())>=.5,y=r&&g>.75,b=n(u)<q,w=y?10:E,T=y?1+2.5*g:1;m&&!L&&(D=!0),z=!1,P=!1,k.removeAll(),f.useSpeed(b?9:w).useMass(T),l.distance(c,!v),L=!1,h.emit("pointerUp")}function F(t){D&&t.preventDefault()}return{addActivationEvents:function(){var t=r;T.add(t,"touchmove",(function(){})).add(t,"touchend",(function(){})).add(t,"touchstart",R).add(t,"mousedown",R).add(t,"touchcancel",B).add(t,"contextmenu",B).add(t,"click",F)},clickAllowed:function(){return!D},pointerDown:function(){return P},removeAllEvents:function(){T.removeAll(),k.removeAll()}}}function _(t,e,r){var n,o=(2,n=Math.pow(10,2),function(t){return Math.round(t*n)/n}),a=m(0),s=m(0),u=m(0),c=0,l=e,f=r;function d(t){return l=t,h}function p(t){return f=t,h}var h={direction:function(){return c},seek:function(e){u.set(e).subtract(t);var r,n=0+(u.get()-0)/100*(l-0);return c=i(u.get()),u.normalize().multiply(n).subtract(a),(r=u).divide(f),s.add(r),h},settle:function(e){var r=e.get()-t.get(),n=!o(r);return n&&t.set(e),n},update:function(){a.add(s),t.add(a),s.multiply(0)},useBaseMass:function(){return p(r)},useBaseSpeed:function(){return d(e)},useMass:p,useSpeed:d};return h}function v(t,e,r,i,o){var a=o.measure(10),s=o.measure(50),u=!1;return{constrain:function(o){if(!u&&t.reachedAny(r.get())&&t.reachedAny(e.get())){var c=t.reachedMin(e.get())?"min":"max",l=n(t[c]-e.get()),f=r.get()-e.get(),d=Math.min(l/s,.85);r.subtract(f*d),!o&&n(f)<a&&(r.set(t.constrain(r.get())),i.useSpeed(10).useMass(3))}},toggleActive:function(t){u=!t}}}function x(t,e,r,n){var i=p(e.min+.1,e.max+.1),o=i.reachedMin,a=i.reachedMax;return{loop:function(e){if(function(t){return 1===t?a(r.get()):-1===t&&o(r.get())}(e)){var i=t*(-1*e);n.forEach((function(t){return t.add(i)}))}}}}function b(t){var e=t.max,r=t.length;return{get:function(t){return(t-e)/-r}}}function w(t,e,r,o,a){var s=o.reachedAny,u=o.removeOffset,c=o.constrain;function l(t){return t.concat().sort((function(t,e){return n(t)-n(e)}))[0]}function f(e,n){var o=[e,e+r,e-r];return t?l(n?o.filter((function(t){return i(t)===n})):o):o[0]}return{byDistance:function(r,i){var o=a.get()+r,l=function(r){var i=t?u(r):c(r);return{index:e.map((function(t){return t-i})).map((function(t){return f(t,0)})).map((function(t,e){return{diff:t,index:e}})).sort((function(t,e){return n(t.diff)-n(e.diff)}))[0].index,distance:i}}(o),d=l.index,p=l.distance,h=!t&&s(o);return!i||h?{index:d,distance:r}:{index:d,distance:r+f(e[d]-p,0)}},byIndex:function(t,r){return{index:t,distance:f(e[t]-a.get(),r)}},shortcut:f}}function S(t,e,r){var n="x"===t.scroll?function(t){return"translate3d(".concat(t,"px,0px,0px)")}:function(t){return"translate3d(0px,".concat(t,"px,0px)")},i=r.style,o=!1;return{clear:function(){o||(i.transform="",r.getAttribute("style")||r.removeAttribute("style"))},to:function(t){o||(i.transform=n(e.apply(t.get())))},toggleActive:function(t){o=!t}}}function T(t,e,r,n,i,o,s,u,c){var l,f=a(i),d=a(i).reverse(),p=(l=o[0]-1,y(g(d,l),"end")).concat(function(){var t=r-o[0]-1;return y(g(f,t),"start")}());function h(t,e){return t.reduce((function(t,e){return t-i[e]}),e)}function g(t,e){return t.reduce((function(t,r){return h(t,e)>0?t.concat([r]):t}),[])}function y(r,i){var o="start"===i,a=o?-n:n,l=s.findSlideBounds([a]);return r.map((function(r){var i=o?0:-n,a=o?n:0,s=l.filter((function(t){return t.index===r}))[0][o?"end":"start"],f=m(-1),d=m(-1),p=S(t,e,c[r]);return{index:r,location:d,translate:p,target:function(){return f.set(u.get()>s?i:a)}}}))}return{canLoop:function(){return p.every((function(t){var e=t.index;return h(f.filter((function(t){return t!==e})),r)<=.1}))},clear:function(){p.forEach((function(t){return t.translate.clear()}))},loop:function(){p.forEach((function(t){var e=t.target,r=t.translate,n=t.location,i=e();i.get()!==n.get()&&(0===i.get()?r.clear():r.to(i),n.set(i))}))},loopPoints:p}}function k(e,r,n){var i=t(n);return{groupSlides:function(t){return i?function(t,e){return a(t).filter((function(t){return t%e==0})).map((function(r){return t.slice(r,r+e)}))}(t,n):function(t){return a(t).reduce((function(t,n){var i=r.slice(s(t),n+1).reduce((function(t,e){return t+e}),0);return!n||i>e?t.concat(n):t}),[]).map((function(e,r,n){return t.slice(e,n[r+1])}))}(t)}}}function q(t,e,r,i,o){var c=i.align,l=i.axis,f=i.direction,q=i.startIndex,A=i.inViewThreshold,M=i.loop,E=i.speed,O=i.dragFree,C=i.slidesToScroll,P=i.skipSnaps,z=i.containScroll,D=e.getBoundingClientRect(),L=r.map((function(t){return t.getBoundingClientRect()})),R=function(t){var e="rtl"===t?-1:1;return{apply:function(t){return t*e}}}(f),I=function(t,e){var r="y"===t?"y":"x";return{scroll:r,cross:"y"===t?"x":"y",startEdge:"y"===r?"top":"rtl"===e?"right":"left",endEdge:"y"===r?"bottom":"rtl"===e?"left":"right",measureSize:function(t){var e=t.width,n=t.height;return"x"===r?e:n}}}(l,f),B=I.measureSize(D),F=function(t){return{measure:function(e){return t*(e/100)}}}(B),Y=d(c,B),X=!M&&""!==z,N=function(t,e,r,i,o){var a=t.measureSize,c=t.startEdge,l=t.endEdge,f=function(){if(!o)return 0;var t=r[0];return n(e[c]-t[c])}(),d=function(){if(!o)return 0;var t=window.getComputedStyle(s(i));return parseFloat(t.getPropertyValue("margin-".concat(l)))}(),p=r.map(a),h=r.map((function(t,e,r){var n=!e,i=e===u(r);return n?p[e]+f:i?p[e]+d:r[e+1][c]-t[c]})).map(n);return{slideSizes:p,slideSizesWithGaps:h}}(I,D,L,r,M||""!==z),V=N.slideSizes,H=N.slideSizesWithGaps,U=k(B,H,C),W=function(t,e,r,i,o,a,c){var l,f=t.startEdge,d=t.endEdge,p=a.groupSlides,h=p(i).map((function(t){return s(t)[d]-t[0][f]})).map(n).map(e.measure),g=i.map((function(t){return r[f]-t[f]})).map((function(t){return-n(t)})),m=(l=s(g)-s(o),p(g).map((function(t){return t[0]})).map((function(t,e,r){var n=!e,i=e===u(r);return c&&n?0:c&&i?l:t+h[e]})));return{snaps:g,snapsAligned:m}}(I,Y,D,L,H,U,X),j=W.snaps,G=W.snapsAligned,$=-s(j)+s(H),Q=function(t,e,r,n){var i=p(-e+t,r[0]),o=r.map(i.constrain);return{snapsContained:function(){if(e<=t)return[i.max];if("keepSnaps"===n)return o;var r=function(){var t=o[0],e=s(o);return p(o.lastIndexOf(t),o.indexOf(e)+1)}(),a=r.min,u=r.max;return o.slice(a,u)}()}}(B,$,G,z).snapsContained,Z=X?Q:G,J=function(t,e,r){var n,i;return{limit:(n=e[0],i=s(e),p(r?n-t:i,n))}}($,Z,M).limit,K=h(u(Z),q,M),tt=K.clone(),et=a(r),rt=function(t){var e=0;function r(t,r){return function(){t===!!e&&r()}}function n(){e=window.requestAnimationFrame(t)}return{proceed:r(!0,n),start:r(!1,n),stop:r(!0,(function(){window.cancelAnimationFrame(e),e=0}))}}((function(){M||ft.scrollBounds.constrain(ft.dragHandler.pointerDown()),ft.scrollBody.seek(ot).update();var t=ft.scrollBody.settle(ot);t&&!ft.dragHandler.pointerDown()&&(ft.animation.stop(),o.emit("settle")),t||o.emit("scroll"),M&&(ft.scrollLooper.loop(ft.scrollBody.direction()),ft.slideLooper.loop()),ft.translate.to(it),ft.animation.proceed()})),nt=Z[K.get()],it=m(nt),ot=m(nt),at=_(it,E,1),st=w(M,Z,$,J,ot),ut=function(t,e,r,n,i,o){function a(n){var a=n.distance,s=n.index!==e.get();a&&(t.start(),i.add(a)),s&&(r.set(e.get()),e.set(n.index),o.emit("select"))}return{distance:function(t,e){a(n.byDistance(t,e))},index:function(t,r){var i=e.clone().set(t);a(n.byIndex(i.get(),r))}}}(rt,K,tt,st,ot,o),ct=function(t,e,r,n,i,o,a){var s=i.removeOffset,u=i.constrain,c=o?[0,e,-e]:[0],l=f(c,a);function f(e,i){var o=e||c,a=function(t){var e=t||0;return r.map((function(t){return p(.5,t-.5).constrain(t*e)}))}(i);return o.reduce((function(e,i){var o=n.map((function(e,n){return{start:e-r[n]+a[n]+i,end:e+t-a[n]+i,index:n}}));return e.concat(o)}),[])}return{check:function(t,e){var r=o?s(t):u(t);return(e||l).reduce((function(t,e){var n=e.index,i=e.start,o=e.end;return-1===t.indexOf(n)&&i<r&&o>r?t.concat([n]):t}),[])},findSlideBounds:f}}(B,$,V,j,J,M,A),lt=y(I,R,t,ot,function(t){var e,r;function i(t){return"undefined"!=typeof TouchEvent&&t instanceof TouchEvent}function o(t){return t.timeStamp}function a(e,r){var n=r||t.scroll,o="client".concat("x"===n?"X":"Y");return(i(e)?e.touches[0]:e)[o]}return{isTouchEvent:i,pointerDown:function(t){return e=t,r=t,a(t)},pointerMove:function(t){var n=a(t)-a(r),i=o(t)-o(e)>170;return r=t,i&&(e=t),n},pointerUp:function(t){if(!e||!r)return 0;var i=a(r)-a(e),s=o(t)-o(e),u=o(t)-o(r)>170,c=i/s;return s&&!u&&n(c)>.1?c:0},readPoint:a}}(I),it,rt,ut,at,st,K,o,F,M,O,P),ft={containerRect:D,slideRects:L,animation:rt,axis:I,direction:R,dragHandler:lt,eventStore:g(),percentOfView:F,index:K,indexPrevious:tt,limit:J,location:it,options:i,scrollBody:at,scrollBounds:v(J,it,ot,at,F),scrollLooper:x($,J,it,[it,ot]),scrollProgress:b(J),scrollSnaps:Z,scrollTarget:st,scrollTo:ut,slideLooper:T(I,R,B,$,H,Z,ct,it,r),slidesToScroll:U,slidesInView:ct,slideIndexes:et,target:ot,translate:S(I,R,e)};return ft}var A={align:"center",axis:"x",containScroll:"",direction:"ltr",slidesToScroll:1,breakpoints:{},dragFree:!1,draggable:!0,inViewThreshold:0,loop:!1,skipSnaps:!1,speed:10,startIndex:0,active:!0};function M(){function t(t,e){return l(t,e||{})}return{merge:t,areEqual:function(t,e){return JSON.stringify(c(t.breakpoints||{}))===JSON.stringify(c(e.breakpoints||{}))&&f(t,e)},atMedia:function(e){var r=e.breakpoints||{},n=c(r).filter((function(t){return window.matchMedia(t).matches})).map((function(t){return r[t]})).reduce((function(e,r){return t(e,r)}),{});return t(e,n)}}}function E(t,e,r){var n,i,o,a,s,u=g(),c=M(),l=function(){var t=M(),e=t.atMedia,r=t.areEqual,n=[],i=[];function o(t){var n=e(t.options);return function(){return!r(n,e(t.options))}}var a={init:function(t,r){return i=t.map(o),(n=t.filter((function(t){return e(t.options).active}))).forEach((function(t){return t.init(r)})),t.reduce((function(t,e){var r;return Object.assign(t,((r={})[e.name]=e,r))}),{})},destroy:function(){n=n.filter((function(t){return t.destroy()}))},haveChanged:function(){return i.some((function(t){return t()}))}};return a}(),f=function(){var t={};function e(e){return t[e]||[]}var r={emit:function(t){return e(t).forEach((function(e){return e(t)})),r},off:function(n,i){return t[n]=e(n).filter((function(t){return t!==i})),r},on:function(n,i){return t[n]=e(n).concat([i]),r}};return r}(),d=f.on,p=f.off,h=w,m=!1,y=c.merge(A,E.globalOptions),_=c.merge(y),v=[],x=0;function b(e,r){if(!m){var u,d;if(u="container"in t&&t.container,d="slides"in t&&t.slides,o="root"in t?t.root:t,a=u||o.children[0],s=d||[].slice.call(a.children),y=c.merge(y,e),_=c.atMedia(y),n=q(o,a,s,_,f),x=n.axis.measureSize(o.getBoundingClientRect()),!_.active)return S();if(n.translate.to(n.location),v=r||v,i=l.init(v,C),_.loop){if(!n.slideLooper.canLoop())return S(),b({loop:!1},r);n.slideLooper.loop()}_.draggable&&a.offsetParent&&s.length&&n.dragHandler.addActivationEvents()}}function w(t,e){var r=O();S(),b(c.merge({startIndex:r},t),e),f.emit("reInit")}function S(){n.dragHandler.removeAllEvents(),n.animation.stop(),n.eventStore.removeAll(),n.translate.clear(),n.slideLooper.clear(),l.destroy()}function T(t){var e=n[t?"target":"location"].get(),r=_.loop?"removeOffset":"constrain";return n.slidesInView.check(n.limit[r](e))}function k(t,e,r){_.active&&!m&&(n.scrollBody.useBaseMass().useSpeed(e?100:_.speed),n.scrollTo.index(t,r||0))}function O(){return n.index.get()}var C={canScrollNext:function(){return n.index.clone().add(1).get()!==O()},canScrollPrev:function(){return n.index.clone().add(-1).get()!==O()},clickAllowed:function(){return n.dragHandler.clickAllowed()},containerNode:function(){return a},internalEngine:function(){return n},destroy:function(){m||(m=!0,u.removeAll(),S(),f.emit("destroy"))},off:p,on:d,plugins:function(){return i},previousScrollSnap:function(){return n.indexPrevious.get()},reInit:h,rootNode:function(){return o},scrollNext:function(t){k(n.index.clone().add(1).get(),!0===t,-1)},scrollPrev:function(t){k(n.index.clone().add(-1).get(),!0===t,1)},scrollProgress:function(){return n.scrollProgress.get(n.location.get())},scrollSnapList:function(){return n.scrollSnaps.map(n.scrollProgress.get)},scrollTo:k,selectedScrollSnap:O,slideNodes:function(){return s},slidesInView:T,slidesNotInView:function(t){var e=T(t);return n.slideIndexes.filter((function(t){return-1===e.indexOf(t)}))}};return b(e,r),u.add(window,"resize",(function(){var t=c.atMedia(y),e=!c.areEqual(t,_),r=n.axis.measureSize(o.getBoundingClientRect()),i=x!==r,a=l.haveChanged();(i||e||a)&&w(),f.emit("resize")})),setTimeout((function(){return f.emit("init")}),0),C}return E.globalOptions=void 0,E.optionsHandler=M,E}()}},e={};function r(n){var i=e[n];if(void 0!==i)return i.exports;var o=e[n]={exports:{}};return t[n].call(o.exports,o,o.exports,r),o.exports}r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,{a:e}),e},r.d=function(t,e){for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},function(){"use strict";var t=r(878),e=r.n(t);function n(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function i(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}var o,a,s,u,c,l,f,d,p,h,g,m,y,_,v,x={autoSleep:120,force3D:"auto",nullTargetWarn:1,units:{lineHeight:""}},b={duration:.5,overwrite:!1,delay:0},w=1e8,S=1e-8,T=2*Math.PI,k=T/4,q=0,A=Math.sqrt,M=Math.cos,E=Math.sin,O=function(t){return"string"==typeof t},C=function(t){return"function"==typeof t},P=function(t){return"number"==typeof t},z=function(t){return void 0===t},D=function(t){return"object"==typeof t},L=function(t){return!1!==t},R=function(){return"undefined"!=typeof window},I=function(t){return C(t)||O(t)},B="function"==typeof ArrayBuffer&&ArrayBuffer.isView||function(){},F=Array.isArray,Y=/(?:-?\.?\d|\.)+/gi,X=/[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g,N=/[-+=.]*\d+[.e-]*\d*[a-z%]*/g,V=/[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi,H=/[+-]=-?[.\d]+/,U=/[^,'"\[\]\s]+/gi,W=/^[+\-=e\s\d]*\d+[.\d]*([a-z]*|%)\s*$/i,j={},G={},$=function(t){return(G=St(t,j))&&wr},Q=function(t,e){return console.warn("Invalid property",t,"set to",e,"Missing plugin? gsap.registerPlugin()")},Z=function(t,e){return!e&&console.warn(t)},J=function(t,e){return t&&(j[t]=e)&&G&&(G[t]=e)||j},K=function(){return 0},tt={suppressEvents:!0,isStart:!0},et={suppressEvents:!0},rt={},nt=[],it={},ot={},at={},st=30,ut=[],ct="",lt=function(t){var e,r,n=t[0];if(D(n)||C(n)||(t=[t]),!(e=(n._gsap||{}).harness)){for(r=ut.length;r--&&!ut[r].targetTest(n););e=ut[r]}for(r=t.length;r--;)t[r]&&(t[r]._gsap||(t[r]._gsap=new Ie(t[r],e)))||t.splice(r,1);return t},ft=function(t){return t._gsap||lt(ee(t))[0]._gsap},dt=function(t,e,r){return(r=t[e])&&C(r)?t[e]():z(r)&&t.getAttribute&&t.getAttribute(e)||r},pt=function(t,e){return(t=t.split(",")).forEach(e)||t},ht=function(t){return Math.round(1e5*t)/1e5||0},gt=function(t){return Math.round(1e7*t)/1e7||0},mt=function(t,e){var r=e.charAt(0),n=parseFloat(e.substr(2));return t=parseFloat(t),"+"===r?t+n:"-"===r?t-n:"*"===r?t*n:t/n},yt=function(t,e){for(var r=e.length,n=0;t.indexOf(e[n])<0&&++n<r;);return n<r},_t=function(){var t,e,r=nt.length,n=nt.slice(0);for(it={},nt.length=0,t=0;t<r;t++)(e=n[t])&&e._lazy&&(e.render(e._lazy[0],e._lazy[1],!0)._lazy=0)},vt=function(t,e,r,n){nt.length&&_t(),t.render(e,r,n||a),nt.length&&_t()},xt=function(t){var e=parseFloat(t);return(e||0===e)&&(t+"").match(U).length<2?e:O(t)?t.trim():t},bt=function(t){return t},wt=function(t,e){for(var r in e)r in t||(t[r]=e[r]);return t},St=function(t,e){for(var r in e)t[r]=e[r];return t},Tt=function t(e,r){for(var n in r)"__proto__"!==n&&"constructor"!==n&&"prototype"!==n&&(e[n]=D(r[n])?t(e[n]||(e[n]={}),r[n]):r[n]);return e},kt=function(t,e){var r,n={};for(r in t)r in e||(n[r]=t[r]);return n},qt=function(t){var e,r=t.parent||u,n=t.keyframes?(e=F(t.keyframes),function(t,r){for(var n in r)n in t||"duration"===n&&e||"ease"===n||(t[n]=r[n])}):wt;if(L(t.inherit))for(;r;)n(t,r.vars.defaults),r=r.parent||r._dp;return t},At=function(t,e,r,n,i){void 0===r&&(r="_first"),void 0===n&&(n="_last");var o,a=t[n];if(i)for(o=e[i];a&&a[i]>o;)a=a._prev;return a?(e._next=a._next,a._next=e):(e._next=t[r],t[r]=e),e._next?e._next._prev=e:t[n]=e,e._prev=a,e.parent=e._dp=t,e},Mt=function(t,e,r,n){void 0===r&&(r="_first"),void 0===n&&(n="_last");var i=e._prev,o=e._next;i?i._next=o:t[r]===e&&(t[r]=o),o?o._prev=i:t[n]===e&&(t[n]=i),e._next=e._prev=e.parent=null},Et=function(t,e){t.parent&&(!e||t.parent.autoRemoveChildren)&&t.parent.remove(t),t._act=0},Ot=function(t,e){if(t&&(!e||e._end>t._dur||e._start<0))for(var r=t;r;)r._dirty=1,r=r.parent;return t},Ct=function(t){for(var e=t.parent;e&&e.parent;)e._dirty=1,e.totalDuration(),e=e.parent;return t},Pt=function(t,e,r,n){return t._startAt&&(a?t._startAt.revert(et):t.vars.immediateRender&&!t.vars.autoRevert||t._startAt.render(e,!0,n))},zt=function t(e){return!e||e._ts&&t(e.parent)},Dt=function(t){return t._repeat?Lt(t._tTime,t=t.duration()+t._rDelay)*t:0},Lt=function(t,e){var r=Math.floor(t/=e);return t&&r===t?r-1:r},Rt=function(t,e){return(t-e._start)*e._ts+(e._ts>=0?0:e._dirty?e.totalDuration():e._tDur)},It=function(t){return t._end=gt(t._start+(t._tDur/Math.abs(t._ts||t._rts||S)||0))},Bt=function(t,e){var r=t._dp;return r&&r.smoothChildTiming&&t._ts&&(t._start=gt(r._time-(t._ts>0?e/t._ts:((t._dirty?t.totalDuration():t._tDur)-e)/-t._ts)),It(t),r._dirty||Ot(r,t)),t},Ft=function(t,e){var r;if((e._time||e._initted&&!e._dur)&&(r=Rt(t.rawTime(),e),(!e._dur||Zt(0,e.totalDuration(),r)-e._tTime>S)&&e.render(r,!0)),Ot(t,e)._dp&&t._initted&&t._time>=t._dur&&t._ts){if(t._dur<t.duration())for(r=t;r._dp;)r.rawTime()>=0&&r.totalTime(r._tTime),r=r._dp;t._zTime=-1e-8}},Yt=function(t,e,r,n){return e.parent&&Et(e),e._start=gt((P(r)?r:r||t!==u?Gt(t,r,e):t._time)+e._delay),e._end=gt(e._start+(e.totalDuration()/Math.abs(e.timeScale())||0)),At(t,e,"_first","_last",t._sort?"_start":0),Ht(e)||(t._recent=e),n||Ft(t,e),t._ts<0&&Bt(t,t._tTime),t},Xt=function(t,e){return(j.ScrollTrigger||Q("scrollTrigger",e))&&j.ScrollTrigger.create(e,t)},Nt=function(t,e,r,n){return Ue(t,e),t._initted?!r&&t._pt&&(t._dur&&!1!==t.vars.lazy||!t._dur&&t.vars.lazy)&&p!==Te.frame?(nt.push(t),t._lazy=[e,n],1):void 0:1},Vt=function t(e){var r=e.parent;return r&&r._ts&&r._initted&&!r._lock&&(r.rawTime()<0||t(r))},Ht=function(t){var e=t.data;return"isFromStart"===e||"isStart"===e},Ut=function(t,e,r,n){var i=t._repeat,o=gt(e)||0,a=t._tTime/t._tDur;return a&&!n&&(t._time*=o/t._dur),t._dur=o,t._tDur=i?i<0?1e10:gt(o*(i+1)+t._rDelay*i):o,a>0&&!n?Bt(t,t._tTime=t._tDur*a):t.parent&&It(t),r||Ot(t.parent,t),t},Wt=function(t){return t instanceof Fe?Ot(t):Ut(t,t._dur)},jt={_start:0,endTime:K,totalDuration:K},Gt=function t(e,r,n){var i,o,a,s=e.labels,u=e._recent||jt,c=e.duration()>=w?u.endTime(!1):e._dur;return O(r)&&(isNaN(r)||r in s)?(o=r.charAt(0),a="%"===r.substr(-1),i=r.indexOf("="),"<"===o||">"===o?(i>=0&&(r=r.replace(/=/,"")),("<"===o?u._start:u.endTime(u._repeat>=0))+(parseFloat(r.substr(1))||0)*(a?(i<0?u:n).totalDuration()/100:1)):i<0?(r in s||(s[r]=c),s[r]):(o=parseFloat(r.charAt(i-1)+r.substr(i+1)),a&&n&&(o=o/100*(F(n)?n[0]:n).totalDuration()),i>1?t(e,r.substr(0,i-1),n)+o:c+o)):null==r?c:+r},$t=function(t,e,r){var n,i,o=P(e[1]),a=(o?2:1)+(t<2?0:1),s=e[a];if(o&&(s.duration=e[1]),s.parent=r,t){for(n=s,i=r;i&&!("immediateRender"in n);)n=i.vars.defaults||{},i=L(i.vars.inherit)&&i.parent;s.immediateRender=L(n.immediateRender),t<2?s.runBackwards=1:s.startAt=e[a-1]}return new Qe(e[0],s,e[a+1])},Qt=function(t,e){return t||0===t?e(t):e},Zt=function(t,e,r){return r<t?t:r>e?e:r},Jt=function(t,e){return O(t)&&(e=W.exec(t))?e[1]:""},Kt=[].slice,te=function(t,e){return t&&D(t)&&"length"in t&&(!e&&!t.length||t.length-1 in t&&D(t[0]))&&!t.nodeType&&t!==c},ee=function(t,e,r){return s&&!e&&s.selector?s.selector(t):!O(t)||r||!l&&ke()?F(t)?function(t,e,r){return void 0===r&&(r=[]),t.forEach((function(t){var n;return O(t)&&!e||te(t,1)?(n=r).push.apply(n,ee(t)):r.push(t)}))||r}(t,r):te(t)?Kt.call(t,0):t?[t]:[]:Kt.call((e||f).querySelectorAll(t),0)},re=function(t){return t=ee(t)[0]||Z("Invalid scope")||{},function(e){var r=t.current||t.nativeElement||t;return ee(e,r.querySelectorAll?r:r===t?Z("Invalid scope")||f.createElement("div"):t)}},ne=function(t){return t.sort((function(){return.5-Math.random()}))},ie=function(t){if(C(t))return t;var e=D(t)?t:{each:t},r=Pe(e.ease),n=e.from||0,i=parseFloat(e.base)||0,o={},a=n>0&&n<1,s=isNaN(n)||a,u=e.axis,c=n,l=n;return O(n)?c=l={center:.5,edges:.5,end:1}[n]||0:!a&&s&&(c=n[0],l=n[1]),function(t,a,f){var d,p,h,g,m,y,_,v,x,b=(f||e).length,S=o[b];if(!S){if(!(x="auto"===e.grid?0:(e.grid||[1,w])[1])){for(_=-w;_<(_=f[x++].getBoundingClientRect().left)&&x<b;);x--}for(S=o[b]=[],d=s?Math.min(x,b)*c-.5:n%x,p=x===w?0:s?b*l/x-.5:n/x|0,_=0,v=w,y=0;y<b;y++)h=y%x-d,g=p-(y/x|0),S[y]=m=u?Math.abs("y"===u?g:h):A(h*h+g*g),m>_&&(_=m),m<v&&(v=m);"random"===n&&ne(S),S.max=_-v,S.min=v,S.v=b=(parseFloat(e.amount)||parseFloat(e.each)*(x>b?b-1:u?"y"===u?b/x:x:Math.max(x,b/x))||0)*("edges"===n?-1:1),S.b=b<0?i-b:i,S.u=Jt(e.amount||e.each)||0,r=r&&b<0?Oe(r):r}return b=(S[t]-S.min)/S.max||0,gt(S.b+(r?r(b):b)*S.v)+S.u}},oe=function(t){var e=Math.pow(10,((t+"").split(".")[1]||"").length);return function(r){var n=gt(Math.round(parseFloat(r)/t)*t*e);return(n-n%1)/e+(P(r)?0:Jt(r))}},ae=function(t,e){var r,n,i=F(t);return!i&&D(t)&&(r=i=t.radius||w,t.values?(t=ee(t.values),(n=!P(t[0]))&&(r*=r)):t=oe(t.increment)),Qt(e,i?C(t)?function(e){return n=t(e),Math.abs(n-e)<=r?n:e}:function(e){for(var i,o,a=parseFloat(n?e.x:e),s=parseFloat(n?e.y:0),u=w,c=0,l=t.length;l--;)(i=n?(i=t[l].x-a)*i+(o=t[l].y-s)*o:Math.abs(t[l]-a))<u&&(u=i,c=l);return c=!r||u<=r?t[c]:e,n||c===e||P(e)?c:c+Jt(e)}:oe(t))},se=function(t,e,r,n){return Qt(F(t)?!e:!0===r?!!(r=0):!n,(function(){return F(t)?t[~~(Math.random()*t.length)]:(r=r||1e-5)&&(n=r<1?Math.pow(10,(r+"").length-2):1)&&Math.floor(Math.round((t-r/2+Math.random()*(e-t+.99*r))/r)*r*n)/n}))},ue=function(t,e,r){return Qt(r,(function(r){return t[~~e(r)]}))},ce=function(t){for(var e,r,n,i,o=0,a="";~(e=t.indexOf("random(",o));)n=t.indexOf(")",e),i="["===t.charAt(e+7),r=t.substr(e+7,n-e-7).match(i?U:Y),a+=t.substr(o,e-o)+se(i?r:+r[0],i?0:+r[1],+r[2]||1e-5),o=n+1;return a+t.substr(o,t.length-o)},le=function(t,e,r,n,i){var o=e-t,a=n-r;return Qt(i,(function(e){return r+((e-t)/o*a||0)}))},fe=function(t,e,r){var n,i,o,a=t.labels,s=w;for(n in a)(i=a[n]-e)<0==!!r&&i&&s>(i=Math.abs(i))&&(o=n,s=i);return o},de=function(t,e,r){var n,i,o,a=t.vars,u=a[e],c=s,l=t._ctx;if(u)return n=a[e+"Params"],i=a.callbackScope||t,r&&nt.length&&_t(),l&&(s=l),o=n?u.apply(i,n):u.call(i),s=c,o},pe=function(t){return Et(t),t.scrollTrigger&&t.scrollTrigger.kill(!1),t.progress()<1&&de(t,"onInterrupt"),t},he=function(t){var e=(t=!t.name&&t.default||t).name,r=C(t),n=e&&!r&&t.init?function(){this._props=[]}:t,i={init:K,render:or,add:Ve,kill:sr,modifier:ar,rawVars:0},o={targetTest:0,get:0,getSetter:er,aliases:{},register:0};if(ke(),t!==n){if(ot[e])return;wt(n,wt(kt(t,i),o)),St(n.prototype,St(i,kt(t,o))),ot[n.prop=e]=n,t.targetTest&&(ut.push(n),rt[e]=1),e=("css"===e?"CSS":e.charAt(0).toUpperCase()+e.substr(1))+"Plugin"}J(e,n),t.register&&t.register(wr,n,lr)},ge=255,me={aqua:[0,ge,ge],lime:[0,ge,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,ge],navy:[0,0,128],white:[ge,ge,ge],olive:[128,128,0],yellow:[ge,ge,0],orange:[ge,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[ge,0,0],pink:[ge,192,203],cyan:[0,ge,ge],transparent:[ge,ge,ge,0]},ye=function(t,e,r){return(6*(t+=t<0?1:t>1?-1:0)<1?e+(r-e)*t*6:t<.5?r:3*t<2?e+(r-e)*(2/3-t)*6:e)*ge+.5|0},_e=function(t,e,r){var n,i,o,a,s,u,c,l,f,d,p=t?P(t)?[t>>16,t>>8&ge,t&ge]:0:me.black;if(!p){if(","===t.substr(-1)&&(t=t.substr(0,t.length-1)),me[t])p=me[t];else if("#"===t.charAt(0)){if(t.length<6&&(n=t.charAt(1),i=t.charAt(2),o=t.charAt(3),t="#"+n+n+i+i+o+o+(5===t.length?t.charAt(4)+t.charAt(4):"")),9===t.length)return[(p=parseInt(t.substr(1,6),16))>>16,p>>8&ge,p&ge,parseInt(t.substr(7),16)/255];p=[(t=parseInt(t.substr(1),16))>>16,t>>8&ge,t&ge]}else if("hsl"===t.substr(0,3))if(p=d=t.match(Y),e){if(~t.indexOf("="))return p=t.match(X),r&&p.length<4&&(p[3]=1),p}else a=+p[0]%360/360,s=+p[1]/100,n=2*(u=+p[2]/100)-(i=u<=.5?u*(s+1):u+s-u*s),p.length>3&&(p[3]*=1),p[0]=ye(a+1/3,n,i),p[1]=ye(a,n,i),p[2]=ye(a-1/3,n,i);else p=t.match(Y)||me.transparent;p=p.map(Number)}return e&&!d&&(n=p[0]/ge,i=p[1]/ge,o=p[2]/ge,u=((c=Math.max(n,i,o))+(l=Math.min(n,i,o)))/2,c===l?a=s=0:(f=c-l,s=u>.5?f/(2-c-l):f/(c+l),a=c===n?(i-o)/f+(i<o?6:0):c===i?(o-n)/f+2:(n-i)/f+4,a*=60),p[0]=~~(a+.5),p[1]=~~(100*s+.5),p[2]=~~(100*u+.5)),r&&p.length<4&&(p[3]=1),p},ve=function(t){var e=[],r=[],n=-1;return t.split(be).forEach((function(t){var i=t.match(N)||[];e.push.apply(e,i),r.push(n+=i.length+1)})),e.c=r,e},xe=function(t,e,r){var n,i,o,a,s="",u=(t+s).match(be),c=e?"hsla(":"rgba(",l=0;if(!u)return t;if(u=u.map((function(t){return(t=_e(t,e,1))&&c+(e?t[0]+","+t[1]+"%,"+t[2]+"%,"+t[3]:t.join(","))+")"})),r&&(o=ve(t),(n=r.c).join(s)!==o.c.join(s)))for(a=(i=t.replace(be,"1").split(N)).length-1;l<a;l++)s+=i[l]+(~n.indexOf(l)?u.shift()||c+"0,0,0,0)":(o.length?o:u.length?u:r).shift());if(!i)for(a=(i=t.split(be)).length-1;l<a;l++)s+=i[l]+u[l];return s+i[a]},be=function(){var t,e="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b";for(t in me)e+="|"+t+"\\b";return new RegExp(e+")","gi")}(),we=/hsl[a]?\(/,Se=function(t){var e,r=t.join(" ");if(be.lastIndex=0,be.test(r))return e=we.test(r),t[1]=xe(t[1],e),t[0]=xe(t[0],e,ve(t[1])),!0},Te=function(){var t,e,r,n,i,o,a=Date.now,s=500,u=33,p=a(),h=p,m=1e3/240,y=m,_=[],v=function r(c){var l,f,d,g,v=a()-h,x=!0===c;if(v>s&&(p+=v-u),((l=(d=(h+=v)-p)-y)>0||x)&&(g=++n.frame,i=d-1e3*n.time,n.time=d/=1e3,y+=l+(l>=m?4:m-l),f=1),x||(t=e(r)),f)for(o=0;o<_.length;o++)_[o](d,i,g,c)};return n={time:0,frame:0,tick:function(){v(!0)},deltaRatio:function(t){return i/(1e3/(t||60))},wake:function(){d&&(!l&&R()&&(c=l=window,f=c.document||{},j.gsap=wr,(c.gsapVersions||(c.gsapVersions=[])).push(wr.version),$(G||c.GreenSockGlobals||!c.gsap&&c||{}),r=c.requestAnimationFrame),t&&n.sleep(),e=r||function(t){return setTimeout(t,y-1e3*n.time+1|0)},g=1,v(2))},sleep:function(){(r?c.cancelAnimationFrame:clearTimeout)(t),g=0,e=K},lagSmoothing:function(t,e){s=t||1e8,u=Math.min(e,s,0)},fps:function(t){m=1e3/(t||240),y=1e3*n.time+m},add:function(t,e,r){var i=e?function(e,r,o,a){t(e,r,o,a),n.remove(i)}:t;return n.remove(t),_[r?"unshift":"push"](i),ke(),i},remove:function(t,e){~(e=_.indexOf(t))&&_.splice(e,1)&&o>=e&&o--},_listeners:_}}(),ke=function(){return!g&&Te.wake()},qe={},Ae=/^[\d.\-M][\d.\-,\s]/,Me=/["']/g,Ee=function(t){for(var e,r,n,i={},o=t.substr(1,t.length-3).split(":"),a=o[0],s=1,u=o.length;s<u;s++)r=o[s],e=s!==u-1?r.lastIndexOf(","):r.length,n=r.substr(0,e),i[a]=isNaN(n)?n.replace(Me,"").trim():+n,a=r.substr(e+1).trim();return i},Oe=function(t){return function(e){return 1-t(1-e)}},Ce=function t(e,r){for(var n,i=e._first;i;)i instanceof Fe?t(i,r):!i.vars.yoyoEase||i._yoyo&&i._repeat||i._yoyo===r||(i.timeline?t(i.timeline,r):(n=i._ease,i._ease=i._yEase,i._yEase=n,i._yoyo=r)),i=i._next},Pe=function(t,e){return t&&(C(t)?t:qe[t]||function(t){var e,r,n,i,o=(t+"").split("("),a=qe[o[0]];return a&&o.length>1&&a.config?a.config.apply(null,~t.indexOf("{")?[Ee(o[1])]:(e=t,r=e.indexOf("(")+1,n=e.indexOf(")"),i=e.indexOf("(",r),e.substring(r,~i&&i<n?e.indexOf(")",n+1):n)).split(",").map(xt)):qe._CE&&Ae.test(t)?qe._CE("",t):a}(t))||e},ze=function(t,e,r,n){void 0===r&&(r=function(t){return 1-e(1-t)}),void 0===n&&(n=function(t){return t<.5?e(2*t)/2:1-e(2*(1-t))/2});var i,o={easeIn:e,easeOut:r,easeInOut:n};return pt(t,(function(t){for(var e in qe[t]=j[t]=o,qe[i=t.toLowerCase()]=r,o)qe[i+("easeIn"===e?".in":"easeOut"===e?".out":".inOut")]=qe[t+"."+e]=o[e]})),o},De=function(t){return function(e){return e<.5?(1-t(1-2*e))/2:.5+t(2*(e-.5))/2}},Le=function t(e,r,n){var i=r>=1?r:1,o=(n||(e?.3:.45))/(r<1?r:1),a=o/T*(Math.asin(1/i)||0),s=function(t){return 1===t?1:i*Math.pow(2,-10*t)*E((t-a)*o)+1},u="out"===e?s:"in"===e?function(t){return 1-s(1-t)}:De(s);return o=T/o,u.config=function(r,n){return t(e,r,n)},u},Re=function t(e,r){void 0===r&&(r=1.70158);var n=function(t){return t?--t*t*((r+1)*t+r)+1:0},i="out"===e?n:"in"===e?function(t){return 1-n(1-t)}:De(n);return i.config=function(r){return t(e,r)},i};pt("Linear,Quad,Cubic,Quart,Quint,Strong",(function(t,e){var r=e<5?e+1:e;ze(t+",Power"+(r-1),e?function(t){return Math.pow(t,r)}:function(t){return t},(function(t){return 1-Math.pow(1-t,r)}),(function(t){return t<.5?Math.pow(2*t,r)/2:1-Math.pow(2*(1-t),r)/2}))})),qe.Linear.easeNone=qe.none=qe.Linear.easeIn,ze("Elastic",Le("in"),Le("out"),Le()),m=7.5625,_=1/(y=2.75),ze("Bounce",(function(t){return 1-v(1-t)}),v=function(t){return t<_?m*t*t:t<.7272727272727273?m*Math.pow(t-1.5/y,2)+.75:t<.9090909090909092?m*(t-=2.25/y)*t+.9375:m*Math.pow(t-2.625/y,2)+.984375}),ze("Expo",(function(t){return t?Math.pow(2,10*(t-1)):0})),ze("Circ",(function(t){return-(A(1-t*t)-1)})),ze("Sine",(function(t){return 1===t?1:1-M(t*k)})),ze("Back",Re("in"),Re("out"),Re()),qe.SteppedEase=qe.steps=j.SteppedEase={config:function(t,e){void 0===t&&(t=1);var r=1/t,n=t+(e?0:1),i=e?1:0;return function(t){return((n*Zt(0,.99999999,t)|0)+i)*r}}},b.ease=qe["quad.out"],pt("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt",(function(t){return ct+=t+","+t+"Params,"}));var Ie=function(t,e){this.id=q++,t._gsap=this,this.target=t,this.harness=e,this.get=e?e.get:dt,this.set=e?e.getSetter:er},Be=function(){function t(t){this.vars=t,this._delay=+t.delay||0,(this._repeat=t.repeat===1/0?-2:t.repeat||0)&&(this._rDelay=t.repeatDelay||0,this._yoyo=!!t.yoyo||!!t.yoyoEase),this._ts=1,Ut(this,+t.duration,1,1),this.data=t.data,s&&(this._ctx=s,s.data.push(this)),g||Te.wake()}var e=t.prototype;return e.delay=function(t){return t||0===t?(this.parent&&this.parent.smoothChildTiming&&this.startTime(this._start+t-this._delay),this._delay=t,this):this._delay},e.duration=function(t){return arguments.length?this.totalDuration(this._repeat>0?t+(t+this._rDelay)*this._repeat:t):this.totalDuration()&&this._dur},e.totalDuration=function(t){return arguments.length?(this._dirty=0,Ut(this,this._repeat<0?t:(t-this._repeat*this._rDelay)/(this._repeat+1))):this._tDur},e.totalTime=function(t,e){if(ke(),!arguments.length)return this._tTime;var r=this._dp;if(r&&r.smoothChildTiming&&this._ts){for(Bt(this,t),!r._dp||r.parent||Ft(r,this);r&&r.parent;)r.parent._time!==r._start+(r._ts>=0?r._tTime/r._ts:(r.totalDuration()-r._tTime)/-r._ts)&&r.totalTime(r._tTime,!0),r=r.parent;!this.parent&&this._dp.autoRemoveChildren&&(this._ts>0&&t<this._tDur||this._ts<0&&t>0||!this._tDur&&!t)&&Yt(this._dp,this,this._start-this._delay)}return(this._tTime!==t||!this._dur&&!e||this._initted&&Math.abs(this._zTime)===S||!t&&!this._initted&&(this.add||this._ptLookup))&&(this._ts||(this._pTime=t),vt(this,t,e)),this},e.time=function(t,e){return arguments.length?this.totalTime(Math.min(this.totalDuration(),t+Dt(this))%(this._dur+this._rDelay)||(t?this._dur:0),e):this._time},e.totalProgress=function(t,e){return arguments.length?this.totalTime(this.totalDuration()*t,e):this.totalDuration()?Math.min(1,this._tTime/this._tDur):this.ratio},e.progress=function(t,e){return arguments.length?this.totalTime(this.duration()*(!this._yoyo||1&this.iteration()?t:1-t)+Dt(this),e):this.duration()?Math.min(1,this._time/this._dur):this.ratio},e.iteration=function(t,e){var r=this.duration()+this._rDelay;return arguments.length?this.totalTime(this._time+(t-1)*r,e):this._repeat?Lt(this._tTime,r)+1:1},e.timeScale=function(t){if(!arguments.length)return-1e-8===this._rts?0:this._rts;if(this._rts===t)return this;var e=this.parent&&this._ts?Rt(this.parent._time,this):this._tTime;return this._rts=+t||0,this._ts=this._ps||-1e-8===t?0:this._rts,this.totalTime(Zt(-this._delay,this._tDur,e),!0),It(this),Ct(this)},e.paused=function(t){return arguments.length?(this._ps!==t&&(this._ps=t,t?(this._pTime=this._tTime||Math.max(-this._delay,this.rawTime()),this._ts=this._act=0):(ke(),this._ts=this._rts,this.totalTime(this.parent&&!this.parent.smoothChildTiming?this.rawTime():this._tTime||this._pTime,1===this.progress()&&Math.abs(this._zTime)!==S&&(this._tTime-=S)))),this):this._ps},e.startTime=function(t){if(arguments.length){this._start=t;var e=this.parent||this._dp;return e&&(e._sort||!this.parent)&&Yt(e,this,t-this._delay),this}return this._start},e.endTime=function(t){return this._start+(L(t)?this.totalDuration():this.duration())/Math.abs(this._ts||1)},e.rawTime=function(t){var e=this.parent||this._dp;return e?t&&(!this._ts||this._repeat&&this._time&&this.totalProgress()<1)?this._tTime%(this._dur+this._rDelay):this._ts?Rt(e.rawTime(t),this):this._tTime:this._tTime},e.revert=function(t){void 0===t&&(t=et);var e=a;return a=t,this.timeline&&this.timeline.revert(t),this.totalTime(-.01,t.suppressEvents),"nested"!==this.data&&Et(this),a=e,this},e.globalTime=function(t){for(var e=this,r=arguments.length?t:e.rawTime();e;)r=e._start+r/(e._ts||1),e=e._dp;return!this.parent&&this.vars.immediateRender?-1:r},e.repeat=function(t){return arguments.length?(this._repeat=t===1/0?-2:t,Wt(this)):-2===this._repeat?1/0:this._repeat},e.repeatDelay=function(t){if(arguments.length){var e=this._time;return this._rDelay=t,Wt(this),e?this.time(e):this}return this._rDelay},e.yoyo=function(t){return arguments.length?(this._yoyo=t,this):this._yoyo},e.seek=function(t,e){return this.totalTime(Gt(this,t),L(e))},e.restart=function(t,e){return this.play().totalTime(t?-this._delay:0,L(e))},e.play=function(t,e){return null!=t&&this.seek(t,e),this.reversed(!1).paused(!1)},e.reverse=function(t,e){return null!=t&&this.seek(t||this.totalDuration(),e),this.reversed(!0).paused(!1)},e.pause=function(t,e){return null!=t&&this.seek(t,e),this.paused(!0)},e.resume=function(){return this.paused(!1)},e.reversed=function(t){return arguments.length?(!!t!==this.reversed()&&this.timeScale(-this._rts||(t?-1e-8:0)),this):this._rts<0},e.invalidate=function(){return this._initted=this._act=0,this._zTime=-1e-8,this},e.isActive=function(){var t,e=this.parent||this._dp,r=this._start;return!(e&&!(this._ts&&this._initted&&e.isActive()&&(t=e.rawTime(!0))>=r&&t<this.endTime(!0)-S))},e.eventCallback=function(t,e,r){var n=this.vars;return arguments.length>1?(e?(n[t]=e,r&&(n[t+"Params"]=r),"onUpdate"===t&&(this._onUpdate=e)):delete n[t],this):n[t]},e.then=function(t){var e=this;return new Promise((function(r){var n=C(t)?t:bt,i=function(){var t=e.then;e.then=null,C(n)&&(n=n(e))&&(n.then||n===e)&&(e.then=t),r(n),e.then=t};e._initted&&1===e.totalProgress()&&e._ts>=0||!e._tTime&&e._ts<0?i():e._prom=i}))},e.kill=function(){pe(this)},t}();wt(Be.prototype,{_time:0,_start:0,_end:0,_tTime:0,_tDur:0,_dirty:0,_repeat:0,_yoyo:!1,parent:null,_initted:!1,_rDelay:0,_ts:1,_dp:0,ratio:0,_zTime:-1e-8,_prom:0,_ps:!1,_rts:1});var Fe=function(t){function e(e,r){var i;return void 0===e&&(e={}),(i=t.call(this,e)||this).labels={},i.smoothChildTiming=!!e.smoothChildTiming,i.autoRemoveChildren=!!e.autoRemoveChildren,i._sort=L(e.sortChildren),u&&Yt(e.parent||u,n(i),r),e.reversed&&i.reverse(),e.paused&&i.paused(!0),e.scrollTrigger&&Xt(n(i),e.scrollTrigger),i}i(e,t);var r=e.prototype;return r.to=function(t,e,r){return $t(0,arguments,this),this},r.from=function(t,e,r){return $t(1,arguments,this),this},r.fromTo=function(t,e,r,n){return $t(2,arguments,this),this},r.set=function(t,e,r){return e.duration=0,e.parent=this,qt(e).repeatDelay||(e.repeat=0),e.immediateRender=!!e.immediateRender,new Qe(t,e,Gt(this,r),1),this},r.call=function(t,e,r){return Yt(this,Qe.delayedCall(0,t,e),r)},r.staggerTo=function(t,e,r,n,i,o,a){return r.duration=e,r.stagger=r.stagger||n,r.onComplete=o,r.onCompleteParams=a,r.parent=this,new Qe(t,r,Gt(this,i)),this},r.staggerFrom=function(t,e,r,n,i,o,a){return r.runBackwards=1,qt(r).immediateRender=L(r.immediateRender),this.staggerTo(t,e,r,n,i,o,a)},r.staggerFromTo=function(t,e,r,n,i,o,a,s){return n.startAt=r,qt(n).immediateRender=L(n.immediateRender),this.staggerTo(t,e,n,i,o,a,s)},r.render=function(t,e,r){var n,i,o,s,c,l,f,d,p,h,g,m,y=this._time,_=this._dirty?this.totalDuration():this._tDur,v=this._dur,x=t<=0?0:gt(t),b=this._zTime<0!=t<0&&(this._initted||!v);if(this!==u&&x>_&&t>=0&&(x=_),x!==this._tTime||r||b){if(y!==this._time&&v&&(x+=this._time-y,t+=this._time-y),n=x,p=this._start,l=!(d=this._ts),b&&(v||(y=this._zTime),(t||!e)&&(this._zTime=t)),this._repeat){if(g=this._yoyo,c=v+this._rDelay,this._repeat<-1&&t<0)return this.totalTime(100*c+t,e,r);if(n=gt(x%c),x===_?(s=this._repeat,n=v):((s=~~(x/c))&&s===x/c&&(n=v,s--),n>v&&(n=v)),h=Lt(this._tTime,c),!y&&this._tTime&&h!==s&&(h=s),g&&1&s&&(n=v-n,m=1),s!==h&&!this._lock){var w=g&&1&h,T=w===(g&&1&s);if(s<h&&(w=!w),y=w?0:v,this._lock=1,this.render(y||(m?0:gt(s*c)),e,!v)._lock=0,this._tTime=x,!e&&this.parent&&de(this,"onRepeat"),this.vars.repeatRefresh&&!m&&(this.invalidate()._lock=1),y&&y!==this._time||l!==!this._ts||this.vars.onRepeat&&!this.parent&&!this._act)return this;if(v=this._dur,_=this._tDur,T&&(this._lock=2,y=w?v:-1e-4,this.render(y,!0),this.vars.repeatRefresh&&!m&&this.invalidate()),this._lock=0,!this._ts&&!l)return this;Ce(this,m)}}if(this._hasPause&&!this._forcing&&this._lock<2&&(f=function(t,e,r){var n;if(r>e)for(n=t._first;n&&n._start<=r;){if("isPause"===n.data&&n._start>e)return n;n=n._next}else for(n=t._last;n&&n._start>=r;){if("isPause"===n.data&&n._start<e)return n;n=n._prev}}(this,gt(y),gt(n)),f&&(x-=n-(n=f._start))),this._tTime=x,this._time=n,this._act=!d,this._initted||(this._onUpdate=this.vars.onUpdate,this._initted=1,this._zTime=t,y=0),!y&&n&&!e&&(de(this,"onStart"),this._tTime!==x))return this;if(n>=y&&t>=0)for(i=this._first;i;){if(o=i._next,(i._act||n>=i._start)&&i._ts&&f!==i){if(i.parent!==this)return this.render(t,e,r);if(i.render(i._ts>0?(n-i._start)*i._ts:(i._dirty?i.totalDuration():i._tDur)+(n-i._start)*i._ts,e,r),n!==this._time||!this._ts&&!l){f=0,o&&(x+=this._zTime=-1e-8);break}}i=o}else{r=r||a,i=this._last;for(var k=t<0?t:n;i;){if(o=i._prev,(i._act||k<=i._end)&&i._ts&&f!==i){if(i.parent!==this)return this.render(t,e,r);if(i.render(i._ts>0?(k-i._start)*i._ts:(i._dirty?i.totalDuration():i._tDur)+(k-i._start)*i._ts,e,r),n!==this._time||!this._ts&&!l){f=0,o&&(x+=this._zTime=k?-1e-8:S);break}}i=o}}if(f&&!e&&(this.pause(),f.render(n>=y?0:-1e-8)._zTime=n>=y?1:-1,this._ts))return this._start=p,It(this),this.render(t,e,r);this._onUpdate&&!e&&de(this,"onUpdate",!0),(x===_&&this._tTime>=this.totalDuration()||!x&&y)&&(p!==this._start&&Math.abs(d)===Math.abs(this._ts)||this._lock||((t||!v)&&(x===_&&this._ts>0||!x&&this._ts<0)&&Et(this,1),e||t<0&&!y||!x&&!y&&_||(de(this,x===_&&t>=0?"onComplete":"onReverseComplete",!0),this._prom&&!(x<_&&this.timeScale()>0)&&this._prom())))}return this},r.add=function(t,e){var r=this;if(P(e)||(e=Gt(this,e,t)),!(t instanceof Be)){if(F(t))return t.forEach((function(t){return r.add(t,e)})),this;if(O(t))return this.addLabel(t,e);if(!C(t))return this;t=Qe.delayedCall(0,t)}return this!==t?Yt(this,t,e):this},r.getChildren=function(t,e,r,n){void 0===t&&(t=!0),void 0===e&&(e=!0),void 0===r&&(r=!0),void 0===n&&(n=-w);for(var i=[],o=this._first;o;)o._start>=n&&(o instanceof Qe?e&&i.push(o):(r&&i.push(o),t&&i.push.apply(i,o.getChildren(!0,e,r)))),o=o._next;return i},r.getById=function(t){for(var e=this.getChildren(1,1,1),r=e.length;r--;)if(e[r].vars.id===t)return e[r]},r.remove=function(t){return O(t)?this.removeLabel(t):C(t)?this.killTweensOf(t):(Mt(this,t),t===this._recent&&(this._recent=this._last),Ot(this))},r.totalTime=function(e,r){return arguments.length?(this._forcing=1,!this._dp&&this._ts&&(this._start=gt(Te.time-(this._ts>0?e/this._ts:(this.totalDuration()-e)/-this._ts))),t.prototype.totalTime.call(this,e,r),this._forcing=0,this):this._tTime},r.addLabel=function(t,e){return this.labels[t]=Gt(this,e),this},r.removeLabel=function(t){return delete this.labels[t],this},r.addPause=function(t,e,r){var n=Qe.delayedCall(0,e||K,r);return n.data="isPause",this._hasPause=1,Yt(this,n,Gt(this,t))},r.removePause=function(t){var e=this._first;for(t=Gt(this,t);e;)e._start===t&&"isPause"===e.data&&Et(e),e=e._next},r.killTweensOf=function(t,e,r){for(var n=this.getTweensOf(t,r),i=n.length;i--;)Ye!==n[i]&&n[i].kill(t,e);return this},r.getTweensOf=function(t,e){for(var r,n=[],i=ee(t),o=this._first,a=P(e);o;)o instanceof Qe?yt(o._targets,i)&&(a?(!Ye||o._initted&&o._ts)&&o.globalTime(0)<=e&&o.globalTime(o.totalDuration())>e:!e||o.isActive())&&n.push(o):(r=o.getTweensOf(i,e)).length&&n.push.apply(n,r),o=o._next;return n},r.tweenTo=function(t,e){e=e||{};var r,n=this,i=Gt(n,t),o=e,a=o.startAt,s=o.onStart,u=o.onStartParams,c=o.immediateRender,l=Qe.to(n,wt({ease:e.ease||"none",lazy:!1,immediateRender:!1,time:i,overwrite:"auto",duration:e.duration||Math.abs((i-(a&&"time"in a?a.time:n._time))/n.timeScale())||S,onStart:function(){if(n.pause(),!r){var t=e.duration||Math.abs((i-(a&&"time"in a?a.time:n._time))/n.timeScale());l._dur!==t&&Ut(l,t,0,1).render(l._time,!0,!0),r=1}s&&s.apply(l,u||[])}},e));return c?l.render(0):l},r.tweenFromTo=function(t,e,r){return this.tweenTo(e,wt({startAt:{time:Gt(this,t)}},r))},r.recent=function(){return this._recent},r.nextLabel=function(t){return void 0===t&&(t=this._time),fe(this,Gt(this,t))},r.previousLabel=function(t){return void 0===t&&(t=this._time),fe(this,Gt(this,t),1)},r.currentLabel=function(t){return arguments.length?this.seek(t,!0):this.previousLabel(this._time+S)},r.shiftChildren=function(t,e,r){void 0===r&&(r=0);for(var n,i=this._first,o=this.labels;i;)i._start>=r&&(i._start+=t,i._end+=t),i=i._next;if(e)for(n in o)o[n]>=r&&(o[n]+=t);return Ot(this)},r.invalidate=function(){var e=this._first;for(this._lock=0;e;)e.invalidate(),e=e._next;return t.prototype.invalidate.call(this)},r.clear=function(t){void 0===t&&(t=!0);for(var e,r=this._first;r;)e=r._next,this.remove(r),r=e;return this._dp&&(this._time=this._tTime=this._pTime=0),t&&(this.labels={}),Ot(this)},r.totalDuration=function(t){var e,r,n,i=0,o=this,a=o._last,s=w;if(arguments.length)return o.timeScale((o._repeat<0?o.duration():o.totalDuration())/(o.reversed()?-t:t));if(o._dirty){for(n=o.parent;a;)e=a._prev,a._dirty&&a.totalDuration(),(r=a._start)>s&&o._sort&&a._ts&&!o._lock?(o._lock=1,Yt(o,a,r-a._delay,1)._lock=0):s=r,r<0&&a._ts&&(i-=r,(!n&&!o._dp||n&&n.smoothChildTiming)&&(o._start+=r/o._ts,o._time-=r,o._tTime-=r),o.shiftChildren(-r,!1,-Infinity),s=0),a._end>i&&a._ts&&(i=a._end),a=e;Ut(o,o===u&&o._time>i?o._time:i,1,1),o._dirty=0}return o._tDur},e.updateRoot=function(t){if(u._ts&&(vt(u,Rt(t,u)),p=Te.frame),Te.frame>=st){st+=x.autoSleep||120;var e=u._first;if((!e||!e._ts)&&x.autoSleep&&Te._listeners.length<2){for(;e&&!e._ts;)e=e._next;e||Te.sleep()}}},e}(Be);wt(Fe.prototype,{_lock:0,_hasPause:0,_forcing:0});var Ye,Xe,Ne=function(t,e,r,n,i,o,a){var s,u,c,l,f,d,p,h,g=new lr(this._pt,t,e,0,1,ir,null,i),m=0,y=0;for(g.b=r,g.e=n,r+="",(p=~(n+="").indexOf("random("))&&(n=ce(n)),o&&(o(h=[r,n],t,e),r=h[0],n=h[1]),u=r.match(V)||[];s=V.exec(n);)l=s[0],f=n.substring(m,s.index),c?c=(c+1)%5:"rgba("===f.substr(-5)&&(c=1),l!==u[y++]&&(d=parseFloat(u[y-1])||0,g._pt={_next:g._pt,p:f||1===y?f:",",s:d,c:"="===l.charAt(1)?mt(d,l)-d:parseFloat(l)-d,m:c&&c<4?Math.round:0},m=V.lastIndex);return g.c=m<n.length?n.substring(m,n.length):"",g.fp=a,(H.test(n)||p)&&(g.e=0),this._pt=g,g},Ve=function(t,e,r,n,i,o,a,s,u,c){C(n)&&(n=n(i||0,t,o));var l,f=t[e],d="get"!==r?r:C(f)?u?t[e.indexOf("set")||!C(t["get"+e.substr(3)])?e:"get"+e.substr(3)](u):t[e]():f,p=C(f)?u?Ke:Je:Ze;if(O(n)&&(~n.indexOf("random(")&&(n=ce(n)),"="===n.charAt(1)&&((l=mt(d,n)+(Jt(d)||0))||0===l)&&(n=l)),!c||d!==n||Xe)return isNaN(d*n)||""===n?(!f&&!(e in t)&&Q(e,n),Ne.call(this,t,e,d,n,p,s||x.stringFilter,u)):(l=new lr(this._pt,t,e,+d||0,n-(d||0),"boolean"==typeof f?nr:rr,0,p),u&&(l.fp=u),a&&l.modifier(a,this,t),this._pt=l)},He=function(t,e,r,n,i,o){var a,s,u,c;if(ot[t]&&!1!==(a=new ot[t]).init(i,a.rawVars?e[t]:function(t,e,r,n,i){if(C(t)&&(t=je(t,i,e,r,n)),!D(t)||t.style&&t.nodeType||F(t)||B(t))return O(t)?je(t,i,e,r,n):t;var o,a={};for(o in t)a[o]=je(t[o],i,e,r,n);return a}(e[t],n,i,o,r),r,n,o)&&(r._pt=s=new lr(r._pt,i,t,0,1,a.render,a,0,a.priority),r!==h))for(u=r._ptLookup[r._targets.indexOf(i)],c=a._props.length;c--;)u[a._props[c]]=s;return a},Ue=function t(e,r){var n,i,s,c,l,f,d,p,h,g,m,y,_,v=e.vars,x=v.ease,T=v.startAt,k=v.immediateRender,q=v.lazy,A=v.onUpdate,M=v.onUpdateParams,E=v.callbackScope,O=v.runBackwards,C=v.yoyoEase,P=v.keyframes,z=v.autoRevert,D=e._dur,R=e._startAt,I=e._targets,B=e.parent,F=B&&"nested"===B.data?B.vars.targets:I,Y="auto"===e._overwrite&&!o,X=e.timeline;if(X&&(!P||!x)&&(x="none"),e._ease=Pe(x,b.ease),e._yEase=C?Oe(Pe(!0===C?x:C,b.ease)):0,C&&e._yoyo&&!e._repeat&&(C=e._yEase,e._yEase=e._ease,e._ease=C),e._from=!X&&!!v.runBackwards,!X||P&&!v.stagger){if(y=(p=I[0]?ft(I[0]).harness:0)&&v[p.prop],n=kt(v,rt),R&&(r<0&&O&&k&&!z?R.render(-1,!0):R.revert(O&&D?et:tt),R._lazy=0),T){if(Et(e._startAt=Qe.set(I,wt({data:"isStart",overwrite:!1,parent:B,immediateRender:!0,lazy:L(q),startAt:null,delay:0,onUpdate:A,onUpdateParams:M,callbackScope:E,stagger:0},T))),r<0&&(a||!k&&!z)&&e._startAt.revert(et),k&&D&&r<=0)return void(r&&(e._zTime=r))}else if(O&&D&&!R)if(r&&(k=!1),s=wt({overwrite:!1,data:"isFromStart",lazy:k&&L(q),immediateRender:k,stagger:0,parent:B},n),y&&(s[p.prop]=y),Et(e._startAt=Qe.set(I,s)),r<0&&(a?e._startAt.revert(et):e._startAt.render(-1,!0)),e._zTime=r,k){if(!r)return}else t(e._startAt,S);for(e._pt=e._ptCache=0,q=D&&L(q)||q&&!D,i=0;i<I.length;i++){if(d=(l=I[i])._gsap||lt(I)[i]._gsap,e._ptLookup[i]=g={},it[d.id]&&nt.length&&_t(),m=F===I?i:F.indexOf(l),p&&!1!==(h=new p).init(l,y||n,e,m,F)&&(e._pt=c=new lr(e._pt,l,h.name,0,1,h.render,h,0,h.priority),h._props.forEach((function(t){g[t]=c})),h.priority&&(f=1)),!p||y)for(s in n)ot[s]&&(h=He(s,n,e,m,l,F))?h.priority&&(f=1):g[s]=c=Ve.call(e,l,s,"get",n[s],m,F,0,v.stringFilter);e._op&&e._op[i]&&e.kill(l,e._op[i]),Y&&e._pt&&(Ye=e,u.killTweensOf(l,g,e.globalTime(r)),_=!e.parent,Ye=0),e._pt&&q&&(it[d.id]=1)}f&&cr(e),e._onInit&&e._onInit(e)}e._onUpdate=A,e._initted=(!e._op||e._pt)&&!_,P&&r<=0&&X.render(w,!0,!0)},We=function(t,e,r,n){var i,o,a=e.ease||n||"power1.inOut";if(F(e))o=r[t]||(r[t]=[]),e.forEach((function(t,r){return o.push({t:r/(e.length-1)*100,v:t,e:a})}));else for(i in e)o=r[i]||(r[i]=[]),"ease"===i||o.push({t:parseFloat(t),v:e[i],e:a})},je=function(t,e,r,n,i){return C(t)?t.call(e,r,n,i):O(t)&&~t.indexOf("random(")?ce(t):t},Ge=ct+"repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase,autoRevert",$e={};pt(Ge+",id,stagger,delay,duration,paused,scrollTrigger",(function(t){return $e[t]=1}));var Qe=function(t){function e(e,r,i,a){var s;"number"==typeof r&&(i.duration=r,r=i,i=null);var c,l,f,d,p,h,g,m,y=(s=t.call(this,a?r:qt(r))||this).vars,_=y.duration,v=y.delay,b=y.immediateRender,w=y.stagger,S=y.overwrite,T=y.keyframes,k=y.defaults,q=y.scrollTrigger,A=y.yoyoEase,M=r.parent||u,E=(F(e)||B(e)?P(e[0]):"length"in r)?[e]:ee(e);if(s._targets=E.length?lt(E):Z("GSAP target "+e+" not found. https://greensock.com",!x.nullTargetWarn)||[],s._ptLookup=[],s._overwrite=S,T||w||I(_)||I(v)){if(r=s.vars,(c=s.timeline=new Fe({data:"nested",defaults:k||{},targets:M&&"nested"===M.data?M.vars.targets:E})).kill(),c.parent=c._dp=n(s),c._start=0,w||I(_)||I(v)){if(d=E.length,g=w&&ie(w),D(w))for(p in w)~Ge.indexOf(p)&&(m||(m={}),m[p]=w[p]);for(l=0;l<d;l++)(f=kt(r,$e)).stagger=0,A&&(f.yoyoEase=A),m&&St(f,m),h=E[l],f.duration=+je(_,n(s),l,h,E),f.delay=(+je(v,n(s),l,h,E)||0)-s._delay,!w&&1===d&&f.delay&&(s._delay=v=f.delay,s._start+=v,f.delay=0),c.to(h,f,g?g(l,h,E):0),c._ease=qe.none;c.duration()?_=v=0:s.timeline=0}else if(T){qt(wt(c.vars.defaults,{ease:"none"})),c._ease=Pe(T.ease||r.ease||"none");var O,C,z,R=0;if(F(T))T.forEach((function(t){return c.to(E,t,">")})),c.duration();else{for(p in f={},T)"ease"===p||"easeEach"===p||We(p,T[p],f,T.easeEach);for(p in f)for(O=f[p].sort((function(t,e){return t.t-e.t})),R=0,l=0;l<O.length;l++)(z={ease:(C=O[l]).e,duration:(C.t-(l?O[l-1].t:0))/100*_})[p]=C.v,c.to(E,z,R),R+=z.duration;c.duration()<_&&c.to({},{duration:_-c.duration()})}}_||s.duration(_=c.duration())}else s.timeline=0;return!0!==S||o||(Ye=n(s),u.killTweensOf(E),Ye=0),Yt(M,n(s),i),r.reversed&&s.reverse(),r.paused&&s.paused(!0),(b||!_&&!T&&s._start===gt(M._time)&&L(b)&&zt(n(s))&&"nested"!==M.data)&&(s._tTime=-1e-8,s.render(Math.max(0,-v))),q&&Xt(n(s),q),s}i(e,t);var r=e.prototype;return r.render=function(t,e,r){var n,i,o,s,u,c,l,f,d,p=this._time,h=this._tDur,g=this._dur,m=t<0,y=t>h-S&&!m?h:t<S?0:t;if(g){if(y!==this._tTime||!t||r||!this._initted&&this._tTime||this._startAt&&this._zTime<0!==m){if(n=y,f=this.timeline,this._repeat){if(s=g+this._rDelay,this._repeat<-1&&m)return this.totalTime(100*s+t,e,r);if(n=gt(y%s),y===h?(o=this._repeat,n=g):((o=~~(y/s))&&o===y/s&&(n=g,o--),n>g&&(n=g)),(c=this._yoyo&&1&o)&&(d=this._yEase,n=g-n),u=Lt(this._tTime,s),n===p&&!r&&this._initted)return this._tTime=y,this;o!==u&&(f&&this._yEase&&Ce(f,c),!this.vars.repeatRefresh||c||this._lock||(this._lock=r=1,this.render(gt(s*o),!0).invalidate()._lock=0))}if(!this._initted){if(Nt(this,m?t:n,r,e))return this._tTime=0,this;if(p!==this._time)return this;if(g!==this._dur)return this.render(t,e,r)}if(this._tTime=y,this._time=n,!this._act&&this._ts&&(this._act=1,this._lazy=0),this.ratio=l=(d||this._ease)(n/g),this._from&&(this.ratio=l=1-l),n&&!p&&!e&&(de(this,"onStart"),this._tTime!==y))return this;for(i=this._pt;i;)i.r(l,i.d),i=i._next;f&&f.render(t<0?t:!n&&c?-1e-8:f._dur*f._ease(n/this._dur),e,r)||this._startAt&&(this._zTime=t),this._onUpdate&&!e&&(m&&Pt(this,t,0,r),de(this,"onUpdate")),this._repeat&&o!==u&&this.vars.onRepeat&&!e&&this.parent&&de(this,"onRepeat"),y!==this._tDur&&y||this._tTime!==y||(m&&!this._onUpdate&&Pt(this,t,0,!0),(t||!g)&&(y===this._tDur&&this._ts>0||!y&&this._ts<0)&&Et(this,1),e||m&&!p||!y&&!p||(de(this,y===h?"onComplete":"onReverseComplete",!0),this._prom&&!(y<h&&this.timeScale()>0)&&this._prom()))}}else!function(t,e,r,n){var i,o,s,u=t.ratio,c=e<0||!e&&(!t._start&&Vt(t)&&(t._initted||!Ht(t))||(t._ts<0||t._dp._ts<0)&&!Ht(t))?0:1,l=t._rDelay,f=0;if(l&&t._repeat&&(f=Zt(0,t._tDur,e),o=Lt(f,l),t._yoyo&&1&o&&(c=1-c),o!==Lt(t._tTime,l)&&(u=1-c,t.vars.repeatRefresh&&t._initted&&t.invalidate())),c!==u||a||n||t._zTime===S||!e&&t._zTime){if(!t._initted&&Nt(t,e,n,r))return;for(s=t._zTime,t._zTime=e||(r?S:0),r||(r=e&&!s),t.ratio=c,t._from&&(c=1-c),t._time=0,t._tTime=f,i=t._pt;i;)i.r(c,i.d),i=i._next;e<0&&Pt(t,e,0,!0),t._onUpdate&&!r&&de(t,"onUpdate"),f&&t._repeat&&!r&&t.parent&&de(t,"onRepeat"),(e>=t._tDur||e<0)&&t.ratio===c&&(c&&Et(t,1),r||a||(de(t,c?"onComplete":"onReverseComplete",!0),t._prom&&t._prom()))}else t._zTime||(t._zTime=e)}(this,t,e,r);return this},r.targets=function(){return this._targets},r.invalidate=function(){return this._pt=this._op=this._startAt=this._onUpdate=this._lazy=this.ratio=0,this._ptLookup=[],this.timeline&&this.timeline.invalidate(),t.prototype.invalidate.call(this)},r.resetTo=function(t,e,r,n){g||Te.wake(),this._ts||this.play();var i=Math.min(this._dur,(this._dp._time-this._start)*this._ts);return this._initted||Ue(this,i),function(t,e,r,n,i,o,a){var s,u,c,l,f=(t._pt&&t._ptCache||(t._ptCache={}))[e];if(!f)for(f=t._ptCache[e]=[],c=t._ptLookup,l=t._targets.length;l--;){if((s=c[l][e])&&s.d&&s.d._pt)for(s=s.d._pt;s&&s.p!==e&&s.fp!==e;)s=s._next;if(!s)return Xe=1,t.vars[e]="+=0",Ue(t,a),Xe=0,1;f.push(s)}for(l=f.length;l--;)(s=(u=f[l])._pt||u).s=!n&&0!==n||i?s.s+(n||0)+o*s.c:n,s.c=r-s.s,u.e&&(u.e=ht(r)+Jt(u.e)),u.b&&(u.b=s.s+Jt(u.b))}(this,t,e,r,n,this._ease(i/this._dur),i)?this.resetTo(t,e,r,n):(Bt(this,0),this.parent||At(this._dp,this,"_first","_last",this._dp._sort?"_start":0),this.render(0))},r.kill=function(t,e){if(void 0===e&&(e="all"),!(t||e&&"all"!==e))return this._lazy=this._pt=0,this.parent?pe(this):this;if(this.timeline){var r=this.timeline.totalDuration();return this.timeline.killTweensOf(t,e,Ye&&!0!==Ye.vars.overwrite)._first||pe(this),this.parent&&r!==this.timeline.totalDuration()&&Ut(this,this._dur*this.timeline._tDur/r,0,1),this}var n,i,o,a,s,u,c,l=this._targets,f=t?ee(t):l,d=this._ptLookup,p=this._pt;if((!e||"all"===e)&&function(t,e){for(var r=t.length,n=r===e.length;n&&r--&&t[r]===e[r];);return r<0}(l,f))return"all"===e&&(this._pt=0),pe(this);for(n=this._op=this._op||[],"all"!==e&&(O(e)&&(s={},pt(e,(function(t){return s[t]=1})),e=s),e=function(t,e){var r,n,i,o,a=t[0]?ft(t[0]).harness:0,s=a&&a.aliases;if(!s)return e;for(n in r=St({},e),s)if(n in r)for(i=(o=s[n].split(",")).length;i--;)r[o[i]]=r[n];return r}(l,e)),c=l.length;c--;)if(~f.indexOf(l[c]))for(s in i=d[c],"all"===e?(n[c]=e,a=i,o={}):(o=n[c]=n[c]||{},a=e),a)(u=i&&i[s])&&("kill"in u.d&&!0!==u.d.kill(s)||Mt(this,u,"_pt"),delete i[s]),"all"!==o&&(o[s]=1);return this._initted&&!this._pt&&p&&pe(this),this},e.to=function(t,r){return new e(t,r,arguments[2])},e.from=function(t,e){return $t(1,arguments)},e.delayedCall=function(t,r,n,i){return new e(r,0,{immediateRender:!1,lazy:!1,overwrite:!1,delay:t,onComplete:r,onReverseComplete:r,onCompleteParams:n,onReverseCompleteParams:n,callbackScope:i})},e.fromTo=function(t,e,r){return $t(2,arguments)},e.set=function(t,r){return r.duration=0,r.repeatDelay||(r.repeat=0),new e(t,r)},e.killTweensOf=function(t,e,r){return u.killTweensOf(t,e,r)},e}(Be);wt(Qe.prototype,{_targets:[],_lazy:0,_startAt:0,_op:0,_onInit:0}),pt("staggerTo,staggerFrom,staggerFromTo",(function(t){Qe[t]=function(){var e=new Fe,r=Kt.call(arguments,0);return r.splice("staggerFromTo"===t?5:4,0,0),e[t].apply(e,r)}}));var Ze=function(t,e,r){return t[e]=r},Je=function(t,e,r){return t[e](r)},Ke=function(t,e,r,n){return t[e](n.fp,r)},tr=function(t,e,r){return t.setAttribute(e,r)},er=function(t,e){return C(t[e])?Je:z(t[e])&&t.setAttribute?tr:Ze},rr=function(t,e){return e.set(e.t,e.p,Math.round(1e6*(e.s+e.c*t))/1e6,e)},nr=function(t,e){return e.set(e.t,e.p,!!(e.s+e.c*t),e)},ir=function(t,e){var r=e._pt,n="";if(!t&&e.b)n=e.b;else if(1===t&&e.e)n=e.e;else{for(;r;)n=r.p+(r.m?r.m(r.s+r.c*t):Math.round(1e4*(r.s+r.c*t))/1e4)+n,r=r._next;n+=e.c}e.set(e.t,e.p,n,e)},or=function(t,e){for(var r=e._pt;r;)r.r(t,r.d),r=r._next},ar=function(t,e,r,n){for(var i,o=this._pt;o;)i=o._next,o.p===n&&o.modifier(t,e,r),o=i},sr=function(t){for(var e,r,n=this._pt;n;)r=n._next,n.p===t&&!n.op||n.op===t?Mt(this,n,"_pt"):n.dep||(e=1),n=r;return!e},ur=function(t,e,r,n){n.mSet(t,e,n.m.call(n.tween,r,n.mt),n)},cr=function(t){for(var e,r,n,i,o=t._pt;o;){for(e=o._next,r=n;r&&r.pr>o.pr;)r=r._next;(o._prev=r?r._prev:i)?o._prev._next=o:n=o,(o._next=r)?r._prev=o:i=o,o=e}t._pt=n},lr=function(){function t(t,e,r,n,i,o,a,s,u){this.t=e,this.s=n,this.c=i,this.p=r,this.r=o||rr,this.d=a||this,this.set=s||Ze,this.pr=u||0,this._next=t,t&&(t._prev=this)}return t.prototype.modifier=function(t,e,r){this.mSet=this.mSet||this.set,this.set=ur,this.m=t,this.mt=r,this.tween=e},t}();pt(ct+"parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger",(function(t){return rt[t]=1})),j.TweenMax=j.TweenLite=Qe,j.TimelineLite=j.TimelineMax=Fe,u=new Fe({sortChildren:!1,defaults:b,autoRemoveChildren:!0,id:"root",smoothChildTiming:!0}),x.stringFilter=Se;var fr=[],dr={},pr=[],hr=0,gr=function(t){return(dr[t]||pr).map((function(t){return t()}))},mr=function(){var t=Date.now(),e=[];t-hr>2&&(gr("matchMediaInit"),fr.forEach((function(t){var r,n,i,o,a=t.queries,s=t.conditions;for(n in a)(r=c.matchMedia(a[n]).matches)&&(i=1),r!==s[n]&&(s[n]=r,o=1);o&&(t.revert(),i&&e.push(t))})),gr("matchMediaRevert"),e.forEach((function(t){return t.onMatch(t)})),hr=t,gr("matchMedia"))},yr=function(){function t(t,e){this.selector=e&&re(e),this.data=[],this._r=[],this.isReverted=!1,t&&this.add(t)}var e=t.prototype;return e.add=function(t,e,r){C(t)&&(r=e,e=t,t=C);var n=this,i=function(){var t,i=s,o=n.selector;return i&&i!==n&&i.data.push(n),r&&(n.selector=re(r)),s=n,t=e.apply(n,arguments),C(t)&&n._r.push(t),s=i,n.selector=o,n.isReverted=!1,t};return n.last=i,t===C?i(n):t?n[t]=i:i},e.ignore=function(t){var e=s;s=null,t(this),s=e},e.getTweens=function(){var e=[];return this.data.forEach((function(r){return r instanceof t?e.push.apply(e,r.getTweens()):r instanceof Qe&&e.push(r)})),e},e.clear=function(){this._r.length=this.data.length=0},e.kill=function(t,e){var r=this;if(t?(this.getTweens().map((function(t){return{g:t.globalTime(0),t:t}})).sort((function(t,e){return e.g-t.g||-1})).forEach((function(e){return e.t.revert(t)})),this.data.forEach((function(e){return!(e instanceof Be)&&e.revert&&e.revert(t)})),this._r.forEach((function(e){return e(t,r)})),this.isReverted=!0):this.data.forEach((function(t){return t.kill&&t.kill()})),this.clear(),e){var n=fr.indexOf(this);~n&&fr.splice(n,1)}},e.revert=function(t){this.kill(t||{})},t}(),_r=function(){function t(t){this.contexts=[],this.scope=t}var e=t.prototype;return e.add=function(t,e,r){D(t)||(t={matches:t});var n,i,o,a=new yr(0,r||this.scope),s=a.conditions={};for(i in this.contexts.push(a),e=a.add("onMatch",e),a.queries=t,t)"all"===i?o=1:(n=c.matchMedia(t[i]))&&(fr.indexOf(a)<0&&fr.push(a),(s[i]=n.matches)&&(o=1),n.addListener?n.addListener(mr):n.addEventListener("change",mr));return o&&e(a),this},e.revert=function(t){this.kill(t||{})},e.kill=function(t){this.contexts.forEach((function(e){return e.kill(t,!0)}))},t}(),vr={registerPlugin:function(){for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];e.forEach((function(t){return he(t)}))},timeline:function(t){return new Fe(t)},getTweensOf:function(t,e){return u.getTweensOf(t,e)},getProperty:function(t,e,r,n){O(t)&&(t=ee(t)[0]);var i=ft(t||{}).get,o=r?bt:xt;return"native"===r&&(r=""),t?e?o((ot[e]&&ot[e].get||i)(t,e,r,n)):function(e,r,n){return o((ot[e]&&ot[e].get||i)(t,e,r,n))}:t},quickSetter:function(t,e,r){if((t=ee(t)).length>1){var n=t.map((function(t){return wr.quickSetter(t,e,r)})),i=n.length;return function(t){for(var e=i;e--;)n[e](t)}}t=t[0]||{};var o=ot[e],a=ft(t),s=a.harness&&(a.harness.aliases||{})[e]||e,u=o?function(e){var n=new o;h._pt=0,n.init(t,r?e+r:e,h,0,[t]),n.render(1,n),h._pt&&or(1,h)}:a.set(t,s);return o?u:function(e){return u(t,s,r?e+r:e,a,1)}},quickTo:function(t,e,r){var n,i=wr.to(t,St(((n={})[e]="+=0.1",n.paused=!0,n),r||{})),o=function(t,r,n){return i.resetTo(e,t,r,n)};return o.tween=i,o},isTweening:function(t){return u.getTweensOf(t,!0).length>0},defaults:function(t){return t&&t.ease&&(t.ease=Pe(t.ease,b.ease)),Tt(b,t||{})},config:function(t){return Tt(x,t||{})},registerEffect:function(t){var e=t.name,r=t.effect,n=t.plugins,i=t.defaults,o=t.extendTimeline;(n||"").split(",").forEach((function(t){return t&&!ot[t]&&!j[t]&&Z(e+" effect requires "+t+" plugin.")})),at[e]=function(t,e,n){return r(ee(t),wt(e||{},i),n)},o&&(Fe.prototype[e]=function(t,r,n){return this.add(at[e](t,D(r)?r:(n=r)&&{},this),n)})},registerEase:function(t,e){qe[t]=Pe(e)},parseEase:function(t,e){return arguments.length?Pe(t,e):qe},getById:function(t){return u.getById(t)},exportRoot:function(t,e){void 0===t&&(t={});var r,n,i=new Fe(t);for(i.smoothChildTiming=L(t.smoothChildTiming),u.remove(i),i._dp=0,i._time=i._tTime=u._time,r=u._first;r;)n=r._next,!e&&!r._dur&&r instanceof Qe&&r.vars.onComplete===r._targets[0]||Yt(i,r,r._start-r._delay),r=n;return Yt(u,i,0),i},context:function(t,e){return t?new yr(t,e):s},matchMedia:function(t){return new _r(t)},matchMediaRefresh:function(){return fr.forEach((function(t){var e,r,n=t.conditions;for(r in n)n[r]&&(n[r]=!1,e=1);e&&t.revert()}))||mr()},addEventListener:function(t,e){var r=dr[t]||(dr[t]=[]);~r.indexOf(e)||r.push(e)},removeEventListener:function(t,e){var r=dr[t],n=r&&r.indexOf(e);n>=0&&r.splice(n,1)},utils:{wrap:function t(e,r,n){var i=r-e;return F(e)?ue(e,t(0,e.length),r):Qt(n,(function(t){return(i+(t-e)%i)%i+e}))},wrapYoyo:function t(e,r,n){var i=r-e,o=2*i;return F(e)?ue(e,t(0,e.length-1),r):Qt(n,(function(t){return e+((t=(o+(t-e)%o)%o||0)>i?o-t:t)}))},distribute:ie,random:se,snap:ae,normalize:function(t,e,r){return le(t,e,0,1,r)},getUnit:Jt,clamp:function(t,e,r){return Qt(r,(function(r){return Zt(t,e,r)}))},splitColor:_e,toArray:ee,selector:re,mapRange:le,pipe:function(){for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];return function(t){return e.reduce((function(t,e){return e(t)}),t)}},unitize:function(t,e){return function(r){return t(parseFloat(r))+(e||Jt(r))}},interpolate:function t(e,r,n,i){var o=isNaN(e+r)?0:function(t){return(1-t)*e+t*r};if(!o){var a,s,u,c,l,f=O(e),d={};if(!0===n&&(i=1)&&(n=null),f)e={p:e},r={p:r};else if(F(e)&&!F(r)){for(u=[],c=e.length,l=c-2,s=1;s<c;s++)u.push(t(e[s-1],e[s]));c--,o=function(t){t*=c;var e=Math.min(l,~~t);return u[e](t-e)},n=r}else i||(e=St(F(e)?[]:{},e));if(!u){for(a in r)Ve.call(d,e,a,"get",r[a]);o=function(t){return or(t,d)||(f?e.p:e)}}}return Qt(n,o)},shuffle:ne},install:$,effects:at,ticker:Te,updateRoot:Fe.updateRoot,plugins:ot,globalTimeline:u,core:{PropTween:lr,globals:J,Tween:Qe,Timeline:Fe,Animation:Be,getCache:ft,_removeLinkedListItem:Mt,reverting:function(){return a},context:function(t){return t&&s&&(s.data.push(t),t._ctx=s),s},suppressOverwrites:function(t){return o=t}}};pt("to,from,fromTo,delayedCall,set,killTweensOf",(function(t){return vr[t]=Qe[t]})),Te.add(Fe.updateRoot),h=vr.to({},{duration:0});var xr=function(t,e){for(var r=t._pt;r&&r.p!==e&&r.op!==e&&r.fp!==e;)r=r._next;return r},br=function(t,e){return{name:t,rawVars:1,init:function(t,r,n){n._onInit=function(t){var n,i;if(O(r)&&(n={},pt(r,(function(t){return n[t]=1})),r=n),e){for(i in n={},r)n[i]=e(r[i]);r=n}!function(t,e){var r,n,i,o=t._targets;for(r in e)for(n=o.length;n--;)(i=t._ptLookup[n][r])&&(i=i.d)&&(i._pt&&(i=xr(i,r)),i&&i.modifier&&i.modifier(e[r],t,o[n],r))}(t,r)}}}},wr=vr.registerPlugin({name:"attr",init:function(t,e,r,n,i){var o,a,s;for(o in this.tween=r,e)s=t.getAttribute(o)||"",(a=this.add(t,"setAttribute",(s||0)+"",e[o],n,i,0,0,o)).op=o,a.b=s,this._props.push(o)},render:function(t,e){for(var r=e._pt;r;)a?r.set(r.t,r.p,r.b,r):r.r(t,r.d),r=r._next}},{name:"endArray",init:function(t,e){for(var r=e.length;r--;)this.add(t,r,t[r]||0,e[r],0,0,0,0,0,1)}},br("roundProps",oe),br("modifiers"),br("snap",ae))||vr;Qe.version=Fe.version=wr.version="3.11.1",d=1,R()&&ke(),qe.Power0,qe.Power1,qe.Power2,qe.Power3,qe.Power4,qe.Linear,qe.Quad,qe.Cubic,qe.Quart,qe.Quint,qe.Strong,qe.Elastic,qe.Back,qe.SteppedEase,qe.Bounce,qe.Sine,qe.Expo,qe.Circ;var Sr,Tr,kr,qr,Ar,Mr,Er,Or,Cr={},Pr=180/Math.PI,zr=Math.PI/180,Dr=Math.atan2,Lr=/([A-Z])/g,Rr=/(left|right|width|margin|padding|x)/i,Ir=/[\s,\(]\S/,Br={autoAlpha:"opacity,visibility",scale:"scaleX,scaleY",alpha:"opacity"},Fr=function(t,e){return e.set(e.t,e.p,Math.round(1e4*(e.s+e.c*t))/1e4+e.u,e)},Yr=function(t,e){return e.set(e.t,e.p,1===t?e.e:Math.round(1e4*(e.s+e.c*t))/1e4+e.u,e)},Xr=function(t,e){return e.set(e.t,e.p,t?Math.round(1e4*(e.s+e.c*t))/1e4+e.u:e.b,e)},Nr=function(t,e){var r=e.s+e.c*t;e.set(e.t,e.p,~~(r+(r<0?-.5:.5))+e.u,e)},Vr=function(t,e){return e.set(e.t,e.p,t?e.e:e.b,e)},Hr=function(t,e){return e.set(e.t,e.p,1!==t?e.b:e.e,e)},Ur=function(t,e,r){return t.style[e]=r},Wr=function(t,e,r){return t.style.setProperty(e,r)},jr=function(t,e,r){return t._gsap[e]=r},Gr=function(t,e,r){return t._gsap.scaleX=t._gsap.scaleY=r},$r=function(t,e,r,n,i){var o=t._gsap;o.scaleX=o.scaleY=r,o.renderTransform(i,o)},Qr=function(t,e,r,n,i){var o=t._gsap;o[e]=r,o.renderTransform(i,o)},Zr="transform",Jr=Zr+"Origin",Kr=function(t){var e=this,r=this.target,n=r.style;if(t in Cr){if(this.tfm=this.tfm||{},"transform"!==t&&(~(t=Br[t]||t).indexOf(",")?t.split(",").forEach((function(t){return e.tfm[t]=_n(r,t)})):this.tfm[t]=r._gsap.x?r._gsap[t]:_n(r,t)),this.props.indexOf(Zr)>=0)return;r._gsap.svg&&(this.svgo=r.getAttribute("data-svg-origin"),this.props.push(Jr,"")),t=Zr}n&&this.props.push(t,n[t])},tn=function(t){t.translate&&(t.removeProperty("translate"),t.removeProperty("scale"),t.removeProperty("rotate"))},en=function(){var t,e,r=this.props,n=this.target,i=n.style,o=n._gsap;for(t=0;t<r.length;t+=2)r[t+1]?i[r[t]]=r[t+1]:i.removeProperty(r[t].replace(Lr,"-$1").toLowerCase());if(this.tfm){for(e in this.tfm)o[e]=this.tfm[e];o.svg&&(o.renderTransform(),n.setAttribute("data-svg-origin",this.svgo||"")),!(t=Er())||t.isStart||i[Zr]||(tn(i),o.uncache=1)}},rn=function(t,e){var r={target:t,props:[],revert:en,save:Kr};return e&&e.split(",").forEach((function(t){return r.save(t)})),r},nn=function(t,e){var r=Tr.createElementNS?Tr.createElementNS((e||"http://www.w3.org/1999/xhtml").replace(/^https/,"http"),t):Tr.createElement(t);return r.style?r:Tr.createElement(t)},on=function t(e,r,n){var i=getComputedStyle(e);return i[r]||i.getPropertyValue(r.replace(Lr,"-$1").toLowerCase())||i.getPropertyValue(r)||!n&&t(e,sn(r)||r,1)||""},an="O,Moz,ms,Ms,Webkit".split(","),sn=function(t,e,r){var n=(e||Ar).style,i=5;if(t in n&&!r)return t;for(t=t.charAt(0).toUpperCase()+t.substr(1);i--&&!(an[i]+t in n););return i<0?null:(3===i?"ms":i>=0?an[i]:"")+t},un=function(){"undefined"!=typeof window&&window.document&&(Sr=window,Tr=Sr.document,kr=Tr.documentElement,Ar=nn("div")||{style:{}},nn("div"),Zr=sn(Zr),Jr=Zr+"Origin",Ar.style.cssText="border-width:0;line-height:0;position:absolute;padding:0",Or=!!sn("perspective"),Er=wr.core.reverting,qr=1)},cn=function t(e){var r,n=nn("svg",this.ownerSVGElement&&this.ownerSVGElement.getAttribute("xmlns")||"http://www.w3.org/2000/svg"),i=this.parentNode,o=this.nextSibling,a=this.style.cssText;if(kr.appendChild(n),n.appendChild(this),this.style.display="block",e)try{r=this.getBBox(),this._gsapBBox=this.getBBox,this.getBBox=t}catch(t){}else this._gsapBBox&&(r=this._gsapBBox());return i&&(o?i.insertBefore(this,o):i.appendChild(this)),kr.removeChild(n),this.style.cssText=a,r},ln=function(t,e){for(var r=e.length;r--;)if(t.hasAttribute(e[r]))return t.getAttribute(e[r])},fn=function(t){var e;try{e=t.getBBox()}catch(r){e=cn.call(t,!0)}return e&&(e.width||e.height)||t.getBBox===cn||(e=cn.call(t,!0)),!e||e.width||e.x||e.y?e:{x:+ln(t,["x","cx","x1"])||0,y:+ln(t,["y","cy","y1"])||0,width:0,height:0}},dn=function(t){return!(!t.getCTM||t.parentNode&&!t.ownerSVGElement||!fn(t))},pn=function(t,e){if(e){var r=t.style;e in Cr&&e!==Jr&&(e=Zr),r.removeProperty?("ms"!==e.substr(0,2)&&"webkit"!==e.substr(0,6)||(e="-"+e),r.removeProperty(e.replace(Lr,"-$1").toLowerCase())):r.removeAttribute(e)}},hn=function(t,e,r,n,i,o){var a=new lr(t._pt,e,r,0,1,o?Hr:Vr);return t._pt=a,a.b=n,a.e=i,t._props.push(r),a},gn={deg:1,rad:1,turn:1},mn={grid:1,flex:1},yn=function t(e,r,n,i){var o,a,s,u,c=parseFloat(n)||0,l=(n+"").trim().substr((c+"").length)||"px",f=Ar.style,d=Rr.test(r),p="svg"===e.tagName.toLowerCase(),h=(p?"client":"offset")+(d?"Width":"Height"),g=100,m="px"===i,y="%"===i;return i===l||!c||gn[i]||gn[l]?c:("px"!==l&&!m&&(c=t(e,r,n,"px")),u=e.getCTM&&dn(e),!y&&"%"!==l||!Cr[r]&&!~r.indexOf("adius")?(f[d?"width":"height"]=g+(m?l:i),a=~r.indexOf("adius")||"em"===i&&e.appendChild&&!p?e:e.parentNode,u&&(a=(e.ownerSVGElement||{}).parentNode),a&&a!==Tr&&a.appendChild||(a=Tr.body),(s=a._gsap)&&y&&s.width&&d&&s.time===Te.time&&!s.uncache?ht(c/s.width*g):((y||"%"===l)&&!mn[on(a,"display")]&&(f.position=on(e,"position")),a===e&&(f.position="static"),a.appendChild(Ar),o=Ar[h],a.removeChild(Ar),f.position="absolute",d&&y&&((s=ft(a)).time=Te.time,s.width=a[h]),ht(m?o*c/g:o&&c?g/o*c:0))):(o=u?e.getBBox()[d?"width":"height"]:e[h],ht(y?c/o*g:c/100*o)))},_n=function(t,e,r,n){var i;return qr||un(),e in Br&&"transform"!==e&&~(e=Br[e]).indexOf(",")&&(e=e.split(",")[0]),Cr[e]&&"transform"!==e?(i=On(t,n),i="transformOrigin"!==e?i[e]:i.svg?i.origin:Cn(on(t,Jr))+" "+i.zOrigin+"px"):(!(i=t.style[e])||"auto"===i||n||~(i+"").indexOf("calc("))&&(i=Sn[e]&&Sn[e](t,e,r)||on(t,e)||dt(t,e)||("opacity"===e?1:0)),r&&!~(i+"").trim().indexOf(" ")?yn(t,e,i,r)+r:i},vn=function(t,e,r,n){if(!r||"none"===r){var i=sn(e,t,1),o=i&&on(t,i,1);o&&o!==r?(e=i,r=o):"borderColor"===e&&(r=on(t,"borderTopColor"))}var a,s,u,c,l,f,d,p,h,g,m,y=new lr(this._pt,t.style,e,0,1,ir),_=0,v=0;if(y.b=r,y.e=n,r+="","auto"==(n+="")&&(t.style[e]=n,n=on(t,e)||n,t.style[e]=r),Se(a=[r,n]),n=a[1],u=(r=a[0]).match(N)||[],(n.match(N)||[]).length){for(;s=N.exec(n);)d=s[0],h=n.substring(_,s.index),l?l=(l+1)%5:"rgba("!==h.substr(-5)&&"hsla("!==h.substr(-5)||(l=1),d!==(f=u[v++]||"")&&(c=parseFloat(f)||0,m=f.substr((c+"").length),"="===d.charAt(1)&&(d=mt(c,d)+m),p=parseFloat(d),g=d.substr((p+"").length),_=N.lastIndex-g.length,g||(g=g||x.units[e]||m,_===n.length&&(n+=g,y.e+=g)),m!==g&&(c=yn(t,e,f,g)||0),y._pt={_next:y._pt,p:h||1===v?h:",",s:c,c:p-c,m:l&&l<4||"zIndex"===e?Math.round:0});y.c=_<n.length?n.substring(_,n.length):""}else y.r="display"===e&&"none"===n?Hr:Vr;return H.test(n)&&(y.e=0),this._pt=y,y},xn={top:"0%",bottom:"100%",left:"0%",right:"100%",center:"50%"},bn=function(t){var e=t.split(" "),r=e[0],n=e[1]||"50%";return"top"!==r&&"bottom"!==r&&"left"!==n&&"right"!==n||(t=r,r=n,n=t),e[0]=xn[r]||r,e[1]=xn[n]||n,e.join(" ")},wn=function(t,e){if(e.tween&&e.tween._time===e.tween._dur){var r,n,i,o=e.t,a=o.style,s=e.u,u=o._gsap;if("all"===s||!0===s)a.cssText="",n=1;else for(i=(s=s.split(",")).length;--i>-1;)r=s[i],Cr[r]&&(n=1,r="transformOrigin"===r?Jr:Zr),pn(o,r);n&&(pn(o,Zr),u&&(u.svg&&o.removeAttribute("transform"),On(o,1),u.uncache=1,tn(a)))}},Sn={clearProps:function(t,e,r,n,i){if("isFromStart"!==i.data){var o=t._pt=new lr(t._pt,e,r,0,0,wn);return o.u=n,o.pr=-10,o.tween=i,t._props.push(r),1}}},Tn=[1,0,0,1,0,0],kn={},qn=function(t){return"matrix(1, 0, 0, 1, 0, 0)"===t||"none"===t||!t},An=function(t){var e=on(t,Zr);return qn(e)?Tn:e.substr(7).match(X).map(ht)},Mn=function(t,e){var r,n,i,o,a=t._gsap||ft(t),s=t.style,u=An(t);return a.svg&&t.getAttribute("transform")?"1,0,0,1,0,0"===(u=[(i=t.transform.baseVal.consolidate().matrix).a,i.b,i.c,i.d,i.e,i.f]).join(",")?Tn:u:(u!==Tn||t.offsetParent||t===kr||a.svg||(i=s.display,s.display="block",(r=t.parentNode)&&t.offsetParent||(o=1,n=t.nextElementSibling,kr.appendChild(t)),u=An(t),i?s.display=i:pn(t,"display"),o&&(n?r.insertBefore(t,n):r?r.appendChild(t):kr.removeChild(t))),e&&u.length>6?[u[0],u[1],u[4],u[5],u[12],u[13]]:u)},En=function(t,e,r,n,i,o){var a,s,u,c=t._gsap,l=i||Mn(t,!0),f=c.xOrigin||0,d=c.yOrigin||0,p=c.xOffset||0,h=c.yOffset||0,g=l[0],m=l[1],y=l[2],_=l[3],v=l[4],x=l[5],b=e.split(" "),w=parseFloat(b[0])||0,S=parseFloat(b[1])||0;r?l!==Tn&&(s=g*_-m*y)&&(u=w*(-m/s)+S*(g/s)-(g*x-m*v)/s,w=w*(_/s)+S*(-y/s)+(y*x-_*v)/s,S=u):(w=(a=fn(t)).x+(~b[0].indexOf("%")?w/100*a.width:w),S=a.y+(~(b[1]||b[0]).indexOf("%")?S/100*a.height:S)),n||!1!==n&&c.smooth?(v=w-f,x=S-d,c.xOffset=p+(v*g+x*y)-v,c.yOffset=h+(v*m+x*_)-x):c.xOffset=c.yOffset=0,c.xOrigin=w,c.yOrigin=S,c.smooth=!!n,c.origin=e,c.originIsAbsolute=!!r,t.style[Jr]="0px 0px",o&&(hn(o,c,"xOrigin",f,w),hn(o,c,"yOrigin",d,S),hn(o,c,"xOffset",p,c.xOffset),hn(o,c,"yOffset",h,c.yOffset)),t.setAttribute("data-svg-origin",w+" "+S)},On=function(t,e){var r=t._gsap||new Ie(t);if("x"in r&&!e&&!r.uncache)return r;var n,i,o,a,s,u,c,l,f,d,p,h,g,m,y,_,v,b,w,S,T,k,q,A,M,E,O,C,P,z,D,L,R=t.style,I=r.scaleX<0,B="px",F="deg",Y=getComputedStyle(t),X=on(t,Jr)||"0";return n=i=o=u=c=l=f=d=p=0,a=s=1,r.svg=!(!t.getCTM||!dn(t)),Y.translate&&("none"===Y.translate&&"none"===Y.scale&&"none"===Y.rotate||(R[Zr]=("none"!==Y.translate?"translate3d("+(Y.translate+" 0 0").split(" ").slice(0,3).join(", ")+") ":"")+("none"!==Y.rotate?"rotate("+Y.rotate+") ":"")+("none"!==Y.scale?"scale("+Y.scale.split(" ").join(",")+") ":"")+Y[Zr]),R.scale=R.rotate=R.translate="none"),m=Mn(t,r.svg),r.svg&&(r.uncache?(M=t.getBBox(),X=r.xOrigin-M.x+"px "+(r.yOrigin-M.y)+"px",A=""):A=!e&&t.getAttribute("data-svg-origin"),En(t,A||X,!!A||r.originIsAbsolute,!1!==r.smooth,m)),h=r.xOrigin||0,g=r.yOrigin||0,m!==Tn&&(b=m[0],w=m[1],S=m[2],T=m[3],n=k=m[4],i=q=m[5],6===m.length?(a=Math.sqrt(b*b+w*w),s=Math.sqrt(T*T+S*S),u=b||w?Dr(w,b)*Pr:0,(f=S||T?Dr(S,T)*Pr+u:0)&&(s*=Math.abs(Math.cos(f*zr))),r.svg&&(n-=h-(h*b+g*S),i-=g-(h*w+g*T))):(L=m[6],z=m[7],O=m[8],C=m[9],P=m[10],D=m[11],n=m[12],i=m[13],o=m[14],c=(y=Dr(L,P))*Pr,y&&(A=k*(_=Math.cos(-y))+O*(v=Math.sin(-y)),M=q*_+C*v,E=L*_+P*v,O=k*-v+O*_,C=q*-v+C*_,P=L*-v+P*_,D=z*-v+D*_,k=A,q=M,L=E),l=(y=Dr(-S,P))*Pr,y&&(_=Math.cos(-y),D=T*(v=Math.sin(-y))+D*_,b=A=b*_-O*v,w=M=w*_-C*v,S=E=S*_-P*v),u=(y=Dr(w,b))*Pr,y&&(A=b*(_=Math.cos(y))+w*(v=Math.sin(y)),M=k*_+q*v,w=w*_-b*v,q=q*_-k*v,b=A,k=M),c&&Math.abs(c)+Math.abs(u)>359.9&&(c=u=0,l=180-l),a=ht(Math.sqrt(b*b+w*w+S*S)),s=ht(Math.sqrt(q*q+L*L)),y=Dr(k,q),f=Math.abs(y)>2e-4?y*Pr:0,p=D?1/(D<0?-D:D):0),r.svg&&(A=t.getAttribute("transform"),r.forceCSS=t.setAttribute("transform","")||!qn(on(t,Zr)),A&&t.setAttribute("transform",A))),Math.abs(f)>90&&Math.abs(f)<270&&(I?(a*=-1,f+=u<=0?180:-180,u+=u<=0?180:-180):(s*=-1,f+=f<=0?180:-180)),e=e||r.uncache,r.x=n-((r.xPercent=n&&(!e&&r.xPercent||(Math.round(t.offsetWidth/2)===Math.round(-n)?-50:0)))?t.offsetWidth*r.xPercent/100:0)+B,r.y=i-((r.yPercent=i&&(!e&&r.yPercent||(Math.round(t.offsetHeight/2)===Math.round(-i)?-50:0)))?t.offsetHeight*r.yPercent/100:0)+B,r.z=o+B,r.scaleX=ht(a),r.scaleY=ht(s),r.rotation=ht(u)+F,r.rotationX=ht(c)+F,r.rotationY=ht(l)+F,r.skewX=f+F,r.skewY=d+F,r.transformPerspective=p+B,(r.zOrigin=parseFloat(X.split(" ")[2])||0)&&(R[Jr]=Cn(X)),r.xOffset=r.yOffset=0,r.force3D=x.force3D,r.renderTransform=r.svg?Bn:Or?In:zn,r.uncache=0,r},Cn=function(t){return(t=t.split(" "))[0]+" "+t[1]},Pn=function(t,e,r){var n=Jt(e);return ht(parseFloat(e)+parseFloat(yn(t,"x",r+"px",n)))+n},zn=function(t,e){e.z="0px",e.rotationY=e.rotationX="0deg",e.force3D=0,In(t,e)},Dn="0deg",Ln="0px",Rn=") ",In=function(t,e){var r=e||this,n=r.xPercent,i=r.yPercent,o=r.x,a=r.y,s=r.z,u=r.rotation,c=r.rotationY,l=r.rotationX,f=r.skewX,d=r.skewY,p=r.scaleX,h=r.scaleY,g=r.transformPerspective,m=r.force3D,y=r.target,_=r.zOrigin,v="",x="auto"===m&&t&&1!==t||!0===m;if(_&&(l!==Dn||c!==Dn)){var b,w=parseFloat(c)*zr,S=Math.sin(w),T=Math.cos(w);w=parseFloat(l)*zr,b=Math.cos(w),o=Pn(y,o,S*b*-_),a=Pn(y,a,-Math.sin(w)*-_),s=Pn(y,s,T*b*-_+_)}g!==Ln&&(v+="perspective("+g+Rn),(n||i)&&(v+="translate("+n+"%, "+i+"%) "),(x||o!==Ln||a!==Ln||s!==Ln)&&(v+=s!==Ln||x?"translate3d("+o+", "+a+", "+s+") ":"translate("+o+", "+a+Rn),u!==Dn&&(v+="rotate("+u+Rn),c!==Dn&&(v+="rotateY("+c+Rn),l!==Dn&&(v+="rotateX("+l+Rn),f===Dn&&d===Dn||(v+="skew("+f+", "+d+Rn),1===p&&1===h||(v+="scale("+p+", "+h+Rn),y.style[Zr]=v||"translate(0, 0)"},Bn=function(t,e){var r,n,i,o,a,s=e||this,u=s.xPercent,c=s.yPercent,l=s.x,f=s.y,d=s.rotation,p=s.skewX,h=s.skewY,g=s.scaleX,m=s.scaleY,y=s.target,_=s.xOrigin,v=s.yOrigin,x=s.xOffset,b=s.yOffset,w=s.forceCSS,S=parseFloat(l),T=parseFloat(f);d=parseFloat(d),p=parseFloat(p),(h=parseFloat(h))&&(p+=h=parseFloat(h),d+=h),d||p?(d*=zr,p*=zr,r=Math.cos(d)*g,n=Math.sin(d)*g,i=Math.sin(d-p)*-m,o=Math.cos(d-p)*m,p&&(h*=zr,a=Math.tan(p-h),i*=a=Math.sqrt(1+a*a),o*=a,h&&(a=Math.tan(h),r*=a=Math.sqrt(1+a*a),n*=a)),r=ht(r),n=ht(n),i=ht(i),o=ht(o)):(r=g,o=m,n=i=0),(S&&!~(l+"").indexOf("px")||T&&!~(f+"").indexOf("px"))&&(S=yn(y,"x",l,"px"),T=yn(y,"y",f,"px")),(_||v||x||b)&&(S=ht(S+_-(_*r+v*i)+x),T=ht(T+v-(_*n+v*o)+b)),(u||c)&&(a=y.getBBox(),S=ht(S+u/100*a.width),T=ht(T+c/100*a.height)),a="matrix("+r+","+n+","+i+","+o+","+S+","+T+")",y.setAttribute("transform",a),w&&(y.style[Zr]=a)},Fn=function(t,e,r,n,i){var o,a,s=360,u=O(i),c=parseFloat(i)*(u&&~i.indexOf("rad")?Pr:1)-n,l=n+c+"deg";return u&&("short"===(o=i.split("_")[1])&&(c%=s)!=c%180&&(c+=c<0?s:-360),"cw"===o&&c<0?c=(c+36e9)%s-~~(c/s)*s:"ccw"===o&&c>0&&(c=(c-36e9)%s-~~(c/s)*s)),t._pt=a=new lr(t._pt,e,r,n,c,Yr),a.e=l,a.u="deg",t._props.push(r),a},Yn=function(t,e){for(var r in e)t[r]=e[r];return t},Xn=function(t,e,r){var n,i,o,a,s,u,c,l=Yn({},r._gsap),f=r.style;for(i in l.svg?(o=r.getAttribute("transform"),r.setAttribute("transform",""),f[Zr]=e,n=On(r,1),pn(r,Zr),r.setAttribute("transform",o)):(o=getComputedStyle(r)[Zr],f[Zr]=e,n=On(r,1),f[Zr]=o),Cr)(o=l[i])!==(a=n[i])&&"perspective,force3D,transformOrigin,svgOrigin".indexOf(i)<0&&(s=Jt(o)!==(c=Jt(a))?yn(r,i,o,c):parseFloat(o),u=parseFloat(a),t._pt=new lr(t._pt,n,i,s,u-s,Fr),t._pt.u=c||0,t._props.push(i));Yn(n,l)};pt("padding,margin,Width,Radius",(function(t,e){var r="Top",n="Right",i="Bottom",o="Left",a=(e<3?[r,n,i,o]:[r+o,r+n,i+n,i+o]).map((function(r){return e<2?t+r:"border"+r+t}));Sn[e>1?"border"+t:t]=function(t,e,r,n,i){var o,s;if(arguments.length<4)return o=a.map((function(e){return _n(t,e,r)})),5===(s=o.join(" ")).split(o[0]).length?o[0]:s;o=(n+"").split(" "),s={},a.forEach((function(t,e){return s[t]=o[e]=o[e]||o[(e-1)/2|0]})),t.init(e,s,i)}}));var Nn,Vn,Hn={name:"css",register:un,targetTest:function(t){return t.style&&t.nodeType},init:function(t,e,r,n,i){var o,a,s,u,c,l,f,d,p,h,g,m,y,_,v,b,w=this._props,S=t.style,T=r.vars.startAt;for(f in qr||un(),this.styles=this.styles||rn(t),b=this.styles.props,this.tween=r,e)if("autoRound"!==f&&(a=e[f],!ot[f]||!He(f,e,r,n,t,i)))if(c=typeof a,l=Sn[f],"function"===c&&(c=typeof(a=a.call(r,n,t,i))),"string"===c&&~a.indexOf("random(")&&(a=ce(a)),l)l(this,t,f,a,r)&&(v=1);else if("--"===f.substr(0,2))o=(getComputedStyle(t).getPropertyValue(f)+"").trim(),a+="",be.lastIndex=0,be.test(o)||(d=Jt(o),p=Jt(a)),p?d!==p&&(o=yn(t,f,o,p)+p):d&&(a+=d),this.add(S,"setProperty",o,a,n,i,0,0,f),w.push(f),b.push(f,S[f]);else if("undefined"!==c){if(T&&f in T?(o="function"==typeof T[f]?T[f].call(r,n,t,i):T[f],O(o)&&~o.indexOf("random(")&&(o=ce(o)),Jt(o+"")||(o+=x.units[f]||Jt(_n(t,f))||""),"="===(o+"").charAt(1)&&(o=_n(t,f))):o=_n(t,f),u=parseFloat(o),(h="string"===c&&"="===a.charAt(1)&&a.substr(0,2))&&(a=a.substr(2)),s=parseFloat(a),f in Br&&("autoAlpha"===f&&(1===u&&"hidden"===_n(t,"visibility")&&s&&(u=0),b.push("visibility",S.visibility),hn(this,S,"visibility",u?"inherit":"hidden",s?"inherit":"hidden",!s)),"scale"!==f&&"transform"!==f&&~(f=Br[f]).indexOf(",")&&(f=f.split(",")[0])),g=f in Cr)if(this.styles.save(f),m||((y=t._gsap).renderTransform&&!e.parseTransform||On(t,e.parseTransform),_=!1!==e.smoothOrigin&&y.smooth,(m=this._pt=new lr(this._pt,S,Zr,0,1,y.renderTransform,y,0,-1)).dep=1),"scale"===f)this._pt=new lr(this._pt,y,"scaleY",y.scaleY,(h?mt(y.scaleY,h+s):s)-y.scaleY||0,Fr),this._pt.u=0,w.push("scaleY",f),f+="X";else{if("transformOrigin"===f){b.push(Jr,S[Jr]),a=bn(a),y.svg?En(t,a,0,_,0,this):((p=parseFloat(a.split(" ")[2])||0)!==y.zOrigin&&hn(this,y,"zOrigin",y.zOrigin,p),hn(this,S,f,Cn(o),Cn(a)));continue}if("svgOrigin"===f){En(t,a,1,_,0,this);continue}if(f in kn){Fn(this,y,f,u,h?mt(u,h+a):a);continue}if("smoothOrigin"===f){hn(this,y,"smooth",y.smooth,a);continue}if("force3D"===f){y[f]=a;continue}if("transform"===f){Xn(this,a,t);continue}}else f in S||(f=sn(f)||f);if(g||(s||0===s)&&(u||0===u)&&!Ir.test(a)&&f in S)s||(s=0),(d=(o+"").substr((u+"").length))!==(p=Jt(a)||(f in x.units?x.units[f]:d))&&(u=yn(t,f,o,p)),this._pt=new lr(this._pt,g?y:S,f,u,(h?mt(u,h+s):s)-u,g||"px"!==p&&"zIndex"!==f||!1===e.autoRound?Fr:Nr),this._pt.u=p||0,d!==p&&"%"!==p&&(this._pt.b=o,this._pt.r=Xr);else if(f in S)vn.call(this,t,f,o,h?h+a:a);else{if(!(f in t)){Q(f,a);continue}this.add(t,f,o||t[f],h?h+a:a,n,i)}g||b.push(f,S[f]),w.push(f)}v&&cr(this)},render:function(t,e){if(e.tween._time||!Er())for(var r=e._pt;r;)r.r(t,r.d),r=r._next;else e.styles.revert()},get:_n,aliases:Br,getSetter:function(t,e,r){var n=Br[e];return n&&n.indexOf(",")<0&&(e=n),e in Cr&&e!==Jr&&(t._gsap.x||_n(t,"x"))?r&&Mr===r?"scale"===e?Gr:jr:(Mr=r||{})&&("scale"===e?$r:Qr):t.style&&!z(t.style[e])?Ur:~e.indexOf("-")?Wr:er(t,e)},core:{_removeProperty:pn,_getMatrix:Mn}};wr.utils.checkPrefix=sn,wr.core.getStyleSaver=rn,Vn=pt("x,y,z,scale,scaleX,scaleY,xPercent,yPercent"+","+(Nn="rotation,rotationX,rotationY,skewX,skewY")+",transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective",(function(t){Cr[t]=1})),pt(Nn,(function(t){x.units[t]="deg",kn[t]=1})),Br[Vn[13]]="x,y,z,scale,scaleX,scaleY,xPercent,yPercent,"+Nn,pt("0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY",(function(t){var e=t.split(":");Br[e[1]]=Vn[e[0]]})),pt("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective",(function(t){x.units[t]="px"})),wr.registerPlugin(Hn);var Un=wr.registerPlugin(Hn)||wr;function Wn(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}Un.core.Tween;var jn,Gn,$n,Qn,Zn,Jn,Kn,ti,ei,ri,ni,ii,oi=function(){return jn||"undefined"!=typeof window&&(jn=window.gsap)&&jn.registerPlugin&&jn},ai=1,si=[],ui=[],ci=[],li=Date.now,fi=function(t,e){return e},di=function(t,e){return~ci.indexOf(t)&&ci[ci.indexOf(t)+1][e]},pi=function(t){return!!~ri.indexOf(t)},hi=function(t,e,r,n,i){return t.addEventListener(e,r,{passive:!n,capture:!!i})},gi=function(t,e,r,n){return t.removeEventListener(e,r,!!n)},mi=function(){return ni&&ni.isPressed||ui.cache++},yi=function(t,e){var r=function r(n){if(n||0===n){ai&&($n.history.scrollRestoration="manual");var i=ni&&ni.isPressed;n=r.v=Math.round(n)||(ni&&ni.iOS?1:0),t(n),r.cacheID=ui.cache,i&&fi("ss",n)}else(e||ui.cache!==r.cacheID||fi("ref"))&&(r.cacheID=ui.cache,r.v=t());return r.v+r.offset};return r.offset=0,t&&r},_i={s:"scrollLeft",p:"left",p2:"Left",os:"right",os2:"Right",d:"width",d2:"Width",a:"x",sc:yi((function(t){return arguments.length?$n.scrollTo(t,vi.sc()):$n.pageXOffset||Qn.scrollLeft||Zn.scrollLeft||Jn.scrollLeft||0}))},vi={s:"scrollTop",p:"top",p2:"Top",os:"bottom",os2:"Bottom",d:"height",d2:"Height",a:"y",op:_i,sc:yi((function(t){return arguments.length?$n.scrollTo(_i.sc(),t):$n.pageYOffset||Qn.scrollTop||Zn.scrollTop||Jn.scrollTop||0}))},xi=function(t){return jn.utils.toArray(t)[0]||("string"==typeof t&&!1!==jn.config().nullTargetWarn?console.warn("Element not found:",t):null)},bi=function(t,e){var r=e.s,n=e.sc,i=ui.indexOf(t),o=n===vi.sc?1:2;return!~i&&(i=ui.push(t)-1),ui[i+o]||(ui[i+o]=yi(di(t,r),!0)||(pi(t)?n:yi((function(e){return arguments.length?t[r]=e:t[r]}))))},wi=function(t,e,r){var n=t,i=t,o=li(),a=o,s=e||50,u=Math.max(500,3*s),c=function(t,e){var u=li();e||u-o>s?(i=n,n=t,a=o,o=u):r?n+=t:n=i+(t-i)/(u-a)*(o-a)};return{update:c,reset:function(){i=n=r?0:n,a=o=0},getVelocity:function(t){var e=a,s=i,l=li();return(t||0===t)&&t!==n&&c(t),o===a||l-a>u?0:(n+(r?s:-s))/((r?l:o)-e)*1e3}}},Si=function(t,e){return e&&!t._gsapAllow&&t.preventDefault(),t.changedTouches?t.changedTouches[0]:t},Ti=function(t){var e=Math.max.apply(Math,t),r=Math.min.apply(Math,t);return Math.abs(e)>=Math.abs(r)?e:r},ki=function(){var t,e,r,n;(ei=jn.core.globals().ScrollTrigger)&&ei.core&&(t=ei.core,e=t.bridge||{},r=t._scrollers,n=t._proxies,r.push.apply(r,ui),n.push.apply(n,ci),ui=r,ci=n,fi=function(t,r){return e[t](r)})},qi=function(t){return(jn=t||oi())&&"undefined"!=typeof document&&document.body&&($n=window,Qn=document,Zn=Qn.documentElement,Jn=Qn.body,ri=[$n,Qn,Zn,Jn],jn.utils.clamp,ti="onpointerenter"in Jn?"pointer":"mouse",Kn=Ai.isTouch=$n.matchMedia&&$n.matchMedia("(hover: none), (pointer: coarse)").matches?1:"ontouchstart"in $n||navigator.maxTouchPoints>0||navigator.msMaxTouchPoints>0?2:0,ii=Ai.eventTypes=("ontouchstart"in Zn?"touchstart,touchmove,touchcancel,touchend":"onpointerdown"in Zn?"pointerdown,pointermove,pointercancel,pointerup":"mousedown,mousemove,mouseup,mouseup").split(","),setTimeout((function(){return ai=0}),500),ki(),Gn=1),Gn};_i.op=vi,ui.cache=0;var Ai=function(){function t(t){this.init(t)}var e,r;return t.prototype.init=function(t){Gn||qi(jn)||console.warn("Please gsap.registerPlugin(Observer)"),ei||ki();var e=t.tolerance,r=t.dragMinimum,n=t.type,i=t.target,o=t.lineHeight,a=t.debounce,s=t.preventDefault,u=t.onStop,c=t.onStopDelay,l=t.ignore,f=t.wheelSpeed,d=t.event,p=t.onDragStart,h=t.onDragEnd,g=t.onDrag,m=t.onPress,y=t.onRelease,_=t.onRight,v=t.onLeft,x=t.onUp,b=t.onDown,w=t.onChangeX,S=t.onChangeY,T=t.onChange,k=t.onToggleX,q=t.onToggleY,A=t.onHover,M=t.onHoverEnd,E=t.onMove,O=t.ignoreCheck,C=t.isNormalizer,P=t.onGestureStart,z=t.onGestureEnd,D=t.onWheel,L=t.onEnable,R=t.onDisable,I=t.onClick,B=t.scrollSpeed,F=t.capture,Y=t.allowClicks,X=t.lockAxis,N=t.onLockAxis;this.target=i=xi(i)||Zn,this.vars=t,l&&(l=jn.utils.toArray(l)),e=e||1e-9,r=r||0,f=f||1,B=B||1,n=n||"wheel,touch,pointer",a=!1!==a,o||(o=parseFloat($n.getComputedStyle(Jn).lineHeight)||22);var V,H,U,W,j,G,$,Q=this,Z=0,J=0,K=bi(i,_i),tt=bi(i,vi),et=K(),rt=tt(),nt=~n.indexOf("touch")&&!~n.indexOf("pointer")&&"pointerdown"===ii[0],it=pi(i),ot=i.ownerDocument||Qn,at=[0,0,0],st=[0,0,0],ut=0,ct=function(){return ut=li()},lt=function(t,e){return(Q.event=t)&&l&&~l.indexOf(t.target)||e&&nt&&"touch"!==t.pointerType||O&&O(t,e)},ft=function(){var t=Q.deltaX=Ti(at),r=Q.deltaY=Ti(st),n=Math.abs(t)>=e,i=Math.abs(r)>=e;T&&(n||i)&&T(Q,t,r,at,st),n&&(_&&Q.deltaX>0&&_(Q),v&&Q.deltaX<0&&v(Q),w&&w(Q),k&&Q.deltaX<0!=Z<0&&k(Q),Z=Q.deltaX,at[0]=at[1]=at[2]=0),i&&(b&&Q.deltaY>0&&b(Q),x&&Q.deltaY<0&&x(Q),S&&S(Q),q&&Q.deltaY<0!=J<0&&q(Q),J=Q.deltaY,st[0]=st[1]=st[2]=0),(W||U)&&(E&&E(Q),U&&(g(Q),U=!1),W=!1),G&&!(G=!1)&&N&&N(Q),j&&(D(Q),j=!1),V=0},dt=function(t,e,r){at[r]+=t,st[r]+=e,Q._vx.update(t),Q._vy.update(e),a?V||(V=requestAnimationFrame(ft)):ft()},pt=function(t,e){X&&!$&&(Q.axis=$=Math.abs(t)>Math.abs(e)?"x":"y",G=!0),"y"!==$&&(at[2]+=t,Q._vx.update(t,!0)),"x"!==$&&(st[2]+=e,Q._vy.update(e,!0)),a?V||(V=requestAnimationFrame(ft)):ft()},ht=function(t){if(!lt(t,1)){var e=(t=Si(t,s)).clientX,n=t.clientY,i=e-Q.x,o=n-Q.y,a=Q.isDragging;Q.x=e,Q.y=n,(a||Math.abs(Q.startX-e)>=r||Math.abs(Q.startY-n)>=r)&&(g&&(U=!0),a||(Q.isDragging=!0),pt(i,o),a||p&&p(Q))}},gt=Q.onPress=function(t){lt(t,1)||(Q.axis=$=null,H.pause(),Q.isPressed=!0,t=Si(t),Z=J=0,Q.startX=Q.x=t.clientX,Q.startY=Q.y=t.clientY,Q._vx.reset(),Q._vy.reset(),hi(C?i:ot,ii[1],ht,s,!0),Q.deltaX=Q.deltaY=0,m&&m(Q))},mt=function(t){if(!lt(t,1)){gi(C?i:ot,ii[1],ht,!0);var e=Q.isDragging&&(Math.abs(Q.x-Q.startX)>3||Math.abs(Q.y-Q.startY)>3),r=Si(t);e||(Q._vx.reset(),Q._vy.reset(),s&&Y&&jn.delayedCall(.08,(function(){if(li()-ut>300&&!t.defaultPrevented)if(t.target.click)t.target.click();else if(ot.createEvent){var e=ot.createEvent("MouseEvents");e.initMouseEvent("click",!0,!0,$n,1,r.screenX,r.screenY,r.clientX,r.clientY,!1,!1,!1,!1,0,null),t.target.dispatchEvent(e)}}))),Q.isDragging=Q.isGesturing=Q.isPressed=!1,u&&!C&&H.restart(!0),h&&e&&h(Q),y&&y(Q,e)}},yt=function(t){return t.touches&&t.touches.length>1&&(Q.isGesturing=!0)&&P(t,Q.isDragging)},_t=function(){return(Q.isGesturing=!1)||z(Q)},vt=function(t){if(!lt(t)){var e=K(),r=tt();dt((e-et)*B,(r-rt)*B,1),et=e,rt=r,u&&H.restart(!0)}},xt=function(t){if(!lt(t)){t=Si(t,s),D&&(j=!0);var e=(1===t.deltaMode?o:2===t.deltaMode?$n.innerHeight:1)*f;dt(t.deltaX*e,t.deltaY*e,0),u&&!C&&H.restart(!0)}},bt=function(t){if(!lt(t)){var e=t.clientX,r=t.clientY,n=e-Q.x,i=r-Q.y;Q.x=e,Q.y=r,W=!0,(n||i)&&pt(n,i)}},wt=function(t){Q.event=t,A(Q)},St=function(t){Q.event=t,M(Q)},Tt=function(t){return lt(t)||Si(t,s)&&I(Q)};H=Q._dc=jn.delayedCall(c||.25,(function(){Q._vx.reset(),Q._vy.reset(),H.pause(),u&&u(Q)})).pause(),Q.deltaX=Q.deltaY=0,Q._vx=wi(0,50,!0),Q._vy=wi(0,50,!0),Q.scrollX=K,Q.scrollY=tt,Q.isDragging=Q.isGesturing=Q.isPressed=!1,Q.enable=function(t){return Q.isEnabled||(hi(it?ot:i,"scroll",mi),n.indexOf("scroll")>=0&&hi(it?ot:i,"scroll",vt,s,F),n.indexOf("wheel")>=0&&hi(i,"wheel",xt,s,F),(n.indexOf("touch")>=0&&Kn||n.indexOf("pointer")>=0)&&(hi(i,ii[0],gt,s,F),hi(ot,ii[2],mt),hi(ot,ii[3],mt),Y&&hi(i,"click",ct,!1,!0),I&&hi(i,"click",Tt),P&&hi(ot,"gesturestart",yt),z&&hi(ot,"gestureend",_t),A&&hi(i,ti+"enter",wt),M&&hi(i,ti+"leave",St),E&&hi(i,ti+"move",bt)),Q.isEnabled=!0,t&&t.type&&gt(t),L&&L(Q)),Q},Q.disable=function(){Q.isEnabled&&(si.filter((function(t){return t!==Q&&pi(t.target)})).length||gi(it?ot:i,"scroll",mi),Q.isPressed&&(Q._vx.reset(),Q._vy.reset(),gi(C?i:ot,ii[1],ht,!0)),gi(it?ot:i,"scroll",vt,F),gi(i,"wheel",xt,F),gi(i,ii[0],gt,F),gi(ot,ii[2],mt),gi(ot,ii[3],mt),gi(i,"click",ct,!0),gi(i,"click",Tt),gi(ot,"gesturestart",yt),gi(ot,"gestureend",_t),gi(i,ti+"enter",wt),gi(i,ti+"leave",St),gi(i,ti+"move",bt),Q.isEnabled=Q.isPressed=Q.isDragging=!1,R&&R(Q))},Q.kill=function(){Q.disable();var t=si.indexOf(Q);t>=0&&si.splice(t,1),ni===Q&&(ni=0)},si.push(Q),C&&pi(i)&&(ni=Q),Q.enable(d)},e=t,(r=[{key:"velocityX",get:function(){return this._vx.getVelocity()}},{key:"velocityY",get:function(){return this._vy.getVelocity()}}])&&Wn(e.prototype,r),t}();Ai.version="3.11.1",Ai.create=function(t){return new Ai(t)},Ai.register=qi,Ai.getAll=function(){return si.slice()},Ai.getById=function(t){return si.filter((function(e){return e.vars.id===t}))[0]},oi()&&jn.registerPlugin(Ai);var Mi,Ei,Oi,Ci,Pi,zi,Di,Li,Ri,Ii,Bi,Fi,Yi,Xi,Ni,Vi,Hi,Ui,Wi,ji,Gi,$i,Qi,Zi,Ji,Ki,to,eo,ro,no,io,oo,ao=1,so=Date.now,uo=so(),co=0,lo=0,fo=function(){return Xi=1},po=function(){return Xi=0},ho=function(t){return t},go=function(t){return Math.round(1e5*t)/1e5||0},mo=function(){return"undefined"!=typeof window},yo=function(){return Mi||mo()&&(Mi=window.gsap)&&Mi.registerPlugin&&Mi},_o=function(t){return!!~Di.indexOf(t)},vo=function(t){return di(t,"getBoundingClientRect")||(_o(t)?function(){return Ta.width=Oi.innerWidth,Ta.height=Oi.innerHeight,Ta}:function(){return Fo(t)})},xo=function(t,e){var r=e.s,n=e.d2,i=e.d,o=e.a;return(r="scroll"+n)&&(o=di(t,r))?o()-vo(t)()[i]:_o(t)?(Pi[r]||zi[r])-(Oi["inner"+n]||Pi["client"+n]||zi["client"+n]):t[r]-t["offset"+n]},bo=function(t,e){for(var r=0;r<Wi.length;r+=3)(!e||~e.indexOf(Wi[r+1]))&&t(Wi[r],Wi[r+1],Wi[r+2])},wo=function(t){return"string"==typeof t},So=function(t){return"function"==typeof t},To=function(t){return"number"==typeof t},ko=function(t){return"object"==typeof t},qo=function(t,e,r){return t&&t.progress(e?0:1)&&r&&t.pause()},Ao=function(t,e){if(t.enabled){var r=e(t);r&&r.totalTime&&(t.callbackAnimation=r)}},Mo=Math.abs,Eo="right",Oo="bottom",Co="width",Po="height",zo="padding",Do="margin",Lo="Width",Ro="px",Io=function(t){return Oi.getComputedStyle(t)},Bo=function(t,e){for(var r in e)r in t||(t[r]=e[r]);return t},Fo=function(t,e){var r=e&&"matrix(1, 0, 0, 1, 0, 0)"!==Io(t)[Ni]&&Mi.to(t,{x:0,y:0,xPercent:0,yPercent:0,rotation:0,rotationX:0,rotationY:0,scale:1,skewX:0,skewY:0}).progress(1),n=t.getBoundingClientRect();return r&&r.progress(0).kill(),n},Yo=function(t,e){var r=e.d2;return t["offset"+r]||t["client"+r]||0},Xo=function(t){var e,r=[],n=t.labels,i=t.duration();for(e in n)r.push(n[e]/i);return r},No=function(t){var e=Mi.utils.snap(t),r=Array.isArray(t)&&t.slice(0).sort((function(t,e){return t-e}));return r?function(t,n,i){var o;if(void 0===i&&(i=.001),!n)return e(t);if(n>0){for(t-=i,o=0;o<r.length;o++)if(r[o]>=t)return r[o];return r[o-1]}for(o=r.length,t+=i;o--;)if(r[o]<=t)return r[o];return r[0]}:function(r,n,i){void 0===i&&(i=.001);var o=e(r);return!n||Math.abs(o-r)<i||o-r<0==n<0?o:e(n<0?r-t:r+t)}},Vo=function(t,e,r,n){return r.split(",").forEach((function(r){return t(e,r,n)}))},Ho=function(t,e,r,n,i){return t.addEventListener(e,r,{passive:!n,capture:!!i})},Uo=function(t,e,r,n){return t.removeEventListener(e,r,!!n)},Wo=function(t,e,r){return r&&r.wheelHandler&&t(e,"wheel",r)},jo={startColor:"green",endColor:"red",indent:0,fontSize:"16px",fontWeight:"normal"},Go={toggleActions:"play",anticipatePin:0},$o={top:0,left:0,center:.5,bottom:1,right:1},Qo=function(t,e){if(wo(t)){var r=t.indexOf("="),n=~r?+(t.charAt(r-1)+1)*parseFloat(t.substr(r+1)):0;~r&&(t.indexOf("%")>r&&(n*=e/100),t=t.substr(0,r-1)),t=n+(t in $o?$o[t]*e:~t.indexOf("%")?parseFloat(t)*e/100:parseFloat(t)||0)}return t},Zo=function(t,e,r,n,i,o,a,s){var u=i.startColor,c=i.endColor,l=i.fontSize,f=i.indent,d=i.fontWeight,p=Ci.createElement("div"),h=_o(r)||"fixed"===di(r,"pinType"),g=-1!==t.indexOf("scroller"),m=h?zi:r,y=-1!==t.indexOf("start"),_=y?u:c,v="border-color:"+_+";font-size:"+l+";color:"+_+";font-weight:"+d+";pointer-events:none;white-space:nowrap;font-family:sans-serif,Arial;z-index:1000;padding:4px 8px;border-width:0;border-style:solid;";return v+="position:"+((g||s)&&h?"fixed;":"absolute;"),(g||s||!h)&&(v+=(n===vi?Eo:Oo)+":"+(o+parseFloat(f))+"px;"),a&&(v+="box-sizing:border-box;text-align:left;width:"+a.offsetWidth+"px;"),p._isStart=y,p.setAttribute("class","gsap-marker-"+t+(e?" marker-"+e:"")),p.style.cssText=v,p.innerText=e||0===e?t+"-"+e:t,m.children[0]?m.insertBefore(p,m.children[0]):m.appendChild(p),p._offset=p["offset"+n.op.d2],Jo(p,0,n,y),p},Jo=function(t,e,r,n){var i={display:"block"},o=r[n?"os2":"p2"],a=r[n?"p2":"os2"];t._isFlipped=n,i[r.a+"Percent"]=n?-100:0,i[r.a]=n?"1px":0,i["border"+o+Lo]=1,i["border"+a+Lo]=0,i[r.p]=e+"px",Mi.set(t,i)},Ko=[],ta={},ea=function(){return so()-co>34&&ya()},ra=function(){(!Qi||!Qi.isPressed||Qi.startX>zi.clientWidth)&&(ui.cache++,no||(no=requestAnimationFrame(ya)),co||ua("scrollStart"),co=so())},na=function(){Ki=Oi.innerWidth,Ji=Oi.innerHeight},ia=function(){ui.cache++,!Yi&&!$i&&!Ci.fullscreenElement&&!Ci.webkitFullscreenElement&&(!Zi||Ki!==Oi.innerWidth||Math.abs(Oi.innerHeight-Ji)>.25*Oi.innerHeight)&&Li.restart(!0)},oa={},aa=[],sa=function t(){return Uo(Ea,"scrollEnd",t)||ha(!0)},ua=function(t){return oa[t]&&oa[t].map((function(t){return t()}))||aa},ca=[],la=function(t){for(var e=0;e<ca.length;e+=5)(!t||ca[e+4]&&ca[e+4].query===t)&&(ca[e].style.cssText=ca[e+1],ca[e].getBBox&&ca[e].setAttribute("transform",ca[e+2]||""),ca[e+3].uncache=1)},fa=function(t,e){var r;for(Vi=0;Vi<Ko.length;Vi++)!(r=Ko[Vi])||e&&r._ctx!==e||(t?r.kill(1):r.revert(!0,!0));e&&la(e),e||ua("revert")},da=function(){return ui.cache++&&ui.forEach((function(t){return"function"==typeof t&&(t.rec=0)}))},pa=0,ha=function(t,e){if(!co||t){io=!0;var r=ua("refreshInit");ji&&Ea.sort(),e||fa(),Ko.slice(0).forEach((function(t){return t.refresh()})),Ko.forEach((function(t){return"max"===t.vars.end&&t.setPositions(t.start,Math.max(t.start+1,xo(t.scroller,t._dir)))})),r.forEach((function(t){return t&&t.render&&t.render(-1)})),ui.forEach((function(t){return"function"==typeof t&&t(t.rec)})),da(),Li.pause(),pa++,io=!1,ua("refresh")}else Ho(Ea,"scrollEnd",sa)},ga=0,ma=1,ya=function(){if(!io){Ea.isUpdating=!0,oo&&oo.update(0);var t=Ko.length,e=so(),r=e-uo>=50,n=t&&Ko[0].scroll();if(ma=ga>n?-1:1,ga=n,r&&(co&&!Xi&&e-co>200&&(co=0,ua("scrollEnd")),Bi=uo,uo=e),ma<0){for(Vi=t;Vi-- >0;)Ko[Vi]&&Ko[Vi].update(0,r);ma=1}else for(Vi=0;Vi<t;Vi++)Ko[Vi]&&Ko[Vi].update(0,r);Ea.isUpdating=!1}no=0},_a=["left","top",Oo,Eo,"marginBottom","marginRight","marginTop","marginLeft","display","flexShrink","float","zIndex","gridColumnStart","gridColumnEnd","gridRowStart","gridRowEnd","gridArea","justifySelf","alignSelf","placeSelf","order"],va=_a.concat([Co,Po,"boxSizing","maxWidth","maxHeight","position",Do,zo,"paddingTop","paddingRight","paddingBottom","paddingLeft"]),xa=function(t,e,r,n){if(!t._gsap.swappedIn){for(var i,o=_a.length,a=e.style,s=t.style;o--;)a[i=_a[o]]=r[i];a.position="absolute"===r.position?"absolute":"relative","inline"===r.display&&(a.display="inline-block"),s.bottom=s.right="auto",a.flexBasis=r.flexBasis||"auto",a.overflow="visible",a.boxSizing="border-box",a.width=Yo(t,_i)+Ro,a.height=Yo(t,vi)+Ro,a.padding=s.margin=s.top=s.left="0",wa(n),s.width=s.maxWidth=r.width,s.height=s.maxHeight=r.height,s.padding=r.padding,t.parentNode!==e&&(t.parentNode.insertBefore(e,t),e.appendChild(t)),t._gsap.swappedIn=!0}},ba=/([A-Z])/g,wa=function(t){if(t){var e,r,n=t.t.style,i=t.length,o=0;for((t.t._gsap||Mi.core.getCache(t.t)).uncache=1;o<i;o+=2)r=t[o+1],e=t[o],r?n[e]=r:n[e]&&n.removeProperty(e.replace(ba,"-$1").toLowerCase())}},Sa=function(t){for(var e=va.length,r=t.style,n=[],i=0;i<e;i++)n.push(va[i],r[va[i]]);return n.t=t,n},Ta={left:0,top:0},ka=function(t,e,r,n,i,o,a,s,u,c,l,f,d){So(t)&&(t=t(s)),wo(t)&&"max"===t.substr(0,3)&&(t=f+("="===t.charAt(4)?Qo("0"+t.substr(3),r):0));var p,h,g,m=d?d.time():0;if(d&&d.seek(0),To(t))a&&Jo(a,r,n,!0);else{So(e)&&(e=e(s));var y,_,v,x,b=(t||"0").split(" ");g=xi(e)||zi,(y=Fo(g)||{})&&(y.left||y.top)||"none"!==Io(g).display||(x=g.style.display,g.style.display="block",y=Fo(g),x?g.style.display=x:g.style.removeProperty("display")),_=Qo(b[0],y[n.d]),v=Qo(b[1]||"0",r),t=y[n.p]-u[n.p]-c+_+i-v,a&&Jo(a,v,n,r-v<20||a._isStart&&v>20),r-=r-v}if(o){var w=t+r,S=o._isStart;p="scroll"+n.d2,Jo(o,w,n,S&&w>20||!S&&(l?Math.max(zi[p],Pi[p]):o.parentNode[p])<=w+1),l&&(u=Fo(a),l&&(o.style[n.op.p]=u[n.op.p]-n.op.m-o._offset+Ro))}return d&&g&&(p=Fo(g),d.seek(f),h=Fo(g),d._caScrollDist=p[n.p]-h[n.p],t=t/d._caScrollDist*f),d&&d.seek(m),d?t:Math.round(t)},qa=/(webkit|moz|length|cssText|inset)/i,Aa=function(t,e,r,n){if(t.parentNode!==e){var i,o,a=t.style;if(e===zi){for(i in t._stOrig=a.cssText,o=Io(t))+i||qa.test(i)||!o[i]||"string"!=typeof a[i]||"0"===i||(a[i]=o[i]);a.top=r,a.left=n}else a.cssText=t._stOrig;Mi.core.getCache(t).uncache=1,e.appendChild(t)}},Ma=function(t,e){var r,n,i=bi(t,e),o="_scroll"+e.p2,a=function e(a,s,u,c,l){var f=e.tween,d=s.onComplete,p={};return u=u||i(),l=c&&l||0,c=c||a-u,f&&f.kill(),r=Math.round(u),s[o]=a,s.modifiers=p,p[o]=function(t){return(t=Math.round(i()))!==r&&t!==n&&Math.abs(t-r)>3&&Math.abs(t-n)>3?(f.kill(),e.tween=0):t=u+c*f.ratio+l*f.ratio*f.ratio,n=r,r=Math.round(t)},s.onComplete=function(){e.tween=0,d&&d.call(f)},f=e.tween=Mi.to(t,s)};return t[o]=i,i.wheelHandler=function(){return a.tween&&a.tween.kill()&&(a.tween=0)},Ho(t,"wheel",i.wheelHandler),a},Ea=function(){function t(e,r){Ei||t.register(Mi)||console.warn("Please gsap.registerPlugin(ScrollTrigger)"),this.init(e,r)}return t.prototype.init=function(e,r){if(this.progress=this.start=0,this.vars&&this.kill(!0,!0),lo){var n,i,o,a,s,u,c,l,f,d,p,h,g,m,y,_,v,x,b,w,S,T,k,q,A,M,E,O,C,P,z,D,L,R,I,B,F,Y,X,N,V,H=e=Bo(wo(e)||To(e)||e.nodeType?{trigger:e}:e,Go),U=H.onUpdate,W=H.toggleClass,j=H.id,G=H.onToggle,$=H.onRefresh,Q=H.scrub,Z=H.trigger,J=H.pin,K=H.pinSpacing,tt=H.invalidateOnRefresh,et=H.anticipatePin,rt=H.onScrubComplete,nt=H.onSnapComplete,it=H.once,ot=H.snap,at=H.pinReparent,st=H.pinSpacer,ut=H.containerAnimation,ct=H.fastScrollEnd,lt=H.preventOverlaps,ft=e.horizontal||e.containerAnimation&&!1!==e.horizontal?_i:vi,dt=!Q&&0!==Q,pt=xi(e.scroller||Oi),ht=Mi.core.getCache(pt),gt=_o(pt),mt="fixed"===("pinType"in e?e.pinType:di(pt,"pinType")||gt&&"fixed"),yt=[e.onEnter,e.onLeave,e.onEnterBack,e.onLeaveBack],_t=dt&&e.toggleActions.split(" "),vt="markers"in e?e.markers:Go.markers,xt=gt?0:parseFloat(Io(pt)["border"+ft.p2+Lo])||0,bt=this,wt=e.onRefreshInit&&function(){return e.onRefreshInit(bt)},St=function(t,e,r){var n=r.d,i=r.d2,o=r.a;return(o=di(t,"getBoundingClientRect"))?function(){return o()[n]}:function(){return(e?Oi["inner"+i]:t["client"+i])||0}}(pt,gt,ft),Tt=function(t,e){return!e||~ci.indexOf(t)?vo(t):function(){return Ta}}(pt,gt),kt=0,qt=0,At=bi(pt,ft);if(eo(bt),bt._dir=ft,et*=45,bt.scroller=pt,bt.scroll=ut?ut.time.bind(ut):At,a=At(),bt.vars=e,r=r||e.animation,"refreshPriority"in e&&(ji=1,-9999===e.refreshPriority&&(oo=bt)),ht.tweenScroll=ht.tweenScroll||{top:Ma(pt,vi),left:Ma(pt,_i)},bt.tweenTo=n=ht.tweenScroll[ft.p],bt.scrubDuration=function(t){(z=To(t)&&t)?P?P.duration(t):P=Mi.to(r,{ease:"expo",totalProgress:"+=0.001",duration:z,paused:!0,onComplete:function(){return rt&&rt(bt)}}):(P&&P.progress(1).kill(),P=0)},r&&(r.vars.lazy=!1,r._initted||!1!==r.vars.immediateRender&&!1!==e.immediateRender&&r.render(0,!0,!0),bt.animation=r.pause(),r.scrollTrigger=bt,bt.scrubDuration(Q),O=0,j||(j=r.vars.id)),Ko.push(bt),ot&&(ko(ot)&&!ot.push||(ot={snapTo:ot}),"scrollBehavior"in zi.style&&Mi.set(gt?[zi,Pi]:pt,{scrollBehavior:"auto"}),o=So(ot.snapTo)?ot.snapTo:"labels"===ot.snapTo?function(t){return function(e){return Mi.utils.snap(Xo(t),e)}}(r):"labelsDirectional"===ot.snapTo?(X=r,function(t,e){return No(Xo(X))(t,e.direction)}):!1!==ot.directional?function(t,e){return No(ot.snapTo)(t,so()-qt<500?0:e.direction)}:Mi.utils.snap(ot.snapTo),D=ot.duration||{min:.1,max:2},D=ko(D)?Ii(D.min,D.max):Ii(D,D),L=Mi.delayedCall(ot.delay||z/2||.1,(function(){var t=At(),e=so()-qt<500,i=n.tween;if(!(e||Math.abs(bt.getVelocity())<10)||i||Xi||kt===t)bt.isActive&&kt!==t&&L.restart(!0);else{var a=(t-u)/g,s=r&&!dt?r.totalProgress():a,l=e?0:(s-C)/(so()-Bi)*1e3||0,f=Mi.utils.clamp(-a,1-a,Mo(l/2)*l/.185),d=a+(!1===ot.inertia?0:f),p=Ii(0,1,o(d,bt)),h=Math.round(u+p*g),m=ot,y=m.onStart,_=m.onInterrupt,v=m.onComplete;if(t<=c&&t>=u&&h!==t){if(i&&!i._initted&&i.data<=Mo(h-t))return;!1===ot.inertia&&(f=p-a),n(h,{duration:D(Mo(.185*Math.max(Mo(d-s),Mo(p-s))/l/.05||0)),ease:ot.ease||"power3",data:Mo(h-t),onInterrupt:function(){return L.restart(!0)&&_&&_(bt)},onComplete:function(){bt.update(),kt=At(),O=C=r&&!dt?r.totalProgress():bt.progress,nt&&nt(bt),v&&v(bt)}},t,f*g,h-t-f*g),y&&y(bt,n.tween)}}})).pause()),j&&(ta[j]=bt),(Y=(Z=bt.trigger=xi(Z||J))&&Z._gsap&&Z._gsap.stRevert)&&(Y=Y(bt)),J=!0===J?Z:xi(J),wo(W)&&(W={targets:Z,className:W}),J&&(!1===K||K===Do||(K=!(!K&&"flex"===Io(J.parentNode).display)&&zo),bt.pin=J,!1!==e.force3D&&Mi.set(J,{force3D:!0}),(i=Mi.core.getCache(J)).spacer?m=i.pinState:(st&&((st=xi(st))&&!st.nodeType&&(st=st.current||st.nativeElement),i.spacerIsNative=!!st,st&&(i.spacerState=Sa(st))),i.spacer=v=st||Ci.createElement("div"),v.classList.add("pin-spacer"),j&&v.classList.add("pin-spacer-"+j),i.pinState=m=Sa(J)),bt.spacer=v=i.spacer,E=Io(J),k=E[K+ft.os2],b=Mi.getProperty(J),w=Mi.quickSetter(J,ft.a,Ro),xa(J,v,E),_=Sa(J)),vt){h=ko(vt)?Bo(vt,jo):jo,d=Zo("scroller-start",j,pt,ft,h,0),p=Zo("scroller-end",j,pt,ft,h,0,d),x=d["offset"+ft.op.d2];var Mt=xi(di(pt,"content")||pt);l=this.markerStart=Zo("start",j,Mt,ft,h,x,0,ut),f=this.markerEnd=Zo("end",j,Mt,ft,h,x,0,ut),ut&&(F=Mi.quickSetter([l,f],ft.a,Ro)),mt||ci.length&&!0===di(pt,"fixedMarkers")||(V=Io(N=gt?zi:pt).position,N.style.position="absolute"===V||"fixed"===V?V:"relative",Mi.set([d,p],{force3D:!0}),A=Mi.quickSetter(d,ft.a,Ro),M=Mi.quickSetter(p,ft.a,Ro))}if(ut){var Et=ut.vars.onUpdate,Ot=ut.vars.onUpdateParams;ut.eventCallback("onUpdate",(function(){bt.update(0,0,1),Et&&Et.apply(Ot||[])}))}bt.previous=function(){return Ko[Ko.indexOf(bt)-1]},bt.next=function(){return Ko[Ko.indexOf(bt)+1]},bt.revert=function(t,e){if(!e)return bt.kill(!0);var n=!1!==t||!bt.enabled,i=Yi;n!==bt.isReverted&&(n&&(bt.scroll.rec||!Yi&&!io||(bt.scroll.rec=At(),io&&At(0)),I=Math.max(At(),bt.scroll.rec||0),R=bt.progress,B=r&&r.progress()),l&&[l,f,d,p].forEach((function(t){return t.style.display=n?"none":"block"})),n&&(Yi=1),bt.update(n),Yi=i,J&&(n?function(t,e,r){wa(r);var n=t._gsap;if(n.spacerIsNative)wa(n.spacerState);else if(t._gsap.swappedIn){var i=e.parentNode;i&&(i.insertBefore(t,e),i.removeChild(e))}t._gsap.swappedIn=!1}(J,v,m):(!at||!bt.isActive)&&xa(J,v,Io(J),q)),bt.isReverted=n)},bt.refresh=function(i,o){if(!Yi&&bt.enabled||o)if(J&&i&&co)Ho(t,"scrollEnd",sa);else{!io&&wt&&wt(bt),Yi=1,qt=so(),n.tween&&(n.tween.kill(),n.tween=0),P&&P.pause(),tt&&r&&r.revert().invalidate(),bt.isReverted||bt.revert(!0,!0);for(var h,x,w,k,A,M,E,O,C,z,D=St(),F=Tt(),Y=ut?ut.duration():xo(pt,ft),X=0,N=0,V=e.end,H=e.endTrigger||Z,U=e.start||(0!==e.start&&Z?J?"0 0":"0 100%":0),W=bt.pinnedContainer=e.pinnedContainer&&xi(e.pinnedContainer),j=Z&&Math.max(0,Ko.indexOf(bt))||0,G=j;G--;)(M=Ko[G]).end||M.refresh(0,1)||(Yi=1),!(E=M.pin)||E!==Z&&E!==J||M.isReverted||(z||(z=[]),z.unshift(M),M.revert(!0,!0)),M!==Ko[G]&&(j--,G--);for(So(U)&&(U=U(bt)),u=ka(U,Z,D,ft,At(),l,d,bt,F,xt,mt,Y,ut)||(J?-.001:0),So(V)&&(V=V(bt)),wo(V)&&!V.indexOf("+=")&&(~V.indexOf(" ")?V=(wo(U)?U.split(" ")[0]:"")+V:(X=Qo(V.substr(2),D),V=wo(U)?U:u+X,H=Z)),c=Math.max(u,ka(V||(H?"100% 0":Y),H,D,ft,At()+X,f,p,bt,F,xt,mt,Y,ut))||-.001,g=c-u||(u-=.01)&&.001,X=0,G=j;G--;)(E=(M=Ko[G]).pin)&&M.start-M._pinPush<u&&!ut&&M.end>0&&(h=M.end-M.start,E!==Z&&E!==W||To(U)||(X+=h*(1-M.progress)),E===J&&(N+=h));if(u+=X,c+=X,bt._pinPush=N,l&&X&&((h={})[ft.a]="+="+X,W&&(h[ft.p]="-="+At()),Mi.set([l,f],h)),J)h=Io(J),k=ft===vi,w=At(),S=parseFloat(b(ft.a))+N,!Y&&c>1&&((gt?zi:pt).style["overflow-"+ft.a]="scroll"),xa(J,v,h),_=Sa(J),x=Fo(J,!0),O=mt&&bi(pt,k?_i:vi)(),K&&((q=[K+ft.os2,g+N+Ro]).t=v,(G=K===zo?Yo(J,ft)+g+N:0)&&q.push(ft.d,G+Ro),wa(q),mt&&At(I)),mt&&((A={top:x.top+(k?w-u:O)+Ro,left:x.left+(k?O:w-u)+Ro,boxSizing:"border-box",position:"fixed"}).width=A.maxWidth=Math.ceil(x.width)+Ro,A.height=A.maxHeight=Math.ceil(x.height)+Ro,A.margin=A.marginTop=A.marginRight=A.marginBottom=A.marginLeft="0",A.padding=h.padding,A.paddingTop=h.paddingTop,A.paddingRight=h.paddingRight,A.paddingBottom=h.paddingBottom,A.paddingLeft=h.paddingLeft,y=function(t,e,r){for(var n,i=[],o=t.length,a=r?8:0;a<o;a+=2)n=t[a],i.push(n,n in e?e[n]:t[a+1]);return i.t=t.t,i}(m,A,at),io&&At(0)),r?(C=r._initted,Gi(1),r.render(r.duration(),!0,!0),T=b(ft.a)-S+g+N,g!==T&&mt&&y.splice(y.length-2,2),r.render(0,!0,!0),C||r.invalidate(),Gi(0)):T=g;else if(Z&&At()&&!ut)for(x=Z.parentNode;x&&x!==zi;)x._pinOffset&&(u-=x._pinOffset,c-=x._pinOffset),x=x.parentNode;z&&z.forEach((function(t){return t.revert(!1,!0)})),bt.start=u,bt.end=c,a=s=At(),ut||io||(a<I&&At(I),bt.scroll.rec=0),bt.revert(!1,!0),L&&(kt=-1,bt.isActive&&At(u+g*R),L.restart(!0)),Yi=0,r&&dt&&(r._initted||B)&&r.progress()!==B&&r.progress(B,!0).render(r.time(),!0,!0),(R!==bt.progress||ut)&&(r&&!dt&&r.totalProgress(R,!0),bt.progress=(a-u)/g===R?0:R,bt.update(0,0,1)),J&&K&&(v._pinOffset=Math.round(bt.progress*T)),$&&$(bt)}},bt.getVelocity=function(){return(At()-s)/(so()-Bi)*1e3||0},bt.endAnimation=function(){qo(bt.callbackAnimation),r&&(P?P.progress(1):r.paused()?dt||qo(r,bt.direction<0,1):qo(r,r.reversed()))},bt.labelToScroll=function(t){return r&&r.labels&&(u||bt.refresh()||u)+r.labels[t]/r.duration()*g||0},bt.getTrailing=function(t){var e=Ko.indexOf(bt),r=bt.direction>0?Ko.slice(0,e).reverse():Ko.slice(e+1);return(wo(t)?r.filter((function(e){return e.vars.preventOverlaps===t})):r).filter((function(t){return bt.direction>0?t.end<=u:t.start>=c}))},bt.update=function(t,e,i){if(!ut||i||t){var o,l,f,p,h,m,x,b=bt.scroll(),q=t?0:(b-u)/g,E=q<0?0:q>1?1:q||0,z=bt.progress;if(e&&(s=a,a=ut?At():b,ot&&(C=O,O=r&&!dt?r.totalProgress():E)),et&&!E&&J&&!Yi&&!ao&&co&&u<b+(b-s)/(so()-Bi)*et&&(E=1e-4),E!==z&&bt.enabled){if(p=(h=(o=bt.isActive=!!E&&E<1)!=(!!z&&z<1))||!!E!=!!z,bt.direction=E>z?1:-1,bt.progress=E,p&&!Yi&&(l=E&&!z?0:1===E?1:1===z?2:3,dt&&(f=!h&&"none"!==_t[l+1]&&_t[l+1]||_t[l],x=r&&("complete"===f||"reset"===f||f in r))),lt&&(h||x)&&(x||Q||!r)&&(So(lt)?lt(bt):bt.getTrailing(lt).forEach((function(t){return t.endAnimation()}))),dt||(!P||Yi||ao?r&&r.totalProgress(E,!!Yi):((ut||oo&&oo!==bt)&&P.render(P._dp._time-P._start),P.resetTo?P.resetTo("totalProgress",E,r._tTime/r._tDur):(P.vars.totalProgress=E,P.invalidate().restart()))),J)if(t&&K&&(v.style[K+ft.os2]=k),mt){if(p){if(m=!t&&E>z&&c+1>b&&b+1>=xo(pt,ft),at)if(t||!o&&!m)Aa(J,v);else{var D=Fo(J,!0),R=b-u;Aa(J,zi,D.top+(ft===vi?R:0)+Ro,D.left+(ft===vi?0:R)+Ro)}wa(o||m?y:_),T!==g&&E<1&&o||w(S+(1!==E||m?0:T))}}else w(go(S+T*E));ot&&!n.tween&&!Yi&&!ao&&L.restart(!0),W&&(h||it&&E&&(E<1||!ro))&&Ri(W.targets).forEach((function(t){return t.classList[o||it?"add":"remove"](W.className)})),U&&!dt&&!t&&U(bt),p&&!Yi?(dt&&(x&&("complete"===f?r.pause().totalProgress(1):"reset"===f?r.restart(!0).pause():"restart"===f?r.restart(!0):r[f]()),U&&U(bt)),!h&&ro||(G&&h&&Ao(bt,G),yt[l]&&Ao(bt,yt[l]),it&&(1===E?bt.kill(!1,1):yt[l]=0),h||yt[l=1===E?1:3]&&Ao(bt,yt[l])),ct&&!o&&Math.abs(bt.getVelocity())>(To(ct)?ct:2500)&&(qo(bt.callbackAnimation),P?P.progress(1):qo(r,"reverse"===f?1:!E,1))):dt&&U&&!Yi&&U(bt)}if(M){var I=ut?b/ut.duration()*(ut._caScrollDist||0):b;A(I+(d._isFlipped?1:0)),M(I)}F&&F(-b/ut.duration()*(ut._caScrollDist||0))}},bt.enable=function(e,r){bt.enabled||(bt.enabled=!0,Ho(pt,"resize",ia),Ho(gt?Ci:pt,"scroll",ra),wt&&Ho(t,"refreshInit",wt),!1!==e&&(bt.progress=R=0,a=s=kt=At()),!1!==r&&bt.refresh())},bt.getTween=function(t){return t&&n?n.tween:P},bt.setPositions=function(t,e){J&&(S+=t-u,T+=e-t-g),bt.start=u=t,bt.end=c=e,g=e-t,bt.update()},bt.disable=function(e,r){if(bt.enabled&&(!1!==e&&bt.revert(!0,!0),bt.enabled=bt.isActive=!1,r||P&&P.pause(),I=0,i&&(i.uncache=1),wt&&Uo(t,"refreshInit",wt),L&&(L.pause(),n.tween&&n.tween.kill()&&(n.tween=0)),!gt)){for(var o=Ko.length;o--;)if(Ko[o].scroller===pt&&Ko[o]!==bt)return;Uo(pt,"resize",ia),Uo(pt,"scroll",ra)}},bt.kill=function(t,n){bt.disable(t,n),P&&!n&&P.kill(),j&&delete ta[j];var o=Ko.indexOf(bt);o>=0&&Ko.splice(o,1),o===Vi&&ma>0&&Vi--,o=0,Ko.forEach((function(t){return t.scroller===bt.scroller&&(o=1)})),o||io||(bt.scroll.rec=0),r&&(r.scrollTrigger=null,t&&r.render(-1),n||r.kill()),l&&[l,f,d,p].forEach((function(t){return t.parentNode&&t.parentNode.removeChild(t)})),oo===bt&&(oo=0),J&&(i&&(i.uncache=1),o=0,Ko.forEach((function(t){return t.pin===J&&o++})),o||(i.spacer=0)),e.onKill&&e.onKill(bt)},bt.enable(!1,!1),Y&&Y(bt),r&&r.add&&!g?Mi.delayedCall(.01,(function(){return u||c||bt.refresh()}))&&(g=.01)&&(u=c=0):bt.refresh()}else this.update=this.refresh=this.kill=ho},t.register=function(e){return Ei||(Mi=e||yo(),mo()&&window.document&&t.enable(),Ei=lo),Ei},t.defaults=function(t){if(t)for(var e in t)Go[e]=t[e];return Go},t.disable=function(t,e){lo=0,Ko.forEach((function(r){return r[e?"kill":"disable"](t)})),Uo(Oi,"wheel",ra),Uo(Ci,"scroll",ra),clearInterval(Fi),Uo(Ci,"touchcancel",ho),Uo(zi,"touchstart",ho),Vo(Uo,Ci,"pointerdown,touchstart,mousedown",fo),Vo(Uo,Ci,"pointerup,touchend,mouseup",po),Li.kill(),bo(Uo);for(var r=0;r<ui.length;r+=3)Wo(Uo,ui[r],ui[r+1]),Wo(Uo,ui[r],ui[r+2])},t.enable=function(){if(Oi=window,Ci=document,Pi=Ci.documentElement,zi=Ci.body,Mi&&(Ri=Mi.utils.toArray,Ii=Mi.utils.clamp,eo=Mi.core.context||ho,Gi=Mi.core.suppressOverwrites||ho,Mi.core.globals("ScrollTrigger",t),zi)){lo=1,Ai.register(Mi),t.isTouch=Ai.isTouch,to=Ai.isTouch&&/(iPad|iPhone|iPod|Mac)/g.test(navigator.userAgent),Ho(Oi,"wheel",ra),Di=[Oi,Ci,Pi,zi],Mi.matchMedia?(t.matchMedia=function(t){var e,r=Mi.matchMedia();for(e in t)r.add(e,t[e]);return r},Mi.addEventListener("matchMediaInit",(function(){return fa()})),Mi.addEventListener("matchMediaRevert",(function(){return la()})),Mi.addEventListener("matchMedia",(function(){ha(0,1),ua("matchMedia")})),Mi.matchMedia("(orientation: portrait)",(function(){return na(),na}))):console.warn("Requires GSAP 3.11.0 or later"),Ho(Ci,"scroll",ra);var e,r,n=zi.style,i=n.borderTopStyle,o=Mi.core.Animation.prototype;for(o.revert||Object.defineProperty(o,"revert",{value:function(){return this.time(-.01,!0)}}),n.borderTopStyle="solid",e=Fo(zi),vi.m=Math.round(e.top+vi.sc())||0,_i.m=Math.round(e.left+_i.sc())||0,i?n.borderTopStyle=i:n.removeProperty("border-top-style"),Fi=setInterval(ea,250),Mi.delayedCall(.5,(function(){return ao=0})),Ho(Ci,"touchcancel",ho),Ho(zi,"touchstart",ho),Vo(Ho,Ci,"pointerdown,touchstart,mousedown",fo),Vo(Ho,Ci,"pointerup,touchend,mouseup",po),Ni=Mi.utils.checkPrefix("transform"),va.push(Ni),Ei=so(),Li=Mi.delayedCall(.2,ha).pause(),Wi=[Ci,"visibilitychange",function(){var t=Oi.innerWidth,e=Oi.innerHeight;Ci.hidden?(Hi=t,Ui=e):Hi===t&&Ui===e||ia()},Ci,"DOMContentLoaded",ha,Oi,"load",ha,Oi,"resize",ia],bo(Ho),Ko.forEach((function(t){return t.enable(0,1)})),r=0;r<ui.length;r+=3)Wo(Uo,ui[r],ui[r+1]),Wo(Uo,ui[r],ui[r+2])}},t.config=function(e){"limitCallbacks"in e&&(ro=!!e.limitCallbacks);var r=e.syncInterval;r&&clearInterval(Fi)||(Fi=r)&&setInterval(ea,r),"ignoreMobileResize"in e&&(Zi=1===t.isTouch&&e.ignoreMobileResize),"autoRefreshEvents"in e&&(bo(Uo)||bo(Ho,e.autoRefreshEvents||"none"),$i=-1===(e.autoRefreshEvents+"").indexOf("resize"))},t.scrollerProxy=function(t,e){var r=xi(t),n=ui.indexOf(r),i=_o(r);~n&&ui.splice(n,i?6:2),e&&(i?ci.unshift(Oi,e,zi,e,Pi,e):ci.unshift(r,e))},t.clearMatchMedia=function(t){Ko.forEach((function(e){return e._ctx&&e._ctx.query===t&&e._ctx.kill(!0,!0)}))},t.isInViewport=function(t,e,r){var n=(wo(t)?xi(t):t).getBoundingClientRect(),i=n[r?Co:Po]*e||0;return r?n.right-i>0&&n.left+i<Oi.innerWidth:n.bottom-i>0&&n.top+i<Oi.innerHeight},t.positionInViewport=function(t,e,r){wo(t)&&(t=xi(t));var n=t.getBoundingClientRect(),i=n[r?Co:Po],o=null==e?i/2:e in $o?$o[e]*i:~e.indexOf("%")?parseFloat(e)*i/100:parseFloat(e)||0;return r?(n.left+o)/Oi.innerWidth:(n.top+o)/Oi.innerHeight},t.killAll=function(t){if(Ko.forEach((function(t){return"ScrollSmoother"!==t.vars.id&&t.kill()})),!0!==t){var e=oa.killAll||[];oa={},e.forEach((function(t){return t()}))}},t}();Ea.version="3.11.1",Ea.saveStyles=function(t){return t?Ri(t).forEach((function(t){if(t&&t.style){var e=ca.indexOf(t);e>=0&&ca.splice(e,5),ca.push(t,t.style.cssText,t.getBBox&&t.getAttribute("transform"),Mi.core.getCache(t),eo())}})):ca},Ea.revert=function(t,e){return fa(!t,e)},Ea.create=function(t,e){return new Ea(t,e)},Ea.refresh=function(t){return t?ia():(Ei||Ea.register())&&ha(!0)},Ea.update=ya,Ea.clearScrollMemory=da,Ea.maxScroll=function(t,e){return xo(t,e?_i:vi)},Ea.getScrollFunc=function(t,e){return bi(xi(t),e?_i:vi)},Ea.getById=function(t){return ta[t]},Ea.getAll=function(){return Ko.filter((function(t){return"ScrollSmoother"!==t.vars.id}))},Ea.isScrolling=function(){return!!co},Ea.snapDirectional=No,Ea.addEventListener=function(t,e){var r=oa[t]||(oa[t]=[]);~r.indexOf(e)||r.push(e)},Ea.removeEventListener=function(t,e){var r=oa[t],n=r&&r.indexOf(e);n>=0&&r.splice(n,1)},Ea.batch=function(t,e){var r,n=[],i={},o=e.interval||.016,a=e.batchMax||1e9,s=function(t,e){var r=[],n=[],i=Mi.delayedCall(o,(function(){e(r,n),r=[],n=[]})).pause();return function(t){r.length||i.restart(!0),r.push(t.trigger),n.push(t),a<=r.length&&i.progress(1)}};for(r in e)i[r]="on"===r.substr(0,2)&&So(e[r])&&"onRefreshInit"!==r?s(0,e[r]):e[r];return So(a)&&(a=a(),Ho(Ea,"refresh",(function(){return a=e.batchMax()}))),Ri(t).forEach((function(t){var e={};for(r in i)e[r]=i[r];e.trigger=t,n.push(Ea.create(e))})),n};var Oa,Ca=function(t,e,r,n){return e>n?t(n):e<0&&t(0),r>n?(n-e)/(r-e):r<0?e/(e-r):1},Pa=function t(e,r){!0===r?e.style.removeProperty("touch-action"):e.style.touchAction=!0===r?"auto":r?"pan-"+r+(Ai.isTouch?" pinch-zoom":""):"none",e===Pi&&t(zi,r)},za={auto:1,scroll:1},Da=function(t){var e,r=t.event,n=t.target,i=t.axis,o=(r.changedTouches?r.changedTouches[0]:r).target,a=o._gsap||Mi.core.getCache(o),s=so();if(!a._isScrollT||s-a._isScrollT>2e3){for(;o&&o.scrollHeight<=o.clientHeight;)o=o.parentNode;a._isScroll=o&&!_o(o)&&o!==n&&(za[(e=Io(o)).overflowY]||za[e.overflowX]),a._isScrollT=s}(a._isScroll||"x"===i)&&(r.stopPropagation(),r._gsapAllow=!0)},La=function(t,e,r,n){return Ai.create({target:t,capture:!0,debounce:!1,lockAxis:!0,type:e,onWheel:n=n&&Da,onPress:n,onDrag:n,onScroll:n,onEnable:function(){return r&&Ho(Ci,Ai.eventTypes[0],Ia,!1,!0)},onDisable:function(){return Uo(Ci,Ai.eventTypes[0],Ia,!0)}})},Ra=/(input|label|select|textarea)/i,Ia=function(t){var e=Ra.test(t.target.tagName);(e||Oa)&&(t._gsapAllow=!0,Oa=e)};if(Ea.sort=function(t){return Ko.sort(t||function(t,e){return-1e6*(t.vars.refreshPriority||0)+t.start-(e.start+-1e6*(e.vars.refreshPriority||0))})},Ea.observe=function(t){return new Ai(t)},Ea.normalizeScroll=function(t){if(void 0===t)return Qi;if(!0===t&&Qi)return Qi.enable();if(!1===t)return Qi&&Qi.kill();var e=t instanceof Ai?t:function(t){ko(t)||(t={}),t.preventDefault=t.isNormalizer=t.allowClicks=!0,t.type||(t.type="wheel,touch"),t.debounce=!!t.debounce,t.id=t.id||"normalizer";var e,r,n,i,o,a,s,u,c=t,l=c.normalizeScrollX,f=c.momentum,d=c.allowNestedScroll,p=xi(t.target)||Pi,h=Mi.core.globals().ScrollSmoother,g=h&&h.get(),m=to&&(t.content&&xi(t.content)||g&&!1!==t.content&&!g.smooth()&&g.content()),y=bi(p,vi),_=bi(p,_i),v=1,x=(Ai.isTouch&&Oi.visualViewport?Oi.visualViewport.scale*Oi.visualViewport.width:Oi.outerWidth)/Oi.innerWidth,b=0,w=So(f)?function(){return f(e)}:function(){return f||2.8},S=La(p,t.type,!0,d),T=function(){return i=!1},k=ho,q=ho,A=function(){r=xo(p,vi),q=Ii(to?1:0,r),l&&(k=Ii(0,xo(p,_i))),n=pa},M=function(){m._gsap.y=go(parseFloat(m._gsap.y)+y.offset)+"px",m.style.transform="matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, "+parseFloat(m._gsap.y)+", 0, 1)",y.offset=y.cacheID=0},E=function(){A(),o.isActive()&&o.vars.scrollY>r&&(y()>r?o.progress(1)&&y(r):o.resetTo("scrollY",r))};return m&&Mi.set(m,{y:"+=0"}),t.ignoreCheck=function(t){return to&&"touchmove"===t.type&&function(){if(i){requestAnimationFrame(T);var t=go(e.deltaY/2),r=q(y.v-t);if(m&&r!==y.v+y.offset){y.offset=r-y.v;var n=go((parseFloat(m&&m._gsap.y)||0)-y.offset);m.style.transform="matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, "+n+", 0, 1)",m._gsap.y=n+"px",y.cacheID=ui.cache,ya()}return!0}y.offset&&M(),i=!0}()||v>1.05&&"touchstart"!==t.type||e.isGesturing||t.touches&&t.touches.length>1},t.onPress=function(){var t=v;v=go((Oi.visualViewport&&Oi.visualViewport.scale||1)/x),o.pause(),t!==v&&Pa(p,v>1.01||!l&&"x"),a=_(),s=y(),A(),n=pa},t.onRelease=t.onGestureStart=function(t,e){if(y.offset&&M(),e){ui.cache++;var n,i,a=w();l&&(i=(n=_())+.05*a*-t.velocityX/.227,a*=Ca(_,n,i,xo(p,_i)),o.vars.scrollX=k(i)),i=(n=y())+.05*a*-t.velocityY/.227,a*=Ca(y,n,i,xo(p,vi)),o.vars.scrollY=q(i),o.invalidate().duration(a).play(.01),(to&&o.vars.scrollY>=r||n>=r-1)&&Mi.to({},{onUpdate:E,duration:a})}else u.restart(!0)},t.onWheel=function(){o._ts&&o.pause(),so()-b>1e3&&(n=0,b=so())},t.onChange=function(t,e,r,i,o){if(pa!==n&&A(),e&&l&&_(k(i[2]===e?a+(t.startX-t.x):_()+e-i[1])),r){y.offset&&M();var u=o[2]===r,c=u?s+t.startY-t.y:y()+r-o[1],f=q(c);u&&c!==f&&(s+=f-c),y(f)}(r||e)&&ya()},t.onEnable=function(){Pa(p,!l&&"x"),Ho(Oi,"resize",E),S.enable()},t.onDisable=function(){Pa(p,!0),Uo(Oi,"resize",E),S.kill()},t.lockAxis=!1!==t.lockAxis,(e=new Ai(t)).iOS=to,to&&!y()&&y(1),to&&Mi.ticker.add(ho),u=e._dc,o=Mi.to(e,{ease:"power4",paused:!0,scrollX:l?"+=0.1":"+=0",scrollY:"+=0.1",onComplete:u.vars.onComplete}),e}(t);return Qi&&Qi.target===e.target&&Qi.kill(),_o(e.target)&&(Qi=e),e},Ea.core={_getVelocityProp:wi,_inputObserver:La,_scrollers:ui,_proxies:ci,bridge:{ss:function(){co||ua("scrollStart"),co=so()},ref:function(){return Yi}}},yo()&&Mi.registerPlugin(Ea),Un.registerPlugin(Ea),new class{constructor(){this.headerHome(),this.messageFort(),this.listesIcones(),this.modulaire(),this.gammes(),this.produits(),this.actualites(),this.temoignages(),this.coordonnees(),this.contact(),this.headerTitreImageCloud(),this.text(),this.headerProduct(),this.texteCentre(),this.deuxColonnes(),this.image(),this.layoutTexteImage(),this.tabs(),this.reassurance(),this.deuxColonnesImage(),this.galerie(),this.deuxParagraphesBouton(),this.headerGamme(),this.deuxColonnesLayoutBoutonImage(),this.tailles(),this.taillesDeuxColonnes(),this.layoutTitreTexteBoutonImage(),this.paragrapheGauche(),this.layoutVideoTexte(),this.paragrapheCentre(),this.video(),this.titreParagrapheGauche(),this.headerTitreDescription(),this.appel(),this.banniereImage(),this.titreLongTextImage(),this.valeurs(),this.equipe(),this.bouton(),this.headerBlog(),this.headerPost()}headerHome(){const t=document.querySelector(".wp-block-lazyblock-header-home");if(t){const e=document.querySelector(".wp-block-lazyblock-header-home .anim_scale"),r=Un.timeline({defaults:{duration:1,ease:"expo.out"},scrollTrigger:{trigger:t}}),n=Un.timeline({defaults:{duration:.4,ease:"expo.out"},scrollTrigger:{trigger:e}});r.to(t.querySelector(".anim_cloud"),{opacity:1},.2).to(t.querySelector(".anim_cloud"),{y:0,scale:1,duration:3,ease:"expo.out"},.2).to(t.querySelector(".anim_title"),{y:0,opacity:1,rotate:0},.4).to(t.querySelector(".anim_panel-bottom"),{scaleY:1,opacity:1},.6),n.to(e,{scale:1,opacity:1})}}messageFort(){const t=document.querySelector(".wp-block-lazyblock-section-message-fort");t&&Un.timeline({defaults:{duration:1,ease:"expo.out"},scrollTrigger:{trigger:t,start:"top center"}}).to(t.querySelector(".anim_opacity"),{opacity:1},0).to(t.querySelector(".anim_title"),{y:0,opacity:1,rotate:0},.1).to(t.querySelectorAll(".anim_scale"),{scale:1,opacity:1,rotate:0},.2).to(t.querySelector(".anim_overlay"),{scaleY:0},.4).to(t.querySelector(".anim_zoom"),{scale:1,duration:4},.4)}listesIcones(){const t=document.querySelector(".wp-block-lazyblock-sections-listes-and-icones");t&&Un.timeline({defaults:{duration:1,ease:"expo.out"},scrollTrigger:{trigger:t,start:"top center"}}).to(t.querySelector(".anim_opacity"),{opacity:1},0).to(t.querySelector(".anim_title"),{y:0,opacity:1,rotate:0},.1).to(t.querySelectorAll(".anim_scale"),{scale:1,opacity:1},.2).to(t.querySelector(".anim_opacity2"),{opacity:1},.4)}modulaire(){const t=document.querySelector(".wp-block-lazyblock-section-modulaire");t&&Un.timeline({defaults:{duration:1,ease:"expo.out"},scrollTrigger:{trigger:t,start:"top center"}}).to(t.querySelector(".anim_opacity"),{opacity:1},0).to(t.querySelector(".anim_title"),{y:0,opacity:1,rotate:0},.1).to(t.querySelectorAll(".anim_overlay"),{scaleY:0,stagger:.15},.3).to(t.querySelector(".anim_opacity2"),{opacity:1},.4).to(t.querySelectorAll(".anim_scale"),{scale:1,opacity:1,rotate:0,stagger:.15},.5)}gammes(){const t=document.querySelector(".wp-block-lazyblock-section-gammes");t&&Un.timeline({defaults:{duration:1,ease:"expo.out"},scrollTrigger:{trigger:t,start:"top center"}}).to(t.querySelector(".anim_opacity"),{opacity:1},0).to(t.querySelector(".anim_title"),{y:0,opacity:1,rotate:0},.1).to(t.querySelectorAll(".anim_scale"),{scale:1,opacity:1,stagger:.15},.2).to(t.querySelectorAll(".anim_opacity2"),{opacity:1,stagger:.45},.2)}produits(){const t=document.querySelector(".wp-block-lazyblock-section-produits");if(t){const e=document.querySelector(".wp-block-lazyblock-section-produits .anim_scale2"),r=Un.timeline({defaults:{duration:1,ease:"expo.out"},scrollTrigger:{trigger:t,start:"top center"}}),n=Un.timeline({defaults:{duration:.4,ease:"expo.out"},scrollTrigger:{trigger:e}});r.to(t.querySelector(".anim_opacity"),{opacity:1},0).to(t.querySelector(".anim_title"),{y:0,opacity:1,rotate:0},.1).to(t.querySelectorAll(".anim_opacity2"),{opacity:1},.2).to(t.querySelectorAll(".anim_scale"),{scale:1,opacity:1,stagger:.15},.2),n.to(e,{scale:1,opacity:1})}}actualites(){const t=document.querySelector(".wp-block-lazyblock-section-actualites");if(t){const e=document.querySelector(".wp-block-lazyblock-section-actualites .anim_scale2"),r=Un.timeline({defaults:{duration:1,ease:"expo.out"},scrollTrigger:{trigger:t,start:"top center"}}),n=Un.timeline({defaults:{duration:.4,ease:"expo.out"},scrollTrigger:{trigger:e}});r.to(t.querySelector(".anim_opacity"),{opacity:1},0).to(t.querySelector(".anim_title"),{y:0,opacity:1,rotate:0},.1).to(t.querySelectorAll(".anim_overlay"),{scaleY:0,stagger:.15},.2).to(t.querySelectorAll(".anim_scale"),{scale:1,opacity:1,stagger:.15},.2).to(t.querySelectorAll(".anim_opacity2"),{opacity:1},.4),n.to(e,{scale:1,opacity:1})}}temoignages(){const t=document.querySelector(".wp-block-lazyblock-section-temoignages");t&&Un.timeline({defaults:{duration:1,ease:"expo.out"},scrollTrigger:{trigger:t,start:"top center"}}).to(t.querySelector(".anim_opacity"),{opacity:1},0).to(t.querySelector(".anim_title"),{y:0,opacity:1,rotate:0},.1).to(t.querySelector(".anim_people"),{opacity:1},.2).to(t.querySelector(".anim_people"),{y:0,scale:1,duration:3,ease:"expo.out"},.2).to(t.querySelectorAll(".anim_scale"),{scale:1,opacity:1,stagger:.15},.2)}coordonnees(){const t=document.querySelector(".wp-block-lazyblock-section-coordonnees");t&&Un.timeline({defaults:{duration:1,ease:"expo.out"},scrollTrigger:{trigger:t,start:"top center"}}).to(t.querySelector(".anim_title"),{y:0,opacity:1,rotate:0},0).to(t.querySelector(".anim_opacity"),{opacity:1},.1).to(t.querySelector(".anim_scale"),{scale:1,opacity:1,duration:.4},.2)}contact(){const t=document.querySelector(".wp-block-lazyblock-section-contact");t&&Un.timeline({defaults:{duration:1,ease:"expo.out"},scrollTrigger:{trigger:t,start:"top center"}}).to(t.querySelector(".anim_opacity"),{y:0,opacity:1,rotate:0},0)}headerTitreImageCloud(){const t=document.querySelector(".wp-block-lazyblock-header-title-and-background");t&&Un.timeline({defaults:{duration:1,ease:"expo.out"},scrollTrigger:{trigger:t,start:"top center"}}).to(t.querySelector(".anim_overlay"),{scaleY:0},.2).to(t.querySelector(".anim_title"),{y:0,opacity:1,rotate:0},.3)}text(){const t=document.querySelector(".wp-block-lazyblock-section-text");t&&Un.timeline({defaults:{duration:1,ease:"expo.out"},scrollTrigger:{trigger:t,start:"top center"}}).to(t.querySelector(".anim_opacity"),{opacity:1},0)}headerProduct(){const t=document.querySelector(".wp-block-lazyblock-header-product");t&&Un.timeline({defaults:{duration:1,ease:"expo.out"},scrollTrigger:{trigger:t}}).to(t.querySelector(".anim_cloud"),{opacity:1},.2).to(t.querySelector(".anim_cloud"),{y:0,scale:1,duration:3,ease:"expo.out"},.2).to(t.querySelector(".anim_title"),{y:0,opacity:1,rotate:0},.4).to(t.querySelector(".anim_scale"),{scale:1,opacity:1,duration:.4},.8)}texteCentre(){const t=document.querySelector(".wp-block-lazyblock-section-texte-centre");t&&Un.timeline({defaults:{duration:1,ease:"expo.out"},scrollTrigger:{trigger:t,start:"top center"}}).to(t.querySelector(".anim_title"),{y:0,opacity:1,rotate:0},0).to(t.querySelector(".anim_opacity"),{opacity:1},.1)}deuxColonnes(){const t=document.querySelector(".wp-block-lazyblock-section-deux-colonnes");t&&Un.timeline({defaults:{duration:1,ease:"expo.out"},scrollTrigger:{trigger:t,start:"top center"}}).to(t.querySelectorAll(".anim_scale"),{scale:1,opacity:1,stagger:.15},0)}image(){const t=document.querySelector(".wp-block-lazyblock-section-bloc-image");t&&Un.timeline({defaults:{duration:1,ease:"expo.out"},scrollTrigger:{trigger:t,start:"top center"}}).to(t.querySelector(".anim_overlay"),{scaleY:0},0).to(t.querySelector(".anim_zoom"),{scale:1,duration:4},0)}layoutTexteImage(){const t=document.querySelector(".wp-block-lazyblock-section-layout-texte-et-image");t&&Un.timeline({defaults:{duration:1,ease:"expo.out"},scrollTrigger:{trigger:t,start:"top center"}}).to(t.querySelector(".anim_title"),{y:0,opacity:1,rotate:0},0).to(t.querySelector(".anim_opacity"),{opacity:1},.1).to(t.querySelector(".anim_opacity"),{opacity:1},.1).to(t.querySelector(".anim_scale"),{scale:1,opacity:1},.2)}tabs(){const t=document.querySelector(".wp-block-lazyblock-section-tabs");if(t){const e=document.querySelector(".wp-block-lazyblock-section-tabs .anim_scale2"),r=Un.timeline({defaults:{duration:1,ease:"expo.out"},scrollTrigger:{trigger:t,start:"top center"}}),n=Un.timeline({defaults:{duration:.4,ease:"expo.out"},scrollTrigger:{trigger:e}});r.to(t.querySelector(".anim_opacity"),{opacity:1},0).to(t.querySelector(".anim_title"),{y:0,opacity:1,rotate:0},.1).to(t.querySelectorAll(".anim_opacity2"),{opacity:1},.2).to(t.querySelectorAll(".anim_scale"),{scale:1,opacity:1,stagger:.15},.2),n.to(e,{scale:1,opacity:1})}}reassurance(){const t=document.querySelector(".wp-block-lazyblock-section-reassurance");t&&Un.timeline({defaults:{duration:1,ease:"expo.out"},scrollTrigger:{trigger:t,start:"top center"}}).to(t.querySelectorAll(".anim_scale"),{scale:1,opacity:1},0).to(t.querySelector(".anim_opacity"),{opacity:1},.6)}deuxColonnesImage(){const t=document.querySelector(".wp-block-lazyblock-section-deux-colonnes-avec-image");t&&Un.timeline({defaults:{duration:1,ease:"expo.out"},scrollTrigger:{trigger:t,start:"top center"}}).to(t.querySelectorAll(".anim_scale"),{scale:1,opacity:1,stagger:.15},0)}galerie(){const t=document.querySelectorAll(".wp-block-lazyblock-section-galerie");t&&t.forEach((t=>{Un.timeline({defaults:{duration:1,ease:"expo.out"},scrollTrigger:{trigger:t,start:"top center"}}).to(t.querySelectorAll(".anim_opacity"),{opacity:1},0)}))}deuxParagraphesBouton(){const t=document.querySelector(".wp-block-lazyblock-section-deux-paragraphes-et-un-bouton");t&&Un.timeline({defaults:{duration:1,ease:"expo.out"},scrollTrigger:{trigger:t,start:"top center"}}).to(t.querySelector(".anim_title"),{y:0,opacity:1,rotate:0},0).to(t.querySelectorAll(".anim_opacity"),{opacity:1,stagger:.15},.1).to(t.querySelector(".anim_scale"),{scale:1,opacity:1,duration:.4},.2)}headerGamme(){const t=document.querySelector(".wp-block-lazyblock-header-gamme");t&&Un.timeline({defaults:{duration:1,ease:"expo.out"},scrollTrigger:{trigger:t}}).to(t.querySelector(".anim_cloud"),{opacity:1},.2).to(t.querySelector(".anim_cloud"),{y:0,scale:1,duration:3,ease:"expo.out"},.2)}deuxColonnesLayoutBoutonImage(){const t=document.querySelector(".wp-block-lazyblock-section-deux-colonnes-and-layout-button-image");t&&Un.timeline({defaults:{duration:1,ease:"expo.out"},scrollTrigger:{trigger:t,start:"top center"}}).to(t.querySelectorAll(".anim_opacity"),{opacity:1,stagger:.15},0).to(t.querySelector(".anim_title"),{y:0,opacity:1,rotate:0},.1).to(t.querySelector(".anim_opacity2"),{opacity:1,stagger:.15},.2).to(t.querySelectorAll(".anim_scale"),{scale:1,opacity:1,duration:.4,stagger:.15},.3).to(t.querySelector(".anim_overlay"),{scaleY:0},.4).to(t.querySelector(".anim_zoom"),{scale:1,duration:4},.4)}tailles(){const t=document.querySelector(".wp-block-lazyblock-section-tailles");t&&Un.timeline({defaults:{duration:1,ease:"expo.out"},scrollTrigger:{trigger:t,start:"top center"}}).to(t.querySelector(".anim_title"),{y:0,opacity:1,rotate:0},0).to(t.querySelectorAll(".anim_scale"),{scale:1,opacity:1,stagger:.15},.1)}taillesDeuxColonnes(){const t=document.querySelectorAll(".wp-block-lazyblock-section-tailles-2-colonnes");t&&t.forEach((t=>{Un.timeline({defaults:{duration:1,ease:"expo.out"},scrollTrigger:{trigger:t,start:"top center"}}).to(t.querySelector(".anim_title"),{y:0,opacity:1,rotate:0},0).to(t.querySelectorAll(".anim_scale"),{scale:1,opacity:1,stagger:.15},.1)}))}layoutTitreTexteBoutonImage(){const t=document.querySelectorAll(".wp-block-lazyblock-section-layout-titre-texte-bouton-et-image");t&&t.forEach((t=>{Un.timeline({defaults:{duration:1,ease:"expo.out"},scrollTrigger:{trigger:t,start:"top center"}}).to(t.querySelector(".anim_title"),{y:0,opacity:1,rotate:0},0).to(t.querySelectorAll(".anim_opacity"),{opacity:1},.1).to(t.querySelector(".anim_overlay"),{scaleY:0},.1).to(t.querySelector(".anim_zoom"),{scale:1,duration:4},.1).to(t.querySelectorAll(".anim_scale"),{scale:1,opacity:1,duration:.4},.2)}))}paragrapheGauche(){const t=document.querySelector(".wp-block-lazyblock-section-paragraphe-gauche");t&&Un.timeline({defaults:{duration:1,ease:"expo.out"},scrollTrigger:{trigger:t,start:"top center"}}).to(t.querySelector(".anim_title"),{y:0,opacity:1,rotate:0},0).to(t.querySelectorAll(".anim_opacity"),{opacity:1},.1)}layoutVideoTexte(){const t=document.querySelector(".wp-block-lazyblock-section-layout-video-and-texte");t&&Un.timeline({defaults:{duration:1,ease:"expo.out"},scrollTrigger:{trigger:t,start:"top center"}}).to(t.querySelector(".anim_title"),{y:0,opacity:1,rotate:0},0).to(t.querySelectorAll(".anim_opacity"),{opacity:1},.1).to(t.querySelector(".anim_overlay"),{scaleY:0},.1).to(t.querySelector(".anim_zoom"),{scale:1,duration:4},.1)}paragrapheCentre(){const t=document.querySelector(".wp-block-lazyblock-section-paragraphe-centre");t&&Un.timeline({defaults:{duration:1,ease:"expo.out"},scrollTrigger:{trigger:t,start:"top center"}}).to(t.querySelector(".anim_title"),{y:0,opacity:1,rotate:0},0).to(t.querySelectorAll(".anim_opacity"),{opacity:1},.2)}video(){const t=document.querySelectorAll(".wp-block-lazyblock-section-video");t&&t.forEach((t=>{Un.timeline({defaults:{duration:1,ease:"expo.out"},scrollTrigger:{trigger:t,start:"top center"}}).to(t.querySelector(".anim_overlay"),{scaleY:0},0).to(t.querySelector(".anim_zoom"),{scale:1,duration:4},0)}))}titreParagrapheGauche(){const t=document.querySelectorAll(".wp-block-lazyblock-section-titre-et-paragraphe-gauche");t&&t.forEach((t=>{Un.timeline({defaults:{duration:1,ease:"expo.out"},scrollTrigger:{trigger:t,start:"top center"}}).to(t.querySelector(".anim_title"),{y:0,opacity:1,rotate:0},0).to(t.querySelectorAll(".anim_opacity"),{opacity:1},.2)}))}headerTitreDescription(){const t=document.querySelector(".wp-block-lazyblock-header-titre-and-description");t&&Un.timeline({defaults:{duration:1,ease:"expo.out"},scrollTrigger:{trigger:t,start:"top center"}}).to(t.querySelector(".anim_opacity"),{opacity:1},0).to(t.querySelector(".anim_title"),{y:0,opacity:1,rotate:0},.1).to(t.querySelector(".anim_opacity2"),{opacity:1},.2).to(t.querySelector(".anim_overlay"),{scaleY:0},.3).to(t.querySelector(".anim_zoom"),{scale:1,duration:4},.3)}appel(){const t=document.querySelectorAll(".wp-block-lazyblock-section-layout-appel");t&&t.forEach((t=>{Un.timeline({defaults:{duration:1,ease:"expo.out"},scrollTrigger:{trigger:t,start:"top center"}}).to(t.querySelector(".anim_title"),{y:0,opacity:1,rotate:0},0).to(t.querySelectorAll(".anim_opacity"),{opacity:1,stagger:.15},.1)}))}banniereImage(){const t=document.querySelector(".wp-block-lazyblock-section-banniere-image");t&&Un.timeline({defaults:{duration:1,ease:"expo.out"},scrollTrigger:{trigger:t,start:"top center"}}).to(t.querySelector(".anim_overlay"),{scaleY:0},0).to(t.querySelector(".anim_zoom"),{scale:1,duration:4},0)}titreLongTextImage(){const t=document.querySelector(".wp-block-lazyblock-section-layout-titre-long-texte-et-image");t&&Un.timeline({defaults:{duration:1,ease:"expo.out"},scrollTrigger:{trigger:t,start:"top center"}}).to(t.querySelector(".anim_title"),{y:0,opacity:1,rotate:0},0).to(t.querySelectorAll(".anim_opacity"),{opacity:1,stagger:.15},.1).to(t.querySelectorAll(".anim_scale"),{scale:1,opacity:1},.2)}valeurs(){const t=document.querySelector(".wp-block-lazyblock-section-valeurs-acloud");t&&Un.timeline({defaults:{duration:1,ease:"expo.out"},scrollTrigger:{trigger:t,start:"top center"}}).to(t.querySelectorAll(".anim_title"),{y:0,opacity:1,rotate:0,stagger:.15},0).to(t.querySelectorAll(".anim_opacity"),{scale:1,opacity:1,stagger:.15},.1)}equipe(){const t=document.querySelector(".wp-block-lazyblock-section-equipe");t&&Un.timeline({defaults:{duration:1,ease:"expo.out"},scrollTrigger:{trigger:t,start:"top center"}}).to(t.querySelectorAll(".anim_title"),{y:0,opacity:1,rotate:0,stagger:.15},0).to(t.querySelectorAll(".anim_opacity"),{scale:1,opacity:1,stagger:.15},.1).to(t.querySelectorAll(".anim_overlay"),{scaleY:0,stagger:.15},.2).to(t.querySelectorAll(".anim_zoom"),{scale:1,duration:4,stagger:.15},.2)}bouton(){const t=document.querySelector(".wp-block-lazyblock-section-bouton");t&&Un.timeline({defaults:{duration:1,ease:"expo.out"},scrollTrigger:{trigger:t,start:"top center"}}).to(t.querySelector(".anim_title"),{y:0,opacity:1,rotate:0},0).to(t.querySelector(".anim_scale"),{scale:1,opacity:1,duration:.4},.1)}headerBlog(){const t=document.querySelector(".hero-blog");t&&Un.timeline({defaults:{duration:1,ease:"expo.out"},scrollTrigger:{trigger:t,start:"top center"}}).to(t.querySelector(".anim_overlay"),{scaleY:0},.2).to(t.querySelector(".anim_title"),{y:0,opacity:1,rotate:0},.3)}headerPost(){const t=document.querySelector(".hero-article");t&&Un.timeline({defaults:{duration:1,ease:"expo.out"},scrollTrigger:{trigger:t,start:"top center"}}).to(t.querySelector(".anim_opacity"),{opacity:1},0).to(t.querySelector(".anim_title"),{y:0,opacity:1,rotate:0},.1).to(t.querySelector(".anim_opacity2"),{opacity:1},.2).to(t.querySelector(".anim_overlay"),{scaleY:0},.4)}},document.querySelectorAll('a[href^="#"]').forEach((t=>{t.addEventListener("click",(function(t){t.preventDefault(),document.querySelector(this.getAttribute("href")).scrollIntoView({behavior:"smooth"})}))})),document.querySelector(".embla")){const t=document.querySelector(".embla"),r=t.querySelector(".embla__viewport"),n=t.querySelector(".embla__prev"),i=t.querySelector(".embla__next"),o={align:"center",skipSnaps:!1},a=e()(r,o);n.addEventListener("click",a.scrollPrev,!1),i.addEventListener("click",a.scrollNext,!1)}const Ba=document.body,Fa=document.querySelector(".nav"),Ya=document.querySelector(".nav_icon"),Xa=document.querySelector(".hero-full"),Na=document.querySelector(".hero_img"),Va=document.querySelector(".hero_overlay"),Ha=document.querySelector(".gammes_slider"),Ua=document.querySelector(".gammes_slider_inner");if(document.querySelector(".js-tabs")){const t={buttonActive:"tabs__button--active",contentActive:"tabs__content--active"},e={tabIndex:"data-tab-index"},r=document.querySelector(".js-tabs"),n=r.querySelectorAll(".js-tabs__button"),i=r.querySelectorAll(".js-tabs__content"),o=r=>{n.forEach((n=>{n.classList.remove(t.buttonActive),n.getAttribute(e.tabIndex)===r&&(n.classList.add(t.buttonActive),console.log(n))})),i.forEach((n=>{n.classList.remove(t.contentActive),n.getAttribute(e.tabIndex)===r&&n.classList.add(t.contentActive)}))};n.forEach((t=>{t.addEventListener("click",(r=>{const n=t.getAttribute(e.tabIndex);r.preventDefault(),o(n)}))}))}if(Ya&&Ya.addEventListener("click",(()=>{Ba.classList.contains("active")?Ba.classList.remove("active"):Ba.classList.add("active")})),Xa){const t=()=>{const t=Fa.offsetHeight;Xa.style.height=`calc(100vh - ${t}px)`};window.matchMedia("(min-width: 1000px)").matches&&t(),window.addEventListener("resize",(()=>{window.matchMedia("(min-width: 1000px)").matches?t():Xa.style.height="auto"}))}if(Va){const t=()=>{const t=Na.offsetHeight;Va.style.height=`calc(${t/2}px)`};t(),window.addEventListener("resize",(()=>t()))}let Wa=!1,ja=null,Ga=null;function $a(){const t=Ha.getBoundingClientRect(),e=Ua.getBoundingClientRect();parseInt(Ua.style.left)>0?Ua.style.left="0px":e.right<t.right&&(Ua.style.left=`-${e.width-t.width}px`)}Ha&&(/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)?(Ha.addEventListener("touchstart",(t=>{Wa=!0,ja=t.touches[0].screenX-Ua.offsetLeft,Ha.style.cursor="grabbing"}),{passive:!0}),Ha.addEventListener("touchenter",(()=>Ha.style.cursor="grab"),{passive:!0}),Ha.addEventListener("touchend",(()=>Ha.style.cursor="grab"),{passive:!0}),window.addEventListener("touchend",(()=>Wa=!1),{passive:!0}),Ha.addEventListener("touchmove",(t=>{Wa&&(t.preventDefault(),Ga=t.touches[0].screenX,Ua.style.left=Ga-ja+"px",$a())}),{passive:!0})):(Ha.addEventListener("mousedown",(t=>{Wa=!0,ja=t.offsetX-Ua.offsetLeft,Ha.style.cursor="grabbing"})),Ha.addEventListener("mouseenter",(()=>Ha.style.cursor="grab")),Ha.addEventListener("mouseup",(()=>Ha.style.cursor="grab")),window.addEventListener("mouseup",(()=>Wa=!1)),Ha.addEventListener("mousemove",(t=>{Wa&&(t.preventDefault(),Ga=t.offsetX,Ua.style.left=Ga-ja+"px",$a())})))),document.querySelectorAll(".gallery").forEach((t=>{const e=t.querySelector(".slider_inner"),r=t.querySelectorAll(".slide"),n=t.querySelector(".prev"),i=t.querySelector(".next"),o=r.length;let a=r[0].offsetWidth,s=parseInt(getComputedStyle(r[0]).marginRight),u=a+s;const c=r[0].cloneNode(!0),l=r[o-1].cloneNode(!0);c.setAttribute("id","first-clone"),l.setAttribute("id","last-clone"),e.appendChild(c),e.prepend(l);const f=t.querySelectorAll(".slide");e.style.transform=`translateX(${-u}px)`;let d=1;i.addEventListener("click",(()=>{d++,e.style.transition="transform 0.5s ease-in-out, opacity 0.2s",e.style.transform=`translateX(${-u*d}px)`,d>=f.length&&(d=o)})),n.addEventListener("click",(()=>{d--,e.style.transition="transform 0.5s ease-in-out, opacity 0.2s",e.style.transform=`translateX(${-u*d}px)`,d<0&&(d=0)})),e.addEventListener("transitionend",(()=>{"first-clone"===f[d].id&&(e.style.transition="none",d=1,e.style.transform=`translateX(${-u*d}px)`),"last-clone"===f[d].id&&(e.style.transition="none",d=o,e.style.transform=`translateX(${-u*d}px)`)})),window.addEventListener("resize",(()=>{a=r[0].offsetWidth,s=parseInt(getComputedStyle(r[0]).marginRight),u=a+s,e.style.transition="none",e.style.transform=`translateX(${-u*d}px)`}))})),document.addEventListener("DOMContentLoaded",(function(){var t=document.querySelector(".myhiddenthing");document.querySelector(".mytogglebutton").onclick=function(){t.classList.toggle("active")},document.querySelector(".myclosebutton").onclick=function(){t.classList.remove("active")}}))}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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dEQsRUFBUU0sT0FDN0NBLEVBQVUsSUFBR0EsRUFBVSxNQUc1QmIsRUFBT3R4RCxpQkFBaUIsaUJBQWlCLEtBQ1YsZ0JBQTFCa3lELEVBQVVDLEdBQVNwbkMsS0FDdEJ1bUMsRUFBTzdzRCxNQUFNMnRELFdBQWEsT0FDMUJELEVBQVUsRUFDVmIsRUFBTzdzRCxNQUFNRSxVQUFZLGVBQWdCa3RELEVBQVFNLFFBR3BCLGVBQTFCRCxFQUFVQyxHQUFTcG5DLEtBQ3RCdW1DLEVBQU83c0QsTUFBTTJ0RCxXQUFhLE9BQzFCRCxFQUFVVixFQUNWSCxFQUFPN3NELE1BQU1FLFVBQVksZUFBZ0JrdEQsRUFBUU0sT0FDbEQsSUFHRHhyRCxPQUFPM0csaUJBQWlCLFVBQVUsS0FDakMweEQsRUFBYS9sRCxFQUFPLEdBQUdpOUIsWUFDdkIrb0IsRUFBbUIxc0MsU0FBU3JlLGlCQUFpQitFLEVBQU8sSUFBSWltRCxhQUN4REMsRUFBUUgsRUFBYUMsRUFDckJMLEVBQU83c0QsTUFBTTJ0RCxXQUFhLE9BQzFCZCxFQUFPN3NELE1BQU1FLFVBQVksZUFBZ0JrdEQsRUFBUU0sTUFBUSxHQUN6RCxJQU1GMXZELFNBQVN6QyxpQkFBaUIsb0JBQW9CLFdBRTdDLElBQUlxeUQsRUFBZ0I1dkQsU0FBU3FzRCxjQUFjLGtCQUV0QnJzRCxTQUFTcXNELGNBQWMsbUJBQzdCd0QsUUFBVSxXQUN4QkQsRUFBY3ZPLFVBQVV5TyxPQUFPLFNBQ2hDLEVBRW9COXZELFNBQVNxc0QsY0FBYyxrQkFDN0J3RCxRQUFVLFdBQ3ZCRCxFQUFjdk8sVUFBVXRzQyxPQUFPLFNBQ2hDLENBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXB0dW5lLy4vbm9kZV9tb2R1bGVzLy5wbnBtL2VtYmxhLWNhcm91c2VsQDcuMC4zL25vZGVfbW9kdWxlcy9lbWJsYS1jYXJvdXNlbC9lbWJsYS1jYXJvdXNlbC51bWQuanMiLCJ3ZWJwYWNrOi8vbmVwdHVuZS93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9uZXB0dW5lL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL25lcHR1bmUvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL25lcHR1bmUvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9uZXB0dW5lLy4vbm9kZV9tb2R1bGVzLy5wbnBtL2dzYXBAMy4xMS4xL25vZGVfbW9kdWxlcy9nc2FwL2dzYXAtY29yZS5qcyIsIndlYnBhY2s6Ly9uZXB0dW5lLy4vbm9kZV9tb2R1bGVzLy5wbnBtL2dzYXBAMy4xMS4xL25vZGVfbW9kdWxlcy9nc2FwL0NTU1BsdWdpbi5qcyIsIndlYnBhY2s6Ly9uZXB0dW5lLy4vbm9kZV9tb2R1bGVzLy5wbnBtL2dzYXBAMy4xMS4xL25vZGVfbW9kdWxlcy9nc2FwL2luZGV4LmpzIiwid2VicGFjazovL25lcHR1bmUvLi9ub2RlX21vZHVsZXMvLnBucG0vZ3NhcEAzLjExLjEvbm9kZV9tb2R1bGVzL2dzYXAvT2JzZXJ2ZXIuanMiLCJ3ZWJwYWNrOi8vbmVwdHVuZS8uL25vZGVfbW9kdWxlcy8ucG5wbS9nc2FwQDMuMTEuMS9ub2RlX21vZHVsZXMvZ3NhcC9TY3JvbGxUcmlnZ2VyLmpzIiwid2VicGFjazovL25lcHR1bmUvLi9zcmMvc2NyaXB0cy9pbmRleC5qcyIsIndlYnBhY2s6Ly9uZXB0dW5lLy4vc3JjL3NjcmlwdHMvQW5pbWF0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIiFmdW5jdGlvbihuLHQpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPXQoKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKHQpOihuPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWxUaGlzP2dsb2JhbFRoaXM6bnx8c2VsZikuRW1ibGFDYXJvdXNlbD10KCl9KHRoaXMsKGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbihuKXtyZXR1cm5cIm51bWJlclwiPT10eXBlb2Ygbn1mdW5jdGlvbiB0KG4pe3JldHVyblwiW29iamVjdCBPYmplY3RdXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobil9ZnVuY3Rpb24gZShuKXtyZXR1cm4gdChuKXx8ZnVuY3Rpb24obil7cmV0dXJuIEFycmF5LmlzQXJyYXkobil9KG4pfWZ1bmN0aW9uIHIobil7cmV0dXJuIE1hdGguYWJzKG4pfWZ1bmN0aW9uIG8obil7cmV0dXJuIG4/bi9yKG4pOjB9ZnVuY3Rpb24gaShuLHQpe3JldHVybiByKG4tdCl9ZnVuY3Rpb24gdShuKXtyZXR1cm4gZihuKS5tYXAoTnVtYmVyKX1mdW5jdGlvbiBjKG4pe3JldHVybiBuW2EobildfWZ1bmN0aW9uIGEobil7cmV0dXJuIE1hdGgubWF4KDAsbi5sZW5ndGgtMSl9ZnVuY3Rpb24gZihuKXtyZXR1cm4gT2JqZWN0LmtleXMobil9ZnVuY3Rpb24gcyhuLGUpe3JldHVybltuLGVdLnJlZHVjZSgoZnVuY3Rpb24obixlKXtyZXR1cm4gZihlKS5mb3JFYWNoKChmdW5jdGlvbihyKXt2YXIgbz1uW3JdLGk9ZVtyXSx1PXQobykmJnQoaSk7bltyXT11P3MobyxpKTppfSkpLG59KSx7fSl9ZnVuY3Rpb24gZChuLHQpe3ZhciByPWYobiksbz1mKHQpO3JldHVybiByLmxlbmd0aD09PW8ubGVuZ3RoJiZyLmV2ZXJ5KChmdW5jdGlvbihyKXt2YXIgbz1uW3JdLGk9dFtyXTtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiBvP1wiXCIuY29uY2F0KG8pPT09XCJcIi5jb25jYXQoaSk6ZShvKSYmZShpKT9kKG8saSk6bz09PWl9KSl9ZnVuY3Rpb24gbCh0LGUpe3ZhciByPXtzdGFydDpmdW5jdGlvbigpe3JldHVybiAwfSxjZW50ZXI6ZnVuY3Rpb24obil7cmV0dXJuIG8obikvMn0sZW5kOm99O2Z1bmN0aW9uIG8obil7cmV0dXJuIGUtbn1yZXR1cm57bWVhc3VyZTpmdW5jdGlvbihvKXtyZXR1cm4gbih0KT9lKk51bWJlcih0KTpyW3RdKG8pfX19ZnVuY3Rpb24gcChuLHQpe3ZhciBlPXIobi10KTtmdW5jdGlvbiBvKHQpe3JldHVybiB0PG59ZnVuY3Rpb24gaShuKXtyZXR1cm4gbj50fWZ1bmN0aW9uIHUobil7cmV0dXJuIG8obil8fGkobil9cmV0dXJue2xlbmd0aDplLG1heDp0LG1pbjpuLGNvbnN0cmFpbjpmdW5jdGlvbihlKXtyZXR1cm4gdShlKT9vKGUpP246dDplfSxyZWFjaGVkQW55OnUscmVhY2hlZE1heDppLHJlYWNoZWRNaW46byxyZW1vdmVPZmZzZXQ6ZnVuY3Rpb24obil7cmV0dXJuIGU/bi1lKk1hdGguY2VpbCgobi10KS9lKTpufX19ZnVuY3Rpb24gdihuLHQsZSl7dmFyIG89cCgwLG4pLGk9by5taW4sdT1vLmNvbnN0cmFpbixjPW4rMSxhPWYodCk7ZnVuY3Rpb24gZihuKXtyZXR1cm4gZT9yKChjK24pJWMpOnUobil9ZnVuY3Rpb24gcygpe3JldHVybiBhfWZ1bmN0aW9uIGQobil7cmV0dXJuIGE9ZihuKSxsfXZhciBsPXthZGQ6ZnVuY3Rpb24obil7cmV0dXJuIGQocygpK24pfSxjbG9uZTpmdW5jdGlvbigpe3JldHVybiB2KG4scygpLGUpfSxnZXQ6cyxzZXQ6ZCxtaW46aSxtYXg6bn07cmV0dXJuIGx9ZnVuY3Rpb24gbSgpe3ZhciBuPVtdO3ZhciB0PXthZGQ6ZnVuY3Rpb24oZSxyLG8saSl7cmV0dXJuIHZvaWQgMD09PWkmJihpPSExKSxlLmFkZEV2ZW50TGlzdGVuZXIocixvLGkpLG4ucHVzaCgoZnVuY3Rpb24oKXtyZXR1cm4gZS5yZW1vdmVFdmVudExpc3RlbmVyKHIsbyxpKX0pKSx0fSxyZW1vdmVBbGw6ZnVuY3Rpb24oKXtyZXR1cm4gbj1uLmZpbHRlcigoZnVuY3Rpb24obil7cmV0dXJuIG4oKX0pKSx0fX07cmV0dXJuIHR9ZnVuY3Rpb24gZyh0KXt2YXIgZT10O2Z1bmN0aW9uIHIobil7cmV0dXJuIGUvPW4saX1mdW5jdGlvbiBvKHQpe3JldHVybiBuKHQpP3Q6dC5nZXQoKX12YXIgaT17YWRkOmZ1bmN0aW9uKG4pe3JldHVybiBlKz1vKG4pLGl9LGRpdmlkZTpyLGdldDpmdW5jdGlvbigpe3JldHVybiBlfSxtdWx0aXBseTpmdW5jdGlvbihuKXtyZXR1cm4gZSo9bixpfSxub3JtYWxpemU6ZnVuY3Rpb24oKXtyZXR1cm4gMCE9PWUmJnIoZSksaX0sc2V0OmZ1bmN0aW9uKG4pe3JldHVybiBlPW8obiksaX0sc3VidHJhY3Q6ZnVuY3Rpb24obil7cmV0dXJuIGUtPW8obiksaX19O3JldHVybiBpfWZ1bmN0aW9uIHgobix0LGUsdSxjLGEsZixzLGQsbCxwLHYseCxoLHksUyl7dmFyIGI9bi5jcm9zcyx3PVtcIklOUFVUXCIsXCJTRUxFQ1RcIixcIlRFWFRBUkVBXCJdLEU9ZygwKSxBPW0oKSxNPW0oKSxUPXgubWVhc3VyZSgyMCksTz17bW91c2U6MzAwLHRvdWNoOjQwMH0sQj17bW91c2U6NTAwLHRvdWNoOjYwMH0sUD15PzU6MTYsaz0wLEk9MCx6PSExLEQ9ITEsTD0hMSxOPSExO2Z1bmN0aW9uIEMobil7aWYoIShOPVwibW91c2Vkb3duXCI9PT1uLnR5cGUpfHwwPT09bi5idXR0b24pe3ZhciB0LHIsbz1pKHUuZ2V0KCksYS5nZXQoKSk+PTIsZj1OfHwhbyxzPSh0PW4udGFyZ2V0LHI9dC5ub2RlTmFtZXx8XCJcIiwhKHcuaW5kZXhPZihyKT4tMSkpLGw9b3x8TiYmczt6PSEwLGMucG9pbnRlckRvd24obiksRS5zZXQodSksdS5zZXQoYSksZC51c2VCYXNlTWFzcygpLnVzZVNwZWVkKDgwKSxmdW5jdGlvbigpe3ZhciBuPU4/ZG9jdW1lbnQ6ZTtNLmFkZChuLFwidG91Y2htb3ZlXCIsVikuYWRkKG4sXCJ0b3VjaGVuZFwiLEgpLmFkZChuLFwibW91c2Vtb3ZlXCIsVikuYWRkKG4sXCJtb3VzZXVwXCIsSCl9KCksaz1jLnJlYWRQb2ludChuKSxJPWMucmVhZFBvaW50KG4sYiksdi5lbWl0KFwicG9pbnRlckRvd25cIiksZiYmKEw9ITEpLGwmJm4ucHJldmVudERlZmF1bHQoKX19ZnVuY3Rpb24gVihuKXtpZighRCYmIU4pe2lmKCFuLmNhbmNlbGFibGUpcmV0dXJuIEgobik7dmFyIGU9Yy5yZWFkUG9pbnQobikscj1jLnJlYWRQb2ludChuLGIpLG89aShlLGspLGE9aShyLEkpO2lmKCEoRD1vPmEpJiYhTClyZXR1cm4gSChuKX12YXIgcz1jLnBvaW50ZXJNb3ZlKG4pOyFMJiZzJiYoTD0hMCksZi5zdGFydCgpLHUuYWRkKHQuYXBwbHkocykpLG4ucHJldmVudERlZmF1bHQoKX1mdW5jdGlvbiBIKG4pe3ZhciBlPWwuYnlEaXN0YW5jZSgwLCExKS5pbmRleCE9PXAuZ2V0KCksYT1jLnBvaW50ZXJVcChuKSooeT9COk8pW04/XCJtb3VzZVwiOlwidG91Y2hcIl0sZj1mdW5jdGlvbihuLHQpe3ZhciBlPXAuY2xvbmUoKS5hZGQoLTEqbyhuKSksaT1lLmdldCgpPT09cC5taW58fGUuZ2V0KCk9PT1wLm1heCx1PWwuYnlEaXN0YW5jZShuLCF5KS5kaXN0YW5jZTtyZXR1cm4geXx8cihuKTxUP3U6IWgmJmk/LjQqdTpTJiZ0Py41KnU6bC5ieUluZGV4KGUuZ2V0KCksMCkuZGlzdGFuY2V9KHQuYXBwbHkoYSksZSksbT1mdW5jdGlvbihuLHQpe2lmKDA9PT1ufHwwPT09dClyZXR1cm4gMDtpZihyKG4pPD1yKHQpKXJldHVybiAwO3ZhciBlPWkocihuKSxyKHQpKTtyZXR1cm4gcihlL24pfShhLGYpLGc9aSh1LmdldCgpLEUuZ2V0KCkpPj0uNSx4PWUmJm0+Ljc1LGI9cihhKTxULHc9eD8xMDpQLEE9eD8xKzIuNSptOjE7ZyYmIU4mJihMPSEwKSxEPSExLHo9ITEsTS5yZW1vdmVBbGwoKSxkLnVzZVNwZWVkKGI/OTp3KS51c2VNYXNzKEEpLHMuZGlzdGFuY2UoZiwheSksTj0hMSx2LmVtaXQoXCJwb2ludGVyVXBcIil9ZnVuY3Rpb24gUihuKXtMJiZuLnByZXZlbnREZWZhdWx0KCl9cmV0dXJue2FkZEFjdGl2YXRpb25FdmVudHM6ZnVuY3Rpb24oKXt2YXIgbj1lO0EuYWRkKG4sXCJ0b3VjaG1vdmVcIiwoZnVuY3Rpb24oKXt9KSkuYWRkKG4sXCJ0b3VjaGVuZFwiLChmdW5jdGlvbigpe30pKS5hZGQobixcInRvdWNoc3RhcnRcIixDKS5hZGQobixcIm1vdXNlZG93blwiLEMpLmFkZChuLFwidG91Y2hjYW5jZWxcIixIKS5hZGQobixcImNvbnRleHRtZW51XCIsSCkuYWRkKG4sXCJjbGlja1wiLFIpfSxjbGlja0FsbG93ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hTH0scG9pbnRlckRvd246ZnVuY3Rpb24oKXtyZXR1cm4gen0scmVtb3ZlQWxsRXZlbnRzOmZ1bmN0aW9uKCl7QS5yZW1vdmVBbGwoKSxNLnJlbW92ZUFsbCgpfX19ZnVuY3Rpb24gaChuLHQsZSl7dmFyIHIsaSx1PShyPTIsaT1NYXRoLnBvdygxMCxyKSxmdW5jdGlvbihuKXtyZXR1cm4gTWF0aC5yb3VuZChuKmkpL2l9KSxjPWcoMCksYT1nKDApLGY9ZygwKSxzPTAsZD10LGw9ZTtmdW5jdGlvbiBwKG4pe3JldHVybiBkPW4sbX1mdW5jdGlvbiB2KG4pe3JldHVybiBsPW4sbX12YXIgbT17ZGlyZWN0aW9uOmZ1bmN0aW9uKCl7cmV0dXJuIHN9LHNlZWs6ZnVuY3Rpb24odCl7Zi5zZXQodCkuc3VidHJhY3Qobik7dmFyIGUscixpLHUscD0oZT1mLmdldCgpLChpPTApKyhlLShyPTApKS8oMTAwLXIpKihkLWkpKTtyZXR1cm4gcz1vKGYuZ2V0KCkpLGYubm9ybWFsaXplKCkubXVsdGlwbHkocCkuc3VidHJhY3QoYyksKHU9ZikuZGl2aWRlKGwpLGEuYWRkKHUpLG19LHNldHRsZTpmdW5jdGlvbih0KXt2YXIgZT10LmdldCgpLW4uZ2V0KCkscj0hdShlKTtyZXR1cm4gciYmbi5zZXQodCkscn0sdXBkYXRlOmZ1bmN0aW9uKCl7Yy5hZGQoYSksbi5hZGQoYyksYS5tdWx0aXBseSgwKX0sdXNlQmFzZU1hc3M6ZnVuY3Rpb24oKXtyZXR1cm4gdihlKX0sdXNlQmFzZVNwZWVkOmZ1bmN0aW9uKCl7cmV0dXJuIHAodCl9LHVzZU1hc3M6dix1c2VTcGVlZDpwfTtyZXR1cm4gbX1mdW5jdGlvbiB5KG4sdCxlLG8saSl7dmFyIHU9aS5tZWFzdXJlKDEwKSxjPWkubWVhc3VyZSg1MCksYT0hMTtyZXR1cm57Y29uc3RyYWluOmZ1bmN0aW9uKGkpe2lmKCFhJiZuLnJlYWNoZWRBbnkoZS5nZXQoKSkmJm4ucmVhY2hlZEFueSh0LmdldCgpKSl7dmFyIGY9bi5yZWFjaGVkTWluKHQuZ2V0KCkpP1wibWluXCI6XCJtYXhcIixzPXIobltmXS10LmdldCgpKSxkPWUuZ2V0KCktdC5nZXQoKSxsPU1hdGgubWluKHMvYywuODUpO2Uuc3VidHJhY3QoZCpsKSwhaSYmcihkKTx1JiYoZS5zZXQobi5jb25zdHJhaW4oZS5nZXQoKSkpLG8udXNlU3BlZWQoMTApLnVzZU1hc3MoMykpfX0sdG9nZ2xlQWN0aXZlOmZ1bmN0aW9uKG4pe2E9IW59fX1mdW5jdGlvbiBTKG4sdCxlLHIpe3ZhciBvPXAoLXQrbixlWzBdKSxpPWUubWFwKG8uY29uc3RyYWluKTtyZXR1cm57c25hcHNDb250YWluZWQ6ZnVuY3Rpb24oKXtpZih0PD1uKXJldHVybltvLm1heF07aWYoXCJrZWVwU25hcHNcIj09PXIpcmV0dXJuIGk7dmFyIGU9ZnVuY3Rpb24oKXt2YXIgbj1pWzBdLHQ9YyhpKSxlPWkubGFzdEluZGV4T2Yobikscj1pLmluZGV4T2YodCkrMTtyZXR1cm4gcChlLHIpfSgpLHU9ZS5taW4sYT1lLm1heDtyZXR1cm4gaS5zbGljZSh1LGEpfSgpfX1mdW5jdGlvbiBiKG4sdCxlLHIpe3ZhciBvPXAodC5taW4rLjEsdC5tYXgrLjEpLGk9by5yZWFjaGVkTWluLHU9by5yZWFjaGVkTWF4O3JldHVybntsb29wOmZ1bmN0aW9uKHQpe2lmKGZ1bmN0aW9uKG4pe3JldHVybiAxPT09bj91KGUuZ2V0KCkpOi0xPT09biYmaShlLmdldCgpKX0odCkpe3ZhciBvPW4qKC0xKnQpO3IuZm9yRWFjaCgoZnVuY3Rpb24obil7cmV0dXJuIG4uYWRkKG8pfSkpfX19fWZ1bmN0aW9uIHcobil7dmFyIHQ9bi5tYXgsZT1uLmxlbmd0aDtyZXR1cm57Z2V0OmZ1bmN0aW9uKG4pe3JldHVybihuLXQpLy1lfX19ZnVuY3Rpb24gRShuLHQsZSxpLHUpe3ZhciBjPWkucmVhY2hlZEFueSxhPWkucmVtb3ZlT2Zmc2V0LGY9aS5jb25zdHJhaW47ZnVuY3Rpb24gcyhuKXtyZXR1cm4gbi5jb25jYXQoKS5zb3J0KChmdW5jdGlvbihuLHQpe3JldHVybiByKG4pLXIodCl9KSlbMF19ZnVuY3Rpb24gZCh0LHIpe3ZhciBpPVt0LHQrZSx0LWVdO3JldHVybiBuP3Mocj9pLmZpbHRlcigoZnVuY3Rpb24obil7cmV0dXJuIG8obik9PT1yfSkpOmkpOmlbMF19cmV0dXJue2J5RGlzdGFuY2U6ZnVuY3Rpb24oZSxvKXt2YXIgaT11LmdldCgpK2Uscz1mdW5jdGlvbihlKXt2YXIgbz1uP2EoZSk6ZihlKTtyZXR1cm57aW5kZXg6dC5tYXAoKGZ1bmN0aW9uKG4pe3JldHVybiBuLW99KSkubWFwKChmdW5jdGlvbihuKXtyZXR1cm4gZChuLDApfSkpLm1hcCgoZnVuY3Rpb24obix0KXtyZXR1cm57ZGlmZjpuLGluZGV4OnR9fSkpLnNvcnQoKGZ1bmN0aW9uKG4sdCl7cmV0dXJuIHIobi5kaWZmKS1yKHQuZGlmZil9KSlbMF0uaW5kZXgsZGlzdGFuY2U6b319KGkpLGw9cy5pbmRleCxwPXMuZGlzdGFuY2Usdj0hbiYmYyhpKTtyZXR1cm4hb3x8dj97aW5kZXg6bCxkaXN0YW5jZTplfTp7aW5kZXg6bCxkaXN0YW5jZTplK2QodFtsXS1wLDApfX0sYnlJbmRleDpmdW5jdGlvbihuLGUpe3JldHVybntpbmRleDpuLGRpc3RhbmNlOmQodFtuXS11LmdldCgpLGUpfX0sc2hvcnRjdXQ6ZH19ZnVuY3Rpb24gQShuLHQsZSl7dmFyIHI9XCJ4XCI9PT1uLnNjcm9sbD9mdW5jdGlvbihuKXtyZXR1cm5cInRyYW5zbGF0ZTNkKFwiLmNvbmNhdChuLFwicHgsMHB4LDBweClcIil9OmZ1bmN0aW9uKG4pe3JldHVyblwidHJhbnNsYXRlM2QoMHB4LFwiLmNvbmNhdChuLFwicHgsMHB4KVwiKX0sbz1lLnN0eWxlLGk9ITE7cmV0dXJue2NsZWFyOmZ1bmN0aW9uKCl7aXx8KG8udHJhbnNmb3JtPVwiXCIsZS5nZXRBdHRyaWJ1dGUoXCJzdHlsZVwiKXx8ZS5yZW1vdmVBdHRyaWJ1dGUoXCJzdHlsZVwiKSl9LHRvOmZ1bmN0aW9uKG4pe2l8fChvLnRyYW5zZm9ybT1yKHQuYXBwbHkobi5nZXQoKSkpKX0sdG9nZ2xlQWN0aXZlOmZ1bmN0aW9uKG4pe2k9IW59fX1mdW5jdGlvbiBNKG4sdCxlLHIsbyxpLGMsYSxmKXt2YXIgcyxkPXUobyksbD11KG8pLnJldmVyc2UoKSxwPShzPWlbMF0tMSx4KG0obCxzKSxcImVuZFwiKSkuY29uY2F0KGZ1bmN0aW9uKCl7dmFyIG49ZS1pWzBdLTE7cmV0dXJuIHgobShkLG4pLFwic3RhcnRcIil9KCkpO2Z1bmN0aW9uIHYobix0KXtyZXR1cm4gbi5yZWR1Y2UoKGZ1bmN0aW9uKG4sdCl7cmV0dXJuIG4tb1t0XX0pLHQpfWZ1bmN0aW9uIG0obix0KXtyZXR1cm4gbi5yZWR1Y2UoKGZ1bmN0aW9uKG4sZSl7cmV0dXJuIHYobix0KT4wP24uY29uY2F0KFtlXSk6bn0pLFtdKX1mdW5jdGlvbiB4KGUsbyl7dmFyIGk9XCJzdGFydFwiPT09byx1PWk/LXI6cixzPWMuZmluZFNsaWRlQm91bmRzKFt1XSk7cmV0dXJuIGUubWFwKChmdW5jdGlvbihlKXt2YXIgbz1pPzA6LXIsdT1pP3I6MCxjPXMuZmlsdGVyKChmdW5jdGlvbihuKXtyZXR1cm4gbi5pbmRleD09PWV9KSlbMF1baT9cImVuZFwiOlwic3RhcnRcIl0sZD1nKC0xKSxsPWcoLTEpLHA9QShuLHQsZltlXSk7cmV0dXJue2luZGV4OmUsbG9jYXRpb246bCx0cmFuc2xhdGU6cCx0YXJnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZC5zZXQoYS5nZXQoKT5jP286dSl9fX0pKX1yZXR1cm57Y2FuTG9vcDpmdW5jdGlvbigpe3JldHVybiBwLmV2ZXJ5KChmdW5jdGlvbihuKXt2YXIgdD1uLmluZGV4O3JldHVybiB2KGQuZmlsdGVyKChmdW5jdGlvbihuKXtyZXR1cm4gbiE9PXR9KSksZSk8PS4xfSkpfSxjbGVhcjpmdW5jdGlvbigpe3AuZm9yRWFjaCgoZnVuY3Rpb24obil7cmV0dXJuIG4udHJhbnNsYXRlLmNsZWFyKCl9KSl9LGxvb3A6ZnVuY3Rpb24oKXtwLmZvckVhY2goKGZ1bmN0aW9uKG4pe3ZhciB0PW4udGFyZ2V0LGU9bi50cmFuc2xhdGUscj1uLmxvY2F0aW9uLG89dCgpO28uZ2V0KCkhPT1yLmdldCgpJiYoMD09PW8uZ2V0KCk/ZS5jbGVhcigpOmUudG8obyksci5zZXQobykpfSkpfSxsb29wUG9pbnRzOnB9fWZ1bmN0aW9uIFQobix0LGUscixvLGksdSl7dmFyIGM9by5yZW1vdmVPZmZzZXQsYT1vLmNvbnN0cmFpbixmPWk/WzAsdCwtdF06WzBdLHM9ZChmLHUpO2Z1bmN0aW9uIGQodCxvKXt2YXIgaT10fHxmLHU9ZnVuY3Rpb24obil7dmFyIHQ9bnx8MDtyZXR1cm4gZS5tYXAoKGZ1bmN0aW9uKG4pe3JldHVybiBwKC41LG4tLjUpLmNvbnN0cmFpbihuKnQpfSkpfShvKTtyZXR1cm4gaS5yZWR1Y2UoKGZ1bmN0aW9uKHQsbyl7dmFyIGk9ci5tYXAoKGZ1bmN0aW9uKHQscil7cmV0dXJue3N0YXJ0OnQtZVtyXSt1W3JdK28sZW5kOnQrbi11W3JdK28saW5kZXg6cn19KSk7cmV0dXJuIHQuY29uY2F0KGkpfSksW10pfXJldHVybntjaGVjazpmdW5jdGlvbihuLHQpe3ZhciBlPWk/YyhuKTphKG4pO3JldHVybih0fHxzKS5yZWR1Y2UoKGZ1bmN0aW9uKG4sdCl7dmFyIHI9dC5pbmRleCxvPXQuc3RhcnQsaT10LmVuZDtyZXR1cm4hKC0xIT09bi5pbmRleE9mKHIpKSYmKG88ZSYmaT5lKT9uLmNvbmNhdChbcl0pOm59KSxbXSl9LGZpbmRTbGlkZUJvdW5kczpkfX1mdW5jdGlvbiBPKHQsZSxyKXt2YXIgbz1uKHIpO3JldHVybntncm91cFNsaWRlczpmdW5jdGlvbihuKXtyZXR1cm4gbz9mdW5jdGlvbihuLHQpe3JldHVybiB1KG4pLmZpbHRlcigoZnVuY3Rpb24obil7cmV0dXJuIG4ldD09MH0pKS5tYXAoKGZ1bmN0aW9uKGUpe3JldHVybiBuLnNsaWNlKGUsZSt0KX0pKX0obixyKTpmdW5jdGlvbihuKXtyZXR1cm4gdShuKS5yZWR1Y2UoKGZ1bmN0aW9uKG4scil7dmFyIG89ZS5zbGljZShjKG4pLHIrMSkucmVkdWNlKChmdW5jdGlvbihuLHQpe3JldHVybiBuK3R9KSwwKTtyZXR1cm4hcnx8bz50P24uY29uY2F0KHIpOm59KSxbXSkubWFwKChmdW5jdGlvbih0LGUscil7cmV0dXJuIG4uc2xpY2UodCxyW2UrMV0pfSkpfShuKX19fWZ1bmN0aW9uIEIobix0LGUsbyxpKXt2YXIgZj1vLmFsaWduLHM9by5heGlzLGQ9by5kaXJlY3Rpb24sQj1vLnN0YXJ0SW5kZXgsUD1vLmluVmlld1RocmVzaG9sZCxrPW8ubG9vcCxJPW8uc3BlZWQsej1vLmRyYWdGcmVlLEQ9by5zbGlkZXNUb1Njcm9sbCxMPW8uc2tpcFNuYXBzLE49by5jb250YWluU2Nyb2xsLEM9dC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxWPWUubWFwKChmdW5jdGlvbihuKXtyZXR1cm4gbi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKX0pKSxIPWZ1bmN0aW9uKG4pe3ZhciB0PVwicnRsXCI9PT1uPy0xOjE7cmV0dXJue2FwcGx5OmZ1bmN0aW9uKG4pe3JldHVybiBuKnR9fX0oZCksUj1mdW5jdGlvbihuLHQpe3ZhciBlPVwieVwiPT09bj9cInlcIjpcInhcIjtyZXR1cm57c2Nyb2xsOmUsY3Jvc3M6XCJ5XCI9PT1uP1wieFwiOlwieVwiLHN0YXJ0RWRnZTpcInlcIj09PWU/XCJ0b3BcIjpcInJ0bFwiPT09dD9cInJpZ2h0XCI6XCJsZWZ0XCIsZW5kRWRnZTpcInlcIj09PWU/XCJib3R0b21cIjpcInJ0bFwiPT09dD9cImxlZnRcIjpcInJpZ2h0XCIsbWVhc3VyZVNpemU6ZnVuY3Rpb24obil7dmFyIHQ9bi53aWR0aCxyPW4uaGVpZ2h0O3JldHVyblwieFwiPT09ZT90OnJ9fX0ocyxkKSxqPVIubWVhc3VyZVNpemUoQyksRj1mdW5jdGlvbihuKXtyZXR1cm57bWVhc3VyZTpmdW5jdGlvbih0KXtyZXR1cm4gbioodC8xMDApfX19KGopLHE9bChmLGopLFU9IWsmJlwiXCIhPT1OLEc9ZnVuY3Rpb24obix0LGUsbyxpKXt2YXIgdT1uLm1lYXN1cmVTaXplLGY9bi5zdGFydEVkZ2Uscz1uLmVuZEVkZ2UsZD1mdW5jdGlvbigpe2lmKCFpKXJldHVybiAwO3ZhciBuPWVbMF07cmV0dXJuIHIodFtmXS1uW2ZdKX0oKSxsPWZ1bmN0aW9uKCl7aWYoIWkpcmV0dXJuIDA7dmFyIG49d2luZG93LmdldENvbXB1dGVkU3R5bGUoYyhvKSk7cmV0dXJuIHBhcnNlRmxvYXQobi5nZXRQcm9wZXJ0eVZhbHVlKFwibWFyZ2luLVwiLmNvbmNhdChzKSkpfSgpLHA9ZS5tYXAodSksdj1lLm1hcCgoZnVuY3Rpb24obix0LGUpe3ZhciByPSF0LG89dD09PWEoZSk7cmV0dXJuIHI/cFt0XStkOm8/cFt0XStsOmVbdCsxXVtmXS1uW2ZdfSkpLm1hcChyKTtyZXR1cm57c2xpZGVTaXplczpwLHNsaWRlU2l6ZXNXaXRoR2Fwczp2fX0oUixDLFYsZSxrfHxcIlwiIT09TiksSj1HLnNsaWRlU2l6ZXMsVz1HLnNsaWRlU2l6ZXNXaXRoR2FwcyxYPU8oaixXLEQpLFk9ZnVuY3Rpb24obix0LGUsbyxpLHUsZil7dmFyIHMsZD1uLnN0YXJ0RWRnZSxsPW4uZW5kRWRnZSxwPXUuZ3JvdXBTbGlkZXMsdj1wKG8pLm1hcCgoZnVuY3Rpb24obil7cmV0dXJuIGMobilbbF0tblswXVtkXX0pKS5tYXAocikubWFwKHQubWVhc3VyZSksbT1vLm1hcCgoZnVuY3Rpb24obil7cmV0dXJuIGVbZF0tbltkXX0pKS5tYXAoKGZ1bmN0aW9uKG4pe3JldHVybi1yKG4pfSkpLGc9KHM9YyhtKS1jKGkpLHAobSkubWFwKChmdW5jdGlvbihuKXtyZXR1cm4gblswXX0pKS5tYXAoKGZ1bmN0aW9uKG4sdCxlKXt2YXIgcj0hdCxvPXQ9PT1hKGUpO3JldHVybiBmJiZyPzA6ZiYmbz9zOm4rdlt0XX0pKSk7cmV0dXJue3NuYXBzOm0sc25hcHNBbGlnbmVkOmd9fShSLHEsQyxWLFcsWCxVKSxLPVkuc25hcHMsUT1ZLnNuYXBzQWxpZ25lZCxaPS1jKEspK2MoVyksJD1TKGosWixRLE4pLnNuYXBzQ29udGFpbmVkLF89VT8kOlEsbm49ZnVuY3Rpb24obix0LGUpe3ZhciByLG87cmV0dXJue2xpbWl0OihyPXRbMF0sbz1jKHQpLHAoZT9yLW46byxyKSl9fShaLF8saykubGltaXQsdG49dihhKF8pLEIsayksZW49dG4uY2xvbmUoKSxybj11KGUpLG9uPWZ1bmN0aW9uKG4pe3ZhciB0PTA7ZnVuY3Rpb24gZShuLGUpe3JldHVybiBmdW5jdGlvbigpe249PT0hIXQmJmUoKX19ZnVuY3Rpb24gcigpe3Q9d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShuKX1yZXR1cm57cHJvY2VlZDplKCEwLHIpLHN0YXJ0OmUoITEsciksc3RvcDplKCEwLChmdW5jdGlvbigpe3dpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSh0KSx0PTB9KSl9fSgoZnVuY3Rpb24oKXtrfHx2bi5zY3JvbGxCb3VuZHMuY29uc3RyYWluKHZuLmRyYWdIYW5kbGVyLnBvaW50ZXJEb3duKCkpLHZuLnNjcm9sbEJvZHkuc2VlayhhbikudXBkYXRlKCk7dmFyIG49dm4uc2Nyb2xsQm9keS5zZXR0bGUoYW4pO24mJiF2bi5kcmFnSGFuZGxlci5wb2ludGVyRG93bigpJiYodm4uYW5pbWF0aW9uLnN0b3AoKSxpLmVtaXQoXCJzZXR0bGVcIikpLG58fGkuZW1pdChcInNjcm9sbFwiKSxrJiYodm4uc2Nyb2xsTG9vcGVyLmxvb3Aodm4uc2Nyb2xsQm9keS5kaXJlY3Rpb24oKSksdm4uc2xpZGVMb29wZXIubG9vcCgpKSx2bi50cmFuc2xhdGUudG8oY24pLHZuLmFuaW1hdGlvbi5wcm9jZWVkKCl9KSksdW49X1t0bi5nZXQoKV0sY249Zyh1biksYW49Zyh1biksZm49aChjbixJLDEpLHNuPUUoayxfLFosbm4sYW4pLGRuPWZ1bmN0aW9uKG4sdCxlLHIsbyxpKXtmdW5jdGlvbiB1KHIpe3ZhciB1PXIuZGlzdGFuY2UsYz1yLmluZGV4IT09dC5nZXQoKTt1JiYobi5zdGFydCgpLG8uYWRkKHUpKSxjJiYoZS5zZXQodC5nZXQoKSksdC5zZXQoci5pbmRleCksaS5lbWl0KFwic2VsZWN0XCIpKX1yZXR1cm57ZGlzdGFuY2U6ZnVuY3Rpb24obix0KXt1KHIuYnlEaXN0YW5jZShuLHQpKX0saW5kZXg6ZnVuY3Rpb24obixlKXt2YXIgbz10LmNsb25lKCkuc2V0KG4pO3Uoci5ieUluZGV4KG8uZ2V0KCksZSkpfX19KG9uLHRuLGVuLHNuLGFuLGkpLGxuPVQoaixaLEosSyxubixrLFApLHBuPXgoUixILG4sYW4sZnVuY3Rpb24obil7dmFyIHQsZTtmdW5jdGlvbiBvKG4pe3JldHVyblwidW5kZWZpbmVkXCIhPXR5cGVvZiBUb3VjaEV2ZW50JiZuIGluc3RhbmNlb2YgVG91Y2hFdmVudH1mdW5jdGlvbiBpKG4pe3JldHVybiBuLnRpbWVTdGFtcH1mdW5jdGlvbiB1KHQsZSl7dmFyIHI9ZXx8bi5zY3JvbGwsaT1cImNsaWVudFwiLmNvbmNhdChcInhcIj09PXI/XCJYXCI6XCJZXCIpO3JldHVybihvKHQpP3QudG91Y2hlc1swXTp0KVtpXX1yZXR1cm57aXNUb3VjaEV2ZW50Om8scG9pbnRlckRvd246ZnVuY3Rpb24obil7cmV0dXJuIHQ9bixlPW4sdShuKX0scG9pbnRlck1vdmU6ZnVuY3Rpb24obil7dmFyIHI9dShuKS11KGUpLG89aShuKS1pKHQpPjE3MDtyZXR1cm4gZT1uLG8mJih0PW4pLHJ9LHBvaW50ZXJVcDpmdW5jdGlvbihuKXtpZighdHx8IWUpcmV0dXJuIDA7dmFyIG89dShlKS11KHQpLGM9aShuKS1pKHQpLGE9aShuKS1pKGUpPjE3MCxmPW8vYztyZXR1cm4gYyYmIWEmJnIoZik+LjE/ZjowfSxyZWFkUG9pbnQ6dX19KFIpLGNuLG9uLGRuLGZuLHNuLHRuLGksRixrLHosTCksdm49e2NvbnRhaW5lclJlY3Q6QyxzbGlkZVJlY3RzOlYsYW5pbWF0aW9uOm9uLGF4aXM6UixkaXJlY3Rpb246SCxkcmFnSGFuZGxlcjpwbixldmVudFN0b3JlOm0oKSxwZXJjZW50T2ZWaWV3OkYsaW5kZXg6dG4saW5kZXhQcmV2aW91czplbixsaW1pdDpubixsb2NhdGlvbjpjbixvcHRpb25zOm8sc2Nyb2xsQm9keTpmbixzY3JvbGxCb3VuZHM6eShubixjbixhbixmbixGKSxzY3JvbGxMb29wZXI6YihaLG5uLGNuLFtjbixhbl0pLHNjcm9sbFByb2dyZXNzOncobm4pLHNjcm9sbFNuYXBzOl8sc2Nyb2xsVGFyZ2V0OnNuLHNjcm9sbFRvOmRuLHNsaWRlTG9vcGVyOk0oUixILGosWixXLF8sbG4sY24sZSksc2xpZGVzVG9TY3JvbGw6WCxzbGlkZXNJblZpZXc6bG4sc2xpZGVJbmRleGVzOnJuLHRhcmdldDphbix0cmFuc2xhdGU6QShSLEgsdCl9O3JldHVybiB2bn12YXIgUD17YWxpZ246XCJjZW50ZXJcIixheGlzOlwieFwiLGNvbnRhaW5TY3JvbGw6XCJcIixkaXJlY3Rpb246XCJsdHJcIixzbGlkZXNUb1Njcm9sbDoxLGJyZWFrcG9pbnRzOnt9LGRyYWdGcmVlOiExLGRyYWdnYWJsZTohMCxpblZpZXdUaHJlc2hvbGQ6MCxsb29wOiExLHNraXBTbmFwczohMSxzcGVlZDoxMCxzdGFydEluZGV4OjAsYWN0aXZlOiEwfTtmdW5jdGlvbiBrKCl7ZnVuY3Rpb24gbihuLHQpe3JldHVybiBzKG4sdHx8e30pfXJldHVybnttZXJnZTpuLGFyZUVxdWFsOmZ1bmN0aW9uKG4sdCl7cmV0dXJuIEpTT04uc3RyaW5naWZ5KGYobi5icmVha3BvaW50c3x8e30pKT09PUpTT04uc3RyaW5naWZ5KGYodC5icmVha3BvaW50c3x8e30pKSYmZChuLHQpfSxhdE1lZGlhOmZ1bmN0aW9uKHQpe3ZhciBlPXQuYnJlYWtwb2ludHN8fHt9LHI9ZihlKS5maWx0ZXIoKGZ1bmN0aW9uKG4pe3JldHVybiB3aW5kb3cubWF0Y2hNZWRpYShuKS5tYXRjaGVzfSkpLm1hcCgoZnVuY3Rpb24obil7cmV0dXJuIGVbbl19KSkucmVkdWNlKChmdW5jdGlvbih0LGUpe3JldHVybiBuKHQsZSl9KSx7fSk7cmV0dXJuIG4odCxyKX19fWZ1bmN0aW9uIEkobix0LGUpe3ZhciByLG8saSx1LGMsYT1tKCksZj1rKCkscz1mdW5jdGlvbigpe3ZhciBuPWsoKSx0PW4uYXRNZWRpYSxlPW4uYXJlRXF1YWwscj1bXSxvPVtdO2Z1bmN0aW9uIGkobil7dmFyIHI9dChuLm9wdGlvbnMpO3JldHVybiBmdW5jdGlvbigpe3JldHVybiFlKHIsdChuLm9wdGlvbnMpKX19dmFyIHU9e2luaXQ6ZnVuY3Rpb24obixlKXtyZXR1cm4gbz1uLm1hcChpKSwocj1uLmZpbHRlcigoZnVuY3Rpb24obil7cmV0dXJuIHQobi5vcHRpb25zKS5hY3RpdmV9KSkpLmZvckVhY2goKGZ1bmN0aW9uKG4pe3JldHVybiBuLmluaXQoZSl9KSksbi5yZWR1Y2UoKGZ1bmN0aW9uKG4sdCl7dmFyIGU7cmV0dXJuIE9iamVjdC5hc3NpZ24obiwoKGU9e30pW3QubmFtZV09dCxlKSl9KSx7fSl9LGRlc3Ryb3k6ZnVuY3Rpb24oKXtyPXIuZmlsdGVyKChmdW5jdGlvbihuKXtyZXR1cm4gbi5kZXN0cm95KCl9KSl9LGhhdmVDaGFuZ2VkOmZ1bmN0aW9uKCl7cmV0dXJuIG8uc29tZSgoZnVuY3Rpb24obil7cmV0dXJuIG4oKX0pKX19O3JldHVybiB1fSgpLGQ9ZnVuY3Rpb24oKXt2YXIgbj17fTtmdW5jdGlvbiB0KHQpe3JldHVybiBuW3RdfHxbXX12YXIgZT17ZW1pdDpmdW5jdGlvbihuKXtyZXR1cm4gdChuKS5mb3JFYWNoKChmdW5jdGlvbih0KXtyZXR1cm4gdChuKX0pKSxlfSxvZmY6ZnVuY3Rpb24ocixvKXtyZXR1cm4gbltyXT10KHIpLmZpbHRlcigoZnVuY3Rpb24obil7cmV0dXJuIG4hPT1vfSkpLGV9LG9uOmZ1bmN0aW9uKHIsbyl7cmV0dXJuIG5bcl09dChyKS5jb25jYXQoW29dKSxlfX07cmV0dXJuIGV9KCksbD1kLm9uLHA9ZC5vZmYsdj13LGc9ITEseD1mLm1lcmdlKFAsSS5nbG9iYWxPcHRpb25zKSxoPWYubWVyZ2UoeCkseT1bXSxTPTA7ZnVuY3Rpb24gYih0LGUpe2lmKCFnKXt2YXIgYSxsO2lmKGE9XCJjb250YWluZXJcImluIG4mJm4uY29udGFpbmVyLGw9XCJzbGlkZXNcImluIG4mJm4uc2xpZGVzLGk9XCJyb290XCJpbiBuP24ucm9vdDpuLHU9YXx8aS5jaGlsZHJlblswXSxjPWx8fFtdLnNsaWNlLmNhbGwodS5jaGlsZHJlbikseD1mLm1lcmdlKHgsdCksaD1mLmF0TWVkaWEoeCkscj1CKGksdSxjLGgsZCksUz1yLmF4aXMubWVhc3VyZVNpemUoaS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSksIWguYWN0aXZlKXJldHVybiBFKCk7aWYoci50cmFuc2xhdGUudG8oci5sb2NhdGlvbikseT1lfHx5LG89cy5pbml0KHksTyksaC5sb29wKXtpZighci5zbGlkZUxvb3Blci5jYW5Mb29wKCkpcmV0dXJuIEUoKSxiKHtsb29wOiExfSxlKTtyLnNsaWRlTG9vcGVyLmxvb3AoKX1oLmRyYWdnYWJsZSYmdS5vZmZzZXRQYXJlbnQmJmMubGVuZ3RoJiZyLmRyYWdIYW5kbGVyLmFkZEFjdGl2YXRpb25FdmVudHMoKX19ZnVuY3Rpb24gdyhuLHQpe3ZhciBlPVQoKTtFKCksYihmLm1lcmdlKHtzdGFydEluZGV4OmV9LG4pLHQpLGQuZW1pdChcInJlSW5pdFwiKX1mdW5jdGlvbiBFKCl7ci5kcmFnSGFuZGxlci5yZW1vdmVBbGxFdmVudHMoKSxyLmFuaW1hdGlvbi5zdG9wKCksci5ldmVudFN0b3JlLnJlbW92ZUFsbCgpLHIudHJhbnNsYXRlLmNsZWFyKCksci5zbGlkZUxvb3Blci5jbGVhcigpLHMuZGVzdHJveSgpfWZ1bmN0aW9uIEEobil7dmFyIHQ9cltuP1widGFyZ2V0XCI6XCJsb2NhdGlvblwiXS5nZXQoKSxlPWgubG9vcD9cInJlbW92ZU9mZnNldFwiOlwiY29uc3RyYWluXCI7cmV0dXJuIHIuc2xpZGVzSW5WaWV3LmNoZWNrKHIubGltaXRbZV0odCkpfWZ1bmN0aW9uIE0obix0LGUpe2guYWN0aXZlJiYhZyYmKHIuc2Nyb2xsQm9keS51c2VCYXNlTWFzcygpLnVzZVNwZWVkKHQ/MTAwOmguc3BlZWQpLHIuc2Nyb2xsVG8uaW5kZXgobixlfHwwKSl9ZnVuY3Rpb24gVCgpe3JldHVybiByLmluZGV4LmdldCgpfXZhciBPPXtjYW5TY3JvbGxOZXh0OmZ1bmN0aW9uKCl7cmV0dXJuIHIuaW5kZXguY2xvbmUoKS5hZGQoMSkuZ2V0KCkhPT1UKCl9LGNhblNjcm9sbFByZXY6ZnVuY3Rpb24oKXtyZXR1cm4gci5pbmRleC5jbG9uZSgpLmFkZCgtMSkuZ2V0KCkhPT1UKCl9LGNsaWNrQWxsb3dlZDpmdW5jdGlvbigpe3JldHVybiByLmRyYWdIYW5kbGVyLmNsaWNrQWxsb3dlZCgpfSxjb250YWluZXJOb2RlOmZ1bmN0aW9uKCl7cmV0dXJuIHV9LGludGVybmFsRW5naW5lOmZ1bmN0aW9uKCl7cmV0dXJuIHJ9LGRlc3Ryb3k6ZnVuY3Rpb24oKXtnfHwoZz0hMCxhLnJlbW92ZUFsbCgpLEUoKSxkLmVtaXQoXCJkZXN0cm95XCIpKX0sb2ZmOnAsb246bCxwbHVnaW5zOmZ1bmN0aW9uKCl7cmV0dXJuIG99LHByZXZpb3VzU2Nyb2xsU25hcDpmdW5jdGlvbigpe3JldHVybiByLmluZGV4UHJldmlvdXMuZ2V0KCl9LHJlSW5pdDp2LHJvb3ROb2RlOmZ1bmN0aW9uKCl7cmV0dXJuIGl9LHNjcm9sbE5leHQ6ZnVuY3Rpb24obil7TShyLmluZGV4LmNsb25lKCkuYWRkKDEpLmdldCgpLCEwPT09biwtMSl9LHNjcm9sbFByZXY6ZnVuY3Rpb24obil7TShyLmluZGV4LmNsb25lKCkuYWRkKC0xKS5nZXQoKSwhMD09PW4sMSl9LHNjcm9sbFByb2dyZXNzOmZ1bmN0aW9uKCl7cmV0dXJuIHIuc2Nyb2xsUHJvZ3Jlc3MuZ2V0KHIubG9jYXRpb24uZ2V0KCkpfSxzY3JvbGxTbmFwTGlzdDpmdW5jdGlvbigpe3JldHVybiByLnNjcm9sbFNuYXBzLm1hcChyLnNjcm9sbFByb2dyZXNzLmdldCl9LHNjcm9sbFRvOk0sc2VsZWN0ZWRTY3JvbGxTbmFwOlQsc2xpZGVOb2RlczpmdW5jdGlvbigpe3JldHVybiBjfSxzbGlkZXNJblZpZXc6QSxzbGlkZXNOb3RJblZpZXc6ZnVuY3Rpb24obil7dmFyIHQ9QShuKTtyZXR1cm4gci5zbGlkZUluZGV4ZXMuZmlsdGVyKChmdW5jdGlvbihuKXtyZXR1cm4tMT09PXQuaW5kZXhPZihuKX0pKX19O3JldHVybiBiKHQsZSksYS5hZGQod2luZG93LFwicmVzaXplXCIsKGZ1bmN0aW9uKCl7dmFyIG49Zi5hdE1lZGlhKHgpLHQ9IWYuYXJlRXF1YWwobixoKSxlPXIuYXhpcy5tZWFzdXJlU2l6ZShpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpKSxvPVMhPT1lLHU9cy5oYXZlQ2hhbmdlZCgpOyhvfHx0fHx1KSYmdygpLGQuZW1pdChcInJlc2l6ZVwiKX0pKSxzZXRUaW1lb3V0KChmdW5jdGlvbigpe3JldHVybiBkLmVtaXQoXCJpbml0XCIpfSksMCksT31yZXR1cm4gSS5nbG9iYWxPcHRpb25zPXZvaWQgMCxJLm9wdGlvbnNIYW5kbGVyPWssSX0pKTtcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdGZ1bmN0aW9uKCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuXHRcdGZ1bmN0aW9uKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgZGVmaW5pdGlvbikge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmosIHByb3ApIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApOyB9IiwiZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpOyBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzczsgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG4vKiFcbiAqIEdTQVAgMy4xMS4xXG4gKiBodHRwczovL2dyZWVuc29jay5jb21cbiAqXG4gKiBAbGljZW5zZSBDb3B5cmlnaHQgMjAwOC0yMDIyLCBHcmVlblNvY2suIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBTdWJqZWN0IHRvIHRoZSB0ZXJtcyBhdCBodHRwczovL2dyZWVuc29jay5jb20vc3RhbmRhcmQtbGljZW5zZSBvciBmb3JcbiAqIENsdWIgR3JlZW5Tb2NrIG1lbWJlcnMsIHRoZSBhZ3JlZW1lbnQgaXNzdWVkIHdpdGggdGhhdCBtZW1iZXJzaGlwLlxuICogQGF1dGhvcjogSmFjayBEb3lsZSwgamFja0BncmVlbnNvY2suY29tXG4qL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xudmFyIF9jb25maWcgPSB7XG4gIGF1dG9TbGVlcDogMTIwLFxuICBmb3JjZTNEOiBcImF1dG9cIixcbiAgbnVsbFRhcmdldFdhcm46IDEsXG4gIHVuaXRzOiB7XG4gICAgbGluZUhlaWdodDogXCJcIlxuICB9XG59LFxuICAgIF9kZWZhdWx0cyA9IHtcbiAgZHVyYXRpb246IC41LFxuICBvdmVyd3JpdGU6IGZhbHNlLFxuICBkZWxheTogMFxufSxcbiAgICBfc3VwcHJlc3NPdmVyd3JpdGVzLFxuICAgIF9yZXZlcnRpbmcsXG4gICAgX2NvbnRleHQsXG4gICAgX2JpZ051bSA9IDFlOCxcbiAgICBfdGlueU51bSA9IDEgLyBfYmlnTnVtLFxuICAgIF8yUEkgPSBNYXRoLlBJICogMixcbiAgICBfSEFMRl9QSSA9IF8yUEkgLyA0LFxuICAgIF9nc0lEID0gMCxcbiAgICBfc3FydCA9IE1hdGguc3FydCxcbiAgICBfY29zID0gTWF0aC5jb3MsXG4gICAgX3NpbiA9IE1hdGguc2luLFxuICAgIF9pc1N0cmluZyA9IGZ1bmN0aW9uIF9pc1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiO1xufSxcbiAgICBfaXNGdW5jdGlvbiA9IGZ1bmN0aW9uIF9pc0Z1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIjtcbn0sXG4gICAgX2lzTnVtYmVyID0gZnVuY3Rpb24gX2lzTnVtYmVyKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCI7XG59LFxuICAgIF9pc1VuZGVmaW5lZCA9IGZ1bmN0aW9uIF9pc1VuZGVmaW5lZCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcInVuZGVmaW5lZFwiO1xufSxcbiAgICBfaXNPYmplY3QgPSBmdW5jdGlvbiBfaXNPYmplY3QodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIjtcbn0sXG4gICAgX2lzTm90RmFsc2UgPSBmdW5jdGlvbiBfaXNOb3RGYWxzZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT09IGZhbHNlO1xufSxcbiAgICBfd2luZG93RXhpc3RzID0gZnVuY3Rpb24gX3dpbmRvd0V4aXN0cygpIHtcbiAgcmV0dXJuIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCI7XG59LFxuICAgIF9pc0Z1bmNPclN0cmluZyA9IGZ1bmN0aW9uIF9pc0Z1bmNPclN0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gX2lzRnVuY3Rpb24odmFsdWUpIHx8IF9pc1N0cmluZyh2YWx1ZSk7XG59LFxuICAgIF9pc1R5cGVkQXJyYXkgPSB0eXBlb2YgQXJyYXlCdWZmZXIgPT09IFwiZnVuY3Rpb25cIiAmJiBBcnJheUJ1ZmZlci5pc1ZpZXcgfHwgZnVuY3Rpb24gKCkge30sXG4gICAgLy8gbm90ZTogSUUxMCBoYXMgQXJyYXlCdWZmZXIsIGJ1dCBOT1QgQXJyYXlCdWZmZXIuaXNWaWV3KCkuXG5faXNBcnJheSA9IEFycmF5LmlzQXJyYXksXG4gICAgX3N0cmljdE51bUV4cCA9IC8oPzotP1xcLj9cXGR8XFwuKSsvZ2ksXG4gICAgLy9vbmx5IG51bWJlcnMgKGluY2x1ZGluZyBuZWdhdGl2ZXMgYW5kIGRlY2ltYWxzKSBidXQgTk9UIHJlbGF0aXZlIHZhbHVlcy5cbl9udW1FeHAgPSAvWy0rPS5dKlxcZCtbLmVcXC0rXSpcXGQqW2VcXC0rXSpcXGQqL2csXG4gICAgLy9maW5kcyBhbnkgbnVtYmVycywgaW5jbHVkaW5nIG9uZXMgdGhhdCBzdGFydCB3aXRoICs9IG9yIC09LCBuZWdhdGl2ZSBudW1iZXJzLCBhbmQgb25lcyBpbiBzY2llbnRpZmljIG5vdGF0aW9uIGxpa2UgMWUtOC5cbl9udW1XaXRoVW5pdEV4cCA9IC9bLSs9Ll0qXFxkK1suZS1dKlxcZCpbYS16JV0qL2csXG4gICAgX2NvbXBsZXhTdHJpbmdOdW1FeHAgPSAvWy0rPS5dKlxcZCtcXC4/XFxkKig/OmUtfGVcXCspP1xcZCovZ2ksXG4gICAgLy9kdXBsaWNhdGUgc28gdGhhdCB3aGlsZSB3ZSdyZSBsb29waW5nIHRocm91Z2ggbWF0Y2hlcyBmcm9tIGV4ZWMoKSwgaXQgZG9lc24ndCBjb250YW1pbmF0ZSB0aGUgbGFzdEluZGV4IG9mIF9udW1FeHAgd2hpY2ggd2UgdXNlIHRvIHNlYXJjaCBmb3IgY29sb3JzIHRvby5cbl9yZWxFeHAgPSAvWystXT0tP1suXFxkXSsvLFxuICAgIF9kZWxpbWl0ZWRWYWx1ZUV4cCA9IC9bXiwnXCJcXFtcXF1cXHNdKy9naSxcbiAgICAvLyBwcmV2aW91c2x5IC9bI1xcLSsuXSpcXGJbYS16XFxkXFwtPSslLl0rL2dpIGJ1dCBkaWRuJ3QgY2F0Y2ggc3BlY2lhbCBjaGFyYWN0ZXJzLlxuX3VuaXRFeHAgPSAvXlsrXFwtPWVcXHNcXGRdKlxcZCtbLlxcZF0qKFthLXpdKnwlKVxccyokL2ksXG4gICAgX2dsb2JhbFRpbWVsaW5lLFxuICAgIF93aW4sXG4gICAgX2NvcmVJbml0dGVkLFxuICAgIF9kb2MsXG4gICAgX2dsb2JhbHMgPSB7fSxcbiAgICBfaW5zdGFsbFNjb3BlID0ge30sXG4gICAgX2NvcmVSZWFkeSxcbiAgICBfaW5zdGFsbCA9IGZ1bmN0aW9uIF9pbnN0YWxsKHNjb3BlKSB7XG4gIHJldHVybiAoX2luc3RhbGxTY29wZSA9IF9tZXJnZShzY29wZSwgX2dsb2JhbHMpKSAmJiBnc2FwO1xufSxcbiAgICBfbWlzc2luZ1BsdWdpbiA9IGZ1bmN0aW9uIF9taXNzaW5nUGx1Z2luKHByb3BlcnR5LCB2YWx1ZSkge1xuICByZXR1cm4gY29uc29sZS53YXJuKFwiSW52YWxpZCBwcm9wZXJ0eVwiLCBwcm9wZXJ0eSwgXCJzZXQgdG9cIiwgdmFsdWUsIFwiTWlzc2luZyBwbHVnaW4/IGdzYXAucmVnaXN0ZXJQbHVnaW4oKVwiKTtcbn0sXG4gICAgX3dhcm4gPSBmdW5jdGlvbiBfd2FybihtZXNzYWdlLCBzdXBwcmVzcykge1xuICByZXR1cm4gIXN1cHByZXNzICYmIGNvbnNvbGUud2FybihtZXNzYWdlKTtcbn0sXG4gICAgX2FkZEdsb2JhbCA9IGZ1bmN0aW9uIF9hZGRHbG9iYWwobmFtZSwgb2JqKSB7XG4gIHJldHVybiBuYW1lICYmIChfZ2xvYmFsc1tuYW1lXSA9IG9iaikgJiYgX2luc3RhbGxTY29wZSAmJiAoX2luc3RhbGxTY29wZVtuYW1lXSA9IG9iaikgfHwgX2dsb2JhbHM7XG59LFxuICAgIF9lbXB0eUZ1bmMgPSBmdW5jdGlvbiBfZW1wdHlGdW5jKCkge1xuICByZXR1cm4gMDtcbn0sXG4gICAgX3N0YXJ0QXRSZXZlcnRDb25maWcgPSB7XG4gIHN1cHByZXNzRXZlbnRzOiB0cnVlLFxuICBpc1N0YXJ0OiB0cnVlXG59LFxuICAgIF9yZXZlcnRDb25maWcgPSB7XG4gIHN1cHByZXNzRXZlbnRzOiB0cnVlXG59LFxuICAgIF9yZXNlcnZlZFByb3BzID0ge30sXG4gICAgX2xhenlUd2VlbnMgPSBbXSxcbiAgICBfbGF6eUxvb2t1cCA9IHt9LFxuICAgIF9sYXN0UmVuZGVyZWRGcmFtZSxcbiAgICBfcGx1Z2lucyA9IHt9LFxuICAgIF9lZmZlY3RzID0ge30sXG4gICAgX25leHRHQ0ZyYW1lID0gMzAsXG4gICAgX2hhcm5lc3NQbHVnaW5zID0gW10sXG4gICAgX2NhbGxiYWNrTmFtZXMgPSBcIlwiLFxuICAgIF9oYXJuZXNzID0gZnVuY3Rpb24gX2hhcm5lc3ModGFyZ2V0cykge1xuICB2YXIgdGFyZ2V0ID0gdGFyZ2V0c1swXSxcbiAgICAgIGhhcm5lc3NQbHVnaW4sXG4gICAgICBpO1xuICBfaXNPYmplY3QodGFyZ2V0KSB8fCBfaXNGdW5jdGlvbih0YXJnZXQpIHx8ICh0YXJnZXRzID0gW3RhcmdldHNdKTtcblxuICBpZiAoIShoYXJuZXNzUGx1Z2luID0gKHRhcmdldC5fZ3NhcCB8fCB7fSkuaGFybmVzcykpIHtcbiAgICAvLyBmaW5kIHRoZSBmaXJzdCB0YXJnZXQgd2l0aCBhIGhhcm5lc3MuIFdlIGFzc3VtZSB0YXJnZXRzIHBhc3NlZCBpbnRvIGFuIGFuaW1hdGlvbiB3aWxsIGJlIG9mIHNpbWlsYXIgdHlwZSwgbWVhbmluZyB0aGUgc2FtZSBraW5kIG9mIGhhcm5lc3MgY2FuIGJlIHVzZWQgZm9yIHRoZW0gYWxsIChwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb24pXG4gICAgaSA9IF9oYXJuZXNzUGx1Z2lucy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tICYmICFfaGFybmVzc1BsdWdpbnNbaV0udGFyZ2V0VGVzdCh0YXJnZXQpKSB7fVxuXG4gICAgaGFybmVzc1BsdWdpbiA9IF9oYXJuZXNzUGx1Z2luc1tpXTtcbiAgfVxuXG4gIGkgPSB0YXJnZXRzLmxlbmd0aDtcblxuICB3aGlsZSAoaS0tKSB7XG4gICAgdGFyZ2V0c1tpXSAmJiAodGFyZ2V0c1tpXS5fZ3NhcCB8fCAodGFyZ2V0c1tpXS5fZ3NhcCA9IG5ldyBHU0NhY2hlKHRhcmdldHNbaV0sIGhhcm5lc3NQbHVnaW4pKSkgfHwgdGFyZ2V0cy5zcGxpY2UoaSwgMSk7XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0cztcbn0sXG4gICAgX2dldENhY2hlID0gZnVuY3Rpb24gX2dldENhY2hlKHRhcmdldCkge1xuICByZXR1cm4gdGFyZ2V0Ll9nc2FwIHx8IF9oYXJuZXNzKHRvQXJyYXkodGFyZ2V0KSlbMF0uX2dzYXA7XG59LFxuICAgIF9nZXRQcm9wZXJ0eSA9IGZ1bmN0aW9uIF9nZXRQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5LCB2KSB7XG4gIHJldHVybiAodiA9IHRhcmdldFtwcm9wZXJ0eV0pICYmIF9pc0Z1bmN0aW9uKHYpID8gdGFyZ2V0W3Byb3BlcnR5XSgpIDogX2lzVW5kZWZpbmVkKHYpICYmIHRhcmdldC5nZXRBdHRyaWJ1dGUgJiYgdGFyZ2V0LmdldEF0dHJpYnV0ZShwcm9wZXJ0eSkgfHwgdjtcbn0sXG4gICAgX2ZvckVhY2hOYW1lID0gZnVuY3Rpb24gX2ZvckVhY2hOYW1lKG5hbWVzLCBmdW5jKSB7XG4gIHJldHVybiAobmFtZXMgPSBuYW1lcy5zcGxpdChcIixcIikpLmZvckVhY2goZnVuYykgfHwgbmFtZXM7XG59LFxuICAgIC8vc3BsaXQgYSBjb21tYS1kZWxpbWl0ZWQgbGlzdCBvZiBuYW1lcyBpbnRvIGFuIGFycmF5LCB0aGVuIHJ1biBhIGZvckVhY2goKSBmdW5jdGlvbiBhbmQgcmV0dXJuIHRoZSBzcGxpdCBhcnJheSAodGhpcyBpcyBqdXN0IGEgd2F5IHRvIGNvbnNvbGlkYXRlL3Nob3J0ZW4gc29tZSBjb2RlKS5cbl9yb3VuZCA9IGZ1bmN0aW9uIF9yb3VuZCh2YWx1ZSkge1xuICByZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZSAqIDEwMDAwMCkgLyAxMDAwMDAgfHwgMDtcbn0sXG4gICAgX3JvdW5kUHJlY2lzZSA9IGZ1bmN0aW9uIF9yb3VuZFByZWNpc2UodmFsdWUpIHtcbiAgcmV0dXJuIE1hdGgucm91bmQodmFsdWUgKiAxMDAwMDAwMCkgLyAxMDAwMDAwMCB8fCAwO1xufSxcbiAgICAvLyBpbmNyZWFzZWQgcHJlY2lzaW9uIG1vc3RseSBmb3IgdGltaW5nIHZhbHVlcy5cbl9wYXJzZVJlbGF0aXZlID0gZnVuY3Rpb24gX3BhcnNlUmVsYXRpdmUoc3RhcnQsIHZhbHVlKSB7XG4gIHZhciBvcGVyYXRvciA9IHZhbHVlLmNoYXJBdCgwKSxcbiAgICAgIGVuZCA9IHBhcnNlRmxvYXQodmFsdWUuc3Vic3RyKDIpKTtcbiAgc3RhcnQgPSBwYXJzZUZsb2F0KHN0YXJ0KTtcbiAgcmV0dXJuIG9wZXJhdG9yID09PSBcIitcIiA/IHN0YXJ0ICsgZW5kIDogb3BlcmF0b3IgPT09IFwiLVwiID8gc3RhcnQgLSBlbmQgOiBvcGVyYXRvciA9PT0gXCIqXCIgPyBzdGFydCAqIGVuZCA6IHN0YXJ0IC8gZW5kO1xufSxcbiAgICBfYXJyYXlDb250YWluc0FueSA9IGZ1bmN0aW9uIF9hcnJheUNvbnRhaW5zQW55KHRvU2VhcmNoLCB0b0ZpbmQpIHtcbiAgLy9zZWFyY2hlcyBvbmUgYXJyYXkgdG8gZmluZCBtYXRjaGVzIGZvciBhbnkgb2YgdGhlIGl0ZW1zIGluIHRoZSB0b0ZpbmQgYXJyYXkuIEFzIHNvb24gYXMgb25lIGlzIGZvdW5kLCBpdCByZXR1cm5zIHRydWUuIEl0IGRvZXMgTk9UIHJldHVybiBhbGwgdGhlIG1hdGNoZXM7IGl0J3Mgc2ltcGx5IGEgYm9vbGVhbiBzZWFyY2guXG4gIHZhciBsID0gdG9GaW5kLmxlbmd0aCxcbiAgICAgIGkgPSAwO1xuXG4gIGZvciAoOyB0b1NlYXJjaC5pbmRleE9mKHRvRmluZFtpXSkgPCAwICYmICsraSA8IGw7KSB7fVxuXG4gIHJldHVybiBpIDwgbDtcbn0sXG4gICAgX2xhenlSZW5kZXIgPSBmdW5jdGlvbiBfbGF6eVJlbmRlcigpIHtcbiAgdmFyIGwgPSBfbGF6eVR3ZWVucy5sZW5ndGgsXG4gICAgICBhID0gX2xhenlUd2VlbnMuc2xpY2UoMCksXG4gICAgICBpLFxuICAgICAgdHdlZW47XG5cbiAgX2xhenlMb29rdXAgPSB7fTtcbiAgX2xhenlUd2VlbnMubGVuZ3RoID0gMDtcblxuICBmb3IgKGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgdHdlZW4gPSBhW2ldO1xuICAgIHR3ZWVuICYmIHR3ZWVuLl9sYXp5ICYmICh0d2Vlbi5yZW5kZXIodHdlZW4uX2xhenlbMF0sIHR3ZWVuLl9sYXp5WzFdLCB0cnVlKS5fbGF6eSA9IDApO1xuICB9XG59LFxuICAgIF9sYXp5U2FmZVJlbmRlciA9IGZ1bmN0aW9uIF9sYXp5U2FmZVJlbmRlcihhbmltYXRpb24sIHRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSkge1xuICBfbGF6eVR3ZWVucy5sZW5ndGggJiYgX2xhenlSZW5kZXIoKTtcbiAgYW5pbWF0aW9uLnJlbmRlcih0aW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UgfHwgX3JldmVydGluZyk7XG4gIF9sYXp5VHdlZW5zLmxlbmd0aCAmJiBfbGF6eVJlbmRlcigpOyAvL2luIGNhc2UgcmVuZGVyaW5nIGNhdXNlZCBhbnkgdHdlZW5zIHRvIGxhenktaW5pdCwgd2Ugc2hvdWxkIHJlbmRlciB0aGVtIGJlY2F1c2UgdHlwaWNhbGx5IHdoZW4gc29tZW9uZSBjYWxscyBzZWVrKCkgb3IgdGltZSgpIG9yIHByb2dyZXNzKCksIHRoZXkgZXhwZWN0IGFuIGltbWVkaWF0ZSByZW5kZXIuXG59LFxuICAgIF9udW1lcmljSWZQb3NzaWJsZSA9IGZ1bmN0aW9uIF9udW1lcmljSWZQb3NzaWJsZSh2YWx1ZSkge1xuICB2YXIgbiA9IHBhcnNlRmxvYXQodmFsdWUpO1xuICByZXR1cm4gKG4gfHwgbiA9PT0gMCkgJiYgKHZhbHVlICsgXCJcIikubWF0Y2goX2RlbGltaXRlZFZhbHVlRXhwKS5sZW5ndGggPCAyID8gbiA6IF9pc1N0cmluZyh2YWx1ZSkgPyB2YWx1ZS50cmltKCkgOiB2YWx1ZTtcbn0sXG4gICAgX3Bhc3NUaHJvdWdoID0gZnVuY3Rpb24gX3Bhc3NUaHJvdWdoKHApIHtcbiAgcmV0dXJuIHA7XG59LFxuICAgIF9zZXREZWZhdWx0cyA9IGZ1bmN0aW9uIF9zZXREZWZhdWx0cyhvYmosIGRlZmF1bHRzKSB7XG4gIGZvciAodmFyIHAgaW4gZGVmYXVsdHMpIHtcbiAgICBwIGluIG9iaiB8fCAob2JqW3BdID0gZGVmYXVsdHNbcF0pO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn0sXG4gICAgX3NldEtleWZyYW1lRGVmYXVsdHMgPSBmdW5jdGlvbiBfc2V0S2V5ZnJhbWVEZWZhdWx0cyhleGNsdWRlRHVyYXRpb24pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChvYmosIGRlZmF1bHRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBkZWZhdWx0cykge1xuICAgICAgcCBpbiBvYmogfHwgcCA9PT0gXCJkdXJhdGlvblwiICYmIGV4Y2x1ZGVEdXJhdGlvbiB8fCBwID09PSBcImVhc2VcIiB8fCAob2JqW3BdID0gZGVmYXVsdHNbcF0pO1xuICAgIH1cbiAgfTtcbn0sXG4gICAgX21lcmdlID0gZnVuY3Rpb24gX21lcmdlKGJhc2UsIHRvTWVyZ2UpIHtcbiAgZm9yICh2YXIgcCBpbiB0b01lcmdlKSB7XG4gICAgYmFzZVtwXSA9IHRvTWVyZ2VbcF07XG4gIH1cblxuICByZXR1cm4gYmFzZTtcbn0sXG4gICAgX21lcmdlRGVlcCA9IGZ1bmN0aW9uIF9tZXJnZURlZXAoYmFzZSwgdG9NZXJnZSkge1xuICBmb3IgKHZhciBwIGluIHRvTWVyZ2UpIHtcbiAgICBwICE9PSBcIl9fcHJvdG9fX1wiICYmIHAgIT09IFwiY29uc3RydWN0b3JcIiAmJiBwICE9PSBcInByb3RvdHlwZVwiICYmIChiYXNlW3BdID0gX2lzT2JqZWN0KHRvTWVyZ2VbcF0pID8gX21lcmdlRGVlcChiYXNlW3BdIHx8IChiYXNlW3BdID0ge30pLCB0b01lcmdlW3BdKSA6IHRvTWVyZ2VbcF0pO1xuICB9XG5cbiAgcmV0dXJuIGJhc2U7XG59LFxuICAgIF9jb3B5RXhjbHVkaW5nID0gZnVuY3Rpb24gX2NvcHlFeGNsdWRpbmcob2JqLCBleGNsdWRpbmcpIHtcbiAgdmFyIGNvcHkgPSB7fSxcbiAgICAgIHA7XG5cbiAgZm9yIChwIGluIG9iaikge1xuICAgIHAgaW4gZXhjbHVkaW5nIHx8IChjb3B5W3BdID0gb2JqW3BdKTtcbiAgfVxuXG4gIHJldHVybiBjb3B5O1xufSxcbiAgICBfaW5oZXJpdERlZmF1bHRzID0gZnVuY3Rpb24gX2luaGVyaXREZWZhdWx0cyh2YXJzKSB7XG4gIHZhciBwYXJlbnQgPSB2YXJzLnBhcmVudCB8fCBfZ2xvYmFsVGltZWxpbmUsXG4gICAgICBmdW5jID0gdmFycy5rZXlmcmFtZXMgPyBfc2V0S2V5ZnJhbWVEZWZhdWx0cyhfaXNBcnJheSh2YXJzLmtleWZyYW1lcykpIDogX3NldERlZmF1bHRzO1xuXG4gIGlmIChfaXNOb3RGYWxzZSh2YXJzLmluaGVyaXQpKSB7XG4gICAgd2hpbGUgKHBhcmVudCkge1xuICAgICAgZnVuYyh2YXJzLCBwYXJlbnQudmFycy5kZWZhdWx0cyk7XG4gICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50IHx8IHBhcmVudC5fZHA7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHZhcnM7XG59LFxuICAgIF9hcnJheXNNYXRjaCA9IGZ1bmN0aW9uIF9hcnJheXNNYXRjaChhMSwgYTIpIHtcbiAgdmFyIGkgPSBhMS5sZW5ndGgsXG4gICAgICBtYXRjaCA9IGkgPT09IGEyLmxlbmd0aDtcblxuICB3aGlsZSAobWF0Y2ggJiYgaS0tICYmIGExW2ldID09PSBhMltpXSkge31cblxuICByZXR1cm4gaSA8IDA7XG59LFxuICAgIF9hZGRMaW5rZWRMaXN0SXRlbSA9IGZ1bmN0aW9uIF9hZGRMaW5rZWRMaXN0SXRlbShwYXJlbnQsIGNoaWxkLCBmaXJzdFByb3AsIGxhc3RQcm9wLCBzb3J0QnkpIHtcbiAgaWYgKGZpcnN0UHJvcCA9PT0gdm9pZCAwKSB7XG4gICAgZmlyc3RQcm9wID0gXCJfZmlyc3RcIjtcbiAgfVxuXG4gIGlmIChsYXN0UHJvcCA9PT0gdm9pZCAwKSB7XG4gICAgbGFzdFByb3AgPSBcIl9sYXN0XCI7XG4gIH1cblxuICB2YXIgcHJldiA9IHBhcmVudFtsYXN0UHJvcF0sXG4gICAgICB0O1xuXG4gIGlmIChzb3J0QnkpIHtcbiAgICB0ID0gY2hpbGRbc29ydEJ5XTtcblxuICAgIHdoaWxlIChwcmV2ICYmIHByZXZbc29ydEJ5XSA+IHQpIHtcbiAgICAgIHByZXYgPSBwcmV2Ll9wcmV2O1xuICAgIH1cbiAgfVxuXG4gIGlmIChwcmV2KSB7XG4gICAgY2hpbGQuX25leHQgPSBwcmV2Ll9uZXh0O1xuICAgIHByZXYuX25leHQgPSBjaGlsZDtcbiAgfSBlbHNlIHtcbiAgICBjaGlsZC5fbmV4dCA9IHBhcmVudFtmaXJzdFByb3BdO1xuICAgIHBhcmVudFtmaXJzdFByb3BdID0gY2hpbGQ7XG4gIH1cblxuICBpZiAoY2hpbGQuX25leHQpIHtcbiAgICBjaGlsZC5fbmV4dC5fcHJldiA9IGNoaWxkO1xuICB9IGVsc2Uge1xuICAgIHBhcmVudFtsYXN0UHJvcF0gPSBjaGlsZDtcbiAgfVxuXG4gIGNoaWxkLl9wcmV2ID0gcHJldjtcbiAgY2hpbGQucGFyZW50ID0gY2hpbGQuX2RwID0gcGFyZW50O1xuICByZXR1cm4gY2hpbGQ7XG59LFxuICAgIF9yZW1vdmVMaW5rZWRMaXN0SXRlbSA9IGZ1bmN0aW9uIF9yZW1vdmVMaW5rZWRMaXN0SXRlbShwYXJlbnQsIGNoaWxkLCBmaXJzdFByb3AsIGxhc3RQcm9wKSB7XG4gIGlmIChmaXJzdFByb3AgPT09IHZvaWQgMCkge1xuICAgIGZpcnN0UHJvcCA9IFwiX2ZpcnN0XCI7XG4gIH1cblxuICBpZiAobGFzdFByb3AgPT09IHZvaWQgMCkge1xuICAgIGxhc3RQcm9wID0gXCJfbGFzdFwiO1xuICB9XG5cbiAgdmFyIHByZXYgPSBjaGlsZC5fcHJldixcbiAgICAgIG5leHQgPSBjaGlsZC5fbmV4dDtcblxuICBpZiAocHJldikge1xuICAgIHByZXYuX25leHQgPSBuZXh0O1xuICB9IGVsc2UgaWYgKHBhcmVudFtmaXJzdFByb3BdID09PSBjaGlsZCkge1xuICAgIHBhcmVudFtmaXJzdFByb3BdID0gbmV4dDtcbiAgfVxuXG4gIGlmIChuZXh0KSB7XG4gICAgbmV4dC5fcHJldiA9IHByZXY7XG4gIH0gZWxzZSBpZiAocGFyZW50W2xhc3RQcm9wXSA9PT0gY2hpbGQpIHtcbiAgICBwYXJlbnRbbGFzdFByb3BdID0gcHJldjtcbiAgfVxuXG4gIGNoaWxkLl9uZXh0ID0gY2hpbGQuX3ByZXYgPSBjaGlsZC5wYXJlbnQgPSBudWxsOyAvLyBkb24ndCBkZWxldGUgdGhlIF9kcCBqdXN0IHNvIHdlIGNhbiByZXZlcnQgaWYgbmVjZXNzYXJ5LiBCdXQgcGFyZW50IHNob3VsZCBiZSBudWxsIHRvIGluZGljYXRlIHRoZSBpdGVtIGlzbid0IGluIGEgbGlua2VkIGxpc3QuXG59LFxuICAgIF9yZW1vdmVGcm9tUGFyZW50ID0gZnVuY3Rpb24gX3JlbW92ZUZyb21QYXJlbnQoY2hpbGQsIG9ubHlJZlBhcmVudEhhc0F1dG9SZW1vdmUpIHtcbiAgY2hpbGQucGFyZW50ICYmICghb25seUlmUGFyZW50SGFzQXV0b1JlbW92ZSB8fCBjaGlsZC5wYXJlbnQuYXV0b1JlbW92ZUNoaWxkcmVuKSAmJiBjaGlsZC5wYXJlbnQucmVtb3ZlKGNoaWxkKTtcbiAgY2hpbGQuX2FjdCA9IDA7XG59LFxuICAgIF91bmNhY2hlID0gZnVuY3Rpb24gX3VuY2FjaGUoYW5pbWF0aW9uLCBjaGlsZCkge1xuICBpZiAoYW5pbWF0aW9uICYmICghY2hpbGQgfHwgY2hpbGQuX2VuZCA+IGFuaW1hdGlvbi5fZHVyIHx8IGNoaWxkLl9zdGFydCA8IDApKSB7XG4gICAgLy8gcGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uOiBpZiBhIGNoaWxkIGFuaW1hdGlvbiBpcyBwYXNzZWQgaW4gd2Ugc2hvdWxkIG9ubHkgdW5jYWNoZSBpZiB0aGF0IGNoaWxkIEVYVEVORFMgdGhlIGFuaW1hdGlvbiAoaXRzIGVuZCB0aW1lIGlzIGJleW9uZCB0aGUgZW5kKVxuICAgIHZhciBhID0gYW5pbWF0aW9uO1xuXG4gICAgd2hpbGUgKGEpIHtcbiAgICAgIGEuX2RpcnR5ID0gMTtcbiAgICAgIGEgPSBhLnBhcmVudDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYW5pbWF0aW9uO1xufSxcbiAgICBfcmVjYWNoZUFuY2VzdG9ycyA9IGZ1bmN0aW9uIF9yZWNhY2hlQW5jZXN0b3JzKGFuaW1hdGlvbikge1xuICB2YXIgcGFyZW50ID0gYW5pbWF0aW9uLnBhcmVudDtcblxuICB3aGlsZSAocGFyZW50ICYmIHBhcmVudC5wYXJlbnQpIHtcbiAgICAvL3NvbWV0aW1lcyB3ZSBtdXN0IGZvcmNlIGEgcmUtc29ydCBvZiBhbGwgY2hpbGRyZW4gYW5kIHVwZGF0ZSB0aGUgZHVyYXRpb24vdG90YWxEdXJhdGlvbiBvZiBhbGwgYW5jZXN0b3IgdGltZWxpbmVzIGltbWVkaWF0ZWx5IGluIGNhc2UsIGZvciBleGFtcGxlLCBpbiB0aGUgbWlkZGxlIG9mIGEgcmVuZGVyIGxvb3AsIG9uZSB0d2VlbiBhbHRlcnMgYW5vdGhlciB0d2VlbidzIHRpbWVTY2FsZSB3aGljaCBzaG92ZXMgaXRzIHN0YXJ0VGltZSBiZWZvcmUgMCwgZm9yY2luZyB0aGUgcGFyZW50IHRpbWVsaW5lIHRvIHNoaWZ0IGFyb3VuZCBhbmQgc2hpZnRDaGlsZHJlbigpIHdoaWNoIGNvdWxkIGFmZmVjdCB0aGF0IG5leHQgdHdlZW4ncyByZW5kZXIgKHN0YXJ0VGltZSkuIERvZXNuJ3QgbWF0dGVyIGZvciB0aGUgcm9vdCB0aW1lbGluZSB0aG91Z2guXG4gICAgcGFyZW50Ll9kaXJ0eSA9IDE7XG4gICAgcGFyZW50LnRvdGFsRHVyYXRpb24oKTtcbiAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50O1xuICB9XG5cbiAgcmV0dXJuIGFuaW1hdGlvbjtcbn0sXG4gICAgX3Jld2luZFN0YXJ0QXQgPSBmdW5jdGlvbiBfcmV3aW5kU3RhcnRBdCh0d2VlbiwgdG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpIHtcbiAgcmV0dXJuIHR3ZWVuLl9zdGFydEF0ICYmIChfcmV2ZXJ0aW5nID8gdHdlZW4uX3N0YXJ0QXQucmV2ZXJ0KF9yZXZlcnRDb25maWcpIDogdHdlZW4udmFycy5pbW1lZGlhdGVSZW5kZXIgJiYgIXR3ZWVuLnZhcnMuYXV0b1JldmVydCB8fCB0d2Vlbi5fc3RhcnRBdC5yZW5kZXIodG90YWxUaW1lLCB0cnVlLCBmb3JjZSkpO1xufSxcbiAgICBfaGFzTm9QYXVzZWRBbmNlc3RvcnMgPSBmdW5jdGlvbiBfaGFzTm9QYXVzZWRBbmNlc3RvcnMoYW5pbWF0aW9uKSB7XG4gIHJldHVybiAhYW5pbWF0aW9uIHx8IGFuaW1hdGlvbi5fdHMgJiYgX2hhc05vUGF1c2VkQW5jZXN0b3JzKGFuaW1hdGlvbi5wYXJlbnQpO1xufSxcbiAgICBfZWxhcHNlZEN5Y2xlRHVyYXRpb24gPSBmdW5jdGlvbiBfZWxhcHNlZEN5Y2xlRHVyYXRpb24oYW5pbWF0aW9uKSB7XG4gIHJldHVybiBhbmltYXRpb24uX3JlcGVhdCA/IF9hbmltYXRpb25DeWNsZShhbmltYXRpb24uX3RUaW1lLCBhbmltYXRpb24gPSBhbmltYXRpb24uZHVyYXRpb24oKSArIGFuaW1hdGlvbi5fckRlbGF5KSAqIGFuaW1hdGlvbiA6IDA7XG59LFxuICAgIC8vIGZlZWQgaW4gdGhlIHRvdGFsVGltZSBhbmQgY3ljbGVEdXJhdGlvbiBhbmQgaXQnbGwgcmV0dXJuIHRoZSBjeWNsZSAoaXRlcmF0aW9uIG1pbnVzIDEpIGFuZCBpZiB0aGUgcGxheWhlYWQgaXMgZXhhY3RseSBhdCB0aGUgdmVyeSBFTkQsIGl0IHdpbGwgTk9UIGJ1bXAgdXAgdG8gdGhlIG5leHQgY3ljbGUuXG5fYW5pbWF0aW9uQ3ljbGUgPSBmdW5jdGlvbiBfYW5pbWF0aW9uQ3ljbGUodFRpbWUsIGN5Y2xlRHVyYXRpb24pIHtcbiAgdmFyIHdob2xlID0gTWF0aC5mbG9vcih0VGltZSAvPSBjeWNsZUR1cmF0aW9uKTtcbiAgcmV0dXJuIHRUaW1lICYmIHdob2xlID09PSB0VGltZSA/IHdob2xlIC0gMSA6IHdob2xlO1xufSxcbiAgICBfcGFyZW50VG9DaGlsZFRvdGFsVGltZSA9IGZ1bmN0aW9uIF9wYXJlbnRUb0NoaWxkVG90YWxUaW1lKHBhcmVudFRpbWUsIGNoaWxkKSB7XG4gIHJldHVybiAocGFyZW50VGltZSAtIGNoaWxkLl9zdGFydCkgKiBjaGlsZC5fdHMgKyAoY2hpbGQuX3RzID49IDAgPyAwIDogY2hpbGQuX2RpcnR5ID8gY2hpbGQudG90YWxEdXJhdGlvbigpIDogY2hpbGQuX3REdXIpO1xufSxcbiAgICBfc2V0RW5kID0gZnVuY3Rpb24gX3NldEVuZChhbmltYXRpb24pIHtcbiAgcmV0dXJuIGFuaW1hdGlvbi5fZW5kID0gX3JvdW5kUHJlY2lzZShhbmltYXRpb24uX3N0YXJ0ICsgKGFuaW1hdGlvbi5fdER1ciAvIE1hdGguYWJzKGFuaW1hdGlvbi5fdHMgfHwgYW5pbWF0aW9uLl9ydHMgfHwgX3RpbnlOdW0pIHx8IDApKTtcbn0sXG4gICAgX2FsaWduUGxheWhlYWQgPSBmdW5jdGlvbiBfYWxpZ25QbGF5aGVhZChhbmltYXRpb24sIHRvdGFsVGltZSkge1xuICAvLyBhZGp1c3RzIHRoZSBhbmltYXRpb24ncyBfc3RhcnQgYW5kIF9lbmQgYWNjb3JkaW5nIHRvIHRoZSBwcm92aWRlZCB0b3RhbFRpbWUgKG9ubHkgaWYgdGhlIHBhcmVudCdzIHNtb290aENoaWxkVGltaW5nIGlzIHRydWUgYW5kIHRoZSBhbmltYXRpb24gaXNuJ3QgcGF1c2VkKS4gSXQgZG9lc24ndCBkbyBhbnkgcmVuZGVyaW5nIG9yIGZvcmNpbmcgdGhpbmdzIGJhY2sgaW50byBwYXJlbnQgdGltZWxpbmVzLCBldGMuIC0gdGhhdCdzIHdoYXQgdG90YWxUaW1lKCkgaXMgZm9yLlxuICB2YXIgcGFyZW50ID0gYW5pbWF0aW9uLl9kcDtcblxuICBpZiAocGFyZW50ICYmIHBhcmVudC5zbW9vdGhDaGlsZFRpbWluZyAmJiBhbmltYXRpb24uX3RzKSB7XG4gICAgYW5pbWF0aW9uLl9zdGFydCA9IF9yb3VuZFByZWNpc2UocGFyZW50Ll90aW1lIC0gKGFuaW1hdGlvbi5fdHMgPiAwID8gdG90YWxUaW1lIC8gYW5pbWF0aW9uLl90cyA6ICgoYW5pbWF0aW9uLl9kaXJ0eSA/IGFuaW1hdGlvbi50b3RhbER1cmF0aW9uKCkgOiBhbmltYXRpb24uX3REdXIpIC0gdG90YWxUaW1lKSAvIC1hbmltYXRpb24uX3RzKSk7XG5cbiAgICBfc2V0RW5kKGFuaW1hdGlvbik7XG5cbiAgICBwYXJlbnQuX2RpcnR5IHx8IF91bmNhY2hlKHBhcmVudCwgYW5pbWF0aW9uKTsgLy9mb3IgcGVyZm9ybWFuY2UgaW1wcm92ZW1lbnQuIElmIHRoZSBwYXJlbnQncyBjYWNoZSBpcyBhbHJlYWR5IGRpcnR5LCBpdCBhbHJlYWR5IHRvb2sgY2FyZSBvZiBtYXJraW5nIHRoZSBhbmNlc3RvcnMgYXMgZGlydHkgdG9vLCBzbyBza2lwIHRoZSBmdW5jdGlvbiBjYWxsIGhlcmUuXG4gIH1cblxuICByZXR1cm4gYW5pbWF0aW9uO1xufSxcblxuLypcbl90b3RhbFRpbWVUb1RpbWUgPSAoY2xhbXBlZFRvdGFsVGltZSwgZHVyYXRpb24sIHJlcGVhdCwgcmVwZWF0RGVsYXksIHlveW8pID0+IHtcblx0bGV0IGN5Y2xlRHVyYXRpb24gPSBkdXJhdGlvbiArIHJlcGVhdERlbGF5LFxuXHRcdHRpbWUgPSBfcm91bmQoY2xhbXBlZFRvdGFsVGltZSAlIGN5Y2xlRHVyYXRpb24pO1xuXHRpZiAodGltZSA+IGR1cmF0aW9uKSB7XG5cdFx0dGltZSA9IGR1cmF0aW9uO1xuXHR9XG5cdHJldHVybiAoeW95byAmJiAofn4oY2xhbXBlZFRvdGFsVGltZSAvIGN5Y2xlRHVyYXRpb24pICYgMSkpID8gZHVyYXRpb24gLSB0aW1lIDogdGltZTtcbn0sXG4qL1xuX3Bvc3RBZGRDaGVja3MgPSBmdW5jdGlvbiBfcG9zdEFkZENoZWNrcyh0aW1lbGluZSwgY2hpbGQpIHtcbiAgdmFyIHQ7XG5cbiAgaWYgKGNoaWxkLl90aW1lIHx8IGNoaWxkLl9pbml0dGVkICYmICFjaGlsZC5fZHVyKSB7XG4gICAgLy9pbiBjYXNlLCBmb3IgZXhhbXBsZSwgdGhlIF9zdGFydCBpcyBtb3ZlZCBvbiBhIHR3ZWVuIHRoYXQgaGFzIGFscmVhZHkgcmVuZGVyZWQuIEltYWdpbmUgaXQncyBhdCBpdHMgZW5kIHN0YXRlLCB0aGVuIHRoZSBzdGFydFRpbWUgaXMgbW92ZWQgV0FZIGxhdGVyIChhZnRlciB0aGUgZW5kIG9mIHRoaXMgdGltZWxpbmUpLCBpdCBzaG91bGQgcmVuZGVyIGF0IGl0cyBiZWdpbm5pbmcuXG4gICAgdCA9IF9wYXJlbnRUb0NoaWxkVG90YWxUaW1lKHRpbWVsaW5lLnJhd1RpbWUoKSwgY2hpbGQpO1xuXG4gICAgaWYgKCFjaGlsZC5fZHVyIHx8IF9jbGFtcCgwLCBjaGlsZC50b3RhbER1cmF0aW9uKCksIHQpIC0gY2hpbGQuX3RUaW1lID4gX3RpbnlOdW0pIHtcbiAgICAgIGNoaWxkLnJlbmRlcih0LCB0cnVlKTtcbiAgICB9XG4gIH0gLy9pZiB0aGUgdGltZWxpbmUgaGFzIGFscmVhZHkgZW5kZWQgYnV0IHRoZSBpbnNlcnRlZCB0d2Vlbi90aW1lbGluZSBleHRlbmRzIHRoZSBkdXJhdGlvbiwgd2Ugc2hvdWxkIGVuYWJsZSB0aGlzIHRpbWVsaW5lIGFnYWluIHNvIHRoYXQgaXQgcmVuZGVycyBwcm9wZXJseS4gV2Ugc2hvdWxkIGFsc28gYWxpZ24gdGhlIHBsYXloZWFkIHdpdGggdGhlIHBhcmVudCB0aW1lbGluZSdzIHdoZW4gYXBwcm9wcmlhdGUuXG5cblxuICBpZiAoX3VuY2FjaGUodGltZWxpbmUsIGNoaWxkKS5fZHAgJiYgdGltZWxpbmUuX2luaXR0ZWQgJiYgdGltZWxpbmUuX3RpbWUgPj0gdGltZWxpbmUuX2R1ciAmJiB0aW1lbGluZS5fdHMpIHtcbiAgICAvL2luIGNhc2UgYW55IG9mIHRoZSBhbmNlc3RvcnMgaGFkIGNvbXBsZXRlZCBidXQgc2hvdWxkIG5vdyBiZSBlbmFibGVkLi4uXG4gICAgaWYgKHRpbWVsaW5lLl9kdXIgPCB0aW1lbGluZS5kdXJhdGlvbigpKSB7XG4gICAgICB0ID0gdGltZWxpbmU7XG5cbiAgICAgIHdoaWxlICh0Ll9kcCkge1xuICAgICAgICB0LnJhd1RpbWUoKSA+PSAwICYmIHQudG90YWxUaW1lKHQuX3RUaW1lKTsgLy9tb3ZlcyB0aGUgdGltZWxpbmUgKHNoaWZ0cyBpdHMgc3RhcnRUaW1lKSBpZiBuZWNlc3NhcnksIGFuZCBhbHNvIGVuYWJsZXMgaXQuIElmIGl0J3MgY3VycmVudGx5IHplcm8sIHRob3VnaCwgaXQgbWF5IG5vdCBiZSBzY2hlZHVsZWQgdG8gcmVuZGVyIHVudGlsIGxhdGVyIHNvIHRoZXJlJ3Mgbm8gbmVlZCB0byBmb3JjZSBpdCB0byBhbGlnbiB3aXRoIHRoZSBjdXJyZW50IHBsYXloZWFkIHBvc2l0aW9uLiBPbmx5IG1vdmUgdG8gY2F0Y2ggdXAgd2l0aCB0aGUgcGxheWhlYWQuXG5cbiAgICAgICAgdCA9IHQuX2RwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRpbWVsaW5lLl96VGltZSA9IC1fdGlueU51bTsgLy8gaGVscHMgZW5zdXJlIHRoYXQgdGhlIG5leHQgcmVuZGVyKCkgd2lsbCBiZSBmb3JjZWQgKGNyb3NzaW5nU3RhcnQgPSB0cnVlIGluIHJlbmRlcigpKSwgZXZlbiBpZiB0aGUgZHVyYXRpb24gaGFzbid0IGNoYW5nZWQgKHdlJ3JlIGFkZGluZyBhIGNoaWxkIHdoaWNoIHdvdWxkIG5lZWQgdG8gZ2V0IHJlbmRlcmVkKS4gRGVmaW5pdGVseSBhbiBlZGdlIGNhc2UuIE5vdGU6IHdlIE1VU1QgZG8gdGhpcyBBRlRFUiB0aGUgbG9vcCBhYm92ZSB3aGVyZSB0aGUgdG90YWxUaW1lKCkgbWlnaHQgdHJpZ2dlciBhIHJlbmRlcigpIGJlY2F1c2UgdGhpcyBfYWRkVG9UaW1lbGluZSgpIG1ldGhvZCBnZXRzIGNhbGxlZCBmcm9tIHRoZSBBbmltYXRpb24gY29uc3RydWN0b3IsIEJFRk9SRSB0d2VlbnMgZXZlbiByZWNvcmQgdGhlaXIgdGFyZ2V0cywgZXRjLiBzbyB3ZSB3b3VsZG4ndCB3YW50IHRoaW5ncyB0byBnZXQgdHJpZ2dlcmVkIGluIHRoZSB3cm9uZyBvcmRlci5cbiAgfVxufSxcbiAgICBfYWRkVG9UaW1lbGluZSA9IGZ1bmN0aW9uIF9hZGRUb1RpbWVsaW5lKHRpbWVsaW5lLCBjaGlsZCwgcG9zaXRpb24sIHNraXBDaGVja3MpIHtcbiAgY2hpbGQucGFyZW50ICYmIF9yZW1vdmVGcm9tUGFyZW50KGNoaWxkKTtcbiAgY2hpbGQuX3N0YXJ0ID0gX3JvdW5kUHJlY2lzZSgoX2lzTnVtYmVyKHBvc2l0aW9uKSA/IHBvc2l0aW9uIDogcG9zaXRpb24gfHwgdGltZWxpbmUgIT09IF9nbG9iYWxUaW1lbGluZSA/IF9wYXJzZVBvc2l0aW9uKHRpbWVsaW5lLCBwb3NpdGlvbiwgY2hpbGQpIDogdGltZWxpbmUuX3RpbWUpICsgY2hpbGQuX2RlbGF5KTtcbiAgY2hpbGQuX2VuZCA9IF9yb3VuZFByZWNpc2UoY2hpbGQuX3N0YXJ0ICsgKGNoaWxkLnRvdGFsRHVyYXRpb24oKSAvIE1hdGguYWJzKGNoaWxkLnRpbWVTY2FsZSgpKSB8fCAwKSk7XG5cbiAgX2FkZExpbmtlZExpc3RJdGVtKHRpbWVsaW5lLCBjaGlsZCwgXCJfZmlyc3RcIiwgXCJfbGFzdFwiLCB0aW1lbGluZS5fc29ydCA/IFwiX3N0YXJ0XCIgOiAwKTtcblxuICBfaXNGcm9tT3JGcm9tU3RhcnQoY2hpbGQpIHx8ICh0aW1lbGluZS5fcmVjZW50ID0gY2hpbGQpO1xuICBza2lwQ2hlY2tzIHx8IF9wb3N0QWRkQ2hlY2tzKHRpbWVsaW5lLCBjaGlsZCk7XG4gIHRpbWVsaW5lLl90cyA8IDAgJiYgX2FsaWduUGxheWhlYWQodGltZWxpbmUsIHRpbWVsaW5lLl90VGltZSk7IC8vIGlmIHRoZSB0aW1lbGluZSBpcyByZXZlcnNlZCBhbmQgdGhlIG5ldyBjaGlsZCBtYWtlcyBpdCBsb25nZXIsIHdlIG1heSBuZWVkIHRvIGFkanVzdCB0aGUgcGFyZW50J3MgX3N0YXJ0IChwdXNoIGl0IGJhY2spXG5cbiAgcmV0dXJuIHRpbWVsaW5lO1xufSxcbiAgICBfc2Nyb2xsVHJpZ2dlciA9IGZ1bmN0aW9uIF9zY3JvbGxUcmlnZ2VyKGFuaW1hdGlvbiwgdHJpZ2dlcikge1xuICByZXR1cm4gKF9nbG9iYWxzLlNjcm9sbFRyaWdnZXIgfHwgX21pc3NpbmdQbHVnaW4oXCJzY3JvbGxUcmlnZ2VyXCIsIHRyaWdnZXIpKSAmJiBfZ2xvYmFscy5TY3JvbGxUcmlnZ2VyLmNyZWF0ZSh0cmlnZ2VyLCBhbmltYXRpb24pO1xufSxcbiAgICBfYXR0ZW1wdEluaXRUd2VlbiA9IGZ1bmN0aW9uIF9hdHRlbXB0SW5pdFR3ZWVuKHR3ZWVuLCB0b3RhbFRpbWUsIGZvcmNlLCBzdXBwcmVzc0V2ZW50cykge1xuICBfaW5pdFR3ZWVuKHR3ZWVuLCB0b3RhbFRpbWUpO1xuXG4gIGlmICghdHdlZW4uX2luaXR0ZWQpIHtcbiAgICByZXR1cm4gMTtcbiAgfVxuXG4gIGlmICghZm9yY2UgJiYgdHdlZW4uX3B0ICYmICh0d2Vlbi5fZHVyICYmIHR3ZWVuLnZhcnMubGF6eSAhPT0gZmFsc2UgfHwgIXR3ZWVuLl9kdXIgJiYgdHdlZW4udmFycy5sYXp5KSAmJiBfbGFzdFJlbmRlcmVkRnJhbWUgIT09IF90aWNrZXIuZnJhbWUpIHtcbiAgICBfbGF6eVR3ZWVucy5wdXNoKHR3ZWVuKTtcblxuICAgIHR3ZWVuLl9sYXp5ID0gW3RvdGFsVGltZSwgc3VwcHJlc3NFdmVudHNdO1xuICAgIHJldHVybiAxO1xuICB9XG59LFxuICAgIF9wYXJlbnRQbGF5aGVhZElzQmVmb3JlU3RhcnQgPSBmdW5jdGlvbiBfcGFyZW50UGxheWhlYWRJc0JlZm9yZVN0YXJ0KF9yZWYpIHtcbiAgdmFyIHBhcmVudCA9IF9yZWYucGFyZW50O1xuICByZXR1cm4gcGFyZW50ICYmIHBhcmVudC5fdHMgJiYgcGFyZW50Ll9pbml0dGVkICYmICFwYXJlbnQuX2xvY2sgJiYgKHBhcmVudC5yYXdUaW1lKCkgPCAwIHx8IF9wYXJlbnRQbGF5aGVhZElzQmVmb3JlU3RhcnQocGFyZW50KSk7XG59LFxuICAgIC8vIGNoZWNrIHBhcmVudCdzIF9sb2NrIGJlY2F1c2Ugd2hlbiBhIHRpbWVsaW5lIHJlcGVhdHMveW95b3MgYW5kIGRvZXMgaXRzIGFydGlmaWNpYWwgd3JhcHBpbmcsIHdlIHNob3VsZG4ndCBmb3JjZSB0aGUgcmF0aW8gYmFjayB0byAwXG5faXNGcm9tT3JGcm9tU3RhcnQgPSBmdW5jdGlvbiBfaXNGcm9tT3JGcm9tU3RhcnQoX3JlZjIpIHtcbiAgdmFyIGRhdGEgPSBfcmVmMi5kYXRhO1xuICByZXR1cm4gZGF0YSA9PT0gXCJpc0Zyb21TdGFydFwiIHx8IGRhdGEgPT09IFwiaXNTdGFydFwiO1xufSxcbiAgICBfcmVuZGVyWmVyb0R1cmF0aW9uVHdlZW4gPSBmdW5jdGlvbiBfcmVuZGVyWmVyb0R1cmF0aW9uVHdlZW4odHdlZW4sIHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKSB7XG4gIHZhciBwcmV2UmF0aW8gPSB0d2Vlbi5yYXRpbyxcbiAgICAgIHJhdGlvID0gdG90YWxUaW1lIDwgMCB8fCAhdG90YWxUaW1lICYmICghdHdlZW4uX3N0YXJ0ICYmIF9wYXJlbnRQbGF5aGVhZElzQmVmb3JlU3RhcnQodHdlZW4pICYmICEoIXR3ZWVuLl9pbml0dGVkICYmIF9pc0Zyb21PckZyb21TdGFydCh0d2VlbikpIHx8ICh0d2Vlbi5fdHMgPCAwIHx8IHR3ZWVuLl9kcC5fdHMgPCAwKSAmJiAhX2lzRnJvbU9yRnJvbVN0YXJ0KHR3ZWVuKSkgPyAwIDogMSxcbiAgICAgIC8vIGlmIHRoZSB0d2VlbiBvciBpdHMgcGFyZW50IGlzIHJldmVyc2VkIGFuZCB0aGUgdG90YWxUaW1lIGlzIDAsIHdlIHNob3VsZCBnbyB0byBhIHJhdGlvIG9mIDAuIEVkZ2UgY2FzZTogaWYgYSBmcm9tKCkgb3IgZnJvbVRvKCkgc3RhZ2dlciB0d2VlbiBpcyBwbGFjZWQgbGF0ZXIgaW4gYSB0aW1lbGluZSwgdGhlIFwic3RhcnRBdFwiIHplcm8tZHVyYXRpb24gdHdlZW4gY291bGQgaW5pdGlhbGx5IHJlbmRlciBhdCBhIHRpbWUgd2hlbiB0aGUgcGFyZW50IHRpbWVsaW5lJ3MgcGxheWhlYWQgaXMgdGVjaG5pY2FsbHkgQkVGT1JFIHdoZXJlIHRoaXMgdHdlZW4gaXMsIHNvIG1ha2Ugc3VyZSB0aGF0IGFueSBcImZyb21cIiBhbmQgXCJmcm9tVG9cIiBzdGFydEF0IHR3ZWVucyBhcmUgcmVuZGVyZWQgdGhlIGZpcnN0IHRpbWUgYXQgYSByYXRpbyBvZiAxLlxuICByZXBlYXREZWxheSA9IHR3ZWVuLl9yRGVsYXksXG4gICAgICB0VGltZSA9IDAsXG4gICAgICBwdCxcbiAgICAgIGl0ZXJhdGlvbixcbiAgICAgIHByZXZJdGVyYXRpb247XG5cbiAgaWYgKHJlcGVhdERlbGF5ICYmIHR3ZWVuLl9yZXBlYXQpIHtcbiAgICAvLyBpbiBjYXNlIHRoZXJlJ3MgYSB6ZXJvLWR1cmF0aW9uIHR3ZWVuIHRoYXQgaGFzIGEgcmVwZWF0IHdpdGggYSByZXBlYXREZWxheVxuICAgIHRUaW1lID0gX2NsYW1wKDAsIHR3ZWVuLl90RHVyLCB0b3RhbFRpbWUpO1xuICAgIGl0ZXJhdGlvbiA9IF9hbmltYXRpb25DeWNsZSh0VGltZSwgcmVwZWF0RGVsYXkpO1xuICAgIHR3ZWVuLl95b3lvICYmIGl0ZXJhdGlvbiAmIDEgJiYgKHJhdGlvID0gMSAtIHJhdGlvKTtcblxuICAgIGlmIChpdGVyYXRpb24gIT09IF9hbmltYXRpb25DeWNsZSh0d2Vlbi5fdFRpbWUsIHJlcGVhdERlbGF5KSkge1xuICAgICAgLy8gaWYgaXRlcmF0aW9uIGNoYW5nZWRcbiAgICAgIHByZXZSYXRpbyA9IDEgLSByYXRpbztcbiAgICAgIHR3ZWVuLnZhcnMucmVwZWF0UmVmcmVzaCAmJiB0d2Vlbi5faW5pdHRlZCAmJiB0d2Vlbi5pbnZhbGlkYXRlKCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHJhdGlvICE9PSBwcmV2UmF0aW8gfHwgX3JldmVydGluZyB8fCBmb3JjZSB8fCB0d2Vlbi5felRpbWUgPT09IF90aW55TnVtIHx8ICF0b3RhbFRpbWUgJiYgdHdlZW4uX3pUaW1lKSB7XG4gICAgaWYgKCF0d2Vlbi5faW5pdHRlZCAmJiBfYXR0ZW1wdEluaXRUd2Vlbih0d2VlbiwgdG90YWxUaW1lLCBmb3JjZSwgc3VwcHJlc3NFdmVudHMpKSB7XG4gICAgICAvLyBpZiB3ZSByZW5kZXIgdGhlIHZlcnkgYmVnaW5uaW5nICh0aW1lID09IDApIG9mIGEgZnJvbVRvKCksIHdlIG11c3QgZm9yY2UgdGhlIHJlbmRlciAobm9ybWFsIHR3ZWVucyB3b3VsZG4ndCBuZWVkIHRvIHJlbmRlciBhdCBhIHRpbWUgb2YgMCB3aGVuIHRoZSBwcmV2VGltZSB3YXMgYWxzbyAwKS4gVGhpcyBpcyBhbHNvIG1hbmRhdG9yeSB0byBtYWtlIHN1cmUgb3ZlcndyaXRpbmcga2lja3MgaW4gaW1tZWRpYXRlbHkuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcHJldkl0ZXJhdGlvbiA9IHR3ZWVuLl96VGltZTtcbiAgICB0d2Vlbi5felRpbWUgPSB0b3RhbFRpbWUgfHwgKHN1cHByZXNzRXZlbnRzID8gX3RpbnlOdW0gOiAwKTsgLy8gd2hlbiB0aGUgcGxheWhlYWQgYXJyaXZlcyBhdCBFWEFDVExZIHRpbWUgMCAocmlnaHQgb24gdG9wKSBvZiBhIHplcm8tZHVyYXRpb24gdHdlZW4sIHdlIG5lZWQgdG8gZGlzY2VybiBpZiBldmVudHMgYXJlIHN1cHByZXNzZWQgc28gdGhhdCB3aGVuIHRoZSBwbGF5aGVhZCBtb3ZlcyBhZ2FpbiAobmV4dCB0aW1lKSwgaXQnbGwgdHJpZ2dlciB0aGUgY2FsbGJhY2suIElmIGV2ZW50cyBhcmUgTk9UIHN1cHByZXNzZWQsIG9idmlvdXNseSB0aGUgY2FsbGJhY2sgd291bGQgYmUgdHJpZ2dlcmVkIGluIHRoaXMgcmVuZGVyLiBCYXNpY2FsbHksIHRoZSBjYWxsYmFjayBzaG91bGQgZmlyZSBlaXRoZXIgd2hlbiB0aGUgcGxheWhlYWQgQVJSSVZFUyBvciBMRUFWRVMgdGhpcyBleGFjdCBzcG90LCBub3QgYm90aC4gSW1hZ2luZSBkb2luZyBhIHRpbWVsaW5lLnNlZWsoMCkgYW5kIHRoZXJlJ3MgYSBjYWxsYmFjayB0aGF0IHNpdHMgYXQgMC4gU2luY2UgZXZlbnRzIGFyZSBzdXBwcmVzc2VkIG9uIHRoYXQgc2VlaygpIGJ5IGRlZmF1bHQsIG5vdGhpbmcgd2lsbCBmaXJlLCBidXQgd2hlbiB0aGUgcGxheWhlYWQgbW92ZXMgb2ZmIG9mIHRoYXQgcG9zaXRpb24sIHRoZSBjYWxsYmFjayBzaG91bGQgZmlyZS4gVGhpcyBiZWhhdmlvciBpcyB3aGF0IHBlb3BsZSBpbnR1aXRpdmVseSBleHBlY3QuXG5cbiAgICBzdXBwcmVzc0V2ZW50cyB8fCAoc3VwcHJlc3NFdmVudHMgPSB0b3RhbFRpbWUgJiYgIXByZXZJdGVyYXRpb24pOyAvLyBpZiBpdCB3YXMgcmVuZGVyZWQgcHJldmlvdXNseSBhdCBleGFjdGx5IDAgKF96VGltZSkgYW5kIG5vdyB0aGUgcGxheWhlYWQgaXMgbW92aW5nIGF3YXksIERPTidUIGZpcmUgY2FsbGJhY2tzIG90aGVyd2lzZSB0aGV5J2xsIHNlZW0gbGlrZSBkdXBsaWNhdGVzLlxuXG4gICAgdHdlZW4ucmF0aW8gPSByYXRpbztcbiAgICB0d2Vlbi5fZnJvbSAmJiAocmF0aW8gPSAxIC0gcmF0aW8pO1xuICAgIHR3ZWVuLl90aW1lID0gMDtcbiAgICB0d2Vlbi5fdFRpbWUgPSB0VGltZTtcbiAgICBwdCA9IHR3ZWVuLl9wdDtcblxuICAgIHdoaWxlIChwdCkge1xuICAgICAgcHQucihyYXRpbywgcHQuZCk7XG4gICAgICBwdCA9IHB0Ll9uZXh0O1xuICAgIH1cblxuICAgIHRvdGFsVGltZSA8IDAgJiYgX3Jld2luZFN0YXJ0QXQodHdlZW4sIHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIHRydWUpO1xuICAgIHR3ZWVuLl9vblVwZGF0ZSAmJiAhc3VwcHJlc3NFdmVudHMgJiYgX2NhbGxiYWNrKHR3ZWVuLCBcIm9uVXBkYXRlXCIpO1xuICAgIHRUaW1lICYmIHR3ZWVuLl9yZXBlYXQgJiYgIXN1cHByZXNzRXZlbnRzICYmIHR3ZWVuLnBhcmVudCAmJiBfY2FsbGJhY2sodHdlZW4sIFwib25SZXBlYXRcIik7XG5cbiAgICBpZiAoKHRvdGFsVGltZSA+PSB0d2Vlbi5fdER1ciB8fCB0b3RhbFRpbWUgPCAwKSAmJiB0d2Vlbi5yYXRpbyA9PT0gcmF0aW8pIHtcbiAgICAgIHJhdGlvICYmIF9yZW1vdmVGcm9tUGFyZW50KHR3ZWVuLCAxKTtcblxuICAgICAgaWYgKCFzdXBwcmVzc0V2ZW50cyAmJiAhX3JldmVydGluZykge1xuICAgICAgICBfY2FsbGJhY2sodHdlZW4sIHJhdGlvID8gXCJvbkNvbXBsZXRlXCIgOiBcIm9uUmV2ZXJzZUNvbXBsZXRlXCIsIHRydWUpO1xuXG4gICAgICAgIHR3ZWVuLl9wcm9tICYmIHR3ZWVuLl9wcm9tKCk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKCF0d2Vlbi5felRpbWUpIHtcbiAgICB0d2Vlbi5felRpbWUgPSB0b3RhbFRpbWU7XG4gIH1cbn0sXG4gICAgX2ZpbmROZXh0UGF1c2VUd2VlbiA9IGZ1bmN0aW9uIF9maW5kTmV4dFBhdXNlVHdlZW4oYW5pbWF0aW9uLCBwcmV2VGltZSwgdGltZSkge1xuICB2YXIgY2hpbGQ7XG5cbiAgaWYgKHRpbWUgPiBwcmV2VGltZSkge1xuICAgIGNoaWxkID0gYW5pbWF0aW9uLl9maXJzdDtcblxuICAgIHdoaWxlIChjaGlsZCAmJiBjaGlsZC5fc3RhcnQgPD0gdGltZSkge1xuICAgICAgaWYgKGNoaWxkLmRhdGEgPT09IFwiaXNQYXVzZVwiICYmIGNoaWxkLl9zdGFydCA+IHByZXZUaW1lKSB7XG4gICAgICAgIHJldHVybiBjaGlsZDtcbiAgICAgIH1cblxuICAgICAgY2hpbGQgPSBjaGlsZC5fbmV4dDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgY2hpbGQgPSBhbmltYXRpb24uX2xhc3Q7XG5cbiAgICB3aGlsZSAoY2hpbGQgJiYgY2hpbGQuX3N0YXJ0ID49IHRpbWUpIHtcbiAgICAgIGlmIChjaGlsZC5kYXRhID09PSBcImlzUGF1c2VcIiAmJiBjaGlsZC5fc3RhcnQgPCBwcmV2VGltZSkge1xuICAgICAgICByZXR1cm4gY2hpbGQ7XG4gICAgICB9XG5cbiAgICAgIGNoaWxkID0gY2hpbGQuX3ByZXY7XG4gICAgfVxuICB9XG59LFxuICAgIF9zZXREdXJhdGlvbiA9IGZ1bmN0aW9uIF9zZXREdXJhdGlvbihhbmltYXRpb24sIGR1cmF0aW9uLCBza2lwVW5jYWNoZSwgbGVhdmVQbGF5aGVhZCkge1xuICB2YXIgcmVwZWF0ID0gYW5pbWF0aW9uLl9yZXBlYXQsXG4gICAgICBkdXIgPSBfcm91bmRQcmVjaXNlKGR1cmF0aW9uKSB8fCAwLFxuICAgICAgdG90YWxQcm9ncmVzcyA9IGFuaW1hdGlvbi5fdFRpbWUgLyBhbmltYXRpb24uX3REdXI7XG4gIHRvdGFsUHJvZ3Jlc3MgJiYgIWxlYXZlUGxheWhlYWQgJiYgKGFuaW1hdGlvbi5fdGltZSAqPSBkdXIgLyBhbmltYXRpb24uX2R1cik7XG4gIGFuaW1hdGlvbi5fZHVyID0gZHVyO1xuICBhbmltYXRpb24uX3REdXIgPSAhcmVwZWF0ID8gZHVyIDogcmVwZWF0IDwgMCA/IDFlMTAgOiBfcm91bmRQcmVjaXNlKGR1ciAqIChyZXBlYXQgKyAxKSArIGFuaW1hdGlvbi5fckRlbGF5ICogcmVwZWF0KTtcbiAgdG90YWxQcm9ncmVzcyA+IDAgJiYgIWxlYXZlUGxheWhlYWQgPyBfYWxpZ25QbGF5aGVhZChhbmltYXRpb24sIGFuaW1hdGlvbi5fdFRpbWUgPSBhbmltYXRpb24uX3REdXIgKiB0b3RhbFByb2dyZXNzKSA6IGFuaW1hdGlvbi5wYXJlbnQgJiYgX3NldEVuZChhbmltYXRpb24pO1xuICBza2lwVW5jYWNoZSB8fCBfdW5jYWNoZShhbmltYXRpb24ucGFyZW50LCBhbmltYXRpb24pO1xuICByZXR1cm4gYW5pbWF0aW9uO1xufSxcbiAgICBfb25VcGRhdGVUb3RhbER1cmF0aW9uID0gZnVuY3Rpb24gX29uVXBkYXRlVG90YWxEdXJhdGlvbihhbmltYXRpb24pIHtcbiAgcmV0dXJuIGFuaW1hdGlvbiBpbnN0YW5jZW9mIFRpbWVsaW5lID8gX3VuY2FjaGUoYW5pbWF0aW9uKSA6IF9zZXREdXJhdGlvbihhbmltYXRpb24sIGFuaW1hdGlvbi5fZHVyKTtcbn0sXG4gICAgX3plcm9Qb3NpdGlvbiA9IHtcbiAgX3N0YXJ0OiAwLFxuICBlbmRUaW1lOiBfZW1wdHlGdW5jLFxuICB0b3RhbER1cmF0aW9uOiBfZW1wdHlGdW5jXG59LFxuICAgIF9wYXJzZVBvc2l0aW9uID0gZnVuY3Rpb24gX3BhcnNlUG9zaXRpb24oYW5pbWF0aW9uLCBwb3NpdGlvbiwgcGVyY2VudEFuaW1hdGlvbikge1xuICB2YXIgbGFiZWxzID0gYW5pbWF0aW9uLmxhYmVscyxcbiAgICAgIHJlY2VudCA9IGFuaW1hdGlvbi5fcmVjZW50IHx8IF96ZXJvUG9zaXRpb24sXG4gICAgICBjbGlwcGVkRHVyYXRpb24gPSBhbmltYXRpb24uZHVyYXRpb24oKSA+PSBfYmlnTnVtID8gcmVjZW50LmVuZFRpbWUoZmFsc2UpIDogYW5pbWF0aW9uLl9kdXIsXG4gICAgICAvL2luIGNhc2UgdGhlcmUncyBhIGNoaWxkIHRoYXQgaW5maW5pdGVseSByZXBlYXRzLCB1c2VycyBhbG1vc3QgbmV2ZXIgaW50ZW5kIGZvciB0aGUgaW5zZXJ0aW9uIHBvaW50IG9mIGEgbmV3IGNoaWxkIHRvIGJlIGJhc2VkIG9uIGEgU1VQRVIgbG9uZyB2YWx1ZSBsaWtlIHRoYXQgc28gd2UgY2xpcCBpdCBhbmQgYXNzdW1lIHRoZSBtb3N0IHJlY2VudGx5LWFkZGVkIGNoaWxkJ3MgZW5kVGltZSBzaG91bGQgYmUgdXNlZCBpbnN0ZWFkLlxuICBpLFxuICAgICAgb2Zmc2V0LFxuICAgICAgaXNQZXJjZW50O1xuXG4gIGlmIChfaXNTdHJpbmcocG9zaXRpb24pICYmIChpc05hTihwb3NpdGlvbikgfHwgcG9zaXRpb24gaW4gbGFiZWxzKSkge1xuICAgIC8vaWYgdGhlIHN0cmluZyBpcyBhIG51bWJlciBsaWtlIFwiMVwiLCBjaGVjayB0byBzZWUgaWYgdGhlcmUncyBhIGxhYmVsIHdpdGggdGhhdCBuYW1lLCBvdGhlcndpc2UgaW50ZXJwcmV0IGl0IGFzIGEgbnVtYmVyIChhYnNvbHV0ZSB2YWx1ZSkuXG4gICAgb2Zmc2V0ID0gcG9zaXRpb24uY2hhckF0KDApO1xuICAgIGlzUGVyY2VudCA9IHBvc2l0aW9uLnN1YnN0cigtMSkgPT09IFwiJVwiO1xuICAgIGkgPSBwb3NpdGlvbi5pbmRleE9mKFwiPVwiKTtcblxuICAgIGlmIChvZmZzZXQgPT09IFwiPFwiIHx8IG9mZnNldCA9PT0gXCI+XCIpIHtcbiAgICAgIGkgPj0gMCAmJiAocG9zaXRpb24gPSBwb3NpdGlvbi5yZXBsYWNlKC89LywgXCJcIikpO1xuICAgICAgcmV0dXJuIChvZmZzZXQgPT09IFwiPFwiID8gcmVjZW50Ll9zdGFydCA6IHJlY2VudC5lbmRUaW1lKHJlY2VudC5fcmVwZWF0ID49IDApKSArIChwYXJzZUZsb2F0KHBvc2l0aW9uLnN1YnN0cigxKSkgfHwgMCkgKiAoaXNQZXJjZW50ID8gKGkgPCAwID8gcmVjZW50IDogcGVyY2VudEFuaW1hdGlvbikudG90YWxEdXJhdGlvbigpIC8gMTAwIDogMSk7XG4gICAgfVxuXG4gICAgaWYgKGkgPCAwKSB7XG4gICAgICBwb3NpdGlvbiBpbiBsYWJlbHMgfHwgKGxhYmVsc1twb3NpdGlvbl0gPSBjbGlwcGVkRHVyYXRpb24pO1xuICAgICAgcmV0dXJuIGxhYmVsc1twb3NpdGlvbl07XG4gICAgfVxuXG4gICAgb2Zmc2V0ID0gcGFyc2VGbG9hdChwb3NpdGlvbi5jaGFyQXQoaSAtIDEpICsgcG9zaXRpb24uc3Vic3RyKGkgKyAxKSk7XG5cbiAgICBpZiAoaXNQZXJjZW50ICYmIHBlcmNlbnRBbmltYXRpb24pIHtcbiAgICAgIG9mZnNldCA9IG9mZnNldCAvIDEwMCAqIChfaXNBcnJheShwZXJjZW50QW5pbWF0aW9uKSA/IHBlcmNlbnRBbmltYXRpb25bMF0gOiBwZXJjZW50QW5pbWF0aW9uKS50b3RhbER1cmF0aW9uKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGkgPiAxID8gX3BhcnNlUG9zaXRpb24oYW5pbWF0aW9uLCBwb3NpdGlvbi5zdWJzdHIoMCwgaSAtIDEpLCBwZXJjZW50QW5pbWF0aW9uKSArIG9mZnNldCA6IGNsaXBwZWREdXJhdGlvbiArIG9mZnNldDtcbiAgfVxuXG4gIHJldHVybiBwb3NpdGlvbiA9PSBudWxsID8gY2xpcHBlZER1cmF0aW9uIDogK3Bvc2l0aW9uO1xufSxcbiAgICBfY3JlYXRlVHdlZW5UeXBlID0gZnVuY3Rpb24gX2NyZWF0ZVR3ZWVuVHlwZSh0eXBlLCBwYXJhbXMsIHRpbWVsaW5lKSB7XG4gIHZhciBpc0xlZ2FjeSA9IF9pc051bWJlcihwYXJhbXNbMV0pLFxuICAgICAgdmFyc0luZGV4ID0gKGlzTGVnYWN5ID8gMiA6IDEpICsgKHR5cGUgPCAyID8gMCA6IDEpLFxuICAgICAgdmFycyA9IHBhcmFtc1t2YXJzSW5kZXhdLFxuICAgICAgaXJWYXJzLFxuICAgICAgcGFyZW50O1xuXG4gIGlzTGVnYWN5ICYmICh2YXJzLmR1cmF0aW9uID0gcGFyYW1zWzFdKTtcbiAgdmFycy5wYXJlbnQgPSB0aW1lbGluZTtcblxuICBpZiAodHlwZSkge1xuICAgIGlyVmFycyA9IHZhcnM7XG4gICAgcGFyZW50ID0gdGltZWxpbmU7XG5cbiAgICB3aGlsZSAocGFyZW50ICYmICEoXCJpbW1lZGlhdGVSZW5kZXJcIiBpbiBpclZhcnMpKSB7XG4gICAgICAvLyBpbmhlcml0YW5jZSBoYXNuJ3QgaGFwcGVuZWQgeWV0LCBidXQgc29tZW9uZSBtYXkgaGF2ZSBzZXQgYSBkZWZhdWx0IGluIGFuIGFuY2VzdG9yIHRpbWVsaW5lLiBXZSBjb3VsZCBkbyB2YXJzLmltbWVkaWF0ZVJlbmRlciA9IF9pc05vdEZhbHNlKF9pbmhlcml0RGVmYXVsdHModmFycykuaW1tZWRpYXRlUmVuZGVyKSBidXQgdGhhdCdkIGV4YWN0IGEgc2xpZ2h0IHBlcmZvcm1hbmNlIHBlbmFsdHkgYmVjYXVzZSBfaW5oZXJpdERlZmF1bHRzKCkgYWxzbyBydW5zIGluIHRoZSBUd2VlbiBjb25zdHJ1Y3Rvci4gV2UncmUgcGF5aW5nIGEgc21hbGwga2IgcHJpY2UgaGVyZSB0byBnYWluIHNwZWVkLlxuICAgICAgaXJWYXJzID0gcGFyZW50LnZhcnMuZGVmYXVsdHMgfHwge307XG4gICAgICBwYXJlbnQgPSBfaXNOb3RGYWxzZShwYXJlbnQudmFycy5pbmhlcml0KSAmJiBwYXJlbnQucGFyZW50O1xuICAgIH1cblxuICAgIHZhcnMuaW1tZWRpYXRlUmVuZGVyID0gX2lzTm90RmFsc2UoaXJWYXJzLmltbWVkaWF0ZVJlbmRlcik7XG4gICAgdHlwZSA8IDIgPyB2YXJzLnJ1bkJhY2t3YXJkcyA9IDEgOiB2YXJzLnN0YXJ0QXQgPSBwYXJhbXNbdmFyc0luZGV4IC0gMV07IC8vIFwiZnJvbVwiIHZhcnNcbiAgfVxuXG4gIHJldHVybiBuZXcgVHdlZW4ocGFyYW1zWzBdLCB2YXJzLCBwYXJhbXNbdmFyc0luZGV4ICsgMV0pO1xufSxcbiAgICBfY29uZGl0aW9uYWxSZXR1cm4gPSBmdW5jdGlvbiBfY29uZGl0aW9uYWxSZXR1cm4odmFsdWUsIGZ1bmMpIHtcbiAgcmV0dXJuIHZhbHVlIHx8IHZhbHVlID09PSAwID8gZnVuYyh2YWx1ZSkgOiBmdW5jO1xufSxcbiAgICBfY2xhbXAgPSBmdW5jdGlvbiBfY2xhbXAobWluLCBtYXgsIHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA8IG1pbiA/IG1pbiA6IHZhbHVlID4gbWF4ID8gbWF4IDogdmFsdWU7XG59LFxuICAgIGdldFVuaXQgPSBmdW5jdGlvbiBnZXRVbml0KHZhbHVlLCB2KSB7XG4gIHJldHVybiAhX2lzU3RyaW5nKHZhbHVlKSB8fCAhKHYgPSBfdW5pdEV4cC5leGVjKHZhbHVlKSkgPyBcIlwiIDogdlsxXTtcbn0sXG4gICAgLy8gbm90ZTogcHJvdGVjdCBhZ2FpbnN0IHBhZGRlZCBudW1iZXJzIGFzIHN0cmluZ3MsIGxpa2UgXCIxMDAuMTAwXCIuIFRoYXQgc2hvdWxkbid0IHJldHVybiBcIjAwXCIgYXMgdGhlIHVuaXQuIElmIGl0J3MgbnVtZXJpYywgcmV0dXJuIG5vIHVuaXQuXG5jbGFtcCA9IGZ1bmN0aW9uIGNsYW1wKG1pbiwgbWF4LCB2YWx1ZSkge1xuICByZXR1cm4gX2NvbmRpdGlvbmFsUmV0dXJuKHZhbHVlLCBmdW5jdGlvbiAodikge1xuICAgIHJldHVybiBfY2xhbXAobWluLCBtYXgsIHYpO1xuICB9KTtcbn0sXG4gICAgX3NsaWNlID0gW10uc2xpY2UsXG4gICAgX2lzQXJyYXlMaWtlID0gZnVuY3Rpb24gX2lzQXJyYXlMaWtlKHZhbHVlLCBub25FbXB0eSkge1xuICByZXR1cm4gdmFsdWUgJiYgX2lzT2JqZWN0KHZhbHVlKSAmJiBcImxlbmd0aFwiIGluIHZhbHVlICYmICghbm9uRW1wdHkgJiYgIXZhbHVlLmxlbmd0aCB8fCB2YWx1ZS5sZW5ndGggLSAxIGluIHZhbHVlICYmIF9pc09iamVjdCh2YWx1ZVswXSkpICYmICF2YWx1ZS5ub2RlVHlwZSAmJiB2YWx1ZSAhPT0gX3dpbjtcbn0sXG4gICAgX2ZsYXR0ZW4gPSBmdW5jdGlvbiBfZmxhdHRlbihhciwgbGVhdmVTdHJpbmdzLCBhY2N1bXVsYXRvcikge1xuICBpZiAoYWNjdW11bGF0b3IgPT09IHZvaWQgMCkge1xuICAgIGFjY3VtdWxhdG9yID0gW107XG4gIH1cblxuICByZXR1cm4gYXIuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICB2YXIgX2FjY3VtdWxhdG9yO1xuXG4gICAgcmV0dXJuIF9pc1N0cmluZyh2YWx1ZSkgJiYgIWxlYXZlU3RyaW5ncyB8fCBfaXNBcnJheUxpa2UodmFsdWUsIDEpID8gKF9hY2N1bXVsYXRvciA9IGFjY3VtdWxhdG9yKS5wdXNoLmFwcGx5KF9hY2N1bXVsYXRvciwgdG9BcnJheSh2YWx1ZSkpIDogYWNjdW11bGF0b3IucHVzaCh2YWx1ZSk7XG4gIH0pIHx8IGFjY3VtdWxhdG9yO1xufSxcbiAgICAvL3Rha2VzIGFueSB2YWx1ZSBhbmQgcmV0dXJucyBhbiBhcnJheS4gSWYgaXQncyBhIHN0cmluZyAoYW5kIGxlYXZlU3RyaW5ncyBpc24ndCB0cnVlKSwgaXQnbGwgdXNlIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoKSBhbmQgY29udmVydCB0aGF0IHRvIGFuIGFycmF5LiBJdCdsbCBhbHNvIGFjY2VwdCBpdGVyYWJsZXMgbGlrZSBqUXVlcnkgb2JqZWN0cy5cbnRvQXJyYXkgPSBmdW5jdGlvbiB0b0FycmF5KHZhbHVlLCBzY29wZSwgbGVhdmVTdHJpbmdzKSB7XG4gIHJldHVybiBfY29udGV4dCAmJiAhc2NvcGUgJiYgX2NvbnRleHQuc2VsZWN0b3IgPyBfY29udGV4dC5zZWxlY3Rvcih2YWx1ZSkgOiBfaXNTdHJpbmcodmFsdWUpICYmICFsZWF2ZVN0cmluZ3MgJiYgKF9jb3JlSW5pdHRlZCB8fCAhX3dha2UoKSkgPyBfc2xpY2UuY2FsbCgoc2NvcGUgfHwgX2RvYykucXVlcnlTZWxlY3RvckFsbCh2YWx1ZSksIDApIDogX2lzQXJyYXkodmFsdWUpID8gX2ZsYXR0ZW4odmFsdWUsIGxlYXZlU3RyaW5ncykgOiBfaXNBcnJheUxpa2UodmFsdWUpID8gX3NsaWNlLmNhbGwodmFsdWUsIDApIDogdmFsdWUgPyBbdmFsdWVdIDogW107XG59LFxuICAgIHNlbGVjdG9yID0gZnVuY3Rpb24gc2VsZWN0b3IodmFsdWUpIHtcbiAgdmFsdWUgPSB0b0FycmF5KHZhbHVlKVswXSB8fCBfd2FybihcIkludmFsaWQgc2NvcGVcIikgfHwge307XG4gIHJldHVybiBmdW5jdGlvbiAodikge1xuICAgIHZhciBlbCA9IHZhbHVlLmN1cnJlbnQgfHwgdmFsdWUubmF0aXZlRWxlbWVudCB8fCB2YWx1ZTtcbiAgICByZXR1cm4gdG9BcnJheSh2LCBlbC5xdWVyeVNlbGVjdG9yQWxsID8gZWwgOiBlbCA9PT0gdmFsdWUgPyBfd2FybihcIkludmFsaWQgc2NvcGVcIikgfHwgX2RvYy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpIDogdmFsdWUpO1xuICB9O1xufSxcbiAgICBzaHVmZmxlID0gZnVuY3Rpb24gc2h1ZmZsZShhKSB7XG4gIHJldHVybiBhLnNvcnQoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAuNSAtIE1hdGgucmFuZG9tKCk7XG4gIH0pO1xufSxcbiAgICAvLyBhbHRlcm5hdGl2ZSB0aGF0J3MgYSBiaXQgZmFzdGVyIGFuZCBtb3JlIHJlbGlhYmx5IGRpdmVyc2UgYnV0IGJpZ2dlcjogICBmb3IgKGxldCBqLCB2LCBpID0gYS5sZW5ndGg7IGk7IGogPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBpKSwgdiA9IGFbLS1pXSwgYVtpXSA9IGFbal0sIGFbal0gPSB2KTsgcmV0dXJuIGE7XG4vL2ZvciBkaXN0cmlidXRpbmcgdmFsdWVzIGFjcm9zcyBhbiBhcnJheS4gQ2FuIGFjY2VwdCBhIG51bWJlciwgYSBmdW5jdGlvbiBvciAobW9zdCBjb21tb25seSkgYSBmdW5jdGlvbiB3aGljaCBjYW4gY29udGFpbiB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6IHtiYXNlLCBhbW91bnQsIGZyb20sIGVhc2UsIGdyaWQsIGF4aXMsIGxlbmd0aCwgZWFjaH0uIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGV4cGVjdHMgdGhlIGZvbGxvd2luZyBwYXJhbWV0ZXJzOiBpbmRleCwgdGFyZ2V0LCBhcnJheS4gUmVjb2duaXplcyB0aGUgZm9sbG93aW5nXG5kaXN0cmlidXRlID0gZnVuY3Rpb24gZGlzdHJpYnV0ZSh2KSB7XG4gIGlmIChfaXNGdW5jdGlvbih2KSkge1xuICAgIHJldHVybiB2O1xuICB9XG5cbiAgdmFyIHZhcnMgPSBfaXNPYmplY3QodikgPyB2IDoge1xuICAgIGVhY2g6IHZcbiAgfSxcbiAgICAgIC8vbjoxIGlzIGp1c3QgdG8gaW5kaWNhdGUgdiB3YXMgYSBudW1iZXI7IHdlIGxldmVyYWdlIHRoYXQgbGF0ZXIgdG8gc2V0IHYgYWNjb3JkaW5nIHRvIHRoZSBsZW5ndGggd2UgZ2V0LiBJZiBhIG51bWJlciBpcyBwYXNzZWQgaW4sIHdlIHRyZWF0IGl0IGxpa2UgdGhlIG9sZCBzdGFnZ2VyIHZhbHVlIHdoZXJlIDAuMSwgZm9yIGV4YW1wbGUsIHdvdWxkIG1lYW4gdGhhdCB0aGluZ3Mgd291bGQgYmUgZGlzdHJpYnV0ZWQgd2l0aCAwLjEgYmV0d2VlbiBlYWNoIGVsZW1lbnQgaW4gdGhlIGFycmF5IHJhdGhlciB0aGFuIGEgdG90YWwgXCJhbW91bnRcIiB0aGF0J3MgY2h1bmtlZCBvdXQgYW1vbmcgdGhlbSBhbGwuXG4gIGVhc2UgPSBfcGFyc2VFYXNlKHZhcnMuZWFzZSksXG4gICAgICBmcm9tID0gdmFycy5mcm9tIHx8IDAsXG4gICAgICBiYXNlID0gcGFyc2VGbG9hdCh2YXJzLmJhc2UpIHx8IDAsXG4gICAgICBjYWNoZSA9IHt9LFxuICAgICAgaXNEZWNpbWFsID0gZnJvbSA+IDAgJiYgZnJvbSA8IDEsXG4gICAgICByYXRpb3MgPSBpc05hTihmcm9tKSB8fCBpc0RlY2ltYWwsXG4gICAgICBheGlzID0gdmFycy5heGlzLFxuICAgICAgcmF0aW9YID0gZnJvbSxcbiAgICAgIHJhdGlvWSA9IGZyb207XG5cbiAgaWYgKF9pc1N0cmluZyhmcm9tKSkge1xuICAgIHJhdGlvWCA9IHJhdGlvWSA9IHtcbiAgICAgIGNlbnRlcjogLjUsXG4gICAgICBlZGdlczogLjUsXG4gICAgICBlbmQ6IDFcbiAgICB9W2Zyb21dIHx8IDA7XG4gIH0gZWxzZSBpZiAoIWlzRGVjaW1hbCAmJiByYXRpb3MpIHtcbiAgICByYXRpb1ggPSBmcm9tWzBdO1xuICAgIHJhdGlvWSA9IGZyb21bMV07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGksIHRhcmdldCwgYSkge1xuICAgIHZhciBsID0gKGEgfHwgdmFycykubGVuZ3RoLFxuICAgICAgICBkaXN0YW5jZXMgPSBjYWNoZVtsXSxcbiAgICAgICAgb3JpZ2luWCxcbiAgICAgICAgb3JpZ2luWSxcbiAgICAgICAgeCxcbiAgICAgICAgeSxcbiAgICAgICAgZCxcbiAgICAgICAgaixcbiAgICAgICAgbWF4LFxuICAgICAgICBtaW4sXG4gICAgICAgIHdyYXBBdDtcblxuICAgIGlmICghZGlzdGFuY2VzKSB7XG4gICAgICB3cmFwQXQgPSB2YXJzLmdyaWQgPT09IFwiYXV0b1wiID8gMCA6ICh2YXJzLmdyaWQgfHwgWzEsIF9iaWdOdW1dKVsxXTtcblxuICAgICAgaWYgKCF3cmFwQXQpIHtcbiAgICAgICAgbWF4ID0gLV9iaWdOdW07XG5cbiAgICAgICAgd2hpbGUgKG1heCA8IChtYXggPSBhW3dyYXBBdCsrXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0KSAmJiB3cmFwQXQgPCBsKSB7fVxuXG4gICAgICAgIHdyYXBBdC0tO1xuICAgICAgfVxuXG4gICAgICBkaXN0YW5jZXMgPSBjYWNoZVtsXSA9IFtdO1xuICAgICAgb3JpZ2luWCA9IHJhdGlvcyA/IE1hdGgubWluKHdyYXBBdCwgbCkgKiByYXRpb1ggLSAuNSA6IGZyb20gJSB3cmFwQXQ7XG4gICAgICBvcmlnaW5ZID0gd3JhcEF0ID09PSBfYmlnTnVtID8gMCA6IHJhdGlvcyA/IGwgKiByYXRpb1kgLyB3cmFwQXQgLSAuNSA6IGZyb20gLyB3cmFwQXQgfCAwO1xuICAgICAgbWF4ID0gMDtcbiAgICAgIG1pbiA9IF9iaWdOdW07XG5cbiAgICAgIGZvciAoaiA9IDA7IGogPCBsOyBqKyspIHtcbiAgICAgICAgeCA9IGogJSB3cmFwQXQgLSBvcmlnaW5YO1xuICAgICAgICB5ID0gb3JpZ2luWSAtIChqIC8gd3JhcEF0IHwgMCk7XG4gICAgICAgIGRpc3RhbmNlc1tqXSA9IGQgPSAhYXhpcyA/IF9zcXJ0KHggKiB4ICsgeSAqIHkpIDogTWF0aC5hYnMoYXhpcyA9PT0gXCJ5XCIgPyB5IDogeCk7XG4gICAgICAgIGQgPiBtYXggJiYgKG1heCA9IGQpO1xuICAgICAgICBkIDwgbWluICYmIChtaW4gPSBkKTtcbiAgICAgIH1cblxuICAgICAgZnJvbSA9PT0gXCJyYW5kb21cIiAmJiBzaHVmZmxlKGRpc3RhbmNlcyk7XG4gICAgICBkaXN0YW5jZXMubWF4ID0gbWF4IC0gbWluO1xuICAgICAgZGlzdGFuY2VzLm1pbiA9IG1pbjtcbiAgICAgIGRpc3RhbmNlcy52ID0gbCA9IChwYXJzZUZsb2F0KHZhcnMuYW1vdW50KSB8fCBwYXJzZUZsb2F0KHZhcnMuZWFjaCkgKiAod3JhcEF0ID4gbCA/IGwgLSAxIDogIWF4aXMgPyBNYXRoLm1heCh3cmFwQXQsIGwgLyB3cmFwQXQpIDogYXhpcyA9PT0gXCJ5XCIgPyBsIC8gd3JhcEF0IDogd3JhcEF0KSB8fCAwKSAqIChmcm9tID09PSBcImVkZ2VzXCIgPyAtMSA6IDEpO1xuICAgICAgZGlzdGFuY2VzLmIgPSBsIDwgMCA/IGJhc2UgLSBsIDogYmFzZTtcbiAgICAgIGRpc3RhbmNlcy51ID0gZ2V0VW5pdCh2YXJzLmFtb3VudCB8fCB2YXJzLmVhY2gpIHx8IDA7IC8vdW5pdFxuXG4gICAgICBlYXNlID0gZWFzZSAmJiBsIDwgMCA/IF9pbnZlcnRFYXNlKGVhc2UpIDogZWFzZTtcbiAgICB9XG5cbiAgICBsID0gKGRpc3RhbmNlc1tpXSAtIGRpc3RhbmNlcy5taW4pIC8gZGlzdGFuY2VzLm1heCB8fCAwO1xuICAgIHJldHVybiBfcm91bmRQcmVjaXNlKGRpc3RhbmNlcy5iICsgKGVhc2UgPyBlYXNlKGwpIDogbCkgKiBkaXN0YW5jZXMudikgKyBkaXN0YW5jZXMudTsgLy9yb3VuZCBpbiBvcmRlciB0byB3b3JrIGFyb3VuZCBmbG9hdGluZyBwb2ludCBlcnJvcnNcbiAgfTtcbn0sXG4gICAgX3JvdW5kTW9kaWZpZXIgPSBmdW5jdGlvbiBfcm91bmRNb2RpZmllcih2KSB7XG4gIC8vcGFzcyBpbiAwLjEgZ2V0IGEgZnVuY3Rpb24gdGhhdCdsbCByb3VuZCB0byB0aGUgbmVhcmVzdCB0ZW50aCwgb3IgNSB0byByb3VuZCB0byB0aGUgY2xvc2VzdCA1LCBvciAwLjAwMSB0byB0aGUgY2xvc2VzdCAxMDAwdGgsIGV0Yy5cbiAgdmFyIHAgPSBNYXRoLnBvdygxMCwgKCh2ICsgXCJcIikuc3BsaXQoXCIuXCIpWzFdIHx8IFwiXCIpLmxlbmd0aCk7IC8vdG8gYXZvaWQgZmxvYXRpbmcgcG9pbnQgbWF0aCBlcnJvcnMgKGxpa2UgMjQgKiAwLjEgPT0gMi40MDAwMDAwMDAwMDAwMDA0KSwgd2UgY2hvcCBvZmYgYXQgYSBzcGVjaWZpYyBudW1iZXIgb2YgZGVjaW1hbCBwbGFjZXMgKG11Y2ggZmFzdGVyIHRoYW4gdG9GaXhlZCgpKVxuXG4gIHJldHVybiBmdW5jdGlvbiAocmF3KSB7XG4gICAgdmFyIG4gPSBfcm91bmRQcmVjaXNlKE1hdGgucm91bmQocGFyc2VGbG9hdChyYXcpIC8gdikgKiB2ICogcCk7XG5cbiAgICByZXR1cm4gKG4gLSBuICUgMSkgLyBwICsgKF9pc051bWJlcihyYXcpID8gMCA6IGdldFVuaXQocmF3KSk7IC8vIG4gLSBuICUgMSByZXBsYWNlcyBNYXRoLmZsb29yKCkgaW4gb3JkZXIgdG8gaGFuZGxlIG5lZ2F0aXZlIHZhbHVlcyBwcm9wZXJseS4gRm9yIGV4YW1wbGUsIE1hdGguZmxvb3IoLTE1MC4wMDAwMDAwMDAwMDAwMykgaXMgMTUxIVxuICB9O1xufSxcbiAgICBzbmFwID0gZnVuY3Rpb24gc25hcChzbmFwVG8sIHZhbHVlKSB7XG4gIHZhciBpc0FycmF5ID0gX2lzQXJyYXkoc25hcFRvKSxcbiAgICAgIHJhZGl1cyxcbiAgICAgIGlzMkQ7XG5cbiAgaWYgKCFpc0FycmF5ICYmIF9pc09iamVjdChzbmFwVG8pKSB7XG4gICAgcmFkaXVzID0gaXNBcnJheSA9IHNuYXBUby5yYWRpdXMgfHwgX2JpZ051bTtcblxuICAgIGlmIChzbmFwVG8udmFsdWVzKSB7XG4gICAgICBzbmFwVG8gPSB0b0FycmF5KHNuYXBUby52YWx1ZXMpO1xuXG4gICAgICBpZiAoaXMyRCA9ICFfaXNOdW1iZXIoc25hcFRvWzBdKSkge1xuICAgICAgICByYWRpdXMgKj0gcmFkaXVzOyAvL3BlcmZvcm1hbmNlIG9wdGltaXphdGlvbiBzbyB3ZSBkb24ndCBoYXZlIHRvIE1hdGguc3FydCgpIGluIHRoZSBsb29wLlxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzbmFwVG8gPSBfcm91bmRNb2RpZmllcihzbmFwVG8uaW5jcmVtZW50KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gX2NvbmRpdGlvbmFsUmV0dXJuKHZhbHVlLCAhaXNBcnJheSA/IF9yb3VuZE1vZGlmaWVyKHNuYXBUbykgOiBfaXNGdW5jdGlvbihzbmFwVG8pID8gZnVuY3Rpb24gKHJhdykge1xuICAgIGlzMkQgPSBzbmFwVG8ocmF3KTtcbiAgICByZXR1cm4gTWF0aC5hYnMoaXMyRCAtIHJhdykgPD0gcmFkaXVzID8gaXMyRCA6IHJhdztcbiAgfSA6IGZ1bmN0aW9uIChyYXcpIHtcbiAgICB2YXIgeCA9IHBhcnNlRmxvYXQoaXMyRCA/IHJhdy54IDogcmF3KSxcbiAgICAgICAgeSA9IHBhcnNlRmxvYXQoaXMyRCA/IHJhdy55IDogMCksXG4gICAgICAgIG1pbiA9IF9iaWdOdW0sXG4gICAgICAgIGNsb3Nlc3QgPSAwLFxuICAgICAgICBpID0gc25hcFRvLmxlbmd0aCxcbiAgICAgICAgZHgsXG4gICAgICAgIGR5O1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgaWYgKGlzMkQpIHtcbiAgICAgICAgZHggPSBzbmFwVG9baV0ueCAtIHg7XG4gICAgICAgIGR5ID0gc25hcFRvW2ldLnkgLSB5O1xuICAgICAgICBkeCA9IGR4ICogZHggKyBkeSAqIGR5O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZHggPSBNYXRoLmFicyhzbmFwVG9baV0gLSB4KTtcbiAgICAgIH1cblxuICAgICAgaWYgKGR4IDwgbWluKSB7XG4gICAgICAgIG1pbiA9IGR4O1xuICAgICAgICBjbG9zZXN0ID0gaTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjbG9zZXN0ID0gIXJhZGl1cyB8fCBtaW4gPD0gcmFkaXVzID8gc25hcFRvW2Nsb3Nlc3RdIDogcmF3O1xuICAgIHJldHVybiBpczJEIHx8IGNsb3Nlc3QgPT09IHJhdyB8fCBfaXNOdW1iZXIocmF3KSA/IGNsb3Nlc3QgOiBjbG9zZXN0ICsgZ2V0VW5pdChyYXcpO1xuICB9KTtcbn0sXG4gICAgcmFuZG9tID0gZnVuY3Rpb24gcmFuZG9tKG1pbiwgbWF4LCByb3VuZGluZ0luY3JlbWVudCwgcmV0dXJuRnVuY3Rpb24pIHtcbiAgcmV0dXJuIF9jb25kaXRpb25hbFJldHVybihfaXNBcnJheShtaW4pID8gIW1heCA6IHJvdW5kaW5nSW5jcmVtZW50ID09PSB0cnVlID8gISEocm91bmRpbmdJbmNyZW1lbnQgPSAwKSA6ICFyZXR1cm5GdW5jdGlvbiwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaXNBcnJheShtaW4pID8gbWluW35+KE1hdGgucmFuZG9tKCkgKiBtaW4ubGVuZ3RoKV0gOiAocm91bmRpbmdJbmNyZW1lbnQgPSByb3VuZGluZ0luY3JlbWVudCB8fCAxZS01KSAmJiAocmV0dXJuRnVuY3Rpb24gPSByb3VuZGluZ0luY3JlbWVudCA8IDEgPyBNYXRoLnBvdygxMCwgKHJvdW5kaW5nSW5jcmVtZW50ICsgXCJcIikubGVuZ3RoIC0gMikgOiAxKSAmJiBNYXRoLmZsb29yKE1hdGgucm91bmQoKG1pbiAtIHJvdW5kaW5nSW5jcmVtZW50IC8gMiArIE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluICsgcm91bmRpbmdJbmNyZW1lbnQgKiAuOTkpKSAvIHJvdW5kaW5nSW5jcmVtZW50KSAqIHJvdW5kaW5nSW5jcmVtZW50ICogcmV0dXJuRnVuY3Rpb24pIC8gcmV0dXJuRnVuY3Rpb247XG4gIH0pO1xufSxcbiAgICBwaXBlID0gZnVuY3Rpb24gcGlwZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGZ1bmN0aW9ucyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBmdW5jdGlvbnNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9ucy5yZWR1Y2UoZnVuY3Rpb24gKHYsIGYpIHtcbiAgICAgIHJldHVybiBmKHYpO1xuICAgIH0sIHZhbHVlKTtcbiAgfTtcbn0sXG4gICAgdW5pdGl6ZSA9IGZ1bmN0aW9uIHVuaXRpemUoZnVuYywgdW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmMocGFyc2VGbG9hdCh2YWx1ZSkpICsgKHVuaXQgfHwgZ2V0VW5pdCh2YWx1ZSkpO1xuICB9O1xufSxcbiAgICBub3JtYWxpemUgPSBmdW5jdGlvbiBub3JtYWxpemUobWluLCBtYXgsIHZhbHVlKSB7XG4gIHJldHVybiBtYXBSYW5nZShtaW4sIG1heCwgMCwgMSwgdmFsdWUpO1xufSxcbiAgICBfd3JhcEFycmF5ID0gZnVuY3Rpb24gX3dyYXBBcnJheShhLCB3cmFwcGVyLCB2YWx1ZSkge1xuICByZXR1cm4gX2NvbmRpdGlvbmFsUmV0dXJuKHZhbHVlLCBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICByZXR1cm4gYVt+fndyYXBwZXIoaW5kZXgpXTtcbiAgfSk7XG59LFxuICAgIHdyYXAgPSBmdW5jdGlvbiB3cmFwKG1pbiwgbWF4LCB2YWx1ZSkge1xuICAvLyBOT1RFOiB3cmFwKCkgQ0FOTk9UIGJlIGFuIGFycm93IGZ1bmN0aW9uISBBIHZlcnkgb2RkIGNvbXBpbGluZyBidWcgY2F1c2VzIHByb2JsZW1zICh1bnJlbGF0ZWQgdG8gR1NBUCkuXG4gIHZhciByYW5nZSA9IG1heCAtIG1pbjtcbiAgcmV0dXJuIF9pc0FycmF5KG1pbikgPyBfd3JhcEFycmF5KG1pbiwgd3JhcCgwLCBtaW4ubGVuZ3RoKSwgbWF4KSA6IF9jb25kaXRpb25hbFJldHVybih2YWx1ZSwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIChyYW5nZSArICh2YWx1ZSAtIG1pbikgJSByYW5nZSkgJSByYW5nZSArIG1pbjtcbiAgfSk7XG59LFxuICAgIHdyYXBZb3lvID0gZnVuY3Rpb24gd3JhcFlveW8obWluLCBtYXgsIHZhbHVlKSB7XG4gIHZhciByYW5nZSA9IG1heCAtIG1pbixcbiAgICAgIHRvdGFsID0gcmFuZ2UgKiAyO1xuICByZXR1cm4gX2lzQXJyYXkobWluKSA/IF93cmFwQXJyYXkobWluLCB3cmFwWW95bygwLCBtaW4ubGVuZ3RoIC0gMSksIG1heCkgOiBfY29uZGl0aW9uYWxSZXR1cm4odmFsdWUsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHZhbHVlID0gKHRvdGFsICsgKHZhbHVlIC0gbWluKSAlIHRvdGFsKSAlIHRvdGFsIHx8IDA7XG4gICAgcmV0dXJuIG1pbiArICh2YWx1ZSA+IHJhbmdlID8gdG90YWwgLSB2YWx1ZSA6IHZhbHVlKTtcbiAgfSk7XG59LFxuICAgIF9yZXBsYWNlUmFuZG9tID0gZnVuY3Rpb24gX3JlcGxhY2VSYW5kb20odmFsdWUpIHtcbiAgLy9yZXBsYWNlcyBhbGwgb2NjdXJyZW5jZXMgb2YgcmFuZG9tKC4uLikgaW4gYSBzdHJpbmcgd2l0aCB0aGUgY2FsY3VsYXRlZCByYW5kb20gdmFsdWUuIGNhbiBiZSBhIHJhbmdlIGxpa2UgcmFuZG9tKC0xMDAsIDEwMCwgNSkgb3IgYW4gYXJyYXkgbGlrZSByYW5kb20oWzAsIDEwMCwgNTAwXSlcbiAgdmFyIHByZXYgPSAwLFxuICAgICAgcyA9IFwiXCIsXG4gICAgICBpLFxuICAgICAgbnVtcyxcbiAgICAgIGVuZCxcbiAgICAgIGlzQXJyYXk7XG5cbiAgd2hpbGUgKH4oaSA9IHZhbHVlLmluZGV4T2YoXCJyYW5kb20oXCIsIHByZXYpKSkge1xuICAgIGVuZCA9IHZhbHVlLmluZGV4T2YoXCIpXCIsIGkpO1xuICAgIGlzQXJyYXkgPSB2YWx1ZS5jaGFyQXQoaSArIDcpID09PSBcIltcIjtcbiAgICBudW1zID0gdmFsdWUuc3Vic3RyKGkgKyA3LCBlbmQgLSBpIC0gNykubWF0Y2goaXNBcnJheSA/IF9kZWxpbWl0ZWRWYWx1ZUV4cCA6IF9zdHJpY3ROdW1FeHApO1xuICAgIHMgKz0gdmFsdWUuc3Vic3RyKHByZXYsIGkgLSBwcmV2KSArIHJhbmRvbShpc0FycmF5ID8gbnVtcyA6ICtudW1zWzBdLCBpc0FycmF5ID8gMCA6ICtudW1zWzFdLCArbnVtc1syXSB8fCAxZS01KTtcbiAgICBwcmV2ID0gZW5kICsgMTtcbiAgfVxuXG4gIHJldHVybiBzICsgdmFsdWUuc3Vic3RyKHByZXYsIHZhbHVlLmxlbmd0aCAtIHByZXYpO1xufSxcbiAgICBtYXBSYW5nZSA9IGZ1bmN0aW9uIG1hcFJhbmdlKGluTWluLCBpbk1heCwgb3V0TWluLCBvdXRNYXgsIHZhbHVlKSB7XG4gIHZhciBpblJhbmdlID0gaW5NYXggLSBpbk1pbixcbiAgICAgIG91dFJhbmdlID0gb3V0TWF4IC0gb3V0TWluO1xuICByZXR1cm4gX2NvbmRpdGlvbmFsUmV0dXJuKHZhbHVlLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gb3V0TWluICsgKCh2YWx1ZSAtIGluTWluKSAvIGluUmFuZ2UgKiBvdXRSYW5nZSB8fCAwKTtcbiAgfSk7XG59LFxuICAgIGludGVycG9sYXRlID0gZnVuY3Rpb24gaW50ZXJwb2xhdGUoc3RhcnQsIGVuZCwgcHJvZ3Jlc3MsIG11dGF0ZSkge1xuICB2YXIgZnVuYyA9IGlzTmFOKHN0YXJ0ICsgZW5kKSA/IDAgOiBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiAoMSAtIHApICogc3RhcnQgKyBwICogZW5kO1xuICB9O1xuXG4gIGlmICghZnVuYykge1xuICAgIHZhciBpc1N0cmluZyA9IF9pc1N0cmluZyhzdGFydCksXG4gICAgICAgIG1hc3RlciA9IHt9LFxuICAgICAgICBwLFxuICAgICAgICBpLFxuICAgICAgICBpbnRlcnBvbGF0b3JzLFxuICAgICAgICBsLFxuICAgICAgICBpbDtcblxuICAgIHByb2dyZXNzID09PSB0cnVlICYmIChtdXRhdGUgPSAxKSAmJiAocHJvZ3Jlc3MgPSBudWxsKTtcblxuICAgIGlmIChpc1N0cmluZykge1xuICAgICAgc3RhcnQgPSB7XG4gICAgICAgIHA6IHN0YXJ0XG4gICAgICB9O1xuICAgICAgZW5kID0ge1xuICAgICAgICBwOiBlbmRcbiAgICAgIH07XG4gICAgfSBlbHNlIGlmIChfaXNBcnJheShzdGFydCkgJiYgIV9pc0FycmF5KGVuZCkpIHtcbiAgICAgIGludGVycG9sYXRvcnMgPSBbXTtcbiAgICAgIGwgPSBzdGFydC5sZW5ndGg7XG4gICAgICBpbCA9IGwgLSAyO1xuXG4gICAgICBmb3IgKGkgPSAxOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGludGVycG9sYXRvcnMucHVzaChpbnRlcnBvbGF0ZShzdGFydFtpIC0gMV0sIHN0YXJ0W2ldKSk7IC8vYnVpbGQgdGhlIGludGVycG9sYXRvcnMgdXAgZnJvbnQgYXMgYSBwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb24gc28gdGhhdCB3aGVuIHRoZSBmdW5jdGlvbiBpcyBjYWxsZWQgbWFueSB0aW1lcywgaXQgY2FuIGp1c3QgcmV1c2UgdGhlbS5cbiAgICAgIH1cblxuICAgICAgbC0tO1xuXG4gICAgICBmdW5jID0gZnVuY3Rpb24gZnVuYyhwKSB7XG4gICAgICAgIHAgKj0gbDtcbiAgICAgICAgdmFyIGkgPSBNYXRoLm1pbihpbCwgfn5wKTtcbiAgICAgICAgcmV0dXJuIGludGVycG9sYXRvcnNbaV0ocCAtIGkpO1xuICAgICAgfTtcblxuICAgICAgcHJvZ3Jlc3MgPSBlbmQ7XG4gICAgfSBlbHNlIGlmICghbXV0YXRlKSB7XG4gICAgICBzdGFydCA9IF9tZXJnZShfaXNBcnJheShzdGFydCkgPyBbXSA6IHt9LCBzdGFydCk7XG4gICAgfVxuXG4gICAgaWYgKCFpbnRlcnBvbGF0b3JzKSB7XG4gICAgICBmb3IgKHAgaW4gZW5kKSB7XG4gICAgICAgIF9hZGRQcm9wVHdlZW4uY2FsbChtYXN0ZXIsIHN0YXJ0LCBwLCBcImdldFwiLCBlbmRbcF0pO1xuICAgICAgfVxuXG4gICAgICBmdW5jID0gZnVuY3Rpb24gZnVuYyhwKSB7XG4gICAgICAgIHJldHVybiBfcmVuZGVyUHJvcFR3ZWVucyhwLCBtYXN0ZXIpIHx8IChpc1N0cmluZyA/IHN0YXJ0LnAgOiBzdGFydCk7XG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBfY29uZGl0aW9uYWxSZXR1cm4ocHJvZ3Jlc3MsIGZ1bmMpO1xufSxcbiAgICBfZ2V0TGFiZWxJbkRpcmVjdGlvbiA9IGZ1bmN0aW9uIF9nZXRMYWJlbEluRGlyZWN0aW9uKHRpbWVsaW5lLCBmcm9tVGltZSwgYmFja3dhcmQpIHtcbiAgLy91c2VkIGZvciBuZXh0TGFiZWwoKSBhbmQgcHJldmlvdXNMYWJlbCgpXG4gIHZhciBsYWJlbHMgPSB0aW1lbGluZS5sYWJlbHMsXG4gICAgICBtaW4gPSBfYmlnTnVtLFxuICAgICAgcCxcbiAgICAgIGRpc3RhbmNlLFxuICAgICAgbGFiZWw7XG5cbiAgZm9yIChwIGluIGxhYmVscykge1xuICAgIGRpc3RhbmNlID0gbGFiZWxzW3BdIC0gZnJvbVRpbWU7XG5cbiAgICBpZiAoZGlzdGFuY2UgPCAwID09PSAhIWJhY2t3YXJkICYmIGRpc3RhbmNlICYmIG1pbiA+IChkaXN0YW5jZSA9IE1hdGguYWJzKGRpc3RhbmNlKSkpIHtcbiAgICAgIGxhYmVsID0gcDtcbiAgICAgIG1pbiA9IGRpc3RhbmNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBsYWJlbDtcbn0sXG4gICAgX2NhbGxiYWNrID0gZnVuY3Rpb24gX2NhbGxiYWNrKGFuaW1hdGlvbiwgdHlwZSwgZXhlY3V0ZUxhenlGaXJzdCkge1xuICB2YXIgdiA9IGFuaW1hdGlvbi52YXJzLFxuICAgICAgY2FsbGJhY2sgPSB2W3R5cGVdLFxuICAgICAgcHJldkNvbnRleHQgPSBfY29udGV4dCxcbiAgICAgIGNvbnRleHQgPSBhbmltYXRpb24uX2N0eCxcbiAgICAgIHBhcmFtcyxcbiAgICAgIHNjb3BlLFxuICAgICAgcmVzdWx0O1xuXG4gIGlmICghY2FsbGJhY2spIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBwYXJhbXMgPSB2W3R5cGUgKyBcIlBhcmFtc1wiXTtcbiAgc2NvcGUgPSB2LmNhbGxiYWNrU2NvcGUgfHwgYW5pbWF0aW9uO1xuICBleGVjdXRlTGF6eUZpcnN0ICYmIF9sYXp5VHdlZW5zLmxlbmd0aCAmJiBfbGF6eVJlbmRlcigpOyAvL2luIGNhc2UgcmVuZGVyaW5nIGNhdXNlZCBhbnkgdHdlZW5zIHRvIGxhenktaW5pdCwgd2Ugc2hvdWxkIHJlbmRlciB0aGVtIGJlY2F1c2UgdHlwaWNhbGx5IHdoZW4gYSB0aW1lbGluZSBmaW5pc2hlcywgdXNlcnMgZXhwZWN0IHRoaW5ncyB0byBoYXZlIHJlbmRlcmVkIGZ1bGx5LiBJbWFnaW5lIGFuIG9uVXBkYXRlIG9uIGEgdGltZWxpbmUgdGhhdCByZXBvcnRzL2NoZWNrcyB0d2VlbmVkIHZhbHVlcy5cblxuICBjb250ZXh0ICYmIChfY29udGV4dCA9IGNvbnRleHQpO1xuICByZXN1bHQgPSBwYXJhbXMgPyBjYWxsYmFjay5hcHBseShzY29wZSwgcGFyYW1zKSA6IGNhbGxiYWNrLmNhbGwoc2NvcGUpO1xuICBfY29udGV4dCA9IHByZXZDb250ZXh0O1xuICByZXR1cm4gcmVzdWx0O1xufSxcbiAgICBfaW50ZXJydXB0ID0gZnVuY3Rpb24gX2ludGVycnVwdChhbmltYXRpb24pIHtcbiAgX3JlbW92ZUZyb21QYXJlbnQoYW5pbWF0aW9uKTtcblxuICBhbmltYXRpb24uc2Nyb2xsVHJpZ2dlciAmJiBhbmltYXRpb24uc2Nyb2xsVHJpZ2dlci5raWxsKGZhbHNlKTtcbiAgYW5pbWF0aW9uLnByb2dyZXNzKCkgPCAxICYmIF9jYWxsYmFjayhhbmltYXRpb24sIFwib25JbnRlcnJ1cHRcIik7XG4gIHJldHVybiBhbmltYXRpb247XG59LFxuICAgIF9xdWlja1R3ZWVuLFxuICAgIF9jcmVhdGVQbHVnaW4gPSBmdW5jdGlvbiBfY3JlYXRlUGx1Z2luKGNvbmZpZykge1xuICBjb25maWcgPSAhY29uZmlnLm5hbWUgJiYgY29uZmlnW1wiZGVmYXVsdFwiXSB8fCBjb25maWc7IC8vVU1EIHBhY2thZ2luZyB3cmFwcyB0aGluZ3Mgb2RkbHksIHNvIGZvciBleGFtcGxlIE1vdGlvblBhdGhIZWxwZXIgYmVjb21lcyB7TW90aW9uUGF0aEhlbHBlcjpNb3Rpb25QYXRoSGVscGVyLCBkZWZhdWx0Ok1vdGlvblBhdGhIZWxwZXJ9LlxuXG4gIHZhciBuYW1lID0gY29uZmlnLm5hbWUsXG4gICAgICBpc0Z1bmMgPSBfaXNGdW5jdGlvbihjb25maWcpLFxuICAgICAgUGx1Z2luID0gbmFtZSAmJiAhaXNGdW5jICYmIGNvbmZpZy5pbml0ID8gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuX3Byb3BzID0gW107XG4gIH0gOiBjb25maWcsXG4gICAgICAvL2luIGNhc2Ugc29tZW9uZSBwYXNzZXMgaW4gYW4gb2JqZWN0IHRoYXQncyBub3QgYSBwbHVnaW4sIGxpa2UgQ3VzdG9tRWFzZVxuICBpbnN0YW5jZURlZmF1bHRzID0ge1xuICAgIGluaXQ6IF9lbXB0eUZ1bmMsXG4gICAgcmVuZGVyOiBfcmVuZGVyUHJvcFR3ZWVucyxcbiAgICBhZGQ6IF9hZGRQcm9wVHdlZW4sXG4gICAga2lsbDogX2tpbGxQcm9wVHdlZW5zT2YsXG4gICAgbW9kaWZpZXI6IF9hZGRQbHVnaW5Nb2RpZmllcixcbiAgICByYXdWYXJzOiAwXG4gIH0sXG4gICAgICBzdGF0aWNzID0ge1xuICAgIHRhcmdldFRlc3Q6IDAsXG4gICAgZ2V0OiAwLFxuICAgIGdldFNldHRlcjogX2dldFNldHRlcixcbiAgICBhbGlhc2VzOiB7fSxcbiAgICByZWdpc3RlcjogMFxuICB9O1xuXG4gIF93YWtlKCk7XG5cbiAgaWYgKGNvbmZpZyAhPT0gUGx1Z2luKSB7XG4gICAgaWYgKF9wbHVnaW5zW25hbWVdKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgX3NldERlZmF1bHRzKFBsdWdpbiwgX3NldERlZmF1bHRzKF9jb3B5RXhjbHVkaW5nKGNvbmZpZywgaW5zdGFuY2VEZWZhdWx0cyksIHN0YXRpY3MpKTsgLy9zdGF0aWMgbWV0aG9kc1xuXG5cbiAgICBfbWVyZ2UoUGx1Z2luLnByb3RvdHlwZSwgX21lcmdlKGluc3RhbmNlRGVmYXVsdHMsIF9jb3B5RXhjbHVkaW5nKGNvbmZpZywgc3RhdGljcykpKTsgLy9pbnN0YW5jZSBtZXRob2RzXG5cblxuICAgIF9wbHVnaW5zW1BsdWdpbi5wcm9wID0gbmFtZV0gPSBQbHVnaW47XG5cbiAgICBpZiAoY29uZmlnLnRhcmdldFRlc3QpIHtcbiAgICAgIF9oYXJuZXNzUGx1Z2lucy5wdXNoKFBsdWdpbik7XG5cbiAgICAgIF9yZXNlcnZlZFByb3BzW25hbWVdID0gMTtcbiAgICB9XG5cbiAgICBuYW1lID0gKG5hbWUgPT09IFwiY3NzXCIgPyBcIkNTU1wiIDogbmFtZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIG5hbWUuc3Vic3RyKDEpKSArIFwiUGx1Z2luXCI7IC8vZm9yIHRoZSBnbG9iYWwgbmFtZS4gXCJtb3Rpb25QYXRoXCIgc2hvdWxkIGJlY29tZSBNb3Rpb25QYXRoUGx1Z2luXG4gIH1cblxuICBfYWRkR2xvYmFsKG5hbWUsIFBsdWdpbik7XG5cbiAgY29uZmlnLnJlZ2lzdGVyICYmIGNvbmZpZy5yZWdpc3Rlcihnc2FwLCBQbHVnaW4sIFByb3BUd2Vlbik7XG59LFxuXG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENPTE9SU1xuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXzI1NSA9IDI1NSxcbiAgICBfY29sb3JMb29rdXAgPSB7XG4gIGFxdWE6IFswLCBfMjU1LCBfMjU1XSxcbiAgbGltZTogWzAsIF8yNTUsIDBdLFxuICBzaWx2ZXI6IFsxOTIsIDE5MiwgMTkyXSxcbiAgYmxhY2s6IFswLCAwLCAwXSxcbiAgbWFyb29uOiBbMTI4LCAwLCAwXSxcbiAgdGVhbDogWzAsIDEyOCwgMTI4XSxcbiAgYmx1ZTogWzAsIDAsIF8yNTVdLFxuICBuYXZ5OiBbMCwgMCwgMTI4XSxcbiAgd2hpdGU6IFtfMjU1LCBfMjU1LCBfMjU1XSxcbiAgb2xpdmU6IFsxMjgsIDEyOCwgMF0sXG4gIHllbGxvdzogW18yNTUsIF8yNTUsIDBdLFxuICBvcmFuZ2U6IFtfMjU1LCAxNjUsIDBdLFxuICBncmF5OiBbMTI4LCAxMjgsIDEyOF0sXG4gIHB1cnBsZTogWzEyOCwgMCwgMTI4XSxcbiAgZ3JlZW46IFswLCAxMjgsIDBdLFxuICByZWQ6IFtfMjU1LCAwLCAwXSxcbiAgcGluazogW18yNTUsIDE5MiwgMjAzXSxcbiAgY3lhbjogWzAsIF8yNTUsIF8yNTVdLFxuICB0cmFuc3BhcmVudDogW18yNTUsIF8yNTUsIF8yNTUsIDBdXG59LFxuICAgIC8vIHBvc3NpYmxlIGZ1dHVyZSBpZGVhIHRvIHJlcGxhY2UgdGhlIGhhcmQtY29kZWQgY29sb3IgbmFtZSB2YWx1ZXMgLSBwdXQgdGhpcyBpbiB0aGUgdGlja2VyLndha2UoKSB3aGVyZSB3ZSBzZXQgdGhlIF9kb2M6XG4vLyBsZXQgY3R4ID0gX2RvYy5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpLmdldENvbnRleHQoXCIyZFwiKTtcbi8vIF9mb3JFYWNoTmFtZShcImFxdWEsbGltZSxzaWx2ZXIsYmxhY2ssbWFyb29uLHRlYWwsYmx1ZSxuYXZ5LHdoaXRlLG9saXZlLHllbGxvdyxvcmFuZ2UsZ3JheSxwdXJwbGUsZ3JlZW4scmVkLHBpbmssY3lhblwiLCBjb2xvciA9PiB7Y3R4LmZpbGxTdHlsZSA9IGNvbG9yOyBfY29sb3JMb29rdXBbY29sb3JdID0gc3BsaXRDb2xvcihjdHguZmlsbFN0eWxlKX0pO1xuX2h1ZSA9IGZ1bmN0aW9uIF9odWUoaCwgbTEsIG0yKSB7XG4gIGggKz0gaCA8IDAgPyAxIDogaCA+IDEgPyAtMSA6IDA7XG4gIHJldHVybiAoaCAqIDYgPCAxID8gbTEgKyAobTIgLSBtMSkgKiBoICogNiA6IGggPCAuNSA/IG0yIDogaCAqIDMgPCAyID8gbTEgKyAobTIgLSBtMSkgKiAoMiAvIDMgLSBoKSAqIDYgOiBtMSkgKiBfMjU1ICsgLjUgfCAwO1xufSxcbiAgICBzcGxpdENvbG9yID0gZnVuY3Rpb24gc3BsaXRDb2xvcih2LCB0b0hTTCwgZm9yY2VBbHBoYSkge1xuICB2YXIgYSA9ICF2ID8gX2NvbG9yTG9va3VwLmJsYWNrIDogX2lzTnVtYmVyKHYpID8gW3YgPj4gMTYsIHYgPj4gOCAmIF8yNTUsIHYgJiBfMjU1XSA6IDAsXG4gICAgICByLFxuICAgICAgZyxcbiAgICAgIGIsXG4gICAgICBoLFxuICAgICAgcyxcbiAgICAgIGwsXG4gICAgICBtYXgsXG4gICAgICBtaW4sXG4gICAgICBkLFxuICAgICAgd2FzSFNMO1xuXG4gIGlmICghYSkge1xuICAgIGlmICh2LnN1YnN0cigtMSkgPT09IFwiLFwiKSB7XG4gICAgICAvL3NvbWV0aW1lcyBhIHRyYWlsaW5nIGNvbW1hIGlzIGluY2x1ZGVkIGFuZCB3ZSBzaG91bGQgY2hvcCBpdCBvZmYgKHR5cGljYWxseSBmcm9tIGEgY29tbWEtZGVsaW1pdGVkIGxpc3Qgb2YgdmFsdWVzIGxpa2UgYSB0ZXh0U2hhZG93OlwiMnB4IDJweCAycHggYmx1ZSwgNXB4IDVweCA1cHggcmdiKDI1NSwwLDApXCIgLSBpbiB0aGlzIGV4YW1wbGUgXCJibHVlLFwiIGhhcyBhIHRyYWlsaW5nIGNvbW1hLiBXZSBjb3VsZCBzdHJpcCBpdCBvdXQgaW5zaWRlIHBhcnNlQ29tcGxleCgpIGJ1dCB3ZSdkIG5lZWQgdG8gZG8gaXQgdG8gdGhlIGJlZ2lubmluZyBhbmQgZW5kaW5nIHZhbHVlcyBwbHVzIGl0IHdvdWxkbid0IHByb3ZpZGUgcHJvdGVjdGlvbiBmcm9tIG90aGVyIHBvdGVudGlhbCBzY2VuYXJpb3MgbGlrZSBpZiB0aGUgdXNlciBwYXNzZXMgaW4gYSBzaW1pbGFyIHZhbHVlLlxuICAgICAgdiA9IHYuc3Vic3RyKDAsIHYubGVuZ3RoIC0gMSk7XG4gICAgfVxuXG4gICAgaWYgKF9jb2xvckxvb2t1cFt2XSkge1xuICAgICAgYSA9IF9jb2xvckxvb2t1cFt2XTtcbiAgICB9IGVsc2UgaWYgKHYuY2hhckF0KDApID09PSBcIiNcIikge1xuICAgICAgaWYgKHYubGVuZ3RoIDwgNikge1xuICAgICAgICAvL2ZvciBzaG9ydGhhbmQgbGlrZSAjOUYwIG9yICM5RjBGIChjb3VsZCBoYXZlIGFscGhhKVxuICAgICAgICByID0gdi5jaGFyQXQoMSk7XG4gICAgICAgIGcgPSB2LmNoYXJBdCgyKTtcbiAgICAgICAgYiA9IHYuY2hhckF0KDMpO1xuICAgICAgICB2ID0gXCIjXCIgKyByICsgciArIGcgKyBnICsgYiArIGIgKyAodi5sZW5ndGggPT09IDUgPyB2LmNoYXJBdCg0KSArIHYuY2hhckF0KDQpIDogXCJcIik7XG4gICAgICB9XG5cbiAgICAgIGlmICh2Lmxlbmd0aCA9PT0gOSkge1xuICAgICAgICAvLyBoZXggd2l0aCBhbHBoYSwgbGlrZSAjZmQ1ZTUzZmZcbiAgICAgICAgYSA9IHBhcnNlSW50KHYuc3Vic3RyKDEsIDYpLCAxNik7XG4gICAgICAgIHJldHVybiBbYSA+PiAxNiwgYSA+PiA4ICYgXzI1NSwgYSAmIF8yNTUsIHBhcnNlSW50KHYuc3Vic3RyKDcpLCAxNikgLyAyNTVdO1xuICAgICAgfVxuXG4gICAgICB2ID0gcGFyc2VJbnQodi5zdWJzdHIoMSksIDE2KTtcbiAgICAgIGEgPSBbdiA+PiAxNiwgdiA+PiA4ICYgXzI1NSwgdiAmIF8yNTVdO1xuICAgIH0gZWxzZSBpZiAodi5zdWJzdHIoMCwgMykgPT09IFwiaHNsXCIpIHtcbiAgICAgIGEgPSB3YXNIU0wgPSB2Lm1hdGNoKF9zdHJpY3ROdW1FeHApO1xuXG4gICAgICBpZiAoIXRvSFNMKSB7XG4gICAgICAgIGggPSArYVswXSAlIDM2MCAvIDM2MDtcbiAgICAgICAgcyA9ICthWzFdIC8gMTAwO1xuICAgICAgICBsID0gK2FbMl0gLyAxMDA7XG4gICAgICAgIGcgPSBsIDw9IC41ID8gbCAqIChzICsgMSkgOiBsICsgcyAtIGwgKiBzO1xuICAgICAgICByID0gbCAqIDIgLSBnO1xuICAgICAgICBhLmxlbmd0aCA+IDMgJiYgKGFbM10gKj0gMSk7IC8vY2FzdCBhcyBudW1iZXJcblxuICAgICAgICBhWzBdID0gX2h1ZShoICsgMSAvIDMsIHIsIGcpO1xuICAgICAgICBhWzFdID0gX2h1ZShoLCByLCBnKTtcbiAgICAgICAgYVsyXSA9IF9odWUoaCAtIDEgLyAzLCByLCBnKTtcbiAgICAgIH0gZWxzZSBpZiAofnYuaW5kZXhPZihcIj1cIikpIHtcbiAgICAgICAgLy9pZiByZWxhdGl2ZSB2YWx1ZXMgYXJlIGZvdW5kLCBqdXN0IHJldHVybiB0aGUgcmF3IHN0cmluZ3Mgd2l0aCB0aGUgcmVsYXRpdmUgcHJlZml4ZXMgaW4gcGxhY2UuXG4gICAgICAgIGEgPSB2Lm1hdGNoKF9udW1FeHApO1xuICAgICAgICBmb3JjZUFscGhhICYmIGEubGVuZ3RoIDwgNCAmJiAoYVszXSA9IDEpO1xuICAgICAgICByZXR1cm4gYTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgYSA9IHYubWF0Y2goX3N0cmljdE51bUV4cCkgfHwgX2NvbG9yTG9va3VwLnRyYW5zcGFyZW50O1xuICAgIH1cblxuICAgIGEgPSBhLm1hcChOdW1iZXIpO1xuICB9XG5cbiAgaWYgKHRvSFNMICYmICF3YXNIU0wpIHtcbiAgICByID0gYVswXSAvIF8yNTU7XG4gICAgZyA9IGFbMV0gLyBfMjU1O1xuICAgIGIgPSBhWzJdIC8gXzI1NTtcbiAgICBtYXggPSBNYXRoLm1heChyLCBnLCBiKTtcbiAgICBtaW4gPSBNYXRoLm1pbihyLCBnLCBiKTtcbiAgICBsID0gKG1heCArIG1pbikgLyAyO1xuXG4gICAgaWYgKG1heCA9PT0gbWluKSB7XG4gICAgICBoID0gcyA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGQgPSBtYXggLSBtaW47XG4gICAgICBzID0gbCA+IDAuNSA/IGQgLyAoMiAtIG1heCAtIG1pbikgOiBkIC8gKG1heCArIG1pbik7XG4gICAgICBoID0gbWF4ID09PSByID8gKGcgLSBiKSAvIGQgKyAoZyA8IGIgPyA2IDogMCkgOiBtYXggPT09IGcgPyAoYiAtIHIpIC8gZCArIDIgOiAociAtIGcpIC8gZCArIDQ7XG4gICAgICBoICo9IDYwO1xuICAgIH1cblxuICAgIGFbMF0gPSB+fihoICsgLjUpO1xuICAgIGFbMV0gPSB+fihzICogMTAwICsgLjUpO1xuICAgIGFbMl0gPSB+fihsICogMTAwICsgLjUpO1xuICB9XG5cbiAgZm9yY2VBbHBoYSAmJiBhLmxlbmd0aCA8IDQgJiYgKGFbM10gPSAxKTtcbiAgcmV0dXJuIGE7XG59LFxuICAgIF9jb2xvck9yZGVyRGF0YSA9IGZ1bmN0aW9uIF9jb2xvck9yZGVyRGF0YSh2KSB7XG4gIC8vIHN0cmlwcyBvdXQgdGhlIGNvbG9ycyBmcm9tIHRoZSBzdHJpbmcsIGZpbmRzIGFsbCB0aGUgbnVtZXJpYyBzbG90cyAod2l0aCB1bml0cykgYW5kIHJldHVybnMgYW4gYXJyYXkgb2YgdGhvc2UuIFRoZSBBcnJheSBhbHNvIGhhcyBhIFwiY1wiIHByb3BlcnR5IHdoaWNoIGlzIGFuIEFycmF5IG9mIHRoZSBpbmRleCB2YWx1ZXMgd2hlcmUgdGhlIGNvbG9ycyBiZWxvbmcuIFRoaXMgaXMgdG8gaGVscCB3b3JrIGFyb3VuZCBpc3N1ZXMgd2hlcmUgdGhlcmUncyBhIG1pcy1tYXRjaGVkIG9yZGVyIG9mIGNvbG9yL251bWVyaWMgZGF0YSBsaWtlIGRyb3Atc2hhZG93KCNmMDAgMHB4IDFweCAycHgpIGFuZCBkcm9wLXNoYWRvdygweCAxcHggMnB4ICNmMDApLiBUaGlzIGlzIGJhc2ljYWxseSBhIGhlbHBlciBmdW5jdGlvbiB1c2VkIGluIF9mb3JtYXRDb2xvcnMoKVxuICB2YXIgdmFsdWVzID0gW10sXG4gICAgICBjID0gW10sXG4gICAgICBpID0gLTE7XG4gIHYuc3BsaXQoX2NvbG9yRXhwKS5mb3JFYWNoKGZ1bmN0aW9uICh2KSB7XG4gICAgdmFyIGEgPSB2Lm1hdGNoKF9udW1XaXRoVW5pdEV4cCkgfHwgW107XG4gICAgdmFsdWVzLnB1c2guYXBwbHkodmFsdWVzLCBhKTtcbiAgICBjLnB1c2goaSArPSBhLmxlbmd0aCArIDEpO1xuICB9KTtcbiAgdmFsdWVzLmMgPSBjO1xuICByZXR1cm4gdmFsdWVzO1xufSxcbiAgICBfZm9ybWF0Q29sb3JzID0gZnVuY3Rpb24gX2Zvcm1hdENvbG9ycyhzLCB0b0hTTCwgb3JkZXJNYXRjaERhdGEpIHtcbiAgdmFyIHJlc3VsdCA9IFwiXCIsXG4gICAgICBjb2xvcnMgPSAocyArIHJlc3VsdCkubWF0Y2goX2NvbG9yRXhwKSxcbiAgICAgIHR5cGUgPSB0b0hTTCA/IFwiaHNsYShcIiA6IFwicmdiYShcIixcbiAgICAgIGkgPSAwLFxuICAgICAgYyxcbiAgICAgIHNoZWxsLFxuICAgICAgZCxcbiAgICAgIGw7XG5cbiAgaWYgKCFjb2xvcnMpIHtcbiAgICByZXR1cm4gcztcbiAgfVxuXG4gIGNvbG9ycyA9IGNvbG9ycy5tYXAoZnVuY3Rpb24gKGNvbG9yKSB7XG4gICAgcmV0dXJuIChjb2xvciA9IHNwbGl0Q29sb3IoY29sb3IsIHRvSFNMLCAxKSkgJiYgdHlwZSArICh0b0hTTCA/IGNvbG9yWzBdICsgXCIsXCIgKyBjb2xvclsxXSArIFwiJSxcIiArIGNvbG9yWzJdICsgXCIlLFwiICsgY29sb3JbM10gOiBjb2xvci5qb2luKFwiLFwiKSkgKyBcIilcIjtcbiAgfSk7XG5cbiAgaWYgKG9yZGVyTWF0Y2hEYXRhKSB7XG4gICAgZCA9IF9jb2xvck9yZGVyRGF0YShzKTtcbiAgICBjID0gb3JkZXJNYXRjaERhdGEuYztcblxuICAgIGlmIChjLmpvaW4ocmVzdWx0KSAhPT0gZC5jLmpvaW4ocmVzdWx0KSkge1xuICAgICAgc2hlbGwgPSBzLnJlcGxhY2UoX2NvbG9yRXhwLCBcIjFcIikuc3BsaXQoX251bVdpdGhVbml0RXhwKTtcbiAgICAgIGwgPSBzaGVsbC5sZW5ndGggLSAxO1xuXG4gICAgICBmb3IgKDsgaSA8IGw7IGkrKykge1xuICAgICAgICByZXN1bHQgKz0gc2hlbGxbaV0gKyAofmMuaW5kZXhPZihpKSA/IGNvbG9ycy5zaGlmdCgpIHx8IHR5cGUgKyBcIjAsMCwwLDApXCIgOiAoZC5sZW5ndGggPyBkIDogY29sb3JzLmxlbmd0aCA/IGNvbG9ycyA6IG9yZGVyTWF0Y2hEYXRhKS5zaGlmdCgpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoIXNoZWxsKSB7XG4gICAgc2hlbGwgPSBzLnNwbGl0KF9jb2xvckV4cCk7XG4gICAgbCA9IHNoZWxsLmxlbmd0aCAtIDE7XG5cbiAgICBmb3IgKDsgaSA8IGw7IGkrKykge1xuICAgICAgcmVzdWx0ICs9IHNoZWxsW2ldICsgY29sb3JzW2ldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQgKyBzaGVsbFtsXTtcbn0sXG4gICAgX2NvbG9yRXhwID0gZnVuY3Rpb24gKCkge1xuICB2YXIgcyA9IFwiKD86XFxcXGIoPzooPzpyZ2J8cmdiYXxoc2x8aHNsYSlcXFxcKC4rP1xcXFwpKXxcXFxcQiMoPzpbMC05YS1mXXszLDR9KXsxLDJ9XFxcXGJcIixcbiAgICAgIC8vd2UnbGwgZHluYW1pY2FsbHkgYnVpbGQgdGhpcyBSZWd1bGFyIEV4cHJlc3Npb24gdG8gY29uc2VydmUgZmlsZSBzaXplLiBBZnRlciBidWlsZGluZyBpdCwgaXQgd2lsbCBiZSBhYmxlIHRvIGZpbmQgcmdiKCksIHJnYmEoKSwgIyAoaGV4YWRlY2ltYWwpLCBhbmQgbmFtZWQgY29sb3IgdmFsdWVzIGxpa2UgcmVkLCBibHVlLCBwdXJwbGUsIGV0Yy4sXG4gIHA7XG5cbiAgZm9yIChwIGluIF9jb2xvckxvb2t1cCkge1xuICAgIHMgKz0gXCJ8XCIgKyBwICsgXCJcXFxcYlwiO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBSZWdFeHAocyArIFwiKVwiLCBcImdpXCIpO1xufSgpLFxuICAgIF9oc2xFeHAgPSAvaHNsW2FdP1xcKC8sXG4gICAgX2NvbG9yU3RyaW5nRmlsdGVyID0gZnVuY3Rpb24gX2NvbG9yU3RyaW5nRmlsdGVyKGEpIHtcbiAgdmFyIGNvbWJpbmVkID0gYS5qb2luKFwiIFwiKSxcbiAgICAgIHRvSFNMO1xuICBfY29sb3JFeHAubGFzdEluZGV4ID0gMDtcblxuICBpZiAoX2NvbG9yRXhwLnRlc3QoY29tYmluZWQpKSB7XG4gICAgdG9IU0wgPSBfaHNsRXhwLnRlc3QoY29tYmluZWQpO1xuICAgIGFbMV0gPSBfZm9ybWF0Q29sb3JzKGFbMV0sIHRvSFNMKTtcbiAgICBhWzBdID0gX2Zvcm1hdENvbG9ycyhhWzBdLCB0b0hTTCwgX2NvbG9yT3JkZXJEYXRhKGFbMV0pKTsgLy8gbWFrZSBzdXJlIHRoZSBvcmRlciBvZiBudW1iZXJzL2NvbG9ycyBtYXRjaCB3aXRoIHRoZSBFTkQgdmFsdWUuXG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufSxcblxuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBUSUNLRVJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cbl90aWNrZXJBY3RpdmUsXG4gICAgX3RpY2tlciA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIF9nZXRUaW1lID0gRGF0ZS5ub3csXG4gICAgICBfbGFnVGhyZXNob2xkID0gNTAwLFxuICAgICAgX2FkanVzdGVkTGFnID0gMzMsXG4gICAgICBfc3RhcnRUaW1lID0gX2dldFRpbWUoKSxcbiAgICAgIF9sYXN0VXBkYXRlID0gX3N0YXJ0VGltZSxcbiAgICAgIF9nYXAgPSAxMDAwIC8gMjQwLFxuICAgICAgX25leHRUaW1lID0gX2dhcCxcbiAgICAgIF9saXN0ZW5lcnMgPSBbXSxcbiAgICAgIF9pZCxcbiAgICAgIF9yZXEsXG4gICAgICBfcmFmLFxuICAgICAgX3NlbGYsXG4gICAgICBfZGVsdGEsXG4gICAgICBfaSxcbiAgICAgIF90aWNrID0gZnVuY3Rpb24gX3RpY2sodikge1xuICAgIHZhciBlbGFwc2VkID0gX2dldFRpbWUoKSAtIF9sYXN0VXBkYXRlLFxuICAgICAgICBtYW51YWwgPSB2ID09PSB0cnVlLFxuICAgICAgICBvdmVybGFwLFxuICAgICAgICBkaXNwYXRjaCxcbiAgICAgICAgdGltZSxcbiAgICAgICAgZnJhbWU7XG5cbiAgICBlbGFwc2VkID4gX2xhZ1RocmVzaG9sZCAmJiAoX3N0YXJ0VGltZSArPSBlbGFwc2VkIC0gX2FkanVzdGVkTGFnKTtcbiAgICBfbGFzdFVwZGF0ZSArPSBlbGFwc2VkO1xuICAgIHRpbWUgPSBfbGFzdFVwZGF0ZSAtIF9zdGFydFRpbWU7XG4gICAgb3ZlcmxhcCA9IHRpbWUgLSBfbmV4dFRpbWU7XG5cbiAgICBpZiAob3ZlcmxhcCA+IDAgfHwgbWFudWFsKSB7XG4gICAgICBmcmFtZSA9ICsrX3NlbGYuZnJhbWU7XG4gICAgICBfZGVsdGEgPSB0aW1lIC0gX3NlbGYudGltZSAqIDEwMDA7XG4gICAgICBfc2VsZi50aW1lID0gdGltZSA9IHRpbWUgLyAxMDAwO1xuICAgICAgX25leHRUaW1lICs9IG92ZXJsYXAgKyAob3ZlcmxhcCA+PSBfZ2FwID8gNCA6IF9nYXAgLSBvdmVybGFwKTtcbiAgICAgIGRpc3BhdGNoID0gMTtcbiAgICB9XG5cbiAgICBtYW51YWwgfHwgKF9pZCA9IF9yZXEoX3RpY2spKTsgLy9tYWtlIHN1cmUgdGhlIHJlcXVlc3QgaXMgbWFkZSBiZWZvcmUgd2UgZGlzcGF0Y2ggdGhlIFwidGlja1wiIGV2ZW50IHNvIHRoYXQgdGltaW5nIGlzIG1haW50YWluZWQuIE90aGVyd2lzZSwgaWYgcHJvY2Vzc2luZyB0aGUgXCJ0aWNrXCIgcmVxdWlyZXMgYSBidW5jaCBvZiB0aW1lIChsaWtlIDE1bXMpIGFuZCB3ZSdyZSB1c2luZyBhIHNldFRpbWVvdXQoKSB0aGF0J3MgYmFzZWQgb24gMTYuN21zLCBpdCdkIHRlY2huaWNhbGx5IHRha2UgMzEuN21zIGJldHdlZW4gZnJhbWVzIG90aGVyd2lzZS5cblxuICAgIGlmIChkaXNwYXRjaCkge1xuICAgICAgZm9yIChfaSA9IDA7IF9pIDwgX2xpc3RlbmVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgLy8gdXNlIF9pIGFuZCBjaGVjayBfbGlzdGVuZXJzLmxlbmd0aCBpbnN0ZWFkIG9mIGEgdmFyaWFibGUgYmVjYXVzZSBhIGxpc3RlbmVyIGNvdWxkIGdldCByZW1vdmVkIGR1cmluZyB0aGUgbG9vcCwgYW5kIGlmIHRoYXQgaGFwcGVucyB0byBhbiBlbGVtZW50IGxlc3MgdGhhbiB0aGUgY3VycmVudCBpbmRleCwgaXQnZCB0aHJvdyB0aGluZ3Mgb2ZmIGluIHRoZSBsb29wLlxuICAgICAgICBfbGlzdGVuZXJzW19pXSh0aW1lLCBfZGVsdGEsIGZyYW1lLCB2KTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgX3NlbGYgPSB7XG4gICAgdGltZTogMCxcbiAgICBmcmFtZTogMCxcbiAgICB0aWNrOiBmdW5jdGlvbiB0aWNrKCkge1xuICAgICAgX3RpY2sodHJ1ZSk7XG4gICAgfSxcbiAgICBkZWx0YVJhdGlvOiBmdW5jdGlvbiBkZWx0YVJhdGlvKGZwcykge1xuICAgICAgcmV0dXJuIF9kZWx0YSAvICgxMDAwIC8gKGZwcyB8fCA2MCkpO1xuICAgIH0sXG4gICAgd2FrZTogZnVuY3Rpb24gd2FrZSgpIHtcbiAgICAgIGlmIChfY29yZVJlYWR5KSB7XG4gICAgICAgIGlmICghX2NvcmVJbml0dGVkICYmIF93aW5kb3dFeGlzdHMoKSkge1xuICAgICAgICAgIF93aW4gPSBfY29yZUluaXR0ZWQgPSB3aW5kb3c7XG4gICAgICAgICAgX2RvYyA9IF93aW4uZG9jdW1lbnQgfHwge307XG4gICAgICAgICAgX2dsb2JhbHMuZ3NhcCA9IGdzYXA7XG4gICAgICAgICAgKF93aW4uZ3NhcFZlcnNpb25zIHx8IChfd2luLmdzYXBWZXJzaW9ucyA9IFtdKSkucHVzaChnc2FwLnZlcnNpb24pO1xuXG4gICAgICAgICAgX2luc3RhbGwoX2luc3RhbGxTY29wZSB8fCBfd2luLkdyZWVuU29ja0dsb2JhbHMgfHwgIV93aW4uZ3NhcCAmJiBfd2luIHx8IHt9KTtcblxuICAgICAgICAgIF9yYWYgPSBfd2luLnJlcXVlc3RBbmltYXRpb25GcmFtZTtcbiAgICAgICAgfVxuXG4gICAgICAgIF9pZCAmJiBfc2VsZi5zbGVlcCgpO1xuXG4gICAgICAgIF9yZXEgPSBfcmFmIHx8IGZ1bmN0aW9uIChmKSB7XG4gICAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZiwgX25leHRUaW1lIC0gX3NlbGYudGltZSAqIDEwMDAgKyAxIHwgMCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgX3RpY2tlckFjdGl2ZSA9IDE7XG5cbiAgICAgICAgX3RpY2soMik7XG4gICAgICB9XG4gICAgfSxcbiAgICBzbGVlcDogZnVuY3Rpb24gc2xlZXAoKSB7XG4gICAgICAoX3JhZiA/IF93aW4uY2FuY2VsQW5pbWF0aW9uRnJhbWUgOiBjbGVhclRpbWVvdXQpKF9pZCk7XG4gICAgICBfdGlja2VyQWN0aXZlID0gMDtcbiAgICAgIF9yZXEgPSBfZW1wdHlGdW5jO1xuICAgIH0sXG4gICAgbGFnU21vb3RoaW5nOiBmdW5jdGlvbiBsYWdTbW9vdGhpbmcodGhyZXNob2xkLCBhZGp1c3RlZExhZykge1xuICAgICAgX2xhZ1RocmVzaG9sZCA9IHRocmVzaG9sZCB8fCAxIC8gX3RpbnlOdW07IC8vemVybyBzaG91bGQgYmUgaW50ZXJwcmV0ZWQgYXMgYmFzaWNhbGx5IHVubGltaXRlZFxuXG4gICAgICBfYWRqdXN0ZWRMYWcgPSBNYXRoLm1pbihhZGp1c3RlZExhZywgX2xhZ1RocmVzaG9sZCwgMCk7XG4gICAgfSxcbiAgICBmcHM6IGZ1bmN0aW9uIGZwcyhfZnBzKSB7XG4gICAgICBfZ2FwID0gMTAwMCAvIChfZnBzIHx8IDI0MCk7XG4gICAgICBfbmV4dFRpbWUgPSBfc2VsZi50aW1lICogMTAwMCArIF9nYXA7XG4gICAgfSxcbiAgICBhZGQ6IGZ1bmN0aW9uIGFkZChjYWxsYmFjaywgb25jZSwgcHJpb3JpdGl6ZSkge1xuICAgICAgdmFyIGZ1bmMgPSBvbmNlID8gZnVuY3Rpb24gKHQsIGQsIGYsIHYpIHtcbiAgICAgICAgY2FsbGJhY2sodCwgZCwgZiwgdik7XG5cbiAgICAgICAgX3NlbGYucmVtb3ZlKGZ1bmMpO1xuICAgICAgfSA6IGNhbGxiYWNrO1xuXG4gICAgICBfc2VsZi5yZW1vdmUoY2FsbGJhY2spO1xuXG4gICAgICBfbGlzdGVuZXJzW3ByaW9yaXRpemUgPyBcInVuc2hpZnRcIiA6IFwicHVzaFwiXShmdW5jKTtcblxuICAgICAgX3dha2UoKTtcblxuICAgICAgcmV0dXJuIGZ1bmM7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShjYWxsYmFjaywgaSkge1xuICAgICAgfihpID0gX2xpc3RlbmVycy5pbmRleE9mKGNhbGxiYWNrKSkgJiYgX2xpc3RlbmVycy5zcGxpY2UoaSwgMSkgJiYgX2kgPj0gaSAmJiBfaS0tO1xuICAgIH0sXG4gICAgX2xpc3RlbmVyczogX2xpc3RlbmVyc1xuICB9O1xuICByZXR1cm4gX3NlbGY7XG59KCksXG4gICAgX3dha2UgPSBmdW5jdGlvbiBfd2FrZSgpIHtcbiAgcmV0dXJuICFfdGlja2VyQWN0aXZlICYmIF90aWNrZXIud2FrZSgpO1xufSxcbiAgICAvL2Fsc28gZW5zdXJlcyB0aGUgY29yZSBjbGFzc2VzIGFyZSBpbml0aWFsaXplZC5cblxuLypcbiogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKiBFQVNJTkdcbiogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKi9cbl9lYXNlTWFwID0ge30sXG4gICAgX2N1c3RvbUVhc2VFeHAgPSAvXltcXGQuXFwtTV1bXFxkLlxcLSxcXHNdLyxcbiAgICBfcXVvdGVzRXhwID0gL1tcIiddL2csXG4gICAgX3BhcnNlT2JqZWN0SW5TdHJpbmcgPSBmdW5jdGlvbiBfcGFyc2VPYmplY3RJblN0cmluZyh2YWx1ZSkge1xuICAvL3Rha2VzIGEgc3RyaW5nIGxpa2UgXCJ7d2lnZ2xlczoxMCwgdHlwZTphbnRpY2lwYXRlfSlcIiBhbmQgdHVybnMgaXQgaW50byBhIHJlYWwgb2JqZWN0LiBOb3RpY2UgaXQgZW5kcyBpbiBcIilcIiBhbmQgaW5jbHVkZXMgdGhlIHt9IHdyYXBwZXJzLiBUaGlzIGlzIGJlY2F1c2Ugd2Ugb25seSB1c2UgdGhpcyBmdW5jdGlvbiBmb3IgcGFyc2luZyBlYXNlIGNvbmZpZ3MgYW5kIHByaW9yaXRpemVkIG9wdGltaXphdGlvbiByYXRoZXIgdGhhbiByZXVzYWJpbGl0eS5cbiAgdmFyIG9iaiA9IHt9LFxuICAgICAgc3BsaXQgPSB2YWx1ZS5zdWJzdHIoMSwgdmFsdWUubGVuZ3RoIC0gMykuc3BsaXQoXCI6XCIpLFxuICAgICAga2V5ID0gc3BsaXRbMF0sXG4gICAgICBpID0gMSxcbiAgICAgIGwgPSBzcGxpdC5sZW5ndGgsXG4gICAgICBpbmRleCxcbiAgICAgIHZhbCxcbiAgICAgIHBhcnNlZFZhbDtcblxuICBmb3IgKDsgaSA8IGw7IGkrKykge1xuICAgIHZhbCA9IHNwbGl0W2ldO1xuICAgIGluZGV4ID0gaSAhPT0gbCAtIDEgPyB2YWwubGFzdEluZGV4T2YoXCIsXCIpIDogdmFsLmxlbmd0aDtcbiAgICBwYXJzZWRWYWwgPSB2YWwuc3Vic3RyKDAsIGluZGV4KTtcbiAgICBvYmpba2V5XSA9IGlzTmFOKHBhcnNlZFZhbCkgPyBwYXJzZWRWYWwucmVwbGFjZShfcXVvdGVzRXhwLCBcIlwiKS50cmltKCkgOiArcGFyc2VkVmFsO1xuICAgIGtleSA9IHZhbC5zdWJzdHIoaW5kZXggKyAxKS50cmltKCk7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufSxcbiAgICBfdmFsdWVJblBhcmVudGhlc2VzID0gZnVuY3Rpb24gX3ZhbHVlSW5QYXJlbnRoZXNlcyh2YWx1ZSkge1xuICB2YXIgb3BlbiA9IHZhbHVlLmluZGV4T2YoXCIoXCIpICsgMSxcbiAgICAgIGNsb3NlID0gdmFsdWUuaW5kZXhPZihcIilcIiksXG4gICAgICBuZXN0ZWQgPSB2YWx1ZS5pbmRleE9mKFwiKFwiLCBvcGVuKTtcbiAgcmV0dXJuIHZhbHVlLnN1YnN0cmluZyhvcGVuLCB+bmVzdGVkICYmIG5lc3RlZCA8IGNsb3NlID8gdmFsdWUuaW5kZXhPZihcIilcIiwgY2xvc2UgKyAxKSA6IGNsb3NlKTtcbn0sXG4gICAgX2NvbmZpZ0Vhc2VGcm9tU3RyaW5nID0gZnVuY3Rpb24gX2NvbmZpZ0Vhc2VGcm9tU3RyaW5nKG5hbWUpIHtcbiAgLy9uYW1lIGNhbiBiZSBhIHN0cmluZyBsaWtlIFwiZWxhc3RpYy5vdXQoMSwwLjUpXCIsIGFuZCBwYXNzIGluIF9lYXNlTWFwIGFzIG9iaiBhbmQgaXQnbGwgcGFyc2UgaXQgb3V0IGFuZCBjYWxsIHRoZSBhY3R1YWwgZnVuY3Rpb24gbGlrZSBfZWFzZU1hcC5FbGFzdGljLmVhc2VPdXQuY29uZmlnKDEsMC41KS4gSXQgd2lsbCBhbHNvIHBhcnNlIGN1c3RvbSBlYXNlIHN0cmluZ3MgYXMgbG9uZyBhcyBDdXN0b21FYXNlIGlzIGxvYWRlZCBhbmQgcmVnaXN0ZXJlZCAoaW50ZXJuYWxseSBhcyBfZWFzZU1hcC5fQ0UpLlxuICB2YXIgc3BsaXQgPSAobmFtZSArIFwiXCIpLnNwbGl0KFwiKFwiKSxcbiAgICAgIGVhc2UgPSBfZWFzZU1hcFtzcGxpdFswXV07XG4gIHJldHVybiBlYXNlICYmIHNwbGl0Lmxlbmd0aCA+IDEgJiYgZWFzZS5jb25maWcgPyBlYXNlLmNvbmZpZy5hcHBseShudWxsLCB+bmFtZS5pbmRleE9mKFwie1wiKSA/IFtfcGFyc2VPYmplY3RJblN0cmluZyhzcGxpdFsxXSldIDogX3ZhbHVlSW5QYXJlbnRoZXNlcyhuYW1lKS5zcGxpdChcIixcIikubWFwKF9udW1lcmljSWZQb3NzaWJsZSkpIDogX2Vhc2VNYXAuX0NFICYmIF9jdXN0b21FYXNlRXhwLnRlc3QobmFtZSkgPyBfZWFzZU1hcC5fQ0UoXCJcIiwgbmFtZSkgOiBlYXNlO1xufSxcbiAgICBfaW52ZXJ0RWFzZSA9IGZ1bmN0aW9uIF9pbnZlcnRFYXNlKGVhc2UpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIDEgLSBlYXNlKDEgLSBwKTtcbiAgfTtcbn0sXG4gICAgLy8gYWxsb3cgeW95b0Vhc2UgdG8gYmUgc2V0IGluIGNoaWxkcmVuIGFuZCBoYXZlIHRob3NlIGFmZmVjdGVkIHdoZW4gdGhlIHBhcmVudC9hbmNlc3RvciB0aW1lbGluZSB5b3lvcy5cbl9wcm9wYWdhdGVZb3lvRWFzZSA9IGZ1bmN0aW9uIF9wcm9wYWdhdGVZb3lvRWFzZSh0aW1lbGluZSwgaXNZb3lvKSB7XG4gIHZhciBjaGlsZCA9IHRpbWVsaW5lLl9maXJzdCxcbiAgICAgIGVhc2U7XG5cbiAgd2hpbGUgKGNoaWxkKSB7XG4gICAgaWYgKGNoaWxkIGluc3RhbmNlb2YgVGltZWxpbmUpIHtcbiAgICAgIF9wcm9wYWdhdGVZb3lvRWFzZShjaGlsZCwgaXNZb3lvKTtcbiAgICB9IGVsc2UgaWYgKGNoaWxkLnZhcnMueW95b0Vhc2UgJiYgKCFjaGlsZC5feW95byB8fCAhY2hpbGQuX3JlcGVhdCkgJiYgY2hpbGQuX3lveW8gIT09IGlzWW95bykge1xuICAgICAgaWYgKGNoaWxkLnRpbWVsaW5lKSB7XG4gICAgICAgIF9wcm9wYWdhdGVZb3lvRWFzZShjaGlsZC50aW1lbGluZSwgaXNZb3lvKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVhc2UgPSBjaGlsZC5fZWFzZTtcbiAgICAgICAgY2hpbGQuX2Vhc2UgPSBjaGlsZC5feUVhc2U7XG4gICAgICAgIGNoaWxkLl95RWFzZSA9IGVhc2U7XG4gICAgICAgIGNoaWxkLl95b3lvID0gaXNZb3lvO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNoaWxkID0gY2hpbGQuX25leHQ7XG4gIH1cbn0sXG4gICAgX3BhcnNlRWFzZSA9IGZ1bmN0aW9uIF9wYXJzZUVhc2UoZWFzZSwgZGVmYXVsdEVhc2UpIHtcbiAgcmV0dXJuICFlYXNlID8gZGVmYXVsdEVhc2UgOiAoX2lzRnVuY3Rpb24oZWFzZSkgPyBlYXNlIDogX2Vhc2VNYXBbZWFzZV0gfHwgX2NvbmZpZ0Vhc2VGcm9tU3RyaW5nKGVhc2UpKSB8fCBkZWZhdWx0RWFzZTtcbn0sXG4gICAgX2luc2VydEVhc2UgPSBmdW5jdGlvbiBfaW5zZXJ0RWFzZShuYW1lcywgZWFzZUluLCBlYXNlT3V0LCBlYXNlSW5PdXQpIHtcbiAgaWYgKGVhc2VPdXQgPT09IHZvaWQgMCkge1xuICAgIGVhc2VPdXQgPSBmdW5jdGlvbiBlYXNlT3V0KHApIHtcbiAgICAgIHJldHVybiAxIC0gZWFzZUluKDEgLSBwKTtcbiAgICB9O1xuICB9XG5cbiAgaWYgKGVhc2VJbk91dCA9PT0gdm9pZCAwKSB7XG4gICAgZWFzZUluT3V0ID0gZnVuY3Rpb24gZWFzZUluT3V0KHApIHtcbiAgICAgIHJldHVybiBwIDwgLjUgPyBlYXNlSW4ocCAqIDIpIC8gMiA6IDEgLSBlYXNlSW4oKDEgLSBwKSAqIDIpIC8gMjtcbiAgICB9O1xuICB9XG5cbiAgdmFyIGVhc2UgPSB7XG4gICAgZWFzZUluOiBlYXNlSW4sXG4gICAgZWFzZU91dDogZWFzZU91dCxcbiAgICBlYXNlSW5PdXQ6IGVhc2VJbk91dFxuICB9LFxuICAgICAgbG93ZXJjYXNlTmFtZTtcblxuICBfZm9yRWFjaE5hbWUobmFtZXMsIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgX2Vhc2VNYXBbbmFtZV0gPSBfZ2xvYmFsc1tuYW1lXSA9IGVhc2U7XG4gICAgX2Vhc2VNYXBbbG93ZXJjYXNlTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKV0gPSBlYXNlT3V0O1xuXG4gICAgZm9yICh2YXIgcCBpbiBlYXNlKSB7XG4gICAgICBfZWFzZU1hcFtsb3dlcmNhc2VOYW1lICsgKHAgPT09IFwiZWFzZUluXCIgPyBcIi5pblwiIDogcCA9PT0gXCJlYXNlT3V0XCIgPyBcIi5vdXRcIiA6IFwiLmluT3V0XCIpXSA9IF9lYXNlTWFwW25hbWUgKyBcIi5cIiArIHBdID0gZWFzZVtwXTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBlYXNlO1xufSxcbiAgICBfZWFzZUluT3V0RnJvbU91dCA9IGZ1bmN0aW9uIF9lYXNlSW5PdXRGcm9tT3V0KGVhc2VPdXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIHAgPCAuNSA/ICgxIC0gZWFzZU91dCgxIC0gcCAqIDIpKSAvIDIgOiAuNSArIGVhc2VPdXQoKHAgLSAuNSkgKiAyKSAvIDI7XG4gIH07XG59LFxuICAgIF9jb25maWdFbGFzdGljID0gZnVuY3Rpb24gX2NvbmZpZ0VsYXN0aWModHlwZSwgYW1wbGl0dWRlLCBwZXJpb2QpIHtcbiAgdmFyIHAxID0gYW1wbGl0dWRlID49IDEgPyBhbXBsaXR1ZGUgOiAxLFxuICAgICAgLy9ub3RlOiBpZiBhbXBsaXR1ZGUgaXMgPCAxLCB3ZSBzaW1wbHkgYWRqdXN0IHRoZSBwZXJpb2QgZm9yIGEgbW9yZSBuYXR1cmFsIGZlZWwuIE90aGVyd2lzZSB0aGUgbWF0aCBkb2Vzbid0IHdvcmsgcmlnaHQgYW5kIHRoZSBjdXJ2ZSBzdGFydHMgYXQgMS5cbiAgcDIgPSAocGVyaW9kIHx8ICh0eXBlID8gLjMgOiAuNDUpKSAvIChhbXBsaXR1ZGUgPCAxID8gYW1wbGl0dWRlIDogMSksXG4gICAgICBwMyA9IHAyIC8gXzJQSSAqIChNYXRoLmFzaW4oMSAvIHAxKSB8fCAwKSxcbiAgICAgIGVhc2VPdXQgPSBmdW5jdGlvbiBlYXNlT3V0KHApIHtcbiAgICByZXR1cm4gcCA9PT0gMSA/IDEgOiBwMSAqIE1hdGgucG93KDIsIC0xMCAqIHApICogX3NpbigocCAtIHAzKSAqIHAyKSArIDE7XG4gIH0sXG4gICAgICBlYXNlID0gdHlwZSA9PT0gXCJvdXRcIiA/IGVhc2VPdXQgOiB0eXBlID09PSBcImluXCIgPyBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiAxIC0gZWFzZU91dCgxIC0gcCk7XG4gIH0gOiBfZWFzZUluT3V0RnJvbU91dChlYXNlT3V0KTtcblxuICBwMiA9IF8yUEkgLyBwMjsgLy9wcmVjYWxjdWxhdGUgdG8gb3B0aW1pemVcblxuICBlYXNlLmNvbmZpZyA9IGZ1bmN0aW9uIChhbXBsaXR1ZGUsIHBlcmlvZCkge1xuICAgIHJldHVybiBfY29uZmlnRWxhc3RpYyh0eXBlLCBhbXBsaXR1ZGUsIHBlcmlvZCk7XG4gIH07XG5cbiAgcmV0dXJuIGVhc2U7XG59LFxuICAgIF9jb25maWdCYWNrID0gZnVuY3Rpb24gX2NvbmZpZ0JhY2sodHlwZSwgb3ZlcnNob290KSB7XG4gIGlmIChvdmVyc2hvb3QgPT09IHZvaWQgMCkge1xuICAgIG92ZXJzaG9vdCA9IDEuNzAxNTg7XG4gIH1cblxuICB2YXIgZWFzZU91dCA9IGZ1bmN0aW9uIGVhc2VPdXQocCkge1xuICAgIHJldHVybiBwID8gLS1wICogcCAqICgob3ZlcnNob290ICsgMSkgKiBwICsgb3ZlcnNob290KSArIDEgOiAwO1xuICB9LFxuICAgICAgZWFzZSA9IHR5cGUgPT09IFwib3V0XCIgPyBlYXNlT3V0IDogdHlwZSA9PT0gXCJpblwiID8gZnVuY3Rpb24gKHApIHtcbiAgICByZXR1cm4gMSAtIGVhc2VPdXQoMSAtIHApO1xuICB9IDogX2Vhc2VJbk91dEZyb21PdXQoZWFzZU91dCk7XG5cbiAgZWFzZS5jb25maWcgPSBmdW5jdGlvbiAob3ZlcnNob290KSB7XG4gICAgcmV0dXJuIF9jb25maWdCYWNrKHR5cGUsIG92ZXJzaG9vdCk7XG4gIH07XG5cbiAgcmV0dXJuIGVhc2U7XG59OyAvLyBhIGNoZWFwZXIgKGtiIGFuZCBjcHUpIGJ1dCBtb3JlIG1pbGQgd2F5IHRvIGdldCBhIHBhcmFtZXRlcml6ZWQgd2VpZ2h0ZWQgZWFzZSBieSBmZWVkaW5nIGluIGEgdmFsdWUgYmV0d2VlbiAtMSAoZWFzZUluKSBhbmQgMSAoZWFzZU91dCkgd2hlcmUgMCBpcyBsaW5lYXIuXG4vLyBfd2VpZ2h0ZWRFYXNlID0gcmF0aW8gPT4ge1xuLy8gXHRsZXQgeSA9IDAuNSArIHJhdGlvIC8gMjtcbi8vIFx0cmV0dXJuIHAgPT4gKDIgKiAoMSAtIHApICogcCAqIHkgKyBwICogcCk7XG4vLyB9LFxuLy8gYSBzdHJvbmdlciAoYnV0IG1vcmUgZXhwZW5zaXZlIGtiL2NwdSkgcGFyYW1ldGVyaXplZCB3ZWlnaHRlZCBlYXNlIHRoYXQgbGV0cyB5b3UgZmVlZCBpbiBhIHZhbHVlIGJldHdlZW4gLTEgKGVhc2VJbikgYW5kIDEgKGVhc2VPdXQpIHdoZXJlIDAgaXMgbGluZWFyLlxuLy8gX3dlaWdodGVkRWFzZVN0cm9uZyA9IHJhdGlvID0+IHtcbi8vIFx0cmF0aW8gPSAuNSArIHJhdGlvIC8gMjtcbi8vIFx0bGV0IG8gPSAxIC8gMyAqIChyYXRpbyA8IC41ID8gcmF0aW8gOiAxIC0gcmF0aW8pLFxuLy8gXHRcdGIgPSByYXRpbyAtIG8sXG4vLyBcdFx0YyA9IHJhdGlvICsgbztcbi8vIFx0cmV0dXJuIHAgPT4gcCA9PT0gMSA/IHAgOiAzICogYiAqICgxIC0gcCkgKiAoMSAtIHApICogcCArIDMgKiBjICogKDEgLSBwKSAqIHAgKiBwICsgcCAqIHAgKiBwO1xuLy8gfTtcblxuXG5fZm9yRWFjaE5hbWUoXCJMaW5lYXIsUXVhZCxDdWJpYyxRdWFydCxRdWludCxTdHJvbmdcIiwgZnVuY3Rpb24gKG5hbWUsIGkpIHtcbiAgdmFyIHBvd2VyID0gaSA8IDUgPyBpICsgMSA6IGk7XG5cbiAgX2luc2VydEVhc2UobmFtZSArIFwiLFBvd2VyXCIgKyAocG93ZXIgLSAxKSwgaSA/IGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIE1hdGgucG93KHAsIHBvd2VyKTtcbiAgfSA6IGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIHA7XG4gIH0sIGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIDEgLSBNYXRoLnBvdygxIC0gcCwgcG93ZXIpO1xuICB9LCBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiBwIDwgLjUgPyBNYXRoLnBvdyhwICogMiwgcG93ZXIpIC8gMiA6IDEgLSBNYXRoLnBvdygoMSAtIHApICogMiwgcG93ZXIpIC8gMjtcbiAgfSk7XG59KTtcblxuX2Vhc2VNYXAuTGluZWFyLmVhc2VOb25lID0gX2Vhc2VNYXAubm9uZSA9IF9lYXNlTWFwLkxpbmVhci5lYXNlSW47XG5cbl9pbnNlcnRFYXNlKFwiRWxhc3RpY1wiLCBfY29uZmlnRWxhc3RpYyhcImluXCIpLCBfY29uZmlnRWxhc3RpYyhcIm91dFwiKSwgX2NvbmZpZ0VsYXN0aWMoKSk7XG5cbihmdW5jdGlvbiAobiwgYykge1xuICB2YXIgbjEgPSAxIC8gYyxcbiAgICAgIG4yID0gMiAqIG4xLFxuICAgICAgbjMgPSAyLjUgKiBuMSxcbiAgICAgIGVhc2VPdXQgPSBmdW5jdGlvbiBlYXNlT3V0KHApIHtcbiAgICByZXR1cm4gcCA8IG4xID8gbiAqIHAgKiBwIDogcCA8IG4yID8gbiAqIE1hdGgucG93KHAgLSAxLjUgLyBjLCAyKSArIC43NSA6IHAgPCBuMyA/IG4gKiAocCAtPSAyLjI1IC8gYykgKiBwICsgLjkzNzUgOiBuICogTWF0aC5wb3cocCAtIDIuNjI1IC8gYywgMikgKyAuOTg0Mzc1O1xuICB9O1xuXG4gIF9pbnNlcnRFYXNlKFwiQm91bmNlXCIsIGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIDEgLSBlYXNlT3V0KDEgLSBwKTtcbiAgfSwgZWFzZU91dCk7XG59KSg3LjU2MjUsIDIuNzUpO1xuXG5faW5zZXJ0RWFzZShcIkV4cG9cIiwgZnVuY3Rpb24gKHApIHtcbiAgcmV0dXJuIHAgPyBNYXRoLnBvdygyLCAxMCAqIChwIC0gMSkpIDogMDtcbn0pO1xuXG5faW5zZXJ0RWFzZShcIkNpcmNcIiwgZnVuY3Rpb24gKHApIHtcbiAgcmV0dXJuIC0oX3NxcnQoMSAtIHAgKiBwKSAtIDEpO1xufSk7XG5cbl9pbnNlcnRFYXNlKFwiU2luZVwiLCBmdW5jdGlvbiAocCkge1xuICByZXR1cm4gcCA9PT0gMSA/IDEgOiAtX2NvcyhwICogX0hBTEZfUEkpICsgMTtcbn0pO1xuXG5faW5zZXJ0RWFzZShcIkJhY2tcIiwgX2NvbmZpZ0JhY2soXCJpblwiKSwgX2NvbmZpZ0JhY2soXCJvdXRcIiksIF9jb25maWdCYWNrKCkpO1xuXG5fZWFzZU1hcC5TdGVwcGVkRWFzZSA9IF9lYXNlTWFwLnN0ZXBzID0gX2dsb2JhbHMuU3RlcHBlZEVhc2UgPSB7XG4gIGNvbmZpZzogZnVuY3Rpb24gY29uZmlnKHN0ZXBzLCBpbW1lZGlhdGVTdGFydCkge1xuICAgIGlmIChzdGVwcyA9PT0gdm9pZCAwKSB7XG4gICAgICBzdGVwcyA9IDE7XG4gICAgfVxuXG4gICAgdmFyIHAxID0gMSAvIHN0ZXBzLFxuICAgICAgICBwMiA9IHN0ZXBzICsgKGltbWVkaWF0ZVN0YXJ0ID8gMCA6IDEpLFxuICAgICAgICBwMyA9IGltbWVkaWF0ZVN0YXJ0ID8gMSA6IDAsXG4gICAgICAgIG1heCA9IDEgLSBfdGlueU51bTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHApIHtcbiAgICAgIHJldHVybiAoKHAyICogX2NsYW1wKDAsIG1heCwgcCkgfCAwKSArIHAzKSAqIHAxO1xuICAgIH07XG4gIH1cbn07XG5fZGVmYXVsdHMuZWFzZSA9IF9lYXNlTWFwW1wicXVhZC5vdXRcIl07XG5cbl9mb3JFYWNoTmFtZShcIm9uQ29tcGxldGUsb25VcGRhdGUsb25TdGFydCxvblJlcGVhdCxvblJldmVyc2VDb21wbGV0ZSxvbkludGVycnVwdFwiLCBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gX2NhbGxiYWNrTmFtZXMgKz0gbmFtZSArIFwiLFwiICsgbmFtZSArIFwiUGFyYW1zLFwiO1xufSk7XG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENBQ0hFXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cblxuZXhwb3J0IHZhciBHU0NhY2hlID0gZnVuY3Rpb24gR1NDYWNoZSh0YXJnZXQsIGhhcm5lc3MpIHtcbiAgdGhpcy5pZCA9IF9nc0lEKys7XG4gIHRhcmdldC5fZ3NhcCA9IHRoaXM7XG4gIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xuICB0aGlzLmhhcm5lc3MgPSBoYXJuZXNzO1xuICB0aGlzLmdldCA9IGhhcm5lc3MgPyBoYXJuZXNzLmdldCA6IF9nZXRQcm9wZXJ0eTtcbiAgdGhpcy5zZXQgPSBoYXJuZXNzID8gaGFybmVzcy5nZXRTZXR0ZXIgOiBfZ2V0U2V0dGVyO1xufTtcbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQU5JTUFUSU9OXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmV4cG9ydCB2YXIgQW5pbWF0aW9uID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQW5pbWF0aW9uKHZhcnMpIHtcbiAgICB0aGlzLnZhcnMgPSB2YXJzO1xuICAgIHRoaXMuX2RlbGF5ID0gK3ZhcnMuZGVsYXkgfHwgMDtcblxuICAgIGlmICh0aGlzLl9yZXBlYXQgPSB2YXJzLnJlcGVhdCA9PT0gSW5maW5pdHkgPyAtMiA6IHZhcnMucmVwZWF0IHx8IDApIHtcbiAgICAgIC8vIFRPRE86IHJlcGVhdDogSW5maW5pdHkgb24gYSB0aW1lbGluZSdzIGNoaWxkcmVuIG11c3QgZmxhZyB0aGF0IHRpbWVsaW5lIGludGVybmFsbHkgYW5kIGFmZmVjdCBpdHMgdG90YWxEdXJhdGlvbiwgb3RoZXJ3aXNlIGl0J2xsIHN0b3AgaW4gdGhlIG5lZ2F0aXZlIGRpcmVjdGlvbiB3aGVuIHJlYWNoaW5nIHRoZSBzdGFydC5cbiAgICAgIHRoaXMuX3JEZWxheSA9IHZhcnMucmVwZWF0RGVsYXkgfHwgMDtcbiAgICAgIHRoaXMuX3lveW8gPSAhIXZhcnMueW95byB8fCAhIXZhcnMueW95b0Vhc2U7XG4gICAgfVxuXG4gICAgdGhpcy5fdHMgPSAxO1xuXG4gICAgX3NldER1cmF0aW9uKHRoaXMsICt2YXJzLmR1cmF0aW9uLCAxLCAxKTtcblxuICAgIHRoaXMuZGF0YSA9IHZhcnMuZGF0YTtcblxuICAgIGlmIChfY29udGV4dCkge1xuICAgICAgdGhpcy5fY3R4ID0gX2NvbnRleHQ7XG5cbiAgICAgIF9jb250ZXh0LmRhdGEucHVzaCh0aGlzKTtcbiAgICB9XG5cbiAgICBfdGlja2VyQWN0aXZlIHx8IF90aWNrZXIud2FrZSgpO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEFuaW1hdGlvbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmRlbGF5ID0gZnVuY3Rpb24gZGVsYXkodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgfHwgdmFsdWUgPT09IDApIHtcbiAgICAgIHRoaXMucGFyZW50ICYmIHRoaXMucGFyZW50LnNtb290aENoaWxkVGltaW5nICYmIHRoaXMuc3RhcnRUaW1lKHRoaXMuX3N0YXJ0ICsgdmFsdWUgLSB0aGlzLl9kZWxheSk7XG4gICAgICB0aGlzLl9kZWxheSA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX2RlbGF5O1xuICB9O1xuXG4gIF9wcm90by5kdXJhdGlvbiA9IGZ1bmN0aW9uIGR1cmF0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0aGlzLnRvdGFsRHVyYXRpb24odGhpcy5fcmVwZWF0ID4gMCA/IHZhbHVlICsgKHZhbHVlICsgdGhpcy5fckRlbGF5KSAqIHRoaXMuX3JlcGVhdCA6IHZhbHVlKSA6IHRoaXMudG90YWxEdXJhdGlvbigpICYmIHRoaXMuX2R1cjtcbiAgfTtcblxuICBfcHJvdG8udG90YWxEdXJhdGlvbiA9IGZ1bmN0aW9uIHRvdGFsRHVyYXRpb24odmFsdWUpIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB0aGlzLl90RHVyO1xuICAgIH1cblxuICAgIHRoaXMuX2RpcnR5ID0gMDtcbiAgICByZXR1cm4gX3NldER1cmF0aW9uKHRoaXMsIHRoaXMuX3JlcGVhdCA8IDAgPyB2YWx1ZSA6ICh2YWx1ZSAtIHRoaXMuX3JlcGVhdCAqIHRoaXMuX3JEZWxheSkgLyAodGhpcy5fcmVwZWF0ICsgMSkpO1xuICB9O1xuXG4gIF9wcm90by50b3RhbFRpbWUgPSBmdW5jdGlvbiB0b3RhbFRpbWUoX3RvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICBfd2FrZSgpO1xuXG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdFRpbWU7XG4gICAgfVxuXG4gICAgdmFyIHBhcmVudCA9IHRoaXMuX2RwO1xuXG4gICAgaWYgKHBhcmVudCAmJiBwYXJlbnQuc21vb3RoQ2hpbGRUaW1pbmcgJiYgdGhpcy5fdHMpIHtcbiAgICAgIF9hbGlnblBsYXloZWFkKHRoaXMsIF90b3RhbFRpbWUpO1xuXG4gICAgICAhcGFyZW50Ll9kcCB8fCBwYXJlbnQucGFyZW50IHx8IF9wb3N0QWRkQ2hlY2tzKHBhcmVudCwgdGhpcyk7IC8vIGVkZ2UgY2FzZTogaWYgdGhpcyBpcyBhIGNoaWxkIG9mIGEgdGltZWxpbmUgdGhhdCBhbHJlYWR5IGNvbXBsZXRlZCwgZm9yIGV4YW1wbGUsIHdlIG11c3QgcmUtYWN0aXZhdGUgdGhlIHBhcmVudC5cbiAgICAgIC8vaW4gY2FzZSBhbnkgb2YgdGhlIGFuY2VzdG9yIHRpbWVsaW5lcyBoYWQgY29tcGxldGVkIGJ1dCBzaG91bGQgbm93IGJlIGVuYWJsZWQsIHdlIHNob3VsZCByZXNldCB0aGVpciB0b3RhbFRpbWUoKSB3aGljaCB3aWxsIGFsc28gZW5zdXJlIHRoYXQgdGhleSdyZSBsaW5lZCB1cCBwcm9wZXJseSBhbmQgZW5hYmxlZC4gU2tpcCBmb3IgYW5pbWF0aW9ucyB0aGF0IGFyZSBvbiB0aGUgcm9vdCAod2FzdGVmdWwpLiBFeGFtcGxlOiBhIFRpbWVsaW5lTGl0ZS5leHBvcnRSb290KCkgaXMgcGVyZm9ybWVkIHdoZW4gdGhlcmUncyBhIHBhdXNlZCB0d2VlbiBvbiB0aGUgcm9vdCwgdGhlIGV4cG9ydCB3aWxsIG5vdCBjb21wbGV0ZSB1bnRpbCB0aGF0IHR3ZWVuIGlzIHVucGF1c2VkLCBidXQgaW1hZ2luZSBhIGNoaWxkIGdldHMgcmVzdGFydGVkIGxhdGVyLCBhZnRlciBhbGwgW3VucGF1c2VkXSB0d2VlbnMgaGF2ZSBjb21wbGV0ZWQuIFRoZSBzdGFydCBvZiB0aGF0IGNoaWxkIHdvdWxkIGdldCBwdXNoZWQgb3V0LCBidXQgb25lIG9mIHRoZSBhbmNlc3RvcnMgbWF5IGhhdmUgY29tcGxldGVkLlxuXG4gICAgICB3aGlsZSAocGFyZW50ICYmIHBhcmVudC5wYXJlbnQpIHtcbiAgICAgICAgaWYgKHBhcmVudC5wYXJlbnQuX3RpbWUgIT09IHBhcmVudC5fc3RhcnQgKyAocGFyZW50Ll90cyA+PSAwID8gcGFyZW50Ll90VGltZSAvIHBhcmVudC5fdHMgOiAocGFyZW50LnRvdGFsRHVyYXRpb24oKSAtIHBhcmVudC5fdFRpbWUpIC8gLXBhcmVudC5fdHMpKSB7XG4gICAgICAgICAgcGFyZW50LnRvdGFsVGltZShwYXJlbnQuX3RUaW1lLCB0cnVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5wYXJlbnQgJiYgdGhpcy5fZHAuYXV0b1JlbW92ZUNoaWxkcmVuICYmICh0aGlzLl90cyA+IDAgJiYgX3RvdGFsVGltZSA8IHRoaXMuX3REdXIgfHwgdGhpcy5fdHMgPCAwICYmIF90b3RhbFRpbWUgPiAwIHx8ICF0aGlzLl90RHVyICYmICFfdG90YWxUaW1lKSkge1xuICAgICAgICAvL2lmIHRoZSBhbmltYXRpb24gZG9lc24ndCBoYXZlIGEgcGFyZW50LCBwdXQgaXQgYmFjayBpbnRvIGl0cyBsYXN0IHBhcmVudCAocmVjb3JkZWQgYXMgX2RwIGZvciBleGFjdGx5IGNhc2VzIGxpa2UgdGhpcykuIExpbWl0IHRvIHBhcmVudHMgd2l0aCBhdXRvUmVtb3ZlQ2hpbGRyZW4gKGxpa2UgZ2xvYmFsVGltZWxpbmUpIHNvIHRoYXQgaWYgdGhlIHVzZXIgbWFudWFsbHkgcmVtb3ZlcyBhbiBhbmltYXRpb24gZnJvbSBhIHRpbWVsaW5lIGFuZCB0aGVuIGFsdGVycyBpdHMgcGxheWhlYWQsIGl0IGRvZXNuJ3QgZ2V0IGFkZGVkIGJhY2sgaW4uXG4gICAgICAgIF9hZGRUb1RpbWVsaW5lKHRoaXMuX2RwLCB0aGlzLCB0aGlzLl9zdGFydCAtIHRoaXMuX2RlbGF5KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5fdFRpbWUgIT09IF90b3RhbFRpbWUgfHwgIXRoaXMuX2R1ciAmJiAhc3VwcHJlc3NFdmVudHMgfHwgdGhpcy5faW5pdHRlZCAmJiBNYXRoLmFicyh0aGlzLl96VGltZSkgPT09IF90aW55TnVtIHx8ICFfdG90YWxUaW1lICYmICF0aGlzLl9pbml0dGVkICYmICh0aGlzLmFkZCB8fCB0aGlzLl9wdExvb2t1cCkpIHtcbiAgICAgIC8vIGNoZWNrIGZvciBfcHRMb29rdXAgb24gYSBUd2VlbiBpbnN0YW5jZSB0byBlbnN1cmUgaXQgaGFzIGFjdHVhbGx5IGZpbmlzaGVkIGJlaW5nIGluc3RhbnRpYXRlZCwgb3RoZXJ3aXNlIGlmIHRoaXMucmV2ZXJzZSgpIGdldHMgY2FsbGVkIGluIHRoZSBBbmltYXRpb24gY29uc3RydWN0b3IsIGl0IGNvdWxkIHRyaWdnZXIgYSByZW5kZXIoKSBoZXJlIGV2ZW4gdGhvdWdoIHRoZSBfdGFyZ2V0cyB3ZXJlbid0IHBvcHVsYXRlZCwgdGh1cyB3aGVuIF9pbml0KCkgaXMgY2FsbGVkIHRoZXJlIHdvbid0IGJlIGFueSBQcm9wVHdlZW5zIChpdCdsbCBhY3QgbGlrZSB0aGUgdHdlZW4gaXMgbm9uLWZ1bmN0aW9uYWwpXG4gICAgICB0aGlzLl90cyB8fCAodGhpcy5fcFRpbWUgPSBfdG90YWxUaW1lKTsgLy8gb3RoZXJ3aXNlLCBpZiBhbiBhbmltYXRpb24gaXMgcGF1c2VkLCB0aGVuIHRoZSBwbGF5aGVhZCBpcyBtb3ZlZCBiYWNrIHRvIHplcm8sIHRoZW4gcmVzdW1lZCwgaXQnZCByZXZlcnQgYmFjayB0byB0aGUgb3JpZ2luYWwgdGltZSBhdCB0aGUgcGF1c2VcbiAgICAgIC8vaWYgKCF0aGlzLl9sb2NrKSB7IC8vIGF2b2lkIGVuZGxlc3MgcmVjdXJzaW9uIChub3Qgc3VyZSB3ZSBuZWVkIHRoaXMgeWV0IG9yIGlmIGl0J3Mgd29ydGggdGhlIHBlcmZvcm1hbmNlIGhpdClcbiAgICAgIC8vICAgdGhpcy5fbG9jayA9IDE7XG5cbiAgICAgIF9sYXp5U2FmZVJlbmRlcih0aGlzLCBfdG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cyk7IC8vICAgdGhpcy5fbG9jayA9IDA7XG4gICAgICAvL31cblxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90by50aW1lID0gZnVuY3Rpb24gdGltZSh2YWx1ZSwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHRoaXMudG90YWxUaW1lKE1hdGgubWluKHRoaXMudG90YWxEdXJhdGlvbigpLCB2YWx1ZSArIF9lbGFwc2VkQ3ljbGVEdXJhdGlvbih0aGlzKSkgJSAodGhpcy5fZHVyICsgdGhpcy5fckRlbGF5KSB8fCAodmFsdWUgPyB0aGlzLl9kdXIgOiAwKSwgc3VwcHJlc3NFdmVudHMpIDogdGhpcy5fdGltZTsgLy8gbm90ZTogaWYgdGhlIG1vZHVsdXMgcmVzdWx0cyBpbiAwLCB0aGUgcGxheWhlYWQgY291bGQgYmUgZXhhY3RseSBhdCB0aGUgZW5kIG9yIHRoZSBiZWdpbm5pbmcsIGFuZCB3ZSBhbHdheXMgZGVmZXIgdG8gdGhlIEVORCB3aXRoIGEgbm9uLXplcm8gdmFsdWUsIG90aGVyd2lzZSBpZiB5b3Ugc2V0IHRoZSB0aW1lKCkgdG8gdGhlIHZlcnkgZW5kIChkdXJhdGlvbigpKSwgaXQgd291bGQgcmVuZGVyIGF0IHRoZSBTVEFSVCFcbiAgfTtcblxuICBfcHJvdG8udG90YWxQcm9ncmVzcyA9IGZ1bmN0aW9uIHRvdGFsUHJvZ3Jlc3ModmFsdWUsIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0aGlzLnRvdGFsVGltZSh0aGlzLnRvdGFsRHVyYXRpb24oKSAqIHZhbHVlLCBzdXBwcmVzc0V2ZW50cykgOiB0aGlzLnRvdGFsRHVyYXRpb24oKSA/IE1hdGgubWluKDEsIHRoaXMuX3RUaW1lIC8gdGhpcy5fdER1cikgOiB0aGlzLnJhdGlvO1xuICB9O1xuXG4gIF9wcm90by5wcm9ncmVzcyA9IGZ1bmN0aW9uIHByb2dyZXNzKHZhbHVlLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gdGhpcy50b3RhbFRpbWUodGhpcy5kdXJhdGlvbigpICogKHRoaXMuX3lveW8gJiYgISh0aGlzLml0ZXJhdGlvbigpICYgMSkgPyAxIC0gdmFsdWUgOiB2YWx1ZSkgKyBfZWxhcHNlZEN5Y2xlRHVyYXRpb24odGhpcyksIHN1cHByZXNzRXZlbnRzKSA6IHRoaXMuZHVyYXRpb24oKSA/IE1hdGgubWluKDEsIHRoaXMuX3RpbWUgLyB0aGlzLl9kdXIpIDogdGhpcy5yYXRpbztcbiAgfTtcblxuICBfcHJvdG8uaXRlcmF0aW9uID0gZnVuY3Rpb24gaXRlcmF0aW9uKHZhbHVlLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIHZhciBjeWNsZUR1cmF0aW9uID0gdGhpcy5kdXJhdGlvbigpICsgdGhpcy5fckRlbGF5O1xuXG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0aGlzLnRvdGFsVGltZSh0aGlzLl90aW1lICsgKHZhbHVlIC0gMSkgKiBjeWNsZUR1cmF0aW9uLCBzdXBwcmVzc0V2ZW50cykgOiB0aGlzLl9yZXBlYXQgPyBfYW5pbWF0aW9uQ3ljbGUodGhpcy5fdFRpbWUsIGN5Y2xlRHVyYXRpb24pICsgMSA6IDE7XG4gIH0gLy8gcG90ZW50aWFsIGZ1dHVyZSBhZGRpdGlvbjpcbiAgLy8gaXNQbGF5aW5nQmFja3dhcmRzKCkge1xuICAvLyBcdGxldCBhbmltYXRpb24gPSB0aGlzLFxuICAvLyBcdFx0b3JpZW50YXRpb24gPSAxOyAvLyAxID0gZm9yd2FyZCwgLTEgPSBiYWNrd2FyZFxuICAvLyBcdHdoaWxlIChhbmltYXRpb24pIHtcbiAgLy8gXHRcdG9yaWVudGF0aW9uICo9IGFuaW1hdGlvbi5yZXZlcnNlZCgpIHx8IChhbmltYXRpb24ucmVwZWF0KCkgJiYgIShhbmltYXRpb24uaXRlcmF0aW9uKCkgJiAxKSkgPyAtMSA6IDE7XG4gIC8vIFx0XHRhbmltYXRpb24gPSBhbmltYXRpb24ucGFyZW50O1xuICAvLyBcdH1cbiAgLy8gXHRyZXR1cm4gb3JpZW50YXRpb24gPCAwO1xuICAvLyB9XG4gIDtcblxuICBfcHJvdG8udGltZVNjYWxlID0gZnVuY3Rpb24gdGltZVNjYWxlKHZhbHVlKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcnRzID09PSAtX3RpbnlOdW0gPyAwIDogdGhpcy5fcnRzOyAvLyByZWNvcmRlZCB0aW1lU2NhbGUuIFNwZWNpYWwgY2FzZTogaWYgc29tZW9uZSBjYWxscyByZXZlcnNlKCkgb24gYW4gYW5pbWF0aW9uIHdpdGggdGltZVNjYWxlIG9mIDAsIHdlIGFzc2lnbiBpdCAtX3RpbnlOdW0gdG8gcmVtZW1iZXIgaXQncyByZXZlcnNlZC5cbiAgICB9XG5cbiAgICBpZiAodGhpcy5fcnRzID09PSB2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdmFyIHRUaW1lID0gdGhpcy5wYXJlbnQgJiYgdGhpcy5fdHMgPyBfcGFyZW50VG9DaGlsZFRvdGFsVGltZSh0aGlzLnBhcmVudC5fdGltZSwgdGhpcykgOiB0aGlzLl90VGltZTsgLy8gbWFrZSBzdXJlIHRvIGRvIHRoZSBwYXJlbnRUb0NoaWxkVG90YWxUaW1lKCkgQkVGT1JFIHNldHRpbmcgdGhlIG5ldyBfdHMgYmVjYXVzZSB0aGUgb2xkIG9uZSBtdXN0IGJlIHVzZWQgaW4gdGhhdCBjYWxjdWxhdGlvbi5cbiAgICAvLyBmdXR1cmUgYWRkaXRpb24/IFVwIHNpZGU6IGZhc3QgYW5kIG1pbmltYWwgZmlsZSBzaXplLiBEb3duIHNpZGU6IG9ubHkgd29ya3Mgb24gdGhpcyBhbmltYXRpb247IGlmIGEgdGltZWxpbmUgaXMgcmV2ZXJzZWQsIGZvciBleGFtcGxlLCBpdHMgY2hpbGRyZW5zJyBvblJldmVyc2Ugd291bGRuJ3QgZ2V0IGNhbGxlZC5cbiAgICAvLygrdmFsdWUgPCAwICYmIHRoaXMuX3J0cyA+PSAwKSAmJiBfY2FsbGJhY2sodGhpcywgXCJvblJldmVyc2VcIiwgdHJ1ZSk7XG4gICAgLy8gcHJpb3JpdGl6ZSByZW5kZXJpbmcgd2hlcmUgdGhlIHBhcmVudCdzIHBsYXloZWFkIGxpbmVzIHVwIGluc3RlYWQgb2YgdGhpcy5fdFRpbWUgYmVjYXVzZSB0aGVyZSBjb3VsZCBiZSBhIHR3ZWVuIHRoYXQncyBhbmltYXRpbmcgYW5vdGhlciB0d2VlbidzIHRpbWVTY2FsZSBpbiB0aGUgc2FtZSByZW5kZXJpbmcgbG9vcCAoc2FtZSBwYXJlbnQpLCB0aHVzIGlmIHRoZSB0aW1lU2NhbGUgdHdlZW4gcmVuZGVycyBmaXJzdCwgaXQgd291bGQgYWx0ZXIgX3N0YXJ0IEJFRk9SRSBfdFRpbWUgd2FzIHNldCBvbiB0aGF0IHRpY2sgKGluIHRoZSByZW5kZXJpbmcgbG9vcCksIGVmZmVjdGl2ZWx5IGZyZWV6aW5nIGl0IHVudGlsIHRoZSB0aW1lU2NhbGUgdHdlZW4gZmluaXNoZXMuXG5cbiAgICB0aGlzLl9ydHMgPSArdmFsdWUgfHwgMDtcbiAgICB0aGlzLl90cyA9IHRoaXMuX3BzIHx8IHZhbHVlID09PSAtX3RpbnlOdW0gPyAwIDogdGhpcy5fcnRzOyAvLyBfdHMgaXMgdGhlIGZ1bmN0aW9uYWwgdGltZVNjYWxlIHdoaWNoIHdvdWxkIGJlIDAgaWYgdGhlIGFuaW1hdGlvbiBpcyBwYXVzZWQuXG5cbiAgICB0aGlzLnRvdGFsVGltZShfY2xhbXAoLXRoaXMuX2RlbGF5LCB0aGlzLl90RHVyLCB0VGltZSksIHRydWUpO1xuXG4gICAgX3NldEVuZCh0aGlzKTsgLy8gaWYgcGFyZW50LnNtb290aENoaWxkVGltaW5nIHdhcyBmYWxzZSwgdGhlIGVuZCB0aW1lIGRpZG4ndCBnZXQgdXBkYXRlZCBpbiB0aGUgX2FsaWduUGxheWhlYWQoKSBtZXRob2QsIHNvIGRvIGl0IGhlcmUuXG5cblxuICAgIHJldHVybiBfcmVjYWNoZUFuY2VzdG9ycyh0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8ucGF1c2VkID0gZnVuY3Rpb24gcGF1c2VkKHZhbHVlKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcHM7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3BzICE9PSB2YWx1ZSkge1xuICAgICAgdGhpcy5fcHMgPSB2YWx1ZTtcblxuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX3BUaW1lID0gdGhpcy5fdFRpbWUgfHwgTWF0aC5tYXgoLXRoaXMuX2RlbGF5LCB0aGlzLnJhd1RpbWUoKSk7IC8vIGlmIHRoZSBwYXVzZSBvY2N1cnMgZHVyaW5nIHRoZSBkZWxheSBwaGFzZSwgbWFrZSBzdXJlIHRoYXQncyBmYWN0b3JlZCBpbiB3aGVuIHJlc3VtaW5nLlxuXG4gICAgICAgIHRoaXMuX3RzID0gdGhpcy5fYWN0ID0gMDsgLy8gX3RzIGlzIHRoZSBmdW5jdGlvbmFsIHRpbWVTY2FsZSwgc28gYSBwYXVzZWQgdHdlZW4gd291bGQgZWZmZWN0aXZlbHkgaGF2ZSBhIHRpbWVTY2FsZSBvZiAwLiBXZSByZWNvcmQgdGhlIFwicmVhbFwiIHRpbWVTY2FsZSBhcyBfcnRzIChyZWNvcmRlZCB0aW1lIHNjYWxlKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3dha2UoKTtcblxuICAgICAgICB0aGlzLl90cyA9IHRoaXMuX3J0czsgLy9vbmx5IGRlZmVyIHRvIF9wVGltZSAocGF1c2VUaW1lKSBpZiB0VGltZSBpcyB6ZXJvLiBSZW1lbWJlciwgc29tZW9uZSBjb3VsZCBwYXVzZSgpIGFuIGFuaW1hdGlvbiwgdGhlbiBzY3J1YiB0aGUgcGxheWhlYWQgYW5kIHJlc3VtZSgpLiBJZiB0aGUgcGFyZW50IGRvZXNuJ3QgaGF2ZSBzbW9vdGhDaGlsZFRpbWluZywgd2UgcmVuZGVyIGF0IHRoZSByYXdUaW1lKCkgYmVjYXVzZSB0aGUgc3RhcnRUaW1lIHdvbid0IGdldCB1cGRhdGVkLlxuXG4gICAgICAgIHRoaXMudG90YWxUaW1lKHRoaXMucGFyZW50ICYmICF0aGlzLnBhcmVudC5zbW9vdGhDaGlsZFRpbWluZyA/IHRoaXMucmF3VGltZSgpIDogdGhpcy5fdFRpbWUgfHwgdGhpcy5fcFRpbWUsIHRoaXMucHJvZ3Jlc3MoKSA9PT0gMSAmJiBNYXRoLmFicyh0aGlzLl96VGltZSkgIT09IF90aW55TnVtICYmICh0aGlzLl90VGltZSAtPSBfdGlueU51bSkpOyAvLyBlZGdlIGNhc2U6IGFuaW1hdGlvbi5wcm9ncmVzcygxKS5wYXVzZSgpLnBsYXkoKSB3b3VsZG4ndCByZW5kZXIgYWdhaW4gYmVjYXVzZSB0aGUgcGxheWhlYWQgaXMgYWxyZWFkeSBhdCB0aGUgZW5kLCBidXQgdGhlIGNhbGwgdG8gdG90YWxUaW1lKCkgYmVsb3cgd2lsbCBhZGQgaXQgYmFjayB0byBpdHMgcGFyZW50Li4uYW5kIG5vdCByZW1vdmUgaXQgYWdhaW4gKHNpbmNlIHJlbW92aW5nIG9ubHkgaGFwcGVucyB1cG9uIHJlbmRlcmluZyBhdCBhIG5ldyB0aW1lKS4gT2Zmc2V0dGluZyB0aGUgX3RUaW1lIHNsaWdodGx5IGlzIGRvbmUgc2ltcGx5IHRvIGNhdXNlIHRoZSBmaW5hbCByZW5kZXIgaW4gdG90YWxUaW1lKCkgdGhhdCdsbCBwb3AgaXQgb2ZmIGl0cyB0aW1lbGluZSAoaWYgYXV0b1JlbW92ZUNoaWxkcmVuIGlzIHRydWUsIG9mIGNvdXJzZSkuIENoZWNrIHRvIG1ha2Ugc3VyZSBfelRpbWUgaXNuJ3QgLV90aW55TnVtIHRvIGF2b2lkIGFuIGVkZ2UgY2FzZSB3aGVyZSB0aGUgcGxheWhlYWQgaXMgcHVzaGVkIHRvIHRoZSBlbmQgYnV0IElOU0lERSBhIHR3ZWVuL2NhbGxiYWNrLCB0aGUgdGltZWxpbmUgaXRzZWxmIGlzIHBhdXNlZCB0aHVzIGhhbHRpbmcgcmVuZGVyaW5nIGFuZCBsZWF2aW5nIGEgZmV3IHVucmVuZGVyZWQuIFdoZW4gcmVzdW1pbmcsIGl0IHdvdWxkbid0IHJlbmRlciB0aG9zZSBvdGhlcndpc2UuXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvLnN0YXJ0VGltZSA9IGZ1bmN0aW9uIHN0YXJ0VGltZSh2YWx1ZSkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICB0aGlzLl9zdGFydCA9IHZhbHVlO1xuICAgICAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50IHx8IHRoaXMuX2RwO1xuICAgICAgcGFyZW50ICYmIChwYXJlbnQuX3NvcnQgfHwgIXRoaXMucGFyZW50KSAmJiBfYWRkVG9UaW1lbGluZShwYXJlbnQsIHRoaXMsIHZhbHVlIC0gdGhpcy5fZGVsYXkpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3N0YXJ0O1xuICB9O1xuXG4gIF9wcm90by5lbmRUaW1lID0gZnVuY3Rpb24gZW5kVGltZShpbmNsdWRlUmVwZWF0cykge1xuICAgIHJldHVybiB0aGlzLl9zdGFydCArIChfaXNOb3RGYWxzZShpbmNsdWRlUmVwZWF0cykgPyB0aGlzLnRvdGFsRHVyYXRpb24oKSA6IHRoaXMuZHVyYXRpb24oKSkgLyBNYXRoLmFicyh0aGlzLl90cyB8fCAxKTtcbiAgfTtcblxuICBfcHJvdG8ucmF3VGltZSA9IGZ1bmN0aW9uIHJhd1RpbWUod3JhcFJlcGVhdHMpIHtcbiAgICB2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnQgfHwgdGhpcy5fZHA7IC8vIF9kcCA9IGRldGFjaGVkIHBhcmVudFxuXG4gICAgcmV0dXJuICFwYXJlbnQgPyB0aGlzLl90VGltZSA6IHdyYXBSZXBlYXRzICYmICghdGhpcy5fdHMgfHwgdGhpcy5fcmVwZWF0ICYmIHRoaXMuX3RpbWUgJiYgdGhpcy50b3RhbFByb2dyZXNzKCkgPCAxKSA/IHRoaXMuX3RUaW1lICUgKHRoaXMuX2R1ciArIHRoaXMuX3JEZWxheSkgOiAhdGhpcy5fdHMgPyB0aGlzLl90VGltZSA6IF9wYXJlbnRUb0NoaWxkVG90YWxUaW1lKHBhcmVudC5yYXdUaW1lKHdyYXBSZXBlYXRzKSwgdGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvLnJldmVydCA9IGZ1bmN0aW9uIHJldmVydChjb25maWcpIHtcbiAgICBpZiAoY29uZmlnID09PSB2b2lkIDApIHtcbiAgICAgIGNvbmZpZyA9IF9yZXZlcnRDb25maWc7XG4gICAgfVxuXG4gICAgdmFyIHByZXZJc1JldmVydGluZyA9IF9yZXZlcnRpbmc7XG4gICAgX3JldmVydGluZyA9IGNvbmZpZztcbiAgICB0aGlzLnRpbWVsaW5lICYmIHRoaXMudGltZWxpbmUucmV2ZXJ0KGNvbmZpZyk7XG4gICAgdGhpcy50b3RhbFRpbWUoLTAuMDEsIGNvbmZpZy5zdXBwcmVzc0V2ZW50cyk7XG4gICAgdGhpcy5kYXRhICE9PSBcIm5lc3RlZFwiICYmIF9yZW1vdmVGcm9tUGFyZW50KHRoaXMpO1xuICAgIF9yZXZlcnRpbmcgPSBwcmV2SXNSZXZlcnRpbmc7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvLmdsb2JhbFRpbWUgPSBmdW5jdGlvbiBnbG9iYWxUaW1lKHJhd1RpbWUpIHtcbiAgICB2YXIgYW5pbWF0aW9uID0gdGhpcyxcbiAgICAgICAgdGltZSA9IGFyZ3VtZW50cy5sZW5ndGggPyByYXdUaW1lIDogYW5pbWF0aW9uLnJhd1RpbWUoKTtcblxuICAgIHdoaWxlIChhbmltYXRpb24pIHtcbiAgICAgIHRpbWUgPSBhbmltYXRpb24uX3N0YXJ0ICsgdGltZSAvIChhbmltYXRpb24uX3RzIHx8IDEpO1xuICAgICAgYW5pbWF0aW9uID0gYW5pbWF0aW9uLl9kcDtcbiAgICB9XG5cbiAgICByZXR1cm4gIXRoaXMucGFyZW50ICYmIHRoaXMudmFycy5pbW1lZGlhdGVSZW5kZXIgPyAtMSA6IHRpbWU7IC8vIHRoZSBfc3RhcnRBdCB0d2VlbnMgZm9yIC5mcm9tVG8oKSBhbmQgLmZyb20oKSB0aGF0IGhhdmUgaW1tZWRpYXRlUmVuZGVyIHNob3VsZCBhbHdheXMgYmUgRklSU1QgaW4gdGhlIHRpbWVsaW5lIChpbXBvcnRhbnQgZm9yIFJlY29yZGluZy5yZXZlcnQoKSlcbiAgfTtcblxuICBfcHJvdG8ucmVwZWF0ID0gZnVuY3Rpb24gcmVwZWF0KHZhbHVlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuX3JlcGVhdCA9IHZhbHVlID09PSBJbmZpbml0eSA/IC0yIDogdmFsdWU7XG4gICAgICByZXR1cm4gX29uVXBkYXRlVG90YWxEdXJhdGlvbih0aGlzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fcmVwZWF0ID09PSAtMiA/IEluZmluaXR5IDogdGhpcy5fcmVwZWF0O1xuICB9O1xuXG4gIF9wcm90by5yZXBlYXREZWxheSA9IGZ1bmN0aW9uIHJlcGVhdERlbGF5KHZhbHVlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHZhciB0aW1lID0gdGhpcy5fdGltZTtcbiAgICAgIHRoaXMuX3JEZWxheSA9IHZhbHVlO1xuXG4gICAgICBfb25VcGRhdGVUb3RhbER1cmF0aW9uKHRoaXMpO1xuXG4gICAgICByZXR1cm4gdGltZSA/IHRoaXMudGltZSh0aW1lKSA6IHRoaXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3JEZWxheTtcbiAgfTtcblxuICBfcHJvdG8ueW95byA9IGZ1bmN0aW9uIHlveW8odmFsdWUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgdGhpcy5feW95byA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3lveW87XG4gIH07XG5cbiAgX3Byb3RvLnNlZWsgPSBmdW5jdGlvbiBzZWVrKHBvc2l0aW9uLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIHJldHVybiB0aGlzLnRvdGFsVGltZShfcGFyc2VQb3NpdGlvbih0aGlzLCBwb3NpdGlvbiksIF9pc05vdEZhbHNlKHN1cHByZXNzRXZlbnRzKSk7XG4gIH07XG5cbiAgX3Byb3RvLnJlc3RhcnQgPSBmdW5jdGlvbiByZXN0YXJ0KGluY2x1ZGVEZWxheSwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICByZXR1cm4gdGhpcy5wbGF5KCkudG90YWxUaW1lKGluY2x1ZGVEZWxheSA/IC10aGlzLl9kZWxheSA6IDAsIF9pc05vdEZhbHNlKHN1cHByZXNzRXZlbnRzKSk7XG4gIH07XG5cbiAgX3Byb3RvLnBsYXkgPSBmdW5jdGlvbiBwbGF5KGZyb20sIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgZnJvbSAhPSBudWxsICYmIHRoaXMuc2Vlayhmcm9tLCBzdXBwcmVzc0V2ZW50cyk7XG4gICAgcmV0dXJuIHRoaXMucmV2ZXJzZWQoZmFsc2UpLnBhdXNlZChmYWxzZSk7XG4gIH07XG5cbiAgX3Byb3RvLnJldmVyc2UgPSBmdW5jdGlvbiByZXZlcnNlKGZyb20sIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgZnJvbSAhPSBudWxsICYmIHRoaXMuc2Vlayhmcm9tIHx8IHRoaXMudG90YWxEdXJhdGlvbigpLCBzdXBwcmVzc0V2ZW50cyk7XG4gICAgcmV0dXJuIHRoaXMucmV2ZXJzZWQodHJ1ZSkucGF1c2VkKGZhbHNlKTtcbiAgfTtcblxuICBfcHJvdG8ucGF1c2UgPSBmdW5jdGlvbiBwYXVzZShhdFRpbWUsIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgYXRUaW1lICE9IG51bGwgJiYgdGhpcy5zZWVrKGF0VGltZSwgc3VwcHJlc3NFdmVudHMpO1xuICAgIHJldHVybiB0aGlzLnBhdXNlZCh0cnVlKTtcbiAgfTtcblxuICBfcHJvdG8ucmVzdW1lID0gZnVuY3Rpb24gcmVzdW1lKCkge1xuICAgIHJldHVybiB0aGlzLnBhdXNlZChmYWxzZSk7XG4gIH07XG5cbiAgX3Byb3RvLnJldmVyc2VkID0gZnVuY3Rpb24gcmV2ZXJzZWQodmFsdWUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgISF2YWx1ZSAhPT0gdGhpcy5yZXZlcnNlZCgpICYmIHRoaXMudGltZVNjYWxlKC10aGlzLl9ydHMgfHwgKHZhbHVlID8gLV90aW55TnVtIDogMCkpOyAvLyBpbiBjYXNlIHRpbWVTY2FsZSBpcyB6ZXJvLCByZXZlcnNpbmcgd291bGQgaGF2ZSBubyBlZmZlY3Qgc28gd2UgdXNlIF90aW55TnVtLlxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fcnRzIDwgMDtcbiAgfTtcblxuICBfcHJvdG8uaW52YWxpZGF0ZSA9IGZ1bmN0aW9uIGludmFsaWRhdGUoKSB7XG4gICAgdGhpcy5faW5pdHRlZCA9IHRoaXMuX2FjdCA9IDA7XG4gICAgdGhpcy5felRpbWUgPSAtX3RpbnlOdW07XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvLmlzQWN0aXZlID0gZnVuY3Rpb24gaXNBY3RpdmUoKSB7XG4gICAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50IHx8IHRoaXMuX2RwLFxuICAgICAgICBzdGFydCA9IHRoaXMuX3N0YXJ0LFxuICAgICAgICByYXdUaW1lO1xuICAgIHJldHVybiAhISghcGFyZW50IHx8IHRoaXMuX3RzICYmIHRoaXMuX2luaXR0ZWQgJiYgcGFyZW50LmlzQWN0aXZlKCkgJiYgKHJhd1RpbWUgPSBwYXJlbnQucmF3VGltZSh0cnVlKSkgPj0gc3RhcnQgJiYgcmF3VGltZSA8IHRoaXMuZW5kVGltZSh0cnVlKSAtIF90aW55TnVtKTtcbiAgfTtcblxuICBfcHJvdG8uZXZlbnRDYWxsYmFjayA9IGZ1bmN0aW9uIGV2ZW50Q2FsbGJhY2sodHlwZSwgY2FsbGJhY2ssIHBhcmFtcykge1xuICAgIHZhciB2YXJzID0gdGhpcy52YXJzO1xuXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICBpZiAoIWNhbGxiYWNrKSB7XG4gICAgICAgIGRlbGV0ZSB2YXJzW3R5cGVdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyc1t0eXBlXSA9IGNhbGxiYWNrO1xuICAgICAgICBwYXJhbXMgJiYgKHZhcnNbdHlwZSArIFwiUGFyYW1zXCJdID0gcGFyYW1zKTtcbiAgICAgICAgdHlwZSA9PT0gXCJvblVwZGF0ZVwiICYmICh0aGlzLl9vblVwZGF0ZSA9IGNhbGxiYWNrKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhcnNbdHlwZV07XG4gIH07XG5cbiAgX3Byb3RvLnRoZW4gPSBmdW5jdGlvbiB0aGVuKG9uRnVsZmlsbGVkKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgdmFyIGYgPSBfaXNGdW5jdGlvbihvbkZ1bGZpbGxlZCkgPyBvbkZ1bGZpbGxlZCA6IF9wYXNzVGhyb3VnaCxcbiAgICAgICAgICBfcmVzb2x2ZSA9IGZ1bmN0aW9uIF9yZXNvbHZlKCkge1xuICAgICAgICB2YXIgX3RoZW4gPSBzZWxmLnRoZW47XG4gICAgICAgIHNlbGYudGhlbiA9IG51bGw7IC8vIHRlbXBvcmFyaWx5IG51bGwgdGhlIHRoZW4oKSBtZXRob2QgdG8gYXZvaWQgYW4gaW5maW5pdGUgbG9vcCAoc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ncmVlbnNvY2svR1NBUC9pc3N1ZXMvMzIyKVxuXG4gICAgICAgIF9pc0Z1bmN0aW9uKGYpICYmIChmID0gZihzZWxmKSkgJiYgKGYudGhlbiB8fCBmID09PSBzZWxmKSAmJiAoc2VsZi50aGVuID0gX3RoZW4pO1xuICAgICAgICByZXNvbHZlKGYpO1xuICAgICAgICBzZWxmLnRoZW4gPSBfdGhlbjtcbiAgICAgIH07XG5cbiAgICAgIGlmIChzZWxmLl9pbml0dGVkICYmIHNlbGYudG90YWxQcm9ncmVzcygpID09PSAxICYmIHNlbGYuX3RzID49IDAgfHwgIXNlbGYuX3RUaW1lICYmIHNlbGYuX3RzIDwgMCkge1xuICAgICAgICBfcmVzb2x2ZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2VsZi5fcHJvbSA9IF9yZXNvbHZlO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5raWxsID0gZnVuY3Rpb24ga2lsbCgpIHtcbiAgICBfaW50ZXJydXB0KHRoaXMpO1xuICB9O1xuXG4gIHJldHVybiBBbmltYXRpb247XG59KCk7XG5cbl9zZXREZWZhdWx0cyhBbmltYXRpb24ucHJvdG90eXBlLCB7XG4gIF90aW1lOiAwLFxuICBfc3RhcnQ6IDAsXG4gIF9lbmQ6IDAsXG4gIF90VGltZTogMCxcbiAgX3REdXI6IDAsXG4gIF9kaXJ0eTogMCxcbiAgX3JlcGVhdDogMCxcbiAgX3lveW86IGZhbHNlLFxuICBwYXJlbnQ6IG51bGwsXG4gIF9pbml0dGVkOiBmYWxzZSxcbiAgX3JEZWxheTogMCxcbiAgX3RzOiAxLFxuICBfZHA6IDAsXG4gIHJhdGlvOiAwLFxuICBfelRpbWU6IC1fdGlueU51bSxcbiAgX3Byb206IDAsXG4gIF9wczogZmFsc2UsXG4gIF9ydHM6IDFcbn0pO1xuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIFRJTUVMSU5FXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuXG5leHBvcnQgdmFyIFRpbWVsaW5lID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQW5pbWF0aW9uKSB7XG4gIF9pbmhlcml0c0xvb3NlKFRpbWVsaW5lLCBfQW5pbWF0aW9uKTtcblxuICBmdW5jdGlvbiBUaW1lbGluZSh2YXJzLCBwb3NpdGlvbikge1xuICAgIHZhciBfdGhpcztcblxuICAgIGlmICh2YXJzID09PSB2b2lkIDApIHtcbiAgICAgIHZhcnMgPSB7fTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9BbmltYXRpb24uY2FsbCh0aGlzLCB2YXJzKSB8fCB0aGlzO1xuICAgIF90aGlzLmxhYmVscyA9IHt9O1xuICAgIF90aGlzLnNtb290aENoaWxkVGltaW5nID0gISF2YXJzLnNtb290aENoaWxkVGltaW5nO1xuICAgIF90aGlzLmF1dG9SZW1vdmVDaGlsZHJlbiA9ICEhdmFycy5hdXRvUmVtb3ZlQ2hpbGRyZW47XG4gICAgX3RoaXMuX3NvcnQgPSBfaXNOb3RGYWxzZSh2YXJzLnNvcnRDaGlsZHJlbik7XG4gICAgX2dsb2JhbFRpbWVsaW5lICYmIF9hZGRUb1RpbWVsaW5lKHZhcnMucGFyZW50IHx8IF9nbG9iYWxUaW1lbGluZSwgX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIHBvc2l0aW9uKTtcbiAgICB2YXJzLnJldmVyc2VkICYmIF90aGlzLnJldmVyc2UoKTtcbiAgICB2YXJzLnBhdXNlZCAmJiBfdGhpcy5wYXVzZWQodHJ1ZSk7XG4gICAgdmFycy5zY3JvbGxUcmlnZ2VyICYmIF9zY3JvbGxUcmlnZ2VyKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCB2YXJzLnNjcm9sbFRyaWdnZXIpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8yID0gVGltZWxpbmUucHJvdG90eXBlO1xuXG4gIF9wcm90bzIudG8gPSBmdW5jdGlvbiB0byh0YXJnZXRzLCB2YXJzLCBwb3NpdGlvbikge1xuICAgIF9jcmVhdGVUd2VlblR5cGUoMCwgYXJndW1lbnRzLCB0aGlzKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuZnJvbSA9IGZ1bmN0aW9uIGZyb20odGFyZ2V0cywgdmFycywgcG9zaXRpb24pIHtcbiAgICBfY3JlYXRlVHdlZW5UeXBlKDEsIGFyZ3VtZW50cywgdGhpcyk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8yLmZyb21UbyA9IGZ1bmN0aW9uIGZyb21Ubyh0YXJnZXRzLCBmcm9tVmFycywgdG9WYXJzLCBwb3NpdGlvbikge1xuICAgIF9jcmVhdGVUd2VlblR5cGUoMiwgYXJndW1lbnRzLCB0aGlzKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuc2V0ID0gZnVuY3Rpb24gc2V0KHRhcmdldHMsIHZhcnMsIHBvc2l0aW9uKSB7XG4gICAgdmFycy5kdXJhdGlvbiA9IDA7XG4gICAgdmFycy5wYXJlbnQgPSB0aGlzO1xuICAgIF9pbmhlcml0RGVmYXVsdHModmFycykucmVwZWF0RGVsYXkgfHwgKHZhcnMucmVwZWF0ID0gMCk7XG4gICAgdmFycy5pbW1lZGlhdGVSZW5kZXIgPSAhIXZhcnMuaW1tZWRpYXRlUmVuZGVyO1xuICAgIG5ldyBUd2Vlbih0YXJnZXRzLCB2YXJzLCBfcGFyc2VQb3NpdGlvbih0aGlzLCBwb3NpdGlvbiksIDEpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuY2FsbCA9IGZ1bmN0aW9uIGNhbGwoY2FsbGJhY2ssIHBhcmFtcywgcG9zaXRpb24pIHtcbiAgICByZXR1cm4gX2FkZFRvVGltZWxpbmUodGhpcywgVHdlZW4uZGVsYXllZENhbGwoMCwgY2FsbGJhY2ssIHBhcmFtcyksIHBvc2l0aW9uKTtcbiAgfSAvL09OTFkgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkhIE1heWJlIGRlbGV0ZT9cbiAgO1xuXG4gIF9wcm90bzIuc3RhZ2dlclRvID0gZnVuY3Rpb24gc3RhZ2dlclRvKHRhcmdldHMsIGR1cmF0aW9uLCB2YXJzLCBzdGFnZ2VyLCBwb3NpdGlvbiwgb25Db21wbGV0ZUFsbCwgb25Db21wbGV0ZUFsbFBhcmFtcykge1xuICAgIHZhcnMuZHVyYXRpb24gPSBkdXJhdGlvbjtcbiAgICB2YXJzLnN0YWdnZXIgPSB2YXJzLnN0YWdnZXIgfHwgc3RhZ2dlcjtcbiAgICB2YXJzLm9uQ29tcGxldGUgPSBvbkNvbXBsZXRlQWxsO1xuICAgIHZhcnMub25Db21wbGV0ZVBhcmFtcyA9IG9uQ29tcGxldGVBbGxQYXJhbXM7XG4gICAgdmFycy5wYXJlbnQgPSB0aGlzO1xuICAgIG5ldyBUd2Vlbih0YXJnZXRzLCB2YXJzLCBfcGFyc2VQb3NpdGlvbih0aGlzLCBwb3NpdGlvbikpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuc3RhZ2dlckZyb20gPSBmdW5jdGlvbiBzdGFnZ2VyRnJvbSh0YXJnZXRzLCBkdXJhdGlvbiwgdmFycywgc3RhZ2dlciwgcG9zaXRpb24sIG9uQ29tcGxldGVBbGwsIG9uQ29tcGxldGVBbGxQYXJhbXMpIHtcbiAgICB2YXJzLnJ1bkJhY2t3YXJkcyA9IDE7XG4gICAgX2luaGVyaXREZWZhdWx0cyh2YXJzKS5pbW1lZGlhdGVSZW5kZXIgPSBfaXNOb3RGYWxzZSh2YXJzLmltbWVkaWF0ZVJlbmRlcik7XG4gICAgcmV0dXJuIHRoaXMuc3RhZ2dlclRvKHRhcmdldHMsIGR1cmF0aW9uLCB2YXJzLCBzdGFnZ2VyLCBwb3NpdGlvbiwgb25Db21wbGV0ZUFsbCwgb25Db21wbGV0ZUFsbFBhcmFtcyk7XG4gIH07XG5cbiAgX3Byb3RvMi5zdGFnZ2VyRnJvbVRvID0gZnVuY3Rpb24gc3RhZ2dlckZyb21Ubyh0YXJnZXRzLCBkdXJhdGlvbiwgZnJvbVZhcnMsIHRvVmFycywgc3RhZ2dlciwgcG9zaXRpb24sIG9uQ29tcGxldGVBbGwsIG9uQ29tcGxldGVBbGxQYXJhbXMpIHtcbiAgICB0b1ZhcnMuc3RhcnRBdCA9IGZyb21WYXJzO1xuICAgIF9pbmhlcml0RGVmYXVsdHModG9WYXJzKS5pbW1lZGlhdGVSZW5kZXIgPSBfaXNOb3RGYWxzZSh0b1ZhcnMuaW1tZWRpYXRlUmVuZGVyKTtcbiAgICByZXR1cm4gdGhpcy5zdGFnZ2VyVG8odGFyZ2V0cywgZHVyYXRpb24sIHRvVmFycywgc3RhZ2dlciwgcG9zaXRpb24sIG9uQ29tcGxldGVBbGwsIG9uQ29tcGxldGVBbGxQYXJhbXMpO1xuICB9O1xuXG4gIF9wcm90bzIucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKSB7XG4gICAgdmFyIHByZXZUaW1lID0gdGhpcy5fdGltZSxcbiAgICAgICAgdER1ciA9IHRoaXMuX2RpcnR5ID8gdGhpcy50b3RhbER1cmF0aW9uKCkgOiB0aGlzLl90RHVyLFxuICAgICAgICBkdXIgPSB0aGlzLl9kdXIsXG4gICAgICAgIHRUaW1lID0gdG90YWxUaW1lIDw9IDAgPyAwIDogX3JvdW5kUHJlY2lzZSh0b3RhbFRpbWUpLFxuICAgICAgICAvLyBpZiBhIHBhdXNlZCB0aW1lbGluZSBpcyByZXN1bWVkIChvciBpdHMgX3N0YXJ0IGlzIHVwZGF0ZWQgZm9yIGFub3RoZXIgcmVhc29uLi4ud2hpY2ggcm91bmRzIGl0KSwgdGhhdCBjb3VsZCByZXN1bHQgaW4gdGhlIHBsYXloZWFkIHNoaWZ0aW5nIGEgKip0aW55KiogYW1vdW50IGFuZCBhIHplcm8tZHVyYXRpb24gY2hpbGQgYXQgdGhhdCBzcG90IG1heSBnZXQgcmVuZGVyZWQgYXQgYSBkaWZmZXJlbnQgcmF0aW8sIGxpa2UgaXRzIHRvdGFsVGltZSBpbiByZW5kZXIoKSBtYXkgYmUgMWUtMTcgaW5zdGVhZCBvZiAwLCBmb3IgZXhhbXBsZS5cbiAgICBjcm9zc2luZ1N0YXJ0ID0gdGhpcy5felRpbWUgPCAwICE9PSB0b3RhbFRpbWUgPCAwICYmICh0aGlzLl9pbml0dGVkIHx8ICFkdXIpLFxuICAgICAgICB0aW1lLFxuICAgICAgICBjaGlsZCxcbiAgICAgICAgbmV4dCxcbiAgICAgICAgaXRlcmF0aW9uLFxuICAgICAgICBjeWNsZUR1cmF0aW9uLFxuICAgICAgICBwcmV2UGF1c2VkLFxuICAgICAgICBwYXVzZVR3ZWVuLFxuICAgICAgICB0aW1lU2NhbGUsXG4gICAgICAgIHByZXZTdGFydCxcbiAgICAgICAgcHJldkl0ZXJhdGlvbixcbiAgICAgICAgeW95byxcbiAgICAgICAgaXNZb3lvO1xuICAgIHRoaXMgIT09IF9nbG9iYWxUaW1lbGluZSAmJiB0VGltZSA+IHREdXIgJiYgdG90YWxUaW1lID49IDAgJiYgKHRUaW1lID0gdER1cik7XG5cbiAgICBpZiAodFRpbWUgIT09IHRoaXMuX3RUaW1lIHx8IGZvcmNlIHx8IGNyb3NzaW5nU3RhcnQpIHtcbiAgICAgIGlmIChwcmV2VGltZSAhPT0gdGhpcy5fdGltZSAmJiBkdXIpIHtcbiAgICAgICAgLy9pZiB0b3RhbER1cmF0aW9uKCkgZmluZHMgYSBjaGlsZCB3aXRoIGEgbmVnYXRpdmUgc3RhcnRUaW1lIGFuZCBzbW9vdGhDaGlsZFRpbWluZyBpcyB0cnVlLCB0aGluZ3MgZ2V0IHNoaWZ0ZWQgYXJvdW5kIGludGVybmFsbHkgc28gd2UgbmVlZCB0byBhZGp1c3QgdGhlIHRpbWUgYWNjb3JkaW5nbHkuIEZvciBleGFtcGxlLCBpZiBhIHR3ZWVuIHN0YXJ0cyBhdCAtMzAgd2UgbXVzdCBzaGlmdCBFVkVSWVRISU5HIGZvcndhcmQgMzAgc2Vjb25kcyBhbmQgbW92ZSB0aGlzIHRpbWVsaW5lJ3Mgc3RhcnRUaW1lIGJhY2t3YXJkIGJ5IDMwIHNlY29uZHMgc28gdGhhdCB0aGluZ3MgYWxpZ24gd2l0aCB0aGUgcGxheWhlYWQgKG5vIGp1bXApLlxuICAgICAgICB0VGltZSArPSB0aGlzLl90aW1lIC0gcHJldlRpbWU7XG4gICAgICAgIHRvdGFsVGltZSArPSB0aGlzLl90aW1lIC0gcHJldlRpbWU7XG4gICAgICB9XG5cbiAgICAgIHRpbWUgPSB0VGltZTtcbiAgICAgIHByZXZTdGFydCA9IHRoaXMuX3N0YXJ0O1xuICAgICAgdGltZVNjYWxlID0gdGhpcy5fdHM7XG4gICAgICBwcmV2UGF1c2VkID0gIXRpbWVTY2FsZTtcblxuICAgICAgaWYgKGNyb3NzaW5nU3RhcnQpIHtcbiAgICAgICAgZHVyIHx8IChwcmV2VGltZSA9IHRoaXMuX3pUaW1lKTsgLy93aGVuIHRoZSBwbGF5aGVhZCBhcnJpdmVzIGF0IEVYQUNUTFkgdGltZSAwIChyaWdodCBvbiB0b3ApIG9mIGEgemVyby1kdXJhdGlvbiB0aW1lbGluZSwgd2UgbmVlZCB0byBkaXNjZXJuIGlmIGV2ZW50cyBhcmUgc3VwcHJlc3NlZCBzbyB0aGF0IHdoZW4gdGhlIHBsYXloZWFkIG1vdmVzIGFnYWluIChuZXh0IHRpbWUpLCBpdCdsbCB0cmlnZ2VyIHRoZSBjYWxsYmFjay4gSWYgZXZlbnRzIGFyZSBOT1Qgc3VwcHJlc3NlZCwgb2J2aW91c2x5IHRoZSBjYWxsYmFjayB3b3VsZCBiZSB0cmlnZ2VyZWQgaW4gdGhpcyByZW5kZXIuIEJhc2ljYWxseSwgdGhlIGNhbGxiYWNrIHNob3VsZCBmaXJlIGVpdGhlciB3aGVuIHRoZSBwbGF5aGVhZCBBUlJJVkVTIG9yIExFQVZFUyB0aGlzIGV4YWN0IHNwb3QsIG5vdCBib3RoLiBJbWFnaW5lIGRvaW5nIGEgdGltZWxpbmUuc2VlaygwKSBhbmQgdGhlcmUncyBhIGNhbGxiYWNrIHRoYXQgc2l0cyBhdCAwLiBTaW5jZSBldmVudHMgYXJlIHN1cHByZXNzZWQgb24gdGhhdCBzZWVrKCkgYnkgZGVmYXVsdCwgbm90aGluZyB3aWxsIGZpcmUsIGJ1dCB3aGVuIHRoZSBwbGF5aGVhZCBtb3ZlcyBvZmYgb2YgdGhhdCBwb3NpdGlvbiwgdGhlIGNhbGxiYWNrIHNob3VsZCBmaXJlLiBUaGlzIGJlaGF2aW9yIGlzIHdoYXQgcGVvcGxlIGludHVpdGl2ZWx5IGV4cGVjdC5cblxuICAgICAgICAodG90YWxUaW1lIHx8ICFzdXBwcmVzc0V2ZW50cykgJiYgKHRoaXMuX3pUaW1lID0gdG90YWxUaW1lKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX3JlcGVhdCkge1xuICAgICAgICAvL2FkanVzdCB0aGUgdGltZSBmb3IgcmVwZWF0cyBhbmQgeW95b3NcbiAgICAgICAgeW95byA9IHRoaXMuX3lveW87XG4gICAgICAgIGN5Y2xlRHVyYXRpb24gPSBkdXIgKyB0aGlzLl9yRGVsYXk7XG5cbiAgICAgICAgaWYgKHRoaXMuX3JlcGVhdCA8IC0xICYmIHRvdGFsVGltZSA8IDApIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy50b3RhbFRpbWUoY3ljbGVEdXJhdGlvbiAqIDEwMCArIHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRpbWUgPSBfcm91bmRQcmVjaXNlKHRUaW1lICUgY3ljbGVEdXJhdGlvbik7IC8vcm91bmQgdG8gYXZvaWQgZmxvYXRpbmcgcG9pbnQgZXJyb3JzLiAoNCAlIDAuOCBzaG91bGQgYmUgMCBidXQgc29tZSBicm93c2VycyByZXBvcnQgaXQgYXMgMC43OTk5OTk5OSEpXG5cbiAgICAgICAgaWYgKHRUaW1lID09PSB0RHVyKSB7XG4gICAgICAgICAgLy8gdGhlIHREdXIgPT09IHRUaW1lIGlzIGZvciBlZGdlIGNhc2VzIHdoZXJlIHRoZXJlJ3MgYSBsZW5ndGh5IGRlY2ltYWwgb24gdGhlIGR1cmF0aW9uIGFuZCBpdCBtYXkgcmVhY2ggdGhlIHZlcnkgZW5kIGJ1dCB0aGUgdGltZSBpcyByZW5kZXJlZCBhcyBub3QtcXVpdGUtdGhlcmUgKHJlbWVtYmVyLCB0RHVyIGlzIHJvdW5kZWQgdG8gNCBkZWNpbWFscyB3aGVyZWFzIGR1ciBpc24ndClcbiAgICAgICAgICBpdGVyYXRpb24gPSB0aGlzLl9yZXBlYXQ7XG4gICAgICAgICAgdGltZSA9IGR1cjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVyYXRpb24gPSB+fih0VGltZSAvIGN5Y2xlRHVyYXRpb24pO1xuXG4gICAgICAgICAgaWYgKGl0ZXJhdGlvbiAmJiBpdGVyYXRpb24gPT09IHRUaW1lIC8gY3ljbGVEdXJhdGlvbikge1xuICAgICAgICAgICAgdGltZSA9IGR1cjtcbiAgICAgICAgICAgIGl0ZXJhdGlvbi0tO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRpbWUgPiBkdXIgJiYgKHRpbWUgPSBkdXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJldkl0ZXJhdGlvbiA9IF9hbmltYXRpb25DeWNsZSh0aGlzLl90VGltZSwgY3ljbGVEdXJhdGlvbik7XG4gICAgICAgICFwcmV2VGltZSAmJiB0aGlzLl90VGltZSAmJiBwcmV2SXRlcmF0aW9uICE9PSBpdGVyYXRpb24gJiYgKHByZXZJdGVyYXRpb24gPSBpdGVyYXRpb24pOyAvLyBlZGdlIGNhc2UgLSBpZiBzb21lb25lIGRvZXMgYWRkUGF1c2UoKSBhdCB0aGUgdmVyeSBiZWdpbm5pbmcgb2YgYSByZXBlYXRpbmcgdGltZWxpbmUsIHRoYXQgcGF1c2UgaXMgdGVjaG5pY2FsbHkgYXQgdGhlIHNhbWUgc3BvdCBhcyB0aGUgZW5kIHdoaWNoIGNhdXNlcyB0aGlzLl90aW1lIHRvIGdldCBzZXQgdG8gMCB3aGVuIHRoZSB0b3RhbFRpbWUgd291bGQgbm9ybWFsbHkgcGxhY2UgdGhlIHBsYXloZWFkIGF0IHRoZSBlbmQuIFNlZSBodHRwczovL2dyZWVuc29jay5jb20vZm9ydW1zL3RvcGljLzIzODIzLWNsb3NpbmctbmF2LWFuaW1hdGlvbi1ub3Qtd29ya2luZy1vbi1pZS1hbmQtaXBob25lLTYtbWF5YmUtb3RoZXItb2xkZXItYnJvd3Nlci8/dGFiPWNvbW1lbnRzI2NvbW1lbnQtMTEzMDA1XG5cbiAgICAgICAgaWYgKHlveW8gJiYgaXRlcmF0aW9uICYgMSkge1xuICAgICAgICAgIHRpbWUgPSBkdXIgLSB0aW1lO1xuICAgICAgICAgIGlzWW95byA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgLypcbiAgICAgICAgbWFrZSBzdXJlIGNoaWxkcmVuIGF0IHRoZSBlbmQvYmVnaW5uaW5nIG9mIHRoZSB0aW1lbGluZSBhcmUgcmVuZGVyZWQgcHJvcGVybHkuIElmLCBmb3IgZXhhbXBsZSxcbiAgICAgICAgYSAzLXNlY29uZCBsb25nIHRpbWVsaW5lIHJlbmRlcmVkIGF0IDIuOSBzZWNvbmRzIHByZXZpb3VzbHksIGFuZCBub3cgcmVuZGVycyBhdCAzLjIgc2Vjb25kcyAod2hpY2hcbiAgICAgICAgd291bGQgZ2V0IHRyYW5zbGF0ZWQgdG8gMi44IHNlY29uZHMgaWYgdGhlIHRpbWVsaW5lIHlveW9zIG9yIDAuMiBzZWNvbmRzIGlmIGl0IGp1c3QgcmVwZWF0cyksIHRoZXJlXG4gICAgICAgIGNvdWxkIGJlIGEgY2FsbGJhY2sgb3IgYSBzaG9ydCB0d2VlbiB0aGF0J3MgYXQgMi45NSBvciAzIHNlY29uZHMgaW4gd2hpY2ggd291bGRuJ3QgcmVuZGVyLiBTb1xuICAgICAgICB3ZSBuZWVkIHRvIHB1c2ggdGhlIHRpbWVsaW5lIHRvIHRoZSBlbmQgKGFuZC9vciBiZWdpbm5pbmcgZGVwZW5kaW5nIG9uIGl0cyB5b3lvIHZhbHVlKS4gQWxzbyB3ZSBtdXN0XG4gICAgICAgIGVuc3VyZSB0aGF0IHplcm8tZHVyYXRpb24gdHdlZW5zIGF0IHRoZSB2ZXJ5IGJlZ2lubmluZyBvciBlbmQgb2YgdGhlIFRpbWVsaW5lIHdvcmsuXG4gICAgICAgICovXG5cblxuICAgICAgICBpZiAoaXRlcmF0aW9uICE9PSBwcmV2SXRlcmF0aW9uICYmICF0aGlzLl9sb2NrKSB7XG4gICAgICAgICAgdmFyIHJld2luZGluZyA9IHlveW8gJiYgcHJldkl0ZXJhdGlvbiAmIDEsXG4gICAgICAgICAgICAgIGRvZXNXcmFwID0gcmV3aW5kaW5nID09PSAoeW95byAmJiBpdGVyYXRpb24gJiAxKTtcbiAgICAgICAgICBpdGVyYXRpb24gPCBwcmV2SXRlcmF0aW9uICYmIChyZXdpbmRpbmcgPSAhcmV3aW5kaW5nKTtcbiAgICAgICAgICBwcmV2VGltZSA9IHJld2luZGluZyA/IDAgOiBkdXI7XG4gICAgICAgICAgdGhpcy5fbG9jayA9IDE7XG4gICAgICAgICAgdGhpcy5yZW5kZXIocHJldlRpbWUgfHwgKGlzWW95byA/IDAgOiBfcm91bmRQcmVjaXNlKGl0ZXJhdGlvbiAqIGN5Y2xlRHVyYXRpb24pKSwgc3VwcHJlc3NFdmVudHMsICFkdXIpLl9sb2NrID0gMDtcbiAgICAgICAgICB0aGlzLl90VGltZSA9IHRUaW1lOyAvLyBpZiBhIHVzZXIgZ2V0cyB0aGUgaXRlcmF0aW9uKCkgaW5zaWRlIHRoZSBvblJlcGVhdCwgZm9yIGV4YW1wbGUsIGl0IHNob3VsZCBiZSBhY2N1cmF0ZS5cblxuICAgICAgICAgICFzdXBwcmVzc0V2ZW50cyAmJiB0aGlzLnBhcmVudCAmJiBfY2FsbGJhY2sodGhpcywgXCJvblJlcGVhdFwiKTtcbiAgICAgICAgICB0aGlzLnZhcnMucmVwZWF0UmVmcmVzaCAmJiAhaXNZb3lvICYmICh0aGlzLmludmFsaWRhdGUoKS5fbG9jayA9IDEpO1xuXG4gICAgICAgICAgaWYgKHByZXZUaW1lICYmIHByZXZUaW1lICE9PSB0aGlzLl90aW1lIHx8IHByZXZQYXVzZWQgIT09ICF0aGlzLl90cyB8fCB0aGlzLnZhcnMub25SZXBlYXQgJiYgIXRoaXMucGFyZW50ICYmICF0aGlzLl9hY3QpIHtcbiAgICAgICAgICAgIC8vIGlmIHByZXZUaW1lIGlzIDAgYW5kIHdlIHJlbmRlciBhdCB0aGUgdmVyeSBlbmQsIF90aW1lIHdpbGwgYmUgdGhlIGVuZCwgdGh1cyB3b24ndCBtYXRjaC4gU28gaW4gdGhpcyBlZGdlIGNhc2UsIHByZXZUaW1lIHdvbid0IG1hdGNoIF90aW1lIGJ1dCB0aGF0J3Mgb2theS4gSWYgaXQgZ2V0cyBraWxsZWQgaW4gdGhlIG9uUmVwZWF0LCBlamVjdCBhcyB3ZWxsLlxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZHVyID0gdGhpcy5fZHVyOyAvLyBpbiBjYXNlIHRoZSBkdXJhdGlvbiBjaGFuZ2VkIGluIHRoZSBvblJlcGVhdFxuXG4gICAgICAgICAgdER1ciA9IHRoaXMuX3REdXI7XG5cbiAgICAgICAgICBpZiAoZG9lc1dyYXApIHtcbiAgICAgICAgICAgIHRoaXMuX2xvY2sgPSAyO1xuICAgICAgICAgICAgcHJldlRpbWUgPSByZXdpbmRpbmcgPyBkdXIgOiAtMC4wMDAxO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXIocHJldlRpbWUsIHRydWUpO1xuICAgICAgICAgICAgdGhpcy52YXJzLnJlcGVhdFJlZnJlc2ggJiYgIWlzWW95byAmJiB0aGlzLmludmFsaWRhdGUoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLl9sb2NrID0gMDtcblxuICAgICAgICAgIGlmICghdGhpcy5fdHMgJiYgIXByZXZQYXVzZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgIH0gLy9pbiBvcmRlciBmb3IgeW95b0Vhc2UgdG8gd29yayBwcm9wZXJseSB3aGVuIHRoZXJlJ3MgYSBzdGFnZ2VyLCB3ZSBtdXN0IHN3YXAgb3V0IHRoZSBlYXNlIGluIGVhY2ggc3ViLXR3ZWVuLlxuXG5cbiAgICAgICAgICBfcHJvcGFnYXRlWW95b0Vhc2UodGhpcywgaXNZb3lvKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5faGFzUGF1c2UgJiYgIXRoaXMuX2ZvcmNpbmcgJiYgdGhpcy5fbG9jayA8IDIpIHtcbiAgICAgICAgcGF1c2VUd2VlbiA9IF9maW5kTmV4dFBhdXNlVHdlZW4odGhpcywgX3JvdW5kUHJlY2lzZShwcmV2VGltZSksIF9yb3VuZFByZWNpc2UodGltZSkpO1xuXG4gICAgICAgIGlmIChwYXVzZVR3ZWVuKSB7XG4gICAgICAgICAgdFRpbWUgLT0gdGltZSAtICh0aW1lID0gcGF1c2VUd2Vlbi5fc3RhcnQpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3RUaW1lID0gdFRpbWU7XG4gICAgICB0aGlzLl90aW1lID0gdGltZTtcbiAgICAgIHRoaXMuX2FjdCA9ICF0aW1lU2NhbGU7IC8vYXMgbG9uZyBhcyBpdCdzIG5vdCBwYXVzZWQsIGZvcmNlIGl0IHRvIGJlIGFjdGl2ZSBzbyB0aGF0IGlmIHRoZSB1c2VyIHJlbmRlcnMgaW5kZXBlbmRlbnQgb2YgdGhlIHBhcmVudCB0aW1lbGluZSwgaXQnbGwgYmUgZm9yY2VkIHRvIHJlLXJlbmRlciBvbiB0aGUgbmV4dCB0aWNrLlxuXG4gICAgICBpZiAoIXRoaXMuX2luaXR0ZWQpIHtcbiAgICAgICAgdGhpcy5fb25VcGRhdGUgPSB0aGlzLnZhcnMub25VcGRhdGU7XG4gICAgICAgIHRoaXMuX2luaXR0ZWQgPSAxO1xuICAgICAgICB0aGlzLl96VGltZSA9IHRvdGFsVGltZTtcbiAgICAgICAgcHJldlRpbWUgPSAwOyAvLyB1cG9uIGluaXQsIHRoZSBwbGF5aGVhZCBzaG91bGQgYWx3YXlzIGdvIGZvcndhcmQ7IHNvbWVvbmUgY291bGQgaW52YWxpZGF0ZSgpIGEgY29tcGxldGVkIHRpbWVsaW5lIGFuZCB0aGVuIGlmIHRoZXkgcmVzdGFydCgpLCB0aGF0IHdvdWxkIG1ha2UgY2hpbGQgdHdlZW5zIHJlbmRlciBpbiByZXZlcnNlIG9yZGVyIHdoaWNoIGNvdWxkIGxvY2sgaW4gdGhlIHdyb25nIHN0YXJ0aW5nIHZhbHVlcyBpZiB0aGV5IGJ1aWxkIG9uIGVhY2ggb3RoZXIsIGxpa2UgdGwudG8ob2JqLCB7eDogMTAwfSkudG8ob2JqLCB7eDogMH0pLlxuICAgICAgfVxuXG4gICAgICBpZiAoIXByZXZUaW1lICYmIHRpbWUgJiYgIXN1cHByZXNzRXZlbnRzKSB7XG4gICAgICAgIF9jYWxsYmFjayh0aGlzLCBcIm9uU3RhcnRcIik7XG5cbiAgICAgICAgaWYgKHRoaXMuX3RUaW1lICE9PSB0VGltZSkge1xuICAgICAgICAgIC8vIGluIGNhc2UgdGhlIG9uU3RhcnQgdHJpZ2dlcmVkIGEgcmVuZGVyIGF0IGEgZGlmZmVyZW50IHNwb3QsIGVqZWN0LiBMaWtlIGlmIHNvbWVvbmUgZGlkIGFuaW1hdGlvbi5wYXVzZSgwLjUpIG9yIHNvbWV0aGluZyBpbnNpZGUgdGhlIG9uU3RhcnQuXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRpbWUgPj0gcHJldlRpbWUgJiYgdG90YWxUaW1lID49IDApIHtcbiAgICAgICAgY2hpbGQgPSB0aGlzLl9maXJzdDtcblxuICAgICAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgICAgICBuZXh0ID0gY2hpbGQuX25leHQ7XG5cbiAgICAgICAgICBpZiAoKGNoaWxkLl9hY3QgfHwgdGltZSA+PSBjaGlsZC5fc3RhcnQpICYmIGNoaWxkLl90cyAmJiBwYXVzZVR3ZWVuICE9PSBjaGlsZCkge1xuICAgICAgICAgICAgaWYgKGNoaWxkLnBhcmVudCAhPT0gdGhpcykge1xuICAgICAgICAgICAgICAvLyBhbiBleHRyZW1lIGVkZ2UgY2FzZSAtIHRoZSBjaGlsZCdzIHJlbmRlciBjb3VsZCBkbyBzb21ldGhpbmcgbGlrZSBraWxsKCkgdGhlIFwibmV4dFwiIG9uZSBpbiB0aGUgbGlua2VkIGxpc3QsIG9yIHJlcGFyZW50IGl0LiBJbiB0aGF0IGNhc2Ugd2UgbXVzdCByZS1pbml0aWF0ZSB0aGUgd2hvbGUgcmVuZGVyIHRvIGJlIHNhZmUuXG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlbmRlcih0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNoaWxkLnJlbmRlcihjaGlsZC5fdHMgPiAwID8gKHRpbWUgLSBjaGlsZC5fc3RhcnQpICogY2hpbGQuX3RzIDogKGNoaWxkLl9kaXJ0eSA/IGNoaWxkLnRvdGFsRHVyYXRpb24oKSA6IGNoaWxkLl90RHVyKSArICh0aW1lIC0gY2hpbGQuX3N0YXJ0KSAqIGNoaWxkLl90cywgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTtcblxuICAgICAgICAgICAgaWYgKHRpbWUgIT09IHRoaXMuX3RpbWUgfHwgIXRoaXMuX3RzICYmICFwcmV2UGF1c2VkKSB7XG4gICAgICAgICAgICAgIC8vaW4gY2FzZSBhIHR3ZWVuIHBhdXNlcyBvciBzZWVrcyB0aGUgdGltZWxpbmUgd2hlbiByZW5kZXJpbmcsIGxpa2UgaW5zaWRlIG9mIGFuIG9uVXBkYXRlL29uQ29tcGxldGVcbiAgICAgICAgICAgICAgcGF1c2VUd2VlbiA9IDA7XG4gICAgICAgICAgICAgIG5leHQgJiYgKHRUaW1lICs9IHRoaXMuX3pUaW1lID0gLV90aW55TnVtKTsgLy8gaXQgZGlkbid0IGZpbmlzaCByZW5kZXJpbmcsIHNvIGZsYWcgelRpbWUgYXMgbmVnYXRpdmUgc28gdGhhdCBzbyB0aGF0IHRoZSBuZXh0IHRpbWUgcmVuZGVyKCkgaXMgY2FsbGVkIGl0J2xsIGJlIGZvcmNlZCAodG8gcmVuZGVyIGFueSByZW1haW5pbmcgY2hpbGRyZW4pXG5cbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY2hpbGQgPSBuZXh0O1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3JjZSA9IGZvcmNlIHx8IF9yZXZlcnRpbmc7IC8vIGlmIHJldmVydGluZywgd2Ugc2hvdWxkIGFsd2F5cyBmb3JjZSByZW5kZXJzLiBJZiwgZm9yIGV4YW1wbGUsIGEgLmZyb21UbygpIHR3ZWVuIHdpdGggYSBzdGFnZ2VyICh3aGljaCBjcmVhdGVzIGFuIGludGVybmFsIHRpbWVsaW5lKSBnZXRzIHJldmVydGVkIEJFRk9SRSBzb21lIG9mIGl0cyBjaGlsZCB0d2VlbnMgcmVuZGVyIGZvciB0aGUgZmlyc3QgdGltZSwgaXQgbWF5IG5vdCBwcm9wZXJseSB0cmlnZ2VyIHRoZW0gdG8gcmV2ZXJ0LlxuXG4gICAgICAgIGNoaWxkID0gdGhpcy5fbGFzdDtcbiAgICAgICAgdmFyIGFkanVzdGVkVGltZSA9IHRvdGFsVGltZSA8IDAgPyB0b3RhbFRpbWUgOiB0aW1lOyAvL3doZW4gdGhlIHBsYXloZWFkIGdvZXMgYmFja3dhcmQgYmV5b25kIHRoZSBzdGFydCBvZiB0aGlzIHRpbWVsaW5lLCB3ZSBtdXN0IHBhc3MgdGhhdCBpbmZvcm1hdGlvbiBkb3duIHRvIHRoZSBjaGlsZCBhbmltYXRpb25zIHNvIHRoYXQgemVyby1kdXJhdGlvbiB0d2VlbnMga25vdyB3aGV0aGVyIHRvIHJlbmRlciB0aGVpciBzdGFydGluZyBvciBlbmRpbmcgdmFsdWVzLlxuXG4gICAgICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgICAgIG5leHQgPSBjaGlsZC5fcHJldjtcblxuICAgICAgICAgIGlmICgoY2hpbGQuX2FjdCB8fCBhZGp1c3RlZFRpbWUgPD0gY2hpbGQuX2VuZCkgJiYgY2hpbGQuX3RzICYmIHBhdXNlVHdlZW4gIT09IGNoaWxkKSB7XG4gICAgICAgICAgICBpZiAoY2hpbGQucGFyZW50ICE9PSB0aGlzKSB7XG4gICAgICAgICAgICAgIC8vIGFuIGV4dHJlbWUgZWRnZSBjYXNlIC0gdGhlIGNoaWxkJ3MgcmVuZGVyIGNvdWxkIGRvIHNvbWV0aGluZyBsaWtlIGtpbGwoKSB0aGUgXCJuZXh0XCIgb25lIGluIHRoZSBsaW5rZWQgbGlzdCwgb3IgcmVwYXJlbnQgaXQuIEluIHRoYXQgY2FzZSB3ZSBtdXN0IHJlLWluaXRpYXRlIHRoZSB3aG9sZSByZW5kZXIgdG8gYmUgc2FmZS5cbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyKHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY2hpbGQucmVuZGVyKGNoaWxkLl90cyA+IDAgPyAoYWRqdXN0ZWRUaW1lIC0gY2hpbGQuX3N0YXJ0KSAqIGNoaWxkLl90cyA6IChjaGlsZC5fZGlydHkgPyBjaGlsZC50b3RhbER1cmF0aW9uKCkgOiBjaGlsZC5fdER1cikgKyAoYWRqdXN0ZWRUaW1lIC0gY2hpbGQuX3N0YXJ0KSAqIGNoaWxkLl90cywgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTtcblxuICAgICAgICAgICAgaWYgKHRpbWUgIT09IHRoaXMuX3RpbWUgfHwgIXRoaXMuX3RzICYmICFwcmV2UGF1c2VkKSB7XG4gICAgICAgICAgICAgIC8vaW4gY2FzZSBhIHR3ZWVuIHBhdXNlcyBvciBzZWVrcyB0aGUgdGltZWxpbmUgd2hlbiByZW5kZXJpbmcsIGxpa2UgaW5zaWRlIG9mIGFuIG9uVXBkYXRlL29uQ29tcGxldGVcbiAgICAgICAgICAgICAgcGF1c2VUd2VlbiA9IDA7XG4gICAgICAgICAgICAgIG5leHQgJiYgKHRUaW1lICs9IHRoaXMuX3pUaW1lID0gYWRqdXN0ZWRUaW1lID8gLV90aW55TnVtIDogX3RpbnlOdW0pOyAvLyBpdCBkaWRuJ3QgZmluaXNoIHJlbmRlcmluZywgc28gYWRqdXN0IHpUaW1lIHNvIHRoYXQgc28gdGhhdCB0aGUgbmV4dCB0aW1lIHJlbmRlcigpIGlzIGNhbGxlZCBpdCdsbCBiZSBmb3JjZWQgKHRvIHJlbmRlciBhbnkgcmVtYWluaW5nIGNoaWxkcmVuKVxuXG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGNoaWxkID0gbmV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAocGF1c2VUd2VlbiAmJiAhc3VwcHJlc3NFdmVudHMpIHtcbiAgICAgICAgdGhpcy5wYXVzZSgpO1xuICAgICAgICBwYXVzZVR3ZWVuLnJlbmRlcih0aW1lID49IHByZXZUaW1lID8gMCA6IC1fdGlueU51bSkuX3pUaW1lID0gdGltZSA+PSBwcmV2VGltZSA/IDEgOiAtMTtcblxuICAgICAgICBpZiAodGhpcy5fdHMpIHtcbiAgICAgICAgICAvL3RoZSBjYWxsYmFjayByZXN1bWVkIHBsYXliYWNrISBTbyBzaW5jZSB3ZSBtYXkgaGF2ZSBoZWxkIGJhY2sgdGhlIHBsYXloZWFkIGR1ZSB0byB3aGVyZSB0aGUgcGF1c2UgaXMgcG9zaXRpb25lZCwgZ28gYWhlYWQgYW5kIGp1bXAgdG8gd2hlcmUgaXQncyBTVVBQT1NFRCB0byBiZSAoaWYgbm8gcGF1c2UgaGFwcGVuZWQpLlxuICAgICAgICAgIHRoaXMuX3N0YXJ0ID0gcHJldlN0YXJ0OyAvL2lmIHRoZSBwYXVzZSB3YXMgYXQgYW4gZWFybGllciB0aW1lIGFuZCB0aGUgdXNlciByZXN1bWVkIGluIHRoZSBjYWxsYmFjaywgaXQgY291bGQgcmVwb3NpdGlvbiB0aGUgdGltZWxpbmUgKGNoYW5naW5nIGl0cyBzdGFydFRpbWUpLCB0aHJvd2luZyB0aGluZ3Mgb2ZmIHNsaWdodGx5LCBzbyB3ZSBtYWtlIHN1cmUgdGhlIF9zdGFydCBkb2Vzbid0IHNoaWZ0LlxuXG4gICAgICAgICAgX3NldEVuZCh0aGlzKTtcblxuICAgICAgICAgIHJldHVybiB0aGlzLnJlbmRlcih0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5fb25VcGRhdGUgJiYgIXN1cHByZXNzRXZlbnRzICYmIF9jYWxsYmFjayh0aGlzLCBcIm9uVXBkYXRlXCIsIHRydWUpO1xuICAgICAgaWYgKHRUaW1lID09PSB0RHVyICYmIHRoaXMuX3RUaW1lID49IHRoaXMudG90YWxEdXJhdGlvbigpIHx8ICF0VGltZSAmJiBwcmV2VGltZSkgaWYgKHByZXZTdGFydCA9PT0gdGhpcy5fc3RhcnQgfHwgTWF0aC5hYnModGltZVNjYWxlKSAhPT0gTWF0aC5hYnModGhpcy5fdHMpKSBpZiAoIXRoaXMuX2xvY2spIHtcbiAgICAgICAgLy8gcmVtZW1iZXIsIGEgY2hpbGQncyBjYWxsYmFjayBtYXkgYWx0ZXIgdGhpcyB0aW1lbGluZSdzIHBsYXloZWFkIG9yIHRpbWVTY2FsZSB3aGljaCBpcyB3aHkgd2UgbmVlZCB0byBhZGQgc29tZSBvZiB0aGVzZSBjaGVja3MuXG4gICAgICAgICh0b3RhbFRpbWUgfHwgIWR1cikgJiYgKHRUaW1lID09PSB0RHVyICYmIHRoaXMuX3RzID4gMCB8fCAhdFRpbWUgJiYgdGhpcy5fdHMgPCAwKSAmJiBfcmVtb3ZlRnJvbVBhcmVudCh0aGlzLCAxKTsgLy8gZG9uJ3QgcmVtb3ZlIGlmIHRoZSB0aW1lbGluZSBpcyByZXZlcnNlZCBhbmQgdGhlIHBsYXloZWFkIGlzbid0IGF0IDAsIG90aGVyd2lzZSB0bC5wcm9ncmVzcygxKS5yZXZlcnNlKCkgd29uJ3Qgd29yay4gT25seSByZW1vdmUgaWYgdGhlIHBsYXloZWFkIGlzIGF0IHRoZSBlbmQgYW5kIHRpbWVTY2FsZSBpcyBwb3NpdGl2ZSwgb3IgaWYgdGhlIHBsYXloZWFkIGlzIGF0IDAgYW5kIHRoZSB0aW1lU2NhbGUgaXMgbmVnYXRpdmUuXG5cbiAgICAgICAgaWYgKCFzdXBwcmVzc0V2ZW50cyAmJiAhKHRvdGFsVGltZSA8IDAgJiYgIXByZXZUaW1lKSAmJiAodFRpbWUgfHwgcHJldlRpbWUgfHwgIXREdXIpKSB7XG4gICAgICAgICAgX2NhbGxiYWNrKHRoaXMsIHRUaW1lID09PSB0RHVyICYmIHRvdGFsVGltZSA+PSAwID8gXCJvbkNvbXBsZXRlXCIgOiBcIm9uUmV2ZXJzZUNvbXBsZXRlXCIsIHRydWUpO1xuXG4gICAgICAgICAgdGhpcy5fcHJvbSAmJiAhKHRUaW1lIDwgdER1ciAmJiB0aGlzLnRpbWVTY2FsZSgpID4gMCkgJiYgdGhpcy5fcHJvbSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvMi5hZGQgPSBmdW5jdGlvbiBhZGQoY2hpbGQsIHBvc2l0aW9uKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICBfaXNOdW1iZXIocG9zaXRpb24pIHx8IChwb3NpdGlvbiA9IF9wYXJzZVBvc2l0aW9uKHRoaXMsIHBvc2l0aW9uLCBjaGlsZCkpO1xuXG4gICAgaWYgKCEoY2hpbGQgaW5zdGFuY2VvZiBBbmltYXRpb24pKSB7XG4gICAgICBpZiAoX2lzQXJyYXkoY2hpbGQpKSB7XG4gICAgICAgIGNoaWxkLmZvckVhY2goZnVuY3Rpb24gKG9iaikge1xuICAgICAgICAgIHJldHVybiBfdGhpczIuYWRkKG9iaiwgcG9zaXRpb24pO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIGlmIChfaXNTdHJpbmcoY2hpbGQpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFkZExhYmVsKGNoaWxkLCBwb3NpdGlvbik7XG4gICAgICB9XG5cbiAgICAgIGlmIChfaXNGdW5jdGlvbihjaGlsZCkpIHtcbiAgICAgICAgY2hpbGQgPSBUd2Vlbi5kZWxheWVkQ2FsbCgwLCBjaGlsZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcyAhPT0gY2hpbGQgPyBfYWRkVG9UaW1lbGluZSh0aGlzLCBjaGlsZCwgcG9zaXRpb24pIDogdGhpczsgLy9kb24ndCBhbGxvdyBhIHRpbWVsaW5lIHRvIGJlIGFkZGVkIHRvIGl0c2VsZiBhcyBhIGNoaWxkIVxuICB9O1xuXG4gIF9wcm90bzIuZ2V0Q2hpbGRyZW4gPSBmdW5jdGlvbiBnZXRDaGlsZHJlbihuZXN0ZWQsIHR3ZWVucywgdGltZWxpbmVzLCBpZ25vcmVCZWZvcmVUaW1lKSB7XG4gICAgaWYgKG5lc3RlZCA9PT0gdm9pZCAwKSB7XG4gICAgICBuZXN0ZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmICh0d2VlbnMgPT09IHZvaWQgMCkge1xuICAgICAgdHdlZW5zID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAodGltZWxpbmVzID09PSB2b2lkIDApIHtcbiAgICAgIHRpbWVsaW5lcyA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKGlnbm9yZUJlZm9yZVRpbWUgPT09IHZvaWQgMCkge1xuICAgICAgaWdub3JlQmVmb3JlVGltZSA9IC1fYmlnTnVtO1xuICAgIH1cblxuICAgIHZhciBhID0gW10sXG4gICAgICAgIGNoaWxkID0gdGhpcy5fZmlyc3Q7XG5cbiAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgIGlmIChjaGlsZC5fc3RhcnQgPj0gaWdub3JlQmVmb3JlVGltZSkge1xuICAgICAgICBpZiAoY2hpbGQgaW5zdGFuY2VvZiBUd2Vlbikge1xuICAgICAgICAgIHR3ZWVucyAmJiBhLnB1c2goY2hpbGQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRpbWVsaW5lcyAmJiBhLnB1c2goY2hpbGQpO1xuICAgICAgICAgIG5lc3RlZCAmJiBhLnB1c2guYXBwbHkoYSwgY2hpbGQuZ2V0Q2hpbGRyZW4odHJ1ZSwgdHdlZW5zLCB0aW1lbGluZXMpKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjaGlsZCA9IGNoaWxkLl9uZXh0O1xuICAgIH1cblxuICAgIHJldHVybiBhO1xuICB9O1xuXG4gIF9wcm90bzIuZ2V0QnlJZCA9IGZ1bmN0aW9uIGdldEJ5SWQoaWQpIHtcbiAgICB2YXIgYW5pbWF0aW9ucyA9IHRoaXMuZ2V0Q2hpbGRyZW4oMSwgMSwgMSksXG4gICAgICAgIGkgPSBhbmltYXRpb25zLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGlmIChhbmltYXRpb25zW2ldLnZhcnMuaWQgPT09IGlkKSB7XG4gICAgICAgIHJldHVybiBhbmltYXRpb25zW2ldO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBfcHJvdG8yLnJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZShjaGlsZCkge1xuICAgIGlmIChfaXNTdHJpbmcoY2hpbGQpKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZW1vdmVMYWJlbChjaGlsZCk7XG4gICAgfVxuXG4gICAgaWYgKF9pc0Z1bmN0aW9uKGNoaWxkKSkge1xuICAgICAgcmV0dXJuIHRoaXMua2lsbFR3ZWVuc09mKGNoaWxkKTtcbiAgICB9XG5cbiAgICBfcmVtb3ZlTGlua2VkTGlzdEl0ZW0odGhpcywgY2hpbGQpO1xuXG4gICAgaWYgKGNoaWxkID09PSB0aGlzLl9yZWNlbnQpIHtcbiAgICAgIHRoaXMuX3JlY2VudCA9IHRoaXMuX2xhc3Q7XG4gICAgfVxuXG4gICAgcmV0dXJuIF91bmNhY2hlKHRoaXMpO1xuICB9O1xuXG4gIF9wcm90bzIudG90YWxUaW1lID0gZnVuY3Rpb24gdG90YWxUaW1lKF90b3RhbFRpbWUyLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3RUaW1lO1xuICAgIH1cblxuICAgIHRoaXMuX2ZvcmNpbmcgPSAxO1xuXG4gICAgaWYgKCF0aGlzLl9kcCAmJiB0aGlzLl90cykge1xuICAgICAgLy9zcGVjaWFsIGNhc2UgZm9yIHRoZSBnbG9iYWwgdGltZWxpbmUgKG9yIGFueSBvdGhlciB0aGF0IGhhcyBubyBwYXJlbnQgb3IgZGV0YWNoZWQgcGFyZW50KS5cbiAgICAgIHRoaXMuX3N0YXJ0ID0gX3JvdW5kUHJlY2lzZShfdGlja2VyLnRpbWUgLSAodGhpcy5fdHMgPiAwID8gX3RvdGFsVGltZTIgLyB0aGlzLl90cyA6ICh0aGlzLnRvdGFsRHVyYXRpb24oKSAtIF90b3RhbFRpbWUyKSAvIC10aGlzLl90cykpO1xuICAgIH1cblxuICAgIF9BbmltYXRpb24ucHJvdG90eXBlLnRvdGFsVGltZS5jYWxsKHRoaXMsIF90b3RhbFRpbWUyLCBzdXBwcmVzc0V2ZW50cyk7XG5cbiAgICB0aGlzLl9mb3JjaW5nID0gMDtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8yLmFkZExhYmVsID0gZnVuY3Rpb24gYWRkTGFiZWwobGFiZWwsIHBvc2l0aW9uKSB7XG4gICAgdGhpcy5sYWJlbHNbbGFiZWxdID0gX3BhcnNlUG9zaXRpb24odGhpcywgcG9zaXRpb24pO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIucmVtb3ZlTGFiZWwgPSBmdW5jdGlvbiByZW1vdmVMYWJlbChsYWJlbCkge1xuICAgIGRlbGV0ZSB0aGlzLmxhYmVsc1tsYWJlbF07XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvMi5hZGRQYXVzZSA9IGZ1bmN0aW9uIGFkZFBhdXNlKHBvc2l0aW9uLCBjYWxsYmFjaywgcGFyYW1zKSB7XG4gICAgdmFyIHQgPSBUd2Vlbi5kZWxheWVkQ2FsbCgwLCBjYWxsYmFjayB8fCBfZW1wdHlGdW5jLCBwYXJhbXMpO1xuICAgIHQuZGF0YSA9IFwiaXNQYXVzZVwiO1xuICAgIHRoaXMuX2hhc1BhdXNlID0gMTtcbiAgICByZXR1cm4gX2FkZFRvVGltZWxpbmUodGhpcywgdCwgX3BhcnNlUG9zaXRpb24odGhpcywgcG9zaXRpb24pKTtcbiAgfTtcblxuICBfcHJvdG8yLnJlbW92ZVBhdXNlID0gZnVuY3Rpb24gcmVtb3ZlUGF1c2UocG9zaXRpb24pIHtcbiAgICB2YXIgY2hpbGQgPSB0aGlzLl9maXJzdDtcbiAgICBwb3NpdGlvbiA9IF9wYXJzZVBvc2l0aW9uKHRoaXMsIHBvc2l0aW9uKTtcblxuICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgaWYgKGNoaWxkLl9zdGFydCA9PT0gcG9zaXRpb24gJiYgY2hpbGQuZGF0YSA9PT0gXCJpc1BhdXNlXCIpIHtcbiAgICAgICAgX3JlbW92ZUZyb21QYXJlbnQoY2hpbGQpO1xuICAgICAgfVxuXG4gICAgICBjaGlsZCA9IGNoaWxkLl9uZXh0O1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8yLmtpbGxUd2VlbnNPZiA9IGZ1bmN0aW9uIGtpbGxUd2VlbnNPZih0YXJnZXRzLCBwcm9wcywgb25seUFjdGl2ZSkge1xuICAgIHZhciB0d2VlbnMgPSB0aGlzLmdldFR3ZWVuc09mKHRhcmdldHMsIG9ubHlBY3RpdmUpLFxuICAgICAgICBpID0gdHdlZW5zLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIF9vdmVyd3JpdGluZ1R3ZWVuICE9PSB0d2VlbnNbaV0gJiYgdHdlZW5zW2ldLmtpbGwodGFyZ2V0cywgcHJvcHMpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuZ2V0VHdlZW5zT2YgPSBmdW5jdGlvbiBnZXRUd2VlbnNPZih0YXJnZXRzLCBvbmx5QWN0aXZlKSB7XG4gICAgdmFyIGEgPSBbXSxcbiAgICAgICAgcGFyc2VkVGFyZ2V0cyA9IHRvQXJyYXkodGFyZ2V0cyksXG4gICAgICAgIGNoaWxkID0gdGhpcy5fZmlyc3QsXG4gICAgICAgIGlzR2xvYmFsVGltZSA9IF9pc051bWJlcihvbmx5QWN0aXZlKSxcbiAgICAgICAgLy8gYSBudW1iZXIgaXMgaW50ZXJwcmV0ZWQgYXMgYSBnbG9iYWwgdGltZS4gSWYgdGhlIGFuaW1hdGlvbiBzcGFuc1xuICAgIGNoaWxkcmVuO1xuXG4gICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICBpZiAoY2hpbGQgaW5zdGFuY2VvZiBUd2Vlbikge1xuICAgICAgICBpZiAoX2FycmF5Q29udGFpbnNBbnkoY2hpbGQuX3RhcmdldHMsIHBhcnNlZFRhcmdldHMpICYmIChpc0dsb2JhbFRpbWUgPyAoIV9vdmVyd3JpdGluZ1R3ZWVuIHx8IGNoaWxkLl9pbml0dGVkICYmIGNoaWxkLl90cykgJiYgY2hpbGQuZ2xvYmFsVGltZSgwKSA8PSBvbmx5QWN0aXZlICYmIGNoaWxkLmdsb2JhbFRpbWUoY2hpbGQudG90YWxEdXJhdGlvbigpKSA+IG9ubHlBY3RpdmUgOiAhb25seUFjdGl2ZSB8fCBjaGlsZC5pc0FjdGl2ZSgpKSkge1xuICAgICAgICAgIC8vIG5vdGU6IGlmIHRoaXMgaXMgZm9yIG92ZXJ3cml0aW5nLCBpdCBzaG91bGQgb25seSBiZSBmb3IgdHdlZW5zIHRoYXQgYXJlbid0IHBhdXNlZCBhbmQgYXJlIGluaXR0ZWQuXG4gICAgICAgICAgYS5wdXNoKGNoaWxkKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICgoY2hpbGRyZW4gPSBjaGlsZC5nZXRUd2VlbnNPZihwYXJzZWRUYXJnZXRzLCBvbmx5QWN0aXZlKSkubGVuZ3RoKSB7XG4gICAgICAgIGEucHVzaC5hcHBseShhLCBjaGlsZHJlbik7XG4gICAgICB9XG5cbiAgICAgIGNoaWxkID0gY2hpbGQuX25leHQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGE7XG4gIH0gLy8gcG90ZW50aWFsIGZ1dHVyZSBmZWF0dXJlIC0gdGFyZ2V0cygpIG9uIHRpbWVsaW5lc1xuICAvLyB0YXJnZXRzKCkge1xuICAvLyBcdGxldCByZXN1bHQgPSBbXTtcbiAgLy8gXHR0aGlzLmdldENoaWxkcmVuKHRydWUsIHRydWUsIGZhbHNlKS5mb3JFYWNoKHQgPT4gcmVzdWx0LnB1c2goLi4udC50YXJnZXRzKCkpKTtcbiAgLy8gXHRyZXR1cm4gcmVzdWx0LmZpbHRlcigodiwgaSkgPT4gcmVzdWx0LmluZGV4T2YodikgPT09IGkpO1xuICAvLyB9XG4gIDtcblxuICBfcHJvdG8yLnR3ZWVuVG8gPSBmdW5jdGlvbiB0d2VlblRvKHBvc2l0aW9uLCB2YXJzKSB7XG4gICAgdmFycyA9IHZhcnMgfHwge307XG5cbiAgICB2YXIgdGwgPSB0aGlzLFxuICAgICAgICBlbmRUaW1lID0gX3BhcnNlUG9zaXRpb24odGwsIHBvc2l0aW9uKSxcbiAgICAgICAgX3ZhcnMgPSB2YXJzLFxuICAgICAgICBzdGFydEF0ID0gX3ZhcnMuc3RhcnRBdCxcbiAgICAgICAgX29uU3RhcnQgPSBfdmFycy5vblN0YXJ0LFxuICAgICAgICBvblN0YXJ0UGFyYW1zID0gX3ZhcnMub25TdGFydFBhcmFtcyxcbiAgICAgICAgaW1tZWRpYXRlUmVuZGVyID0gX3ZhcnMuaW1tZWRpYXRlUmVuZGVyLFxuICAgICAgICBpbml0dGVkLFxuICAgICAgICB0d2VlbiA9IFR3ZWVuLnRvKHRsLCBfc2V0RGVmYXVsdHMoe1xuICAgICAgZWFzZTogdmFycy5lYXNlIHx8IFwibm9uZVwiLFxuICAgICAgbGF6eTogZmFsc2UsXG4gICAgICBpbW1lZGlhdGVSZW5kZXI6IGZhbHNlLFxuICAgICAgdGltZTogZW5kVGltZSxcbiAgICAgIG92ZXJ3cml0ZTogXCJhdXRvXCIsXG4gICAgICBkdXJhdGlvbjogdmFycy5kdXJhdGlvbiB8fCBNYXRoLmFicygoZW5kVGltZSAtIChzdGFydEF0ICYmIFwidGltZVwiIGluIHN0YXJ0QXQgPyBzdGFydEF0LnRpbWUgOiB0bC5fdGltZSkpIC8gdGwudGltZVNjYWxlKCkpIHx8IF90aW55TnVtLFxuICAgICAgb25TdGFydDogZnVuY3Rpb24gb25TdGFydCgpIHtcbiAgICAgICAgdGwucGF1c2UoKTtcblxuICAgICAgICBpZiAoIWluaXR0ZWQpIHtcbiAgICAgICAgICB2YXIgZHVyYXRpb24gPSB2YXJzLmR1cmF0aW9uIHx8IE1hdGguYWJzKChlbmRUaW1lIC0gKHN0YXJ0QXQgJiYgXCJ0aW1lXCIgaW4gc3RhcnRBdCA/IHN0YXJ0QXQudGltZSA6IHRsLl90aW1lKSkgLyB0bC50aW1lU2NhbGUoKSk7XG4gICAgICAgICAgdHdlZW4uX2R1ciAhPT0gZHVyYXRpb24gJiYgX3NldER1cmF0aW9uKHR3ZWVuLCBkdXJhdGlvbiwgMCwgMSkucmVuZGVyKHR3ZWVuLl90aW1lLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgICBpbml0dGVkID0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIF9vblN0YXJ0ICYmIF9vblN0YXJ0LmFwcGx5KHR3ZWVuLCBvblN0YXJ0UGFyYW1zIHx8IFtdKTsgLy9pbiBjYXNlIHRoZSB1c2VyIGhhZCBhbiBvblN0YXJ0IGluIHRoZSB2YXJzIC0gd2UgZG9uJ3Qgd2FudCB0byBvdmVyd3JpdGUgaXQuXG4gICAgICB9XG4gICAgfSwgdmFycykpO1xuXG4gICAgcmV0dXJuIGltbWVkaWF0ZVJlbmRlciA/IHR3ZWVuLnJlbmRlcigwKSA6IHR3ZWVuO1xuICB9O1xuXG4gIF9wcm90bzIudHdlZW5Gcm9tVG8gPSBmdW5jdGlvbiB0d2VlbkZyb21Ubyhmcm9tUG9zaXRpb24sIHRvUG9zaXRpb24sIHZhcnMpIHtcbiAgICByZXR1cm4gdGhpcy50d2VlblRvKHRvUG9zaXRpb24sIF9zZXREZWZhdWx0cyh7XG4gICAgICBzdGFydEF0OiB7XG4gICAgICAgIHRpbWU6IF9wYXJzZVBvc2l0aW9uKHRoaXMsIGZyb21Qb3NpdGlvbilcbiAgICAgIH1cbiAgICB9LCB2YXJzKSk7XG4gIH07XG5cbiAgX3Byb3RvMi5yZWNlbnQgPSBmdW5jdGlvbiByZWNlbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JlY2VudDtcbiAgfTtcblxuICBfcHJvdG8yLm5leHRMYWJlbCA9IGZ1bmN0aW9uIG5leHRMYWJlbChhZnRlclRpbWUpIHtcbiAgICBpZiAoYWZ0ZXJUaW1lID09PSB2b2lkIDApIHtcbiAgICAgIGFmdGVyVGltZSA9IHRoaXMuX3RpbWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9nZXRMYWJlbEluRGlyZWN0aW9uKHRoaXMsIF9wYXJzZVBvc2l0aW9uKHRoaXMsIGFmdGVyVGltZSkpO1xuICB9O1xuXG4gIF9wcm90bzIucHJldmlvdXNMYWJlbCA9IGZ1bmN0aW9uIHByZXZpb3VzTGFiZWwoYmVmb3JlVGltZSkge1xuICAgIGlmIChiZWZvcmVUaW1lID09PSB2b2lkIDApIHtcbiAgICAgIGJlZm9yZVRpbWUgPSB0aGlzLl90aW1lO1xuICAgIH1cblxuICAgIHJldHVybiBfZ2V0TGFiZWxJbkRpcmVjdGlvbih0aGlzLCBfcGFyc2VQb3NpdGlvbih0aGlzLCBiZWZvcmVUaW1lKSwgMSk7XG4gIH07XG5cbiAgX3Byb3RvMi5jdXJyZW50TGFiZWwgPSBmdW5jdGlvbiBjdXJyZW50TGFiZWwodmFsdWUpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHRoaXMuc2Vlayh2YWx1ZSwgdHJ1ZSkgOiB0aGlzLnByZXZpb3VzTGFiZWwodGhpcy5fdGltZSArIF90aW55TnVtKTtcbiAgfTtcblxuICBfcHJvdG8yLnNoaWZ0Q2hpbGRyZW4gPSBmdW5jdGlvbiBzaGlmdENoaWxkcmVuKGFtb3VudCwgYWRqdXN0TGFiZWxzLCBpZ25vcmVCZWZvcmVUaW1lKSB7XG4gICAgaWYgKGlnbm9yZUJlZm9yZVRpbWUgPT09IHZvaWQgMCkge1xuICAgICAgaWdub3JlQmVmb3JlVGltZSA9IDA7XG4gICAgfVxuXG4gICAgdmFyIGNoaWxkID0gdGhpcy5fZmlyc3QsXG4gICAgICAgIGxhYmVscyA9IHRoaXMubGFiZWxzLFxuICAgICAgICBwO1xuXG4gICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICBpZiAoY2hpbGQuX3N0YXJ0ID49IGlnbm9yZUJlZm9yZVRpbWUpIHtcbiAgICAgICAgY2hpbGQuX3N0YXJ0ICs9IGFtb3VudDtcbiAgICAgICAgY2hpbGQuX2VuZCArPSBhbW91bnQ7XG4gICAgICB9XG5cbiAgICAgIGNoaWxkID0gY2hpbGQuX25leHQ7XG4gICAgfVxuXG4gICAgaWYgKGFkanVzdExhYmVscykge1xuICAgICAgZm9yIChwIGluIGxhYmVscykge1xuICAgICAgICBpZiAobGFiZWxzW3BdID49IGlnbm9yZUJlZm9yZVRpbWUpIHtcbiAgICAgICAgICBsYWJlbHNbcF0gKz0gYW1vdW50O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIF91bmNhY2hlKHRoaXMpO1xuICB9O1xuXG4gIF9wcm90bzIuaW52YWxpZGF0ZSA9IGZ1bmN0aW9uIGludmFsaWRhdGUoKSB7XG4gICAgdmFyIGNoaWxkID0gdGhpcy5fZmlyc3Q7XG4gICAgdGhpcy5fbG9jayA9IDA7XG5cbiAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgIGNoaWxkLmludmFsaWRhdGUoKTtcbiAgICAgIGNoaWxkID0gY2hpbGQuX25leHQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9BbmltYXRpb24ucHJvdG90eXBlLmludmFsaWRhdGUuY2FsbCh0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8yLmNsZWFyID0gZnVuY3Rpb24gY2xlYXIoaW5jbHVkZUxhYmVscykge1xuICAgIGlmIChpbmNsdWRlTGFiZWxzID09PSB2b2lkIDApIHtcbiAgICAgIGluY2x1ZGVMYWJlbHMgPSB0cnVlO1xuICAgIH1cblxuICAgIHZhciBjaGlsZCA9IHRoaXMuX2ZpcnN0LFxuICAgICAgICBuZXh0O1xuXG4gICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICBuZXh0ID0gY2hpbGQuX25leHQ7XG4gICAgICB0aGlzLnJlbW92ZShjaGlsZCk7XG4gICAgICBjaGlsZCA9IG5leHQ7XG4gICAgfVxuXG4gICAgdGhpcy5fZHAgJiYgKHRoaXMuX3RpbWUgPSB0aGlzLl90VGltZSA9IHRoaXMuX3BUaW1lID0gMCk7XG4gICAgaW5jbHVkZUxhYmVscyAmJiAodGhpcy5sYWJlbHMgPSB7fSk7XG4gICAgcmV0dXJuIF91bmNhY2hlKHRoaXMpO1xuICB9O1xuXG4gIF9wcm90bzIudG90YWxEdXJhdGlvbiA9IGZ1bmN0aW9uIHRvdGFsRHVyYXRpb24odmFsdWUpIHtcbiAgICB2YXIgbWF4ID0gMCxcbiAgICAgICAgc2VsZiA9IHRoaXMsXG4gICAgICAgIGNoaWxkID0gc2VsZi5fbGFzdCxcbiAgICAgICAgcHJldlN0YXJ0ID0gX2JpZ051bSxcbiAgICAgICAgcHJldixcbiAgICAgICAgc3RhcnQsXG4gICAgICAgIHBhcmVudDtcblxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gc2VsZi50aW1lU2NhbGUoKHNlbGYuX3JlcGVhdCA8IDAgPyBzZWxmLmR1cmF0aW9uKCkgOiBzZWxmLnRvdGFsRHVyYXRpb24oKSkgLyAoc2VsZi5yZXZlcnNlZCgpID8gLXZhbHVlIDogdmFsdWUpKTtcbiAgICB9XG5cbiAgICBpZiAoc2VsZi5fZGlydHkpIHtcbiAgICAgIHBhcmVudCA9IHNlbGYucGFyZW50O1xuXG4gICAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgICAgcHJldiA9IGNoaWxkLl9wcmV2OyAvL3JlY29yZCBpdCBoZXJlIGluIGNhc2UgdGhlIHR3ZWVuIGNoYW5nZXMgcG9zaXRpb24gaW4gdGhlIHNlcXVlbmNlLi4uXG5cbiAgICAgICAgY2hpbGQuX2RpcnR5ICYmIGNoaWxkLnRvdGFsRHVyYXRpb24oKTsgLy9jb3VsZCBjaGFuZ2UgdGhlIHR3ZWVuLl9zdGFydFRpbWUsIHNvIG1ha2Ugc3VyZSB0aGUgYW5pbWF0aW9uJ3MgY2FjaGUgaXMgY2xlYW4gYmVmb3JlIGFuYWx5emluZyBpdC5cblxuICAgICAgICBzdGFydCA9IGNoaWxkLl9zdGFydDtcblxuICAgICAgICBpZiAoc3RhcnQgPiBwcmV2U3RhcnQgJiYgc2VsZi5fc29ydCAmJiBjaGlsZC5fdHMgJiYgIXNlbGYuX2xvY2spIHtcbiAgICAgICAgICAvL2luIGNhc2Ugb25lIG9mIHRoZSB0d2VlbnMgc2hpZnRlZCBvdXQgb2Ygb3JkZXIsIGl0IG5lZWRzIHRvIGJlIHJlLWluc2VydGVkIGludG8gdGhlIGNvcnJlY3QgcG9zaXRpb24gaW4gdGhlIHNlcXVlbmNlXG4gICAgICAgICAgc2VsZi5fbG9jayA9IDE7IC8vcHJldmVudCBlbmRsZXNzIHJlY3Vyc2l2ZSBjYWxscyAtIHRoZXJlIGFyZSBtZXRob2RzIHRoYXQgZ2V0IHRyaWdnZXJlZCB0aGF0IGNoZWNrIGR1cmF0aW9uL3RvdGFsRHVyYXRpb24gd2hlbiB3ZSBhZGQoKS5cblxuICAgICAgICAgIF9hZGRUb1RpbWVsaW5lKHNlbGYsIGNoaWxkLCBzdGFydCAtIGNoaWxkLl9kZWxheSwgMSkuX2xvY2sgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByZXZTdGFydCA9IHN0YXJ0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN0YXJ0IDwgMCAmJiBjaGlsZC5fdHMpIHtcbiAgICAgICAgICAvL2NoaWxkcmVuIGFyZW4ndCBhbGxvd2VkIHRvIGhhdmUgbmVnYXRpdmUgc3RhcnRUaW1lcyB1bmxlc3Mgc21vb3RoQ2hpbGRUaW1pbmcgaXMgdHJ1ZSwgc28gYWRqdXN0IGhlcmUgaWYgb25lIGlzIGZvdW5kLlxuICAgICAgICAgIG1heCAtPSBzdGFydDtcblxuICAgICAgICAgIGlmICghcGFyZW50ICYmICFzZWxmLl9kcCB8fCBwYXJlbnQgJiYgcGFyZW50LnNtb290aENoaWxkVGltaW5nKSB7XG4gICAgICAgICAgICBzZWxmLl9zdGFydCArPSBzdGFydCAvIHNlbGYuX3RzO1xuICAgICAgICAgICAgc2VsZi5fdGltZSAtPSBzdGFydDtcbiAgICAgICAgICAgIHNlbGYuX3RUaW1lIC09IHN0YXJ0O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHNlbGYuc2hpZnRDaGlsZHJlbigtc3RhcnQsIGZhbHNlLCAtMWU5OTkpO1xuICAgICAgICAgIHByZXZTdGFydCA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBjaGlsZC5fZW5kID4gbWF4ICYmIGNoaWxkLl90cyAmJiAobWF4ID0gY2hpbGQuX2VuZCk7XG4gICAgICAgIGNoaWxkID0gcHJldjtcbiAgICAgIH1cblxuICAgICAgX3NldER1cmF0aW9uKHNlbGYsIHNlbGYgPT09IF9nbG9iYWxUaW1lbGluZSAmJiBzZWxmLl90aW1lID4gbWF4ID8gc2VsZi5fdGltZSA6IG1heCwgMSwgMSk7XG5cbiAgICAgIHNlbGYuX2RpcnR5ID0gMDtcbiAgICB9XG5cbiAgICByZXR1cm4gc2VsZi5fdER1cjtcbiAgfTtcblxuICBUaW1lbGluZS51cGRhdGVSb290ID0gZnVuY3Rpb24gdXBkYXRlUm9vdCh0aW1lKSB7XG4gICAgaWYgKF9nbG9iYWxUaW1lbGluZS5fdHMpIHtcbiAgICAgIF9sYXp5U2FmZVJlbmRlcihfZ2xvYmFsVGltZWxpbmUsIF9wYXJlbnRUb0NoaWxkVG90YWxUaW1lKHRpbWUsIF9nbG9iYWxUaW1lbGluZSkpO1xuXG4gICAgICBfbGFzdFJlbmRlcmVkRnJhbWUgPSBfdGlja2VyLmZyYW1lO1xuICAgIH1cblxuICAgIGlmIChfdGlja2VyLmZyYW1lID49IF9uZXh0R0NGcmFtZSkge1xuICAgICAgX25leHRHQ0ZyYW1lICs9IF9jb25maWcuYXV0b1NsZWVwIHx8IDEyMDtcbiAgICAgIHZhciBjaGlsZCA9IF9nbG9iYWxUaW1lbGluZS5fZmlyc3Q7XG4gICAgICBpZiAoIWNoaWxkIHx8ICFjaGlsZC5fdHMpIGlmIChfY29uZmlnLmF1dG9TbGVlcCAmJiBfdGlja2VyLl9saXN0ZW5lcnMubGVuZ3RoIDwgMikge1xuICAgICAgICB3aGlsZSAoY2hpbGQgJiYgIWNoaWxkLl90cykge1xuICAgICAgICAgIGNoaWxkID0gY2hpbGQuX25leHQ7XG4gICAgICAgIH1cblxuICAgICAgICBjaGlsZCB8fCBfdGlja2VyLnNsZWVwKCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBUaW1lbGluZTtcbn0oQW5pbWF0aW9uKTtcblxuX3NldERlZmF1bHRzKFRpbWVsaW5lLnByb3RvdHlwZSwge1xuICBfbG9jazogMCxcbiAgX2hhc1BhdXNlOiAwLFxuICBfZm9yY2luZzogMFxufSk7XG5cbnZhciBfYWRkQ29tcGxleFN0cmluZ1Byb3BUd2VlbiA9IGZ1bmN0aW9uIF9hZGRDb21wbGV4U3RyaW5nUHJvcFR3ZWVuKHRhcmdldCwgcHJvcCwgc3RhcnQsIGVuZCwgc2V0dGVyLCBzdHJpbmdGaWx0ZXIsIGZ1bmNQYXJhbSkge1xuICAvL25vdGU6IHdlIGNhbGwgX2FkZENvbXBsZXhTdHJpbmdQcm9wVHdlZW4uY2FsbCh0d2Vlbkluc3RhbmNlLi4uKSB0byBlbnN1cmUgdGhhdCBpdCdzIHNjb3BlZCBwcm9wZXJseS4gV2UgbWF5IGNhbGwgaXQgZnJvbSB3aXRoaW4gYSBwbHVnaW4gdG9vLCB0aHVzIFwidGhpc1wiIHdvdWxkIHJlZmVyIHRvIHRoZSBwbHVnaW4uXG4gIHZhciBwdCA9IG5ldyBQcm9wVHdlZW4odGhpcy5fcHQsIHRhcmdldCwgcHJvcCwgMCwgMSwgX3JlbmRlckNvbXBsZXhTdHJpbmcsIG51bGwsIHNldHRlciksXG4gICAgICBpbmRleCA9IDAsXG4gICAgICBtYXRjaEluZGV4ID0gMCxcbiAgICAgIHJlc3VsdCxcbiAgICAgIHN0YXJ0TnVtcyxcbiAgICAgIGNvbG9yLFxuICAgICAgZW5kTnVtLFxuICAgICAgY2h1bmssXG4gICAgICBzdGFydE51bSxcbiAgICAgIGhhc1JhbmRvbSxcbiAgICAgIGE7XG4gIHB0LmIgPSBzdGFydDtcbiAgcHQuZSA9IGVuZDtcbiAgc3RhcnQgKz0gXCJcIjsgLy9lbnN1cmUgdmFsdWVzIGFyZSBzdHJpbmdzXG5cbiAgZW5kICs9IFwiXCI7XG5cbiAgaWYgKGhhc1JhbmRvbSA9IH5lbmQuaW5kZXhPZihcInJhbmRvbShcIikpIHtcbiAgICBlbmQgPSBfcmVwbGFjZVJhbmRvbShlbmQpO1xuICB9XG5cbiAgaWYgKHN0cmluZ0ZpbHRlcikge1xuICAgIGEgPSBbc3RhcnQsIGVuZF07XG4gICAgc3RyaW5nRmlsdGVyKGEsIHRhcmdldCwgcHJvcCk7IC8vcGFzcyBhbiBhcnJheSB3aXRoIHRoZSBzdGFydGluZyBhbmQgZW5kaW5nIHZhbHVlcyBhbmQgbGV0IHRoZSBmaWx0ZXIgZG8gd2hhdGV2ZXIgaXQgbmVlZHMgdG8gdGhlIHZhbHVlcy5cblxuICAgIHN0YXJ0ID0gYVswXTtcbiAgICBlbmQgPSBhWzFdO1xuICB9XG5cbiAgc3RhcnROdW1zID0gc3RhcnQubWF0Y2goX2NvbXBsZXhTdHJpbmdOdW1FeHApIHx8IFtdO1xuXG4gIHdoaWxlIChyZXN1bHQgPSBfY29tcGxleFN0cmluZ051bUV4cC5leGVjKGVuZCkpIHtcbiAgICBlbmROdW0gPSByZXN1bHRbMF07XG4gICAgY2h1bmsgPSBlbmQuc3Vic3RyaW5nKGluZGV4LCByZXN1bHQuaW5kZXgpO1xuXG4gICAgaWYgKGNvbG9yKSB7XG4gICAgICBjb2xvciA9IChjb2xvciArIDEpICUgNTtcbiAgICB9IGVsc2UgaWYgKGNodW5rLnN1YnN0cigtNSkgPT09IFwicmdiYShcIikge1xuICAgICAgY29sb3IgPSAxO1xuICAgIH1cblxuICAgIGlmIChlbmROdW0gIT09IHN0YXJ0TnVtc1ttYXRjaEluZGV4KytdKSB7XG4gICAgICBzdGFydE51bSA9IHBhcnNlRmxvYXQoc3RhcnROdW1zW21hdGNoSW5kZXggLSAxXSkgfHwgMDsgLy90aGVzZSBuZXN0ZWQgUHJvcFR3ZWVucyBhcmUgaGFuZGxlZCBpbiBhIHNwZWNpYWwgd2F5IC0gd2UnbGwgbmV2ZXIgYWN0dWFsbHkgY2FsbCBhIHJlbmRlciBvciBzZXR0ZXIgbWV0aG9kIG9uIHRoZW0uIFdlJ2xsIGp1c3QgbG9vcCB0aHJvdWdoIHRoZW0gaW4gdGhlIHBhcmVudCBjb21wbGV4IHN0cmluZyBQcm9wVHdlZW4ncyByZW5kZXIgbWV0aG9kLlxuXG4gICAgICBwdC5fcHQgPSB7XG4gICAgICAgIF9uZXh0OiBwdC5fcHQsXG4gICAgICAgIHA6IGNodW5rIHx8IG1hdGNoSW5kZXggPT09IDEgPyBjaHVuayA6IFwiLFwiLFxuICAgICAgICAvL25vdGU6IFNWRyBzcGVjIGFsbG93cyBvbWlzc2lvbiBvZiBjb21tYS9zcGFjZSB3aGVuIGEgbmVnYXRpdmUgc2lnbiBpcyB3ZWRnZWQgYmV0d2VlbiB0d28gbnVtYmVycywgbGlrZSAyLjUtNS4zIGluc3RlYWQgb2YgMi41LC01LjMgYnV0IHdoZW4gdHdlZW5pbmcsIHRoZSBuZWdhdGl2ZSB2YWx1ZSBtYXkgc3dpdGNoIHRvIHBvc2l0aXZlLCBzbyB3ZSBpbnNlcnQgdGhlIGNvbW1hIGp1c3QgaW4gY2FzZS5cbiAgICAgICAgczogc3RhcnROdW0sXG4gICAgICAgIGM6IGVuZE51bS5jaGFyQXQoMSkgPT09IFwiPVwiID8gX3BhcnNlUmVsYXRpdmUoc3RhcnROdW0sIGVuZE51bSkgLSBzdGFydE51bSA6IHBhcnNlRmxvYXQoZW5kTnVtKSAtIHN0YXJ0TnVtLFxuICAgICAgICBtOiBjb2xvciAmJiBjb2xvciA8IDQgPyBNYXRoLnJvdW5kIDogMFxuICAgICAgfTtcbiAgICAgIGluZGV4ID0gX2NvbXBsZXhTdHJpbmdOdW1FeHAubGFzdEluZGV4O1xuICAgIH1cbiAgfVxuXG4gIHB0LmMgPSBpbmRleCA8IGVuZC5sZW5ndGggPyBlbmQuc3Vic3RyaW5nKGluZGV4LCBlbmQubGVuZ3RoKSA6IFwiXCI7IC8vd2UgdXNlIHRoZSBcImNcIiBvZiB0aGUgUHJvcFR3ZWVuIHRvIHN0b3JlIHRoZSBmaW5hbCBwYXJ0IG9mIHRoZSBzdHJpbmcgKGFmdGVyIHRoZSBsYXN0IG51bWJlcilcblxuICBwdC5mcCA9IGZ1bmNQYXJhbTtcblxuICBpZiAoX3JlbEV4cC50ZXN0KGVuZCkgfHwgaGFzUmFuZG9tKSB7XG4gICAgcHQuZSA9IDA7IC8vaWYgdGhlIGVuZCBzdHJpbmcgY29udGFpbnMgcmVsYXRpdmUgdmFsdWVzIG9yIGR5bmFtaWMgcmFuZG9tKC4uLikgdmFsdWVzLCBkZWxldGUgdGhlIGVuZCBpdCBzbyB0aGF0IG9uIHRoZSBmaW5hbCByZW5kZXIgd2UgZG9uJ3QgYWN0dWFsbHkgc2V0IGl0IHRvIHRoZSBzdHJpbmcgd2l0aCArPSBvciAtPSBjaGFyYWN0ZXJzIChmb3JjZXMgaXQgdG8gdXNlIHRoZSBjYWxjdWxhdGVkIHZhbHVlKS5cbiAgfVxuXG4gIHRoaXMuX3B0ID0gcHQ7IC8vc3RhcnQgdGhlIGxpbmtlZCBsaXN0IHdpdGggdGhpcyBuZXcgUHJvcFR3ZWVuLiBSZW1lbWJlciwgd2UgY2FsbCBfYWRkQ29tcGxleFN0cmluZ1Byb3BUd2Vlbi5jYWxsKHR3ZWVuSW5zdGFuY2UuLi4pIHRvIGVuc3VyZSB0aGF0IGl0J3Mgc2NvcGVkIHByb3Blcmx5LiBXZSBtYXkgY2FsbCBpdCBmcm9tIHdpdGhpbiBhIHBsdWdpbiB0b28sIHRodXMgXCJ0aGlzXCIgd291bGQgcmVmZXIgdG8gdGhlIHBsdWdpbi5cblxuICByZXR1cm4gcHQ7XG59LFxuICAgIF9hZGRQcm9wVHdlZW4gPSBmdW5jdGlvbiBfYWRkUHJvcFR3ZWVuKHRhcmdldCwgcHJvcCwgc3RhcnQsIGVuZCwgaW5kZXgsIHRhcmdldHMsIG1vZGlmaWVyLCBzdHJpbmdGaWx0ZXIsIGZ1bmNQYXJhbSwgb3B0aW9uYWwpIHtcbiAgX2lzRnVuY3Rpb24oZW5kKSAmJiAoZW5kID0gZW5kKGluZGV4IHx8IDAsIHRhcmdldCwgdGFyZ2V0cykpO1xuICB2YXIgY3VycmVudFZhbHVlID0gdGFyZ2V0W3Byb3BdLFxuICAgICAgcGFyc2VkU3RhcnQgPSBzdGFydCAhPT0gXCJnZXRcIiA/IHN0YXJ0IDogIV9pc0Z1bmN0aW9uKGN1cnJlbnRWYWx1ZSkgPyBjdXJyZW50VmFsdWUgOiBmdW5jUGFyYW0gPyB0YXJnZXRbcHJvcC5pbmRleE9mKFwic2V0XCIpIHx8ICFfaXNGdW5jdGlvbih0YXJnZXRbXCJnZXRcIiArIHByb3Auc3Vic3RyKDMpXSkgPyBwcm9wIDogXCJnZXRcIiArIHByb3Auc3Vic3RyKDMpXShmdW5jUGFyYW0pIDogdGFyZ2V0W3Byb3BdKCksXG4gICAgICBzZXR0ZXIgPSAhX2lzRnVuY3Rpb24oY3VycmVudFZhbHVlKSA/IF9zZXR0ZXJQbGFpbiA6IGZ1bmNQYXJhbSA/IF9zZXR0ZXJGdW5jV2l0aFBhcmFtIDogX3NldHRlckZ1bmMsXG4gICAgICBwdDtcblxuICBpZiAoX2lzU3RyaW5nKGVuZCkpIHtcbiAgICBpZiAofmVuZC5pbmRleE9mKFwicmFuZG9tKFwiKSkge1xuICAgICAgZW5kID0gX3JlcGxhY2VSYW5kb20oZW5kKTtcbiAgICB9XG5cbiAgICBpZiAoZW5kLmNoYXJBdCgxKSA9PT0gXCI9XCIpIHtcbiAgICAgIHB0ID0gX3BhcnNlUmVsYXRpdmUocGFyc2VkU3RhcnQsIGVuZCkgKyAoZ2V0VW5pdChwYXJzZWRTdGFydCkgfHwgMCk7XG5cbiAgICAgIGlmIChwdCB8fCBwdCA9PT0gMCkge1xuICAgICAgICAvLyB0byBhdm9pZCBpc05hTiwgbGlrZSBpZiBzb21lb25lIHBhc3NlcyBpbiBhIHZhbHVlIGxpa2UgXCIhPSB3aGF0ZXZlclwiXG4gICAgICAgIGVuZCA9IHB0O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmICghb3B0aW9uYWwgfHwgcGFyc2VkU3RhcnQgIT09IGVuZCB8fCBfZm9yY2VBbGxQcm9wVHdlZW5zKSB7XG4gICAgaWYgKCFpc05hTihwYXJzZWRTdGFydCAqIGVuZCkgJiYgZW5kICE9PSBcIlwiKSB7XG4gICAgICAvLyBmdW4gZmFjdDogYW55IG51bWJlciBtdWx0aXBsaWVkIGJ5IFwiXCIgaXMgZXZhbHVhdGVkIGFzIHRoZSBudW1iZXIgMCFcbiAgICAgIHB0ID0gbmV3IFByb3BUd2Vlbih0aGlzLl9wdCwgdGFyZ2V0LCBwcm9wLCArcGFyc2VkU3RhcnQgfHwgMCwgZW5kIC0gKHBhcnNlZFN0YXJ0IHx8IDApLCB0eXBlb2YgY3VycmVudFZhbHVlID09PSBcImJvb2xlYW5cIiA/IF9yZW5kZXJCb29sZWFuIDogX3JlbmRlclBsYWluLCAwLCBzZXR0ZXIpO1xuICAgICAgZnVuY1BhcmFtICYmIChwdC5mcCA9IGZ1bmNQYXJhbSk7XG4gICAgICBtb2RpZmllciAmJiBwdC5tb2RpZmllcihtb2RpZmllciwgdGhpcywgdGFyZ2V0KTtcbiAgICAgIHJldHVybiB0aGlzLl9wdCA9IHB0O1xuICAgIH1cblxuICAgICFjdXJyZW50VmFsdWUgJiYgIShwcm9wIGluIHRhcmdldCkgJiYgX21pc3NpbmdQbHVnaW4ocHJvcCwgZW5kKTtcbiAgICByZXR1cm4gX2FkZENvbXBsZXhTdHJpbmdQcm9wVHdlZW4uY2FsbCh0aGlzLCB0YXJnZXQsIHByb3AsIHBhcnNlZFN0YXJ0LCBlbmQsIHNldHRlciwgc3RyaW5nRmlsdGVyIHx8IF9jb25maWcuc3RyaW5nRmlsdGVyLCBmdW5jUGFyYW0pO1xuICB9XG59LFxuICAgIC8vY3JlYXRlcyBhIGNvcHkgb2YgdGhlIHZhcnMgb2JqZWN0IGFuZCBwcm9jZXNzZXMgYW55IGZ1bmN0aW9uLWJhc2VkIHZhbHVlcyAocHV0dGluZyB0aGUgcmVzdWx0aW5nIHZhbHVlcyBkaXJlY3RseSBpbnRvIHRoZSBjb3B5KSBhcyB3ZWxsIGFzIHN0cmluZ3Mgd2l0aCBcInJhbmRvbSgpXCIgaW4gdGhlbS4gSXQgZG9lcyBOT1QgcHJvY2VzcyByZWxhdGl2ZSB2YWx1ZXMuXG5fcHJvY2Vzc1ZhcnMgPSBmdW5jdGlvbiBfcHJvY2Vzc1ZhcnModmFycywgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cywgdHdlZW4pIHtcbiAgX2lzRnVuY3Rpb24odmFycykgJiYgKHZhcnMgPSBfcGFyc2VGdW5jT3JTdHJpbmcodmFycywgdHdlZW4sIGluZGV4LCB0YXJnZXQsIHRhcmdldHMpKTtcblxuICBpZiAoIV9pc09iamVjdCh2YXJzKSB8fCB2YXJzLnN0eWxlICYmIHZhcnMubm9kZVR5cGUgfHwgX2lzQXJyYXkodmFycykgfHwgX2lzVHlwZWRBcnJheSh2YXJzKSkge1xuICAgIHJldHVybiBfaXNTdHJpbmcodmFycykgPyBfcGFyc2VGdW5jT3JTdHJpbmcodmFycywgdHdlZW4sIGluZGV4LCB0YXJnZXQsIHRhcmdldHMpIDogdmFycztcbiAgfVxuXG4gIHZhciBjb3B5ID0ge30sXG4gICAgICBwO1xuXG4gIGZvciAocCBpbiB2YXJzKSB7XG4gICAgY29weVtwXSA9IF9wYXJzZUZ1bmNPclN0cmluZyh2YXJzW3BdLCB0d2VlbiwgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cyk7XG4gIH1cblxuICByZXR1cm4gY29weTtcbn0sXG4gICAgX2NoZWNrUGx1Z2luID0gZnVuY3Rpb24gX2NoZWNrUGx1Z2luKHByb3BlcnR5LCB2YXJzLCB0d2VlbiwgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cykge1xuICB2YXIgcGx1Z2luLCBwdCwgcHRMb29rdXAsIGk7XG5cbiAgaWYgKF9wbHVnaW5zW3Byb3BlcnR5XSAmJiAocGx1Z2luID0gbmV3IF9wbHVnaW5zW3Byb3BlcnR5XSgpKS5pbml0KHRhcmdldCwgcGx1Z2luLnJhd1ZhcnMgPyB2YXJzW3Byb3BlcnR5XSA6IF9wcm9jZXNzVmFycyh2YXJzW3Byb3BlcnR5XSwgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cywgdHdlZW4pLCB0d2VlbiwgaW5kZXgsIHRhcmdldHMpICE9PSBmYWxzZSkge1xuICAgIHR3ZWVuLl9wdCA9IHB0ID0gbmV3IFByb3BUd2Vlbih0d2Vlbi5fcHQsIHRhcmdldCwgcHJvcGVydHksIDAsIDEsIHBsdWdpbi5yZW5kZXIsIHBsdWdpbiwgMCwgcGx1Z2luLnByaW9yaXR5KTtcblxuICAgIGlmICh0d2VlbiAhPT0gX3F1aWNrVHdlZW4pIHtcbiAgICAgIHB0TG9va3VwID0gdHdlZW4uX3B0TG9va3VwW3R3ZWVuLl90YXJnZXRzLmluZGV4T2YodGFyZ2V0KV07IC8vbm90ZTogd2UgY2FuJ3QgdXNlIHR3ZWVuLl9wdExvb2t1cFtpbmRleF0gYmVjYXVzZSBmb3Igc3RhZ2dlcmVkIHR3ZWVucywgdGhlIGluZGV4IGZyb20gdGhlIGZ1bGxUYXJnZXRzIGFycmF5IHdvbid0IG1hdGNoIHdoYXQgaXQgaXMgaW4gZWFjaCBpbmRpdmlkdWFsIHR3ZWVuIHRoYXQgc3Bhd25zIGZyb20gdGhlIHN0YWdnZXIuXG5cbiAgICAgIGkgPSBwbHVnaW4uX3Byb3BzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICBwdExvb2t1cFtwbHVnaW4uX3Byb3BzW2ldXSA9IHB0O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwbHVnaW47XG59LFxuICAgIF9vdmVyd3JpdGluZ1R3ZWVuLFxuICAgIC8vc3RvcmUgYSByZWZlcmVuY2UgdGVtcG9yYXJpbHkgc28gd2UgY2FuIGF2b2lkIG92ZXJ3cml0aW5nIGl0c2VsZi5cbl9mb3JjZUFsbFByb3BUd2VlbnMsXG4gICAgX2luaXRUd2VlbiA9IGZ1bmN0aW9uIF9pbml0VHdlZW4odHdlZW4sIHRpbWUpIHtcbiAgdmFyIHZhcnMgPSB0d2Vlbi52YXJzLFxuICAgICAgZWFzZSA9IHZhcnMuZWFzZSxcbiAgICAgIHN0YXJ0QXQgPSB2YXJzLnN0YXJ0QXQsXG4gICAgICBpbW1lZGlhdGVSZW5kZXIgPSB2YXJzLmltbWVkaWF0ZVJlbmRlcixcbiAgICAgIGxhenkgPSB2YXJzLmxhenksXG4gICAgICBvblVwZGF0ZSA9IHZhcnMub25VcGRhdGUsXG4gICAgICBvblVwZGF0ZVBhcmFtcyA9IHZhcnMub25VcGRhdGVQYXJhbXMsXG4gICAgICBjYWxsYmFja1Njb3BlID0gdmFycy5jYWxsYmFja1Njb3BlLFxuICAgICAgcnVuQmFja3dhcmRzID0gdmFycy5ydW5CYWNrd2FyZHMsXG4gICAgICB5b3lvRWFzZSA9IHZhcnMueW95b0Vhc2UsXG4gICAgICBrZXlmcmFtZXMgPSB2YXJzLmtleWZyYW1lcyxcbiAgICAgIGF1dG9SZXZlcnQgPSB2YXJzLmF1dG9SZXZlcnQsXG4gICAgICBkdXIgPSB0d2Vlbi5fZHVyLFxuICAgICAgcHJldlN0YXJ0QXQgPSB0d2Vlbi5fc3RhcnRBdCxcbiAgICAgIHRhcmdldHMgPSB0d2Vlbi5fdGFyZ2V0cyxcbiAgICAgIHBhcmVudCA9IHR3ZWVuLnBhcmVudCxcbiAgICAgIGZ1bGxUYXJnZXRzID0gcGFyZW50ICYmIHBhcmVudC5kYXRhID09PSBcIm5lc3RlZFwiID8gcGFyZW50LnZhcnMudGFyZ2V0cyA6IHRhcmdldHMsXG4gICAgICBhdXRvT3ZlcndyaXRlID0gdHdlZW4uX292ZXJ3cml0ZSA9PT0gXCJhdXRvXCIgJiYgIV9zdXBwcmVzc092ZXJ3cml0ZXMsXG4gICAgICB0bCA9IHR3ZWVuLnRpbWVsaW5lLFxuICAgICAgY2xlYW5WYXJzLFxuICAgICAgaSxcbiAgICAgIHAsXG4gICAgICBwdCxcbiAgICAgIHRhcmdldCxcbiAgICAgIGhhc1ByaW9yaXR5LFxuICAgICAgZ3NEYXRhLFxuICAgICAgaGFybmVzcyxcbiAgICAgIHBsdWdpbixcbiAgICAgIHB0TG9va3VwLFxuICAgICAgaW5kZXgsXG4gICAgICBoYXJuZXNzVmFycyxcbiAgICAgIG92ZXJ3cml0dGVuO1xuICB0bCAmJiAoIWtleWZyYW1lcyB8fCAhZWFzZSkgJiYgKGVhc2UgPSBcIm5vbmVcIik7XG4gIHR3ZWVuLl9lYXNlID0gX3BhcnNlRWFzZShlYXNlLCBfZGVmYXVsdHMuZWFzZSk7XG4gIHR3ZWVuLl95RWFzZSA9IHlveW9FYXNlID8gX2ludmVydEVhc2UoX3BhcnNlRWFzZSh5b3lvRWFzZSA9PT0gdHJ1ZSA/IGVhc2UgOiB5b3lvRWFzZSwgX2RlZmF1bHRzLmVhc2UpKSA6IDA7XG5cbiAgaWYgKHlveW9FYXNlICYmIHR3ZWVuLl95b3lvICYmICF0d2Vlbi5fcmVwZWF0KSB7XG4gICAgLy90aGVyZSBtdXN0IGhhdmUgYmVlbiBhIHBhcmVudCB0aW1lbGluZSB3aXRoIHlveW86dHJ1ZSB0aGF0IGlzIGN1cnJlbnRseSBpbiBpdHMgeW95byBwaGFzZSwgc28gZmxpcCB0aGUgZWFzZXMuXG4gICAgeW95b0Vhc2UgPSB0d2Vlbi5feUVhc2U7XG4gICAgdHdlZW4uX3lFYXNlID0gdHdlZW4uX2Vhc2U7XG4gICAgdHdlZW4uX2Vhc2UgPSB5b3lvRWFzZTtcbiAgfVxuXG4gIHR3ZWVuLl9mcm9tID0gIXRsICYmICEhdmFycy5ydW5CYWNrd2FyZHM7IC8vbmVzdGVkIHRpbWVsaW5lcyBzaG91bGQgbmV2ZXIgcnVuIGJhY2t3YXJkcyAtIHRoZSBiYWNrd2FyZHMtbmVzcyBpcyBpbiB0aGUgY2hpbGQgdHdlZW5zLlxuXG4gIGlmICghdGwgfHwga2V5ZnJhbWVzICYmICF2YXJzLnN0YWdnZXIpIHtcbiAgICAvL2lmIHRoZXJlJ3MgYW4gaW50ZXJuYWwgdGltZWxpbmUsIHNraXAgYWxsIHRoZSBwYXJzaW5nIGJlY2F1c2Ugd2UgcGFzc2VkIHRoYXQgdGFzayBkb3duIHRoZSBjaGFpbi5cbiAgICBoYXJuZXNzID0gdGFyZ2V0c1swXSA/IF9nZXRDYWNoZSh0YXJnZXRzWzBdKS5oYXJuZXNzIDogMDtcbiAgICBoYXJuZXNzVmFycyA9IGhhcm5lc3MgJiYgdmFyc1toYXJuZXNzLnByb3BdOyAvL3NvbWVvbmUgbWF5IG5lZWQgdG8gc3BlY2lmeSBDU1Mtc3BlY2lmaWMgdmFsdWVzIEFORCBub24tQ1NTIHZhbHVlcywgbGlrZSBpZiB0aGUgZWxlbWVudCBoYXMgYW4gXCJ4XCIgcHJvcGVydHkgcGx1cyBpdCdzIGEgc3RhbmRhcmQgRE9NIGVsZW1lbnQuIFdlIGFsbG93IHBlb3BsZSB0byBkaXN0aW5ndWlzaCBieSB3cmFwcGluZyBwbHVnaW4tc3BlY2lmaWMgc3R1ZmYgaW4gYSBjc3M6e30gb2JqZWN0IGZvciBleGFtcGxlLlxuXG4gICAgY2xlYW5WYXJzID0gX2NvcHlFeGNsdWRpbmcodmFycywgX3Jlc2VydmVkUHJvcHMpO1xuXG4gICAgaWYgKHByZXZTdGFydEF0KSB7XG4gICAgICB0aW1lIDwgMCAmJiBydW5CYWNrd2FyZHMgJiYgaW1tZWRpYXRlUmVuZGVyICYmICFhdXRvUmV2ZXJ0ID8gcHJldlN0YXJ0QXQucmVuZGVyKC0xLCB0cnVlKSA6IHByZXZTdGFydEF0LnJldmVydChydW5CYWNrd2FyZHMgJiYgZHVyID8gX3JldmVydENvbmZpZyA6IF9zdGFydEF0UmV2ZXJ0Q29uZmlnKTsgLy8gaWYgaXQncyBhIFwic3RhcnRBdFwiIChub3QgXCJmcm9tKClcIiBvciBydW5CYWNrd2FyZHM6IHRydWUpLCB3ZSBvbmx5IG5lZWQgdG8gZG8gYSBzaGFsbG93IHJldmVydCAoa2VlcCB0cmFuc2Zvcm1zIGNhY2hlZCBpbiBDU1NQbHVnaW4pXG4gICAgICAvLyBkb24ndCBqdXN0IF9yZW1vdmVGcm9tUGFyZW50KHByZXZTdGFydEF0LnJlbmRlcigtMSwgdHJ1ZSkpIGJlY2F1c2UgdGhhdCdsbCBsZWF2ZSBpbmxpbmUgc3R5bGVzLiBXZSdyZSBjcmVhdGluZyBhIG5ldyBfc3RhcnRBdCBmb3IgXCJzdGFydEF0XCIgdHdlZW5zIHRoYXQgcmUtY2FwdHVyZSB0aGluZ3MgdG8gZW5zdXJlIHRoYXQgaWYgdGhlIHByZS10d2VlbiB2YWx1ZXMgY2hhbmdlZCBzaW5jZSB0aGUgdHdlZW4gd2FzIGNyZWF0ZWQsIHRoZXkncmUgcmVjb3JkZWQuXG5cbiAgICAgIHByZXZTdGFydEF0Ll9sYXp5ID0gMDtcbiAgICB9XG5cbiAgICBpZiAoc3RhcnRBdCkge1xuICAgICAgX3JlbW92ZUZyb21QYXJlbnQodHdlZW4uX3N0YXJ0QXQgPSBUd2Vlbi5zZXQodGFyZ2V0cywgX3NldERlZmF1bHRzKHtcbiAgICAgICAgZGF0YTogXCJpc1N0YXJ0XCIsXG4gICAgICAgIG92ZXJ3cml0ZTogZmFsc2UsXG4gICAgICAgIHBhcmVudDogcGFyZW50LFxuICAgICAgICBpbW1lZGlhdGVSZW5kZXI6IHRydWUsXG4gICAgICAgIGxhenk6IF9pc05vdEZhbHNlKGxhenkpLFxuICAgICAgICBzdGFydEF0OiBudWxsLFxuICAgICAgICBkZWxheTogMCxcbiAgICAgICAgb25VcGRhdGU6IG9uVXBkYXRlLFxuICAgICAgICBvblVwZGF0ZVBhcmFtczogb25VcGRhdGVQYXJhbXMsXG4gICAgICAgIGNhbGxiYWNrU2NvcGU6IGNhbGxiYWNrU2NvcGUsXG4gICAgICAgIHN0YWdnZXI6IDBcbiAgICAgIH0sIHN0YXJ0QXQpKSk7IC8vY29weSB0aGUgcHJvcGVydGllcy92YWx1ZXMgaW50byBhIG5ldyBvYmplY3QgdG8gYXZvaWQgY29sbGlzaW9ucywgbGlrZSB2YXIgdG8gPSB7eDowfSwgZnJvbSA9IHt4OjUwMH07IHRpbWVsaW5lLmZyb21UbyhlLCBmcm9tLCB0bykuZnJvbVRvKGUsIHRvLCBmcm9tKTtcblxuXG4gICAgICB0aW1lIDwgMCAmJiAoX3JldmVydGluZyB8fCAhaW1tZWRpYXRlUmVuZGVyICYmICFhdXRvUmV2ZXJ0KSAmJiB0d2Vlbi5fc3RhcnRBdC5yZXZlcnQoX3JldmVydENvbmZpZyk7IC8vIHJhcmUgZWRnZSBjYXNlLCBsaWtlIGlmIGEgcmVuZGVyIGlzIGZvcmNlZCBpbiB0aGUgbmVnYXRpdmUgZGlyZWN0aW9uIG9mIGEgbm9uLWluaXR0ZWQgdHdlZW4uXG5cbiAgICAgIGlmIChpbW1lZGlhdGVSZW5kZXIpIHtcbiAgICAgICAgaWYgKGR1ciAmJiB0aW1lIDw9IDApIHtcbiAgICAgICAgICB0aW1lICYmICh0d2Vlbi5felRpbWUgPSB0aW1lKTtcbiAgICAgICAgICByZXR1cm47IC8vd2Ugc2tpcCBpbml0aWFsaXphdGlvbiBoZXJlIHNvIHRoYXQgb3ZlcndyaXRpbmcgZG9lc24ndCBvY2N1ciB1bnRpbCB0aGUgdHdlZW4gYWN0dWFsbHkgYmVnaW5zLiBPdGhlcndpc2UsIGlmIHlvdSBjcmVhdGUgc2V2ZXJhbCBpbW1lZGlhdGVSZW5kZXI6dHJ1ZSB0d2VlbnMgb2YgdGhlIHNhbWUgdGFyZ2V0L3Byb3BlcnRpZXMgdG8gZHJvcCBpbnRvIGEgVGltZWxpbmUsIHRoZSBsYXN0IG9uZSBjcmVhdGVkIHdvdWxkIG92ZXJ3cml0ZSB0aGUgZmlyc3Qgb25lcyBiZWNhdXNlIHRoZXkgZGlkbid0IGdldCBwbGFjZWQgaW50byB0aGUgdGltZWxpbmUgeWV0IGJlZm9yZSB0aGUgZmlyc3QgcmVuZGVyIG9jY3VycyBhbmQga2lja3MgaW4gb3ZlcndyaXRpbmcuXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHJ1bkJhY2t3YXJkcyAmJiBkdXIpIHtcbiAgICAgIC8vZnJvbSgpIHR3ZWVucyBtdXN0IGJlIGhhbmRsZWQgdW5pcXVlbHk6IHRoZWlyIGJlZ2lubmluZyB2YWx1ZXMgbXVzdCBiZSByZW5kZXJlZCBidXQgd2UgZG9uJ3Qgd2FudCBvdmVyd3JpdGluZyB0byBvY2N1ciB5ZXQgKHdoZW4gdGltZSBpcyBzdGlsbCAwKS4gV2FpdCB1bnRpbCB0aGUgdHdlZW4gYWN0dWFsbHkgYmVnaW5zIGJlZm9yZSBkb2luZyBhbGwgdGhlIHJvdXRpbmVzIGxpa2Ugb3ZlcndyaXRpbmcuIEF0IHRoYXQgdGltZSwgd2Ugc2hvdWxkIHJlbmRlciBhdCB0aGUgRU5EIG9mIHRoZSB0d2VlbiB0byBlbnN1cmUgdGhhdCB0aGluZ3MgaW5pdGlhbGl6ZSBjb3JyZWN0bHkgKHJlbWVtYmVyLCBmcm9tKCkgdHdlZW5zIGdvIGJhY2t3YXJkcylcbiAgICAgIGlmICghcHJldlN0YXJ0QXQpIHtcbiAgICAgICAgdGltZSAmJiAoaW1tZWRpYXRlUmVuZGVyID0gZmFsc2UpOyAvL2luIHJhcmUgY2FzZXMgKGxpa2UgaWYgYSBmcm9tKCkgdHdlZW4gcnVucyBhbmQgdGhlbiBpcyBpbnZhbGlkYXRlKCktZWQpLCBpbW1lZGlhdGVSZW5kZXIgY291bGQgYmUgdHJ1ZSBidXQgdGhlIGluaXRpYWwgZm9yY2VkLXJlbmRlciBnZXRzIHNraXBwZWQsIHNvIHRoZXJlJ3Mgbm8gbmVlZCB0byBmb3JjZSB0aGUgcmVuZGVyIGluIHRoaXMgY29udGV4dCB3aGVuIHRoZSBfdGltZSBpcyBncmVhdGVyIHRoYW4gMFxuXG4gICAgICAgIHAgPSBfc2V0RGVmYXVsdHMoe1xuICAgICAgICAgIG92ZXJ3cml0ZTogZmFsc2UsXG4gICAgICAgICAgZGF0YTogXCJpc0Zyb21TdGFydFwiLFxuICAgICAgICAgIC8vd2UgdGFnIHRoZSB0d2VlbiB3aXRoIGFzIFwiaXNGcm9tU3RhcnRcIiBzbyB0aGF0IGlmIFtpbnNpZGUgYSBwbHVnaW5dIHdlIG5lZWQgdG8gb25seSBkbyBzb21ldGhpbmcgYXQgdGhlIHZlcnkgRU5EIG9mIGEgdHdlZW4sIHdlIGhhdmUgYSB3YXkgb2YgaWRlbnRpZnlpbmcgdGhpcyB0d2VlbiBhcyBtZXJlbHkgdGhlIG9uZSB0aGF0J3Mgc2V0dGluZyB0aGUgYmVnaW5uaW5nIHZhbHVlcyBmb3IgYSBcImZyb20oKVwiIHR3ZWVuLiBGb3IgZXhhbXBsZSwgY2xlYXJQcm9wcyBpbiBDU1NQbHVnaW4gc2hvdWxkIG9ubHkgZ2V0IGFwcGxpZWQgYXQgdGhlIHZlcnkgRU5EIG9mIGEgdHdlZW4gYW5kIHdpdGhvdXQgdGhpcyB0YWcsIGZyb20oLi4ue2hlaWdodDoxMDAsIGNsZWFyUHJvcHM6XCJoZWlnaHRcIiwgZGVsYXk6MX0pIHdvdWxkIHdpcGUgdGhlIGhlaWdodCBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSB0d2VlbiBhbmQgYWZ0ZXIgMSBzZWNvbmQsIGl0J2Qga2ljayBiYWNrIGluLlxuICAgICAgICAgIGxhenk6IGltbWVkaWF0ZVJlbmRlciAmJiBfaXNOb3RGYWxzZShsYXp5KSxcbiAgICAgICAgICBpbW1lZGlhdGVSZW5kZXI6IGltbWVkaWF0ZVJlbmRlcixcbiAgICAgICAgICAvL3plcm8tZHVyYXRpb24gdHdlZW5zIHJlbmRlciBpbW1lZGlhdGVseSBieSBkZWZhdWx0LCBidXQgaWYgd2UncmUgbm90IHNwZWNpZmljYWxseSBpbnN0cnVjdGVkIHRvIHJlbmRlciB0aGlzIHR3ZWVuIGltbWVkaWF0ZWx5LCB3ZSBzaG91bGQgc2tpcCB0aGlzIGFuZCBtZXJlbHkgX2luaXQoKSB0byByZWNvcmQgdGhlIHN0YXJ0aW5nIHZhbHVlcyAocmVuZGVyaW5nIHRoZW0gaW1tZWRpYXRlbHkgd291bGQgcHVzaCB0aGVtIHRvIGNvbXBsZXRpb24gd2hpY2ggaXMgd2FzdGVmdWwgaW4gdGhhdCBjYXNlIC0gd2UnZCBoYXZlIHRvIHJlbmRlcigtMSkgaW1tZWRpYXRlbHkgYWZ0ZXIpXG4gICAgICAgICAgc3RhZ2dlcjogMCxcbiAgICAgICAgICBwYXJlbnQ6IHBhcmVudCAvL2Vuc3VyZXMgdGhhdCBuZXN0ZWQgdHdlZW5zIHRoYXQgaGFkIGEgc3RhZ2dlciBhcmUgaGFuZGxlZCBwcm9wZXJseSwgbGlrZSBnc2FwLmZyb20oXCIuY2xhc3NcIiwge3k6Z3NhcC51dGlscy53cmFwKFstMTAwLDEwMF0pfSlcblxuICAgICAgICB9LCBjbGVhblZhcnMpO1xuICAgICAgICBoYXJuZXNzVmFycyAmJiAocFtoYXJuZXNzLnByb3BdID0gaGFybmVzc1ZhcnMpOyAvLyBpbiBjYXNlIHNvbWVvbmUgZG9lcyBzb21ldGhpbmcgbGlrZSAuZnJvbSguLi4sIHtjc3M6e319KVxuXG4gICAgICAgIF9yZW1vdmVGcm9tUGFyZW50KHR3ZWVuLl9zdGFydEF0ID0gVHdlZW4uc2V0KHRhcmdldHMsIHApKTtcblxuICAgICAgICB0aW1lIDwgMCAmJiAoX3JldmVydGluZyA/IHR3ZWVuLl9zdGFydEF0LnJldmVydChfcmV2ZXJ0Q29uZmlnKSA6IHR3ZWVuLl9zdGFydEF0LnJlbmRlcigtMSwgdHJ1ZSkpO1xuICAgICAgICB0d2Vlbi5felRpbWUgPSB0aW1lO1xuXG4gICAgICAgIGlmICghaW1tZWRpYXRlUmVuZGVyKSB7XG4gICAgICAgICAgX2luaXRUd2Vlbih0d2Vlbi5fc3RhcnRBdCwgX3RpbnlOdW0pOyAvL2Vuc3VyZXMgdGhhdCB0aGUgaW5pdGlhbCB2YWx1ZXMgYXJlIHJlY29yZGVkXG5cbiAgICAgICAgfSBlbHNlIGlmICghdGltZSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHR3ZWVuLl9wdCA9IHR3ZWVuLl9wdENhY2hlID0gMDtcbiAgICBsYXp5ID0gZHVyICYmIF9pc05vdEZhbHNlKGxhenkpIHx8IGxhenkgJiYgIWR1cjtcblxuICAgIGZvciAoaSA9IDA7IGkgPCB0YXJnZXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0YXJnZXQgPSB0YXJnZXRzW2ldO1xuICAgICAgZ3NEYXRhID0gdGFyZ2V0Ll9nc2FwIHx8IF9oYXJuZXNzKHRhcmdldHMpW2ldLl9nc2FwO1xuICAgICAgdHdlZW4uX3B0TG9va3VwW2ldID0gcHRMb29rdXAgPSB7fTtcbiAgICAgIF9sYXp5TG9va3VwW2dzRGF0YS5pZF0gJiYgX2xhenlUd2VlbnMubGVuZ3RoICYmIF9sYXp5UmVuZGVyKCk7IC8vaWYgb3RoZXIgdHdlZW5zIG9mIHRoZSBzYW1lIHRhcmdldCBoYXZlIHJlY2VudGx5IGluaXR0ZWQgYnV0IGhhdmVuJ3QgcmVuZGVyZWQgeWV0LCB3ZSd2ZSBnb3QgdG8gZm9yY2UgdGhlIHJlbmRlciBzbyB0aGF0IHRoZSBzdGFydGluZyB2YWx1ZXMgYXJlIGNvcnJlY3QgKGltYWdpbmUgcG9wdWxhdGluZyBhIHRpbWVsaW5lIHdpdGggYSBidW5jaCBvZiBzZXF1ZW50aWFsIHR3ZWVucyBhbmQgdGhlbiBqdW1waW5nIHRvIHRoZSBlbmQpXG5cbiAgICAgIGluZGV4ID0gZnVsbFRhcmdldHMgPT09IHRhcmdldHMgPyBpIDogZnVsbFRhcmdldHMuaW5kZXhPZih0YXJnZXQpO1xuXG4gICAgICBpZiAoaGFybmVzcyAmJiAocGx1Z2luID0gbmV3IGhhcm5lc3MoKSkuaW5pdCh0YXJnZXQsIGhhcm5lc3NWYXJzIHx8IGNsZWFuVmFycywgdHdlZW4sIGluZGV4LCBmdWxsVGFyZ2V0cykgIT09IGZhbHNlKSB7XG4gICAgICAgIHR3ZWVuLl9wdCA9IHB0ID0gbmV3IFByb3BUd2Vlbih0d2Vlbi5fcHQsIHRhcmdldCwgcGx1Z2luLm5hbWUsIDAsIDEsIHBsdWdpbi5yZW5kZXIsIHBsdWdpbiwgMCwgcGx1Z2luLnByaW9yaXR5KTtcblxuICAgICAgICBwbHVnaW4uX3Byb3BzLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICBwdExvb2t1cFtuYW1lXSA9IHB0O1xuICAgICAgICB9KTtcblxuICAgICAgICBwbHVnaW4ucHJpb3JpdHkgJiYgKGhhc1ByaW9yaXR5ID0gMSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghaGFybmVzcyB8fCBoYXJuZXNzVmFycykge1xuICAgICAgICBmb3IgKHAgaW4gY2xlYW5WYXJzKSB7XG4gICAgICAgICAgaWYgKF9wbHVnaW5zW3BdICYmIChwbHVnaW4gPSBfY2hlY2tQbHVnaW4ocCwgY2xlYW5WYXJzLCB0d2VlbiwgaW5kZXgsIHRhcmdldCwgZnVsbFRhcmdldHMpKSkge1xuICAgICAgICAgICAgcGx1Z2luLnByaW9yaXR5ICYmIChoYXNQcmlvcml0eSA9IDEpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwdExvb2t1cFtwXSA9IHB0ID0gX2FkZFByb3BUd2Vlbi5jYWxsKHR3ZWVuLCB0YXJnZXQsIHAsIFwiZ2V0XCIsIGNsZWFuVmFyc1twXSwgaW5kZXgsIGZ1bGxUYXJnZXRzLCAwLCB2YXJzLnN0cmluZ0ZpbHRlcik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHR3ZWVuLl9vcCAmJiB0d2Vlbi5fb3BbaV0gJiYgdHdlZW4ua2lsbCh0YXJnZXQsIHR3ZWVuLl9vcFtpXSk7XG5cbiAgICAgIGlmIChhdXRvT3ZlcndyaXRlICYmIHR3ZWVuLl9wdCkge1xuICAgICAgICBfb3ZlcndyaXRpbmdUd2VlbiA9IHR3ZWVuO1xuXG4gICAgICAgIF9nbG9iYWxUaW1lbGluZS5raWxsVHdlZW5zT2YodGFyZ2V0LCBwdExvb2t1cCwgdHdlZW4uZ2xvYmFsVGltZSh0aW1lKSk7IC8vIG1ha2Ugc3VyZSB0aGUgb3ZlcndyaXRpbmcgZG9lc24ndCBvdmVyd3JpdGUgVEhJUyB0d2VlbiEhIVxuXG5cbiAgICAgICAgb3ZlcndyaXR0ZW4gPSAhdHdlZW4ucGFyZW50O1xuICAgICAgICBfb3ZlcndyaXRpbmdUd2VlbiA9IDA7XG4gICAgICB9XG5cbiAgICAgIHR3ZWVuLl9wdCAmJiBsYXp5ICYmIChfbGF6eUxvb2t1cFtnc0RhdGEuaWRdID0gMSk7XG4gICAgfVxuXG4gICAgaGFzUHJpb3JpdHkgJiYgX3NvcnRQcm9wVHdlZW5zQnlQcmlvcml0eSh0d2Vlbik7XG4gICAgdHdlZW4uX29uSW5pdCAmJiB0d2Vlbi5fb25Jbml0KHR3ZWVuKTsgLy9wbHVnaW5zIGxpa2UgUm91bmRQcm9wcyBtdXN0IHdhaXQgdW50aWwgQUxMIG9mIHRoZSBQcm9wVHdlZW5zIGFyZSBpbnN0YW50aWF0ZWQuIEluIHRoZSBwbHVnaW4ncyBpbml0KCkgZnVuY3Rpb24sIGl0IHNldHMgdGhlIF9vbkluaXQgb24gdGhlIHR3ZWVuIGluc3RhbmNlLiBNYXkgbm90IGJlIHByZXR0eS9pbnR1aXRpdmUsIGJ1dCBpdCdzIGZhc3QgYW5kIGtlZXBzIGZpbGUgc2l6ZSBkb3duLlxuICB9XG5cbiAgdHdlZW4uX29uVXBkYXRlID0gb25VcGRhdGU7XG4gIHR3ZWVuLl9pbml0dGVkID0gKCF0d2Vlbi5fb3AgfHwgdHdlZW4uX3B0KSAmJiAhb3ZlcndyaXR0ZW47IC8vIGlmIG92ZXJ3cml0dGVuUHJvcHMgcmVzdWx0ZWQgaW4gdGhlIGVudGlyZSB0d2VlbiBiZWluZyBraWxsZWQsIGRvIE5PVCBmbGFnIGl0IGFzIGluaXR0ZWQgb3IgZWxzZSBpdCBtYXkgcmVuZGVyIGZvciBvbmUgdGljay5cblxuICBrZXlmcmFtZXMgJiYgdGltZSA8PSAwICYmIHRsLnJlbmRlcihfYmlnTnVtLCB0cnVlLCB0cnVlKTsgLy8gaWYgdGhlcmUncyBhIDAlIGtleWZyYW1lLCBpdCdsbCByZW5kZXIgaW4gdGhlIFwiYmVmb3JlXCIgc3RhdGUgZm9yIGFueSBzdGFnZ2VyZWQvZGVsYXllZCBhbmltYXRpb25zIHRodXMgd2hlbiB0aGUgZm9sbG93aW5nIHR3ZWVuIGluaXRpYWxpemVzLCBpdCdsbCB1c2UgdGhlIFwiYmVmb3JlXCIgc3RhdGUgaW5zdGVhZCBvZiB0aGUgXCJhZnRlclwiIHN0YXRlIGFzIHRoZSBpbml0aWFsIHZhbHVlcy5cbn0sXG4gICAgX3VwZGF0ZVByb3BUd2VlbnMgPSBmdW5jdGlvbiBfdXBkYXRlUHJvcFR3ZWVucyh0d2VlbiwgcHJvcGVydHksIHZhbHVlLCBzdGFydCwgc3RhcnRJc1JlbGF0aXZlLCByYXRpbywgdGltZSkge1xuICB2YXIgcHRDYWNoZSA9ICh0d2Vlbi5fcHQgJiYgdHdlZW4uX3B0Q2FjaGUgfHwgKHR3ZWVuLl9wdENhY2hlID0ge30pKVtwcm9wZXJ0eV0sXG4gICAgICBwdCxcbiAgICAgIHJvb3RQVCxcbiAgICAgIGxvb2t1cCxcbiAgICAgIGk7XG5cbiAgaWYgKCFwdENhY2hlKSB7XG4gICAgcHRDYWNoZSA9IHR3ZWVuLl9wdENhY2hlW3Byb3BlcnR5XSA9IFtdO1xuICAgIGxvb2t1cCA9IHR3ZWVuLl9wdExvb2t1cDtcbiAgICBpID0gdHdlZW4uX3RhcmdldHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgcHQgPSBsb29rdXBbaV1bcHJvcGVydHldO1xuXG4gICAgICBpZiAocHQgJiYgcHQuZCAmJiBwdC5kLl9wdCkge1xuICAgICAgICAvLyBpdCdzIGEgcGx1Z2luLCBzbyBmaW5kIHRoZSBuZXN0ZWQgUHJvcFR3ZWVuXG4gICAgICAgIHB0ID0gcHQuZC5fcHQ7XG5cbiAgICAgICAgd2hpbGUgKHB0ICYmIHB0LnAgIT09IHByb3BlcnR5ICYmIHB0LmZwICE9PSBwcm9wZXJ0eSkge1xuICAgICAgICAgIC8vIFwiZnBcIiBpcyBmdW5jdGlvblBhcmFtIGZvciB0aGluZ3MgbGlrZSBzZXR0aW5nIENTUyB2YXJpYWJsZXMgd2hpY2ggcmVxdWlyZSAuc2V0UHJvcGVydHkoXCItLXZhci1uYW1lXCIsIHZhbHVlKVxuICAgICAgICAgIHB0ID0gcHQuX25leHQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCFwdCkge1xuICAgICAgICAvLyB0aGVyZSBpcyBubyBQcm9wVHdlZW4gYXNzb2NpYXRlZCB3aXRoIHRoYXQgcHJvcGVydHksIHNvIHdlIG11c3QgRk9SQ0Ugb25lIHRvIGJlIGNyZWF0ZWQgYW5kIGRpdGNoIG91dCBvZiB0aGlzXG4gICAgICAgIC8vIGlmIHRoZSB0d2VlbiBoYXMgb3RoZXIgcHJvcGVydGllcyB0aGF0IGFscmVhZHkgcmVuZGVyZWQgYXQgbmV3IHBvc2l0aW9ucywgd2UnZCBub3JtYWxseSBoYXZlIHRvIHJld2luZCB0byBwdXQgdGhlbSBiYWNrIGxpa2UgdHdlZW4ucmVuZGVyKDAsIHRydWUpIGJlZm9yZSBmb3JjaW5nIGFuIF9pbml0VHdlZW4oKSwgYnV0IHRoYXQgY2FuIGNyZWF0ZSBhbm90aGVyIGVkZ2UgY2FzZSBsaWtlIHR3ZWVuaW5nIGEgdGltZWxpbmUncyBwcm9ncmVzcyB3b3VsZCB0cmlnZ2VyIG9uVXBkYXRlcyB0byBmaXJlIHdoaWNoIGNvdWxkIG1vdmUgb3RoZXIgdGhpbmdzIGFyb3VuZC4gSXQncyBiZXR0ZXIgdG8ganVzdCBpbmZvcm0gdXNlcnMgdGhhdCAucmVzZXRUbygpIHNob3VsZCBPTkxZIGJlIHVzZWQgZm9yIHR3ZWVucyB0aGF0IGFscmVhZHkgaGF2ZSB0aGF0IHByb3BlcnR5LiBGb3IgZXhhbXBsZSwgeW91IGNhbid0IGdzYXAudG8oLi4ueyB5OiAwIH0pIGFuZCB0aGVuIHR3ZWVuLnJlc3RUbyhcInhcIiwgMjAwKSBmb3IgZXhhbXBsZS5cbiAgICAgICAgX2ZvcmNlQWxsUHJvcFR3ZWVucyA9IDE7IC8vIG90aGVyd2lzZSwgd2hlbiB3ZSBfYWRkUHJvcFR3ZWVuKCkgYW5kIGl0IGZpbmRzIG5vIGNoYW5nZSBiZXR3ZWVuIHRoZSBzdGFydCBhbmQgZW5kIHZhbHVlcywgaXQgc2tpcHMgY3JlYXRpbmcgYSBQcm9wVHdlZW4gKGZvciBlZmZpY2llbmN5Li4ud2h5IHR3ZWVuIHdoZW4gdGhlcmUncyBubyBkaWZmZXJlbmNlPykgYnV0IGluIHRoaXMgY2FzZSB3ZSBORUVEIHRoYXQgUHJvcFR3ZWVuIGNyZWF0ZWQgc28gd2UgY2FuIGVkaXQgaXQuXG5cbiAgICAgICAgdHdlZW4udmFyc1twcm9wZXJ0eV0gPSBcIis9MFwiO1xuXG4gICAgICAgIF9pbml0VHdlZW4odHdlZW4sIHRpbWUpO1xuXG4gICAgICAgIF9mb3JjZUFsbFByb3BUd2VlbnMgPSAwO1xuICAgICAgICByZXR1cm4gMTtcbiAgICAgIH1cblxuICAgICAgcHRDYWNoZS5wdXNoKHB0KTtcbiAgICB9XG4gIH1cblxuICBpID0gcHRDYWNoZS5sZW5ndGg7XG5cbiAgd2hpbGUgKGktLSkge1xuICAgIHJvb3RQVCA9IHB0Q2FjaGVbaV07XG4gICAgcHQgPSByb290UFQuX3B0IHx8IHJvb3RQVDsgLy8gY29tcGxleCB2YWx1ZXMgbWF5IGhhdmUgbmVzdGVkIFByb3BUd2VlbnMuIFdlIG9ubHkgYWNjb21tb2RhdGUgdGhlIEZJUlNUIHZhbHVlLlxuXG4gICAgcHQucyA9IChzdGFydCB8fCBzdGFydCA9PT0gMCkgJiYgIXN0YXJ0SXNSZWxhdGl2ZSA/IHN0YXJ0IDogcHQucyArIChzdGFydCB8fCAwKSArIHJhdGlvICogcHQuYztcbiAgICBwdC5jID0gdmFsdWUgLSBwdC5zO1xuICAgIHJvb3RQVC5lICYmIChyb290UFQuZSA9IF9yb3VuZCh2YWx1ZSkgKyBnZXRVbml0KHJvb3RQVC5lKSk7IC8vIG1haW5seSBmb3IgQ1NTUGx1Z2luIChlbmQgdmFsdWUpXG5cbiAgICByb290UFQuYiAmJiAocm9vdFBULmIgPSBwdC5zICsgZ2V0VW5pdChyb290UFQuYikpOyAvLyAoYmVnaW5uaW5nIHZhbHVlKVxuICB9XG59LFxuICAgIF9hZGRBbGlhc2VzVG9WYXJzID0gZnVuY3Rpb24gX2FkZEFsaWFzZXNUb1ZhcnModGFyZ2V0cywgdmFycykge1xuICB2YXIgaGFybmVzcyA9IHRhcmdldHNbMF0gPyBfZ2V0Q2FjaGUodGFyZ2V0c1swXSkuaGFybmVzcyA6IDAsXG4gICAgICBwcm9wZXJ0eUFsaWFzZXMgPSBoYXJuZXNzICYmIGhhcm5lc3MuYWxpYXNlcyxcbiAgICAgIGNvcHksXG4gICAgICBwLFxuICAgICAgaSxcbiAgICAgIGFsaWFzZXM7XG5cbiAgaWYgKCFwcm9wZXJ0eUFsaWFzZXMpIHtcbiAgICByZXR1cm4gdmFycztcbiAgfVxuXG4gIGNvcHkgPSBfbWVyZ2Uoe30sIHZhcnMpO1xuXG4gIGZvciAocCBpbiBwcm9wZXJ0eUFsaWFzZXMpIHtcbiAgICBpZiAocCBpbiBjb3B5KSB7XG4gICAgICBhbGlhc2VzID0gcHJvcGVydHlBbGlhc2VzW3BdLnNwbGl0KFwiLFwiKTtcbiAgICAgIGkgPSBhbGlhc2VzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICBjb3B5W2FsaWFzZXNbaV1dID0gY29weVtwXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gY29weTtcbn0sXG4gICAgLy8gcGFyc2VzIG11bHRpcGxlIGZvcm1hdHMsIGxpa2Uge1wiMCVcIjoge3g6IDEwMH0sIHtcIjUwJVwiOiB7eDogLTIwfX0gYW5kIHsgeDoge1wiMCVcIjogMTAwLCBcIjUwJVwiOiAtMjB9IH0sIGFuZCBhbiBcImVhc2VcIiBjYW4gYmUgc2V0IG9uIGFueSBvYmplY3QuIFdlIHBvcHVsYXRlIGFuIFwiYWxsUHJvcHNcIiBvYmplY3Qgd2l0aCBhbiBBcnJheSBmb3IgZWFjaCBwcm9wZXJ0eSwgbGlrZSB7eDogW3t9LCB7fV0sIHk6W3t9LCB7fV19IHdpdGggZGF0YSBmb3IgZWFjaCBwcm9wZXJ0eSB0d2Vlbi4gVGhlIG9iamVjdHMgaGF2ZSBhIFwidFwiICh0aW1lKSwgXCJ2XCIsICh2YWx1ZSksIGFuZCBcImVcIiAoZWFzZSkgcHJvcGVydHkuIFRoaXMgYWxsb3dzIHVzIHRvIHBpZWNlIHRvZ2V0aGVyIGEgdGltZWxpbmUgbGF0ZXIuXG5fcGFyc2VLZXlmcmFtZSA9IGZ1bmN0aW9uIF9wYXJzZUtleWZyYW1lKHByb3AsIG9iaiwgYWxsUHJvcHMsIGVhc2VFYWNoKSB7XG4gIHZhciBlYXNlID0gb2JqLmVhc2UgfHwgZWFzZUVhY2ggfHwgXCJwb3dlcjEuaW5PdXRcIixcbiAgICAgIHAsXG4gICAgICBhO1xuXG4gIGlmIChfaXNBcnJheShvYmopKSB7XG4gICAgYSA9IGFsbFByb3BzW3Byb3BdIHx8IChhbGxQcm9wc1twcm9wXSA9IFtdKTsgLy8gdCA9IHRpbWUgKG91dCBvZiAxMDApLCB2ID0gdmFsdWUsIGUgPSBlYXNlXG5cbiAgICBvYmouZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIGkpIHtcbiAgICAgIHJldHVybiBhLnB1c2goe1xuICAgICAgICB0OiBpIC8gKG9iai5sZW5ndGggLSAxKSAqIDEwMCxcbiAgICAgICAgdjogdmFsdWUsXG4gICAgICAgIGU6IGVhc2VcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGZvciAocCBpbiBvYmopIHtcbiAgICAgIGEgPSBhbGxQcm9wc1twXSB8fCAoYWxsUHJvcHNbcF0gPSBbXSk7XG4gICAgICBwID09PSBcImVhc2VcIiB8fCBhLnB1c2goe1xuICAgICAgICB0OiBwYXJzZUZsb2F0KHByb3ApLFxuICAgICAgICB2OiBvYmpbcF0sXG4gICAgICAgIGU6IGVhc2VcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufSxcbiAgICBfcGFyc2VGdW5jT3JTdHJpbmcgPSBmdW5jdGlvbiBfcGFyc2VGdW5jT3JTdHJpbmcodmFsdWUsIHR3ZWVuLCBpLCB0YXJnZXQsIHRhcmdldHMpIHtcbiAgcmV0dXJuIF9pc0Z1bmN0aW9uKHZhbHVlKSA/IHZhbHVlLmNhbGwodHdlZW4sIGksIHRhcmdldCwgdGFyZ2V0cykgOiBfaXNTdHJpbmcodmFsdWUpICYmIH52YWx1ZS5pbmRleE9mKFwicmFuZG9tKFwiKSA/IF9yZXBsYWNlUmFuZG9tKHZhbHVlKSA6IHZhbHVlO1xufSxcbiAgICBfc3RhZ2dlclR3ZWVuUHJvcHMgPSBfY2FsbGJhY2tOYW1lcyArIFwicmVwZWF0LHJlcGVhdERlbGF5LHlveW8scmVwZWF0UmVmcmVzaCx5b3lvRWFzZSxhdXRvUmV2ZXJ0XCIsXG4gICAgX3N0YWdnZXJQcm9wc1RvU2tpcCA9IHt9O1xuXG5fZm9yRWFjaE5hbWUoX3N0YWdnZXJUd2VlblByb3BzICsgXCIsaWQsc3RhZ2dlcixkZWxheSxkdXJhdGlvbixwYXVzZWQsc2Nyb2xsVHJpZ2dlclwiLCBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gX3N0YWdnZXJQcm9wc1RvU2tpcFtuYW1lXSA9IDE7XG59KTtcbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogVFdFRU5cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuXG5leHBvcnQgdmFyIFR3ZWVuID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQW5pbWF0aW9uMikge1xuICBfaW5oZXJpdHNMb29zZShUd2VlbiwgX0FuaW1hdGlvbjIpO1xuXG4gIGZ1bmN0aW9uIFR3ZWVuKHRhcmdldHMsIHZhcnMsIHBvc2l0aW9uLCBza2lwSW5oZXJpdCkge1xuICAgIHZhciBfdGhpczM7XG5cbiAgICBpZiAodHlwZW9mIHZhcnMgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIHBvc2l0aW9uLmR1cmF0aW9uID0gdmFycztcbiAgICAgIHZhcnMgPSBwb3NpdGlvbjtcbiAgICAgIHBvc2l0aW9uID0gbnVsbDtcbiAgICB9XG5cbiAgICBfdGhpczMgPSBfQW5pbWF0aW9uMi5jYWxsKHRoaXMsIHNraXBJbmhlcml0ID8gdmFycyA6IF9pbmhlcml0RGVmYXVsdHModmFycykpIHx8IHRoaXM7XG4gICAgdmFyIF90aGlzMyR2YXJzID0gX3RoaXMzLnZhcnMsXG4gICAgICAgIGR1cmF0aW9uID0gX3RoaXMzJHZhcnMuZHVyYXRpb24sXG4gICAgICAgIGRlbGF5ID0gX3RoaXMzJHZhcnMuZGVsYXksXG4gICAgICAgIGltbWVkaWF0ZVJlbmRlciA9IF90aGlzMyR2YXJzLmltbWVkaWF0ZVJlbmRlcixcbiAgICAgICAgc3RhZ2dlciA9IF90aGlzMyR2YXJzLnN0YWdnZXIsXG4gICAgICAgIG92ZXJ3cml0ZSA9IF90aGlzMyR2YXJzLm92ZXJ3cml0ZSxcbiAgICAgICAga2V5ZnJhbWVzID0gX3RoaXMzJHZhcnMua2V5ZnJhbWVzLFxuICAgICAgICBkZWZhdWx0cyA9IF90aGlzMyR2YXJzLmRlZmF1bHRzLFxuICAgICAgICBzY3JvbGxUcmlnZ2VyID0gX3RoaXMzJHZhcnMuc2Nyb2xsVHJpZ2dlcixcbiAgICAgICAgeW95b0Vhc2UgPSBfdGhpczMkdmFycy55b3lvRWFzZSxcbiAgICAgICAgcGFyZW50ID0gdmFycy5wYXJlbnQgfHwgX2dsb2JhbFRpbWVsaW5lLFxuICAgICAgICBwYXJzZWRUYXJnZXRzID0gKF9pc0FycmF5KHRhcmdldHMpIHx8IF9pc1R5cGVkQXJyYXkodGFyZ2V0cykgPyBfaXNOdW1iZXIodGFyZ2V0c1swXSkgOiBcImxlbmd0aFwiIGluIHZhcnMpID8gW3RhcmdldHNdIDogdG9BcnJheSh0YXJnZXRzKSxcbiAgICAgICAgdGwsXG4gICAgICAgIGksXG4gICAgICAgIGNvcHksXG4gICAgICAgIGwsXG4gICAgICAgIHAsXG4gICAgICAgIGN1clRhcmdldCxcbiAgICAgICAgc3RhZ2dlckZ1bmMsXG4gICAgICAgIHN0YWdnZXJWYXJzVG9NZXJnZTtcbiAgICBfdGhpczMuX3RhcmdldHMgPSBwYXJzZWRUYXJnZXRzLmxlbmd0aCA/IF9oYXJuZXNzKHBhcnNlZFRhcmdldHMpIDogX3dhcm4oXCJHU0FQIHRhcmdldCBcIiArIHRhcmdldHMgKyBcIiBub3QgZm91bmQuIGh0dHBzOi8vZ3JlZW5zb2NrLmNvbVwiLCAhX2NvbmZpZy5udWxsVGFyZ2V0V2FybikgfHwgW107XG4gICAgX3RoaXMzLl9wdExvb2t1cCA9IFtdOyAvL1Byb3BUd2VlbiBsb29rdXAuIEFuIGFycmF5IGNvbnRhaW5pbmcgYW4gb2JqZWN0IGZvciBlYWNoIHRhcmdldCwgaGF2aW5nIGtleXMgZm9yIGVhY2ggdHdlZW5pbmcgcHJvcGVydHlcblxuICAgIF90aGlzMy5fb3ZlcndyaXRlID0gb3ZlcndyaXRlO1xuXG4gICAgaWYgKGtleWZyYW1lcyB8fCBzdGFnZ2VyIHx8IF9pc0Z1bmNPclN0cmluZyhkdXJhdGlvbikgfHwgX2lzRnVuY09yU3RyaW5nKGRlbGF5KSkge1xuICAgICAgdmFycyA9IF90aGlzMy52YXJzO1xuICAgICAgdGwgPSBfdGhpczMudGltZWxpbmUgPSBuZXcgVGltZWxpbmUoe1xuICAgICAgICBkYXRhOiBcIm5lc3RlZFwiLFxuICAgICAgICBkZWZhdWx0czogZGVmYXVsdHMgfHwge30sXG4gICAgICAgIHRhcmdldHM6IHBhcmVudCAmJiBwYXJlbnQuZGF0YSA9PT0gXCJuZXN0ZWRcIiA/IHBhcmVudC52YXJzLnRhcmdldHMgOiBwYXJzZWRUYXJnZXRzXG4gICAgICB9KTsgLy8gd2UgbmVlZCB0byBzdG9yZSB0aGUgdGFyZ2V0cyBiZWNhdXNlIGZvciBzdGFnZ2VycyBhbmQga2V5ZnJhbWVzLCB3ZSBlbmQgdXAgY3JlYXRpbmcgYW4gaW5kaXZpZHVhbCB0d2VlbiBmb3IgZWFjaCBidXQgZnVuY3Rpb24tYmFzZWQgdmFsdWVzIG5lZWQgdG8ga25vdyB0aGUgaW5kZXggYW5kIHRoZSB3aG9sZSBBcnJheSBvZiB0YXJnZXRzLlxuXG4gICAgICB0bC5raWxsKCk7XG4gICAgICB0bC5wYXJlbnQgPSB0bC5fZHAgPSBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMyk7XG4gICAgICB0bC5fc3RhcnQgPSAwO1xuXG4gICAgICBpZiAoc3RhZ2dlciB8fCBfaXNGdW5jT3JTdHJpbmcoZHVyYXRpb24pIHx8IF9pc0Z1bmNPclN0cmluZyhkZWxheSkpIHtcbiAgICAgICAgbCA9IHBhcnNlZFRhcmdldHMubGVuZ3RoO1xuICAgICAgICBzdGFnZ2VyRnVuYyA9IHN0YWdnZXIgJiYgZGlzdHJpYnV0ZShzdGFnZ2VyKTtcblxuICAgICAgICBpZiAoX2lzT2JqZWN0KHN0YWdnZXIpKSB7XG4gICAgICAgICAgLy91c2VycyBjYW4gcGFzcyBpbiBjYWxsYmFja3MgbGlrZSBvblN0YXJ0L29uQ29tcGxldGUgaW4gdGhlIHN0YWdnZXIgb2JqZWN0LiBUaGVzZSBzaG91bGQgZmlyZSB3aXRoIGVhY2ggaW5kaXZpZHVhbCB0d2Vlbi5cbiAgICAgICAgICBmb3IgKHAgaW4gc3RhZ2dlcikge1xuICAgICAgICAgICAgaWYgKH5fc3RhZ2dlclR3ZWVuUHJvcHMuaW5kZXhPZihwKSkge1xuICAgICAgICAgICAgICBzdGFnZ2VyVmFyc1RvTWVyZ2UgfHwgKHN0YWdnZXJWYXJzVG9NZXJnZSA9IHt9KTtcbiAgICAgICAgICAgICAgc3RhZ2dlclZhcnNUb01lcmdlW3BdID0gc3RhZ2dlcltwXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgY29weSA9IF9jb3B5RXhjbHVkaW5nKHZhcnMsIF9zdGFnZ2VyUHJvcHNUb1NraXApO1xuICAgICAgICAgIGNvcHkuc3RhZ2dlciA9IDA7XG4gICAgICAgICAgeW95b0Vhc2UgJiYgKGNvcHkueW95b0Vhc2UgPSB5b3lvRWFzZSk7XG4gICAgICAgICAgc3RhZ2dlclZhcnNUb01lcmdlICYmIF9tZXJnZShjb3B5LCBzdGFnZ2VyVmFyc1RvTWVyZ2UpO1xuICAgICAgICAgIGN1clRhcmdldCA9IHBhcnNlZFRhcmdldHNbaV07IC8vZG9uJ3QganVzdCBjb3B5IGR1cmF0aW9uIG9yIGRlbGF5IGJlY2F1c2UgaWYgdGhleSdyZSBhIHN0cmluZyBvciBmdW5jdGlvbiwgd2UnZCBlbmQgdXAgaW4gYW4gaW5maW5pdGUgbG9vcCBiZWNhdXNlIF9pc0Z1bmNPclN0cmluZygpIHdvdWxkIGV2YWx1YXRlIGFzIHRydWUgaW4gdGhlIGNoaWxkIHR3ZWVucywgZW50ZXJpbmcgdGhpcyBsb29wLCBldGMuIFNvIHdlIHBhcnNlIHRoZSB2YWx1ZSBzdHJhaWdodCBmcm9tIHZhcnMgYW5kIGRlZmF1bHQgdG8gMC5cblxuICAgICAgICAgIGNvcHkuZHVyYXRpb24gPSArX3BhcnNlRnVuY09yU3RyaW5nKGR1cmF0aW9uLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMyksIGksIGN1clRhcmdldCwgcGFyc2VkVGFyZ2V0cyk7XG4gICAgICAgICAgY29weS5kZWxheSA9ICgrX3BhcnNlRnVuY09yU3RyaW5nKGRlbGF5LCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMyksIGksIGN1clRhcmdldCwgcGFyc2VkVGFyZ2V0cykgfHwgMCkgLSBfdGhpczMuX2RlbGF5O1xuXG4gICAgICAgICAgaWYgKCFzdGFnZ2VyICYmIGwgPT09IDEgJiYgY29weS5kZWxheSkge1xuICAgICAgICAgICAgLy8gaWYgc29tZW9uZSBkb2VzIGRlbGF5OlwicmFuZG9tKDEsIDUpXCIsIHJlcGVhdDotMSwgZm9yIGV4YW1wbGUsIHRoZSBkZWxheSBzaG91bGRuJ3QgYmUgaW5zaWRlIHRoZSByZXBlYXQuXG4gICAgICAgICAgICBfdGhpczMuX2RlbGF5ID0gZGVsYXkgPSBjb3B5LmRlbGF5O1xuICAgICAgICAgICAgX3RoaXMzLl9zdGFydCArPSBkZWxheTtcbiAgICAgICAgICAgIGNvcHkuZGVsYXkgPSAwO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRsLnRvKGN1clRhcmdldCwgY29weSwgc3RhZ2dlckZ1bmMgPyBzdGFnZ2VyRnVuYyhpLCBjdXJUYXJnZXQsIHBhcnNlZFRhcmdldHMpIDogMCk7XG4gICAgICAgICAgdGwuX2Vhc2UgPSBfZWFzZU1hcC5ub25lO1xuICAgICAgICB9XG5cbiAgICAgICAgdGwuZHVyYXRpb24oKSA/IGR1cmF0aW9uID0gZGVsYXkgPSAwIDogX3RoaXMzLnRpbWVsaW5lID0gMDsgLy8gaWYgdGhlIHRpbWVsaW5lJ3MgZHVyYXRpb24gaXMgMCwgd2UgZG9uJ3QgbmVlZCBhIHRpbWVsaW5lIGludGVybmFsbHkhXG4gICAgICB9IGVsc2UgaWYgKGtleWZyYW1lcykge1xuICAgICAgICBfaW5oZXJpdERlZmF1bHRzKF9zZXREZWZhdWx0cyh0bC52YXJzLmRlZmF1bHRzLCB7XG4gICAgICAgICAgZWFzZTogXCJub25lXCJcbiAgICAgICAgfSkpO1xuXG4gICAgICAgIHRsLl9lYXNlID0gX3BhcnNlRWFzZShrZXlmcmFtZXMuZWFzZSB8fCB2YXJzLmVhc2UgfHwgXCJub25lXCIpO1xuICAgICAgICB2YXIgdGltZSA9IDAsXG4gICAgICAgICAgICBhLFxuICAgICAgICAgICAga2YsXG4gICAgICAgICAgICB2O1xuXG4gICAgICAgIGlmIChfaXNBcnJheShrZXlmcmFtZXMpKSB7XG4gICAgICAgICAga2V5ZnJhbWVzLmZvckVhY2goZnVuY3Rpb24gKGZyYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gdGwudG8ocGFyc2VkVGFyZ2V0cywgZnJhbWUsIFwiPlwiKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB0bC5kdXJhdGlvbigpOyAvLyB0byBlbnN1cmUgdGwuX2R1ciBpcyBjYWNoZWQgYmVjYXVzZSB3ZSB0YXAgaW50byBpdCBmb3IgcGVyZm9ybWFuY2UgcHVycG9zZXMgaW4gdGhlIHJlbmRlcigpIG1ldGhvZC5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb3B5ID0ge307XG5cbiAgICAgICAgICBmb3IgKHAgaW4ga2V5ZnJhbWVzKSB7XG4gICAgICAgICAgICBwID09PSBcImVhc2VcIiB8fCBwID09PSBcImVhc2VFYWNoXCIgfHwgX3BhcnNlS2V5ZnJhbWUocCwga2V5ZnJhbWVzW3BdLCBjb3B5LCBrZXlmcmFtZXMuZWFzZUVhY2gpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGZvciAocCBpbiBjb3B5KSB7XG4gICAgICAgICAgICBhID0gY29weVtwXS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICAgIHJldHVybiBhLnQgLSBiLnQ7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRpbWUgPSAwO1xuXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICBrZiA9IGFbaV07XG4gICAgICAgICAgICAgIHYgPSB7XG4gICAgICAgICAgICAgICAgZWFzZToga2YuZSxcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogKGtmLnQgLSAoaSA/IGFbaSAtIDFdLnQgOiAwKSkgLyAxMDAgKiBkdXJhdGlvblxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICB2W3BdID0ga2YudjtcbiAgICAgICAgICAgICAgdGwudG8ocGFyc2VkVGFyZ2V0cywgdiwgdGltZSk7XG4gICAgICAgICAgICAgIHRpbWUgKz0gdi5kdXJhdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0bC5kdXJhdGlvbigpIDwgZHVyYXRpb24gJiYgdGwudG8oe30sIHtcbiAgICAgICAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbiAtIHRsLmR1cmF0aW9uKClcbiAgICAgICAgICB9KTsgLy8gaW4gY2FzZSBrZXlmcmFtZXMgZGlkbid0IGdvIHRvIDEwMCVcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBkdXJhdGlvbiB8fCBfdGhpczMuZHVyYXRpb24oZHVyYXRpb24gPSB0bC5kdXJhdGlvbigpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgX3RoaXMzLnRpbWVsaW5lID0gMDsgLy9zcGVlZCBvcHRpbWl6YXRpb24sIGZhc3RlciBsb29rdXBzIChubyBnb2luZyB1cCB0aGUgcHJvdG90eXBlIGNoYWluKVxuICAgIH1cblxuICAgIGlmIChvdmVyd3JpdGUgPT09IHRydWUgJiYgIV9zdXBwcmVzc092ZXJ3cml0ZXMpIHtcbiAgICAgIF9vdmVyd3JpdGluZ1R3ZWVuID0gX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczMpO1xuXG4gICAgICBfZ2xvYmFsVGltZWxpbmUua2lsbFR3ZWVuc09mKHBhcnNlZFRhcmdldHMpO1xuXG4gICAgICBfb3ZlcndyaXRpbmdUd2VlbiA9IDA7XG4gICAgfVxuXG4gICAgX2FkZFRvVGltZWxpbmUocGFyZW50LCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMyksIHBvc2l0aW9uKTtcblxuICAgIHZhcnMucmV2ZXJzZWQgJiYgX3RoaXMzLnJldmVyc2UoKTtcbiAgICB2YXJzLnBhdXNlZCAmJiBfdGhpczMucGF1c2VkKHRydWUpO1xuXG4gICAgaWYgKGltbWVkaWF0ZVJlbmRlciB8fCAhZHVyYXRpb24gJiYgIWtleWZyYW1lcyAmJiBfdGhpczMuX3N0YXJ0ID09PSBfcm91bmRQcmVjaXNlKHBhcmVudC5fdGltZSkgJiYgX2lzTm90RmFsc2UoaW1tZWRpYXRlUmVuZGVyKSAmJiBfaGFzTm9QYXVzZWRBbmNlc3RvcnMoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczMpKSAmJiBwYXJlbnQuZGF0YSAhPT0gXCJuZXN0ZWRcIikge1xuICAgICAgX3RoaXMzLl90VGltZSA9IC1fdGlueU51bTsgLy9mb3JjZXMgYSByZW5kZXIgd2l0aG91dCBoYXZpbmcgdG8gc2V0IHRoZSByZW5kZXIoKSBcImZvcmNlXCIgcGFyYW1ldGVyIHRvIHRydWUgYmVjYXVzZSB3ZSB3YW50IHRvIGFsbG93IGxhenlpbmcgYnkgZGVmYXVsdCAodXNpbmcgdGhlIFwiZm9yY2VcIiBwYXJhbWV0ZXIgYWx3YXlzIGZvcmNlcyBhbiBpbW1lZGlhdGUgZnVsbCByZW5kZXIpXG5cbiAgICAgIF90aGlzMy5yZW5kZXIoTWF0aC5tYXgoMCwgLWRlbGF5KSk7IC8vaW4gY2FzZSBkZWxheSBpcyBuZWdhdGl2ZVxuXG4gICAgfVxuXG4gICAgc2Nyb2xsVHJpZ2dlciAmJiBfc2Nyb2xsVHJpZ2dlcihfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMyksIHNjcm9sbFRyaWdnZXIpO1xuICAgIHJldHVybiBfdGhpczM7XG4gIH1cblxuICB2YXIgX3Byb3RvMyA9IFR3ZWVuLnByb3RvdHlwZTtcblxuICBfcHJvdG8zLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcih0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSkge1xuICAgIHZhciBwcmV2VGltZSA9IHRoaXMuX3RpbWUsXG4gICAgICAgIHREdXIgPSB0aGlzLl90RHVyLFxuICAgICAgICBkdXIgPSB0aGlzLl9kdXIsXG4gICAgICAgIGlzTmVnYXRpdmUgPSB0b3RhbFRpbWUgPCAwLFxuICAgICAgICB0VGltZSA9IHRvdGFsVGltZSA+IHREdXIgLSBfdGlueU51bSAmJiAhaXNOZWdhdGl2ZSA/IHREdXIgOiB0b3RhbFRpbWUgPCBfdGlueU51bSA/IDAgOiB0b3RhbFRpbWUsXG4gICAgICAgIHRpbWUsXG4gICAgICAgIHB0LFxuICAgICAgICBpdGVyYXRpb24sXG4gICAgICAgIGN5Y2xlRHVyYXRpb24sXG4gICAgICAgIHByZXZJdGVyYXRpb24sXG4gICAgICAgIGlzWW95byxcbiAgICAgICAgcmF0aW8sXG4gICAgICAgIHRpbWVsaW5lLFxuICAgICAgICB5b3lvRWFzZTtcblxuICAgIGlmICghZHVyKSB7XG4gICAgICBfcmVuZGVyWmVyb0R1cmF0aW9uVHdlZW4odGhpcywgdG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuICAgIH0gZWxzZSBpZiAodFRpbWUgIT09IHRoaXMuX3RUaW1lIHx8ICF0b3RhbFRpbWUgfHwgZm9yY2UgfHwgIXRoaXMuX2luaXR0ZWQgJiYgdGhpcy5fdFRpbWUgfHwgdGhpcy5fc3RhcnRBdCAmJiB0aGlzLl96VGltZSA8IDAgIT09IGlzTmVnYXRpdmUpIHtcbiAgICAgIC8vdGhpcyBzZW5zZXMgaWYgd2UncmUgY3Jvc3Npbmcgb3ZlciB0aGUgc3RhcnQgdGltZSwgaW4gd2hpY2ggY2FzZSB3ZSBtdXN0IHJlY29yZCBfelRpbWUgYW5kIGZvcmNlIHRoZSByZW5kZXIsIGJ1dCB3ZSBkbyBpdCBpbiB0aGlzIGxlbmd0aHkgY29uZGl0aW9uYWwgd2F5IGZvciBwZXJmb3JtYW5jZSByZWFzb25zICh1c3VhbGx5IHdlIGNhbiBza2lwIHRoZSBjYWxjdWxhdGlvbnMpOiB0aGlzLl9pbml0dGVkICYmICh0aGlzLl96VGltZSA8IDApICE9PSAodG90YWxUaW1lIDwgMClcbiAgICAgIHRpbWUgPSB0VGltZTtcbiAgICAgIHRpbWVsaW5lID0gdGhpcy50aW1lbGluZTtcblxuICAgICAgaWYgKHRoaXMuX3JlcGVhdCkge1xuICAgICAgICAvL2FkanVzdCB0aGUgdGltZSBmb3IgcmVwZWF0cyBhbmQgeW95b3NcbiAgICAgICAgY3ljbGVEdXJhdGlvbiA9IGR1ciArIHRoaXMuX3JEZWxheTtcblxuICAgICAgICBpZiAodGhpcy5fcmVwZWF0IDwgLTEgJiYgaXNOZWdhdGl2ZSkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnRvdGFsVGltZShjeWNsZUR1cmF0aW9uICogMTAwICsgdG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGltZSA9IF9yb3VuZFByZWNpc2UodFRpbWUgJSBjeWNsZUR1cmF0aW9uKTsgLy9yb3VuZCB0byBhdm9pZCBmbG9hdGluZyBwb2ludCBlcnJvcnMuICg0ICUgMC44IHNob3VsZCBiZSAwIGJ1dCBzb21lIGJyb3dzZXJzIHJlcG9ydCBpdCBhcyAwLjc5OTk5OTk5ISlcblxuICAgICAgICBpZiAodFRpbWUgPT09IHREdXIpIHtcbiAgICAgICAgICAvLyB0aGUgdER1ciA9PT0gdFRpbWUgaXMgZm9yIGVkZ2UgY2FzZXMgd2hlcmUgdGhlcmUncyBhIGxlbmd0aHkgZGVjaW1hbCBvbiB0aGUgZHVyYXRpb24gYW5kIGl0IG1heSByZWFjaCB0aGUgdmVyeSBlbmQgYnV0IHRoZSB0aW1lIGlzIHJlbmRlcmVkIGFzIG5vdC1xdWl0ZS10aGVyZSAocmVtZW1iZXIsIHREdXIgaXMgcm91bmRlZCB0byA0IGRlY2ltYWxzIHdoZXJlYXMgZHVyIGlzbid0KVxuICAgICAgICAgIGl0ZXJhdGlvbiA9IHRoaXMuX3JlcGVhdDtcbiAgICAgICAgICB0aW1lID0gZHVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZXJhdGlvbiA9IH5+KHRUaW1lIC8gY3ljbGVEdXJhdGlvbik7XG5cbiAgICAgICAgICBpZiAoaXRlcmF0aW9uICYmIGl0ZXJhdGlvbiA9PT0gdFRpbWUgLyBjeWNsZUR1cmF0aW9uKSB7XG4gICAgICAgICAgICB0aW1lID0gZHVyO1xuICAgICAgICAgICAgaXRlcmF0aW9uLS07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGltZSA+IGR1ciAmJiAodGltZSA9IGR1cik7XG4gICAgICAgIH1cblxuICAgICAgICBpc1lveW8gPSB0aGlzLl95b3lvICYmIGl0ZXJhdGlvbiAmIDE7XG5cbiAgICAgICAgaWYgKGlzWW95bykge1xuICAgICAgICAgIHlveW9FYXNlID0gdGhpcy5feUVhc2U7XG4gICAgICAgICAgdGltZSA9IGR1ciAtIHRpbWU7XG4gICAgICAgIH1cblxuICAgICAgICBwcmV2SXRlcmF0aW9uID0gX2FuaW1hdGlvbkN5Y2xlKHRoaXMuX3RUaW1lLCBjeWNsZUR1cmF0aW9uKTtcblxuICAgICAgICBpZiAodGltZSA9PT0gcHJldlRpbWUgJiYgIWZvcmNlICYmIHRoaXMuX2luaXR0ZWQpIHtcbiAgICAgICAgICAvL2NvdWxkIGJlIGR1cmluZyB0aGUgcmVwZWF0RGVsYXkgcGFydC4gTm8gbmVlZCB0byByZW5kZXIgYW5kIGZpcmUgY2FsbGJhY2tzLlxuICAgICAgICAgIHRoaXMuX3RUaW1lID0gdFRpbWU7XG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXRlcmF0aW9uICE9PSBwcmV2SXRlcmF0aW9uKSB7XG4gICAgICAgICAgdGltZWxpbmUgJiYgdGhpcy5feUVhc2UgJiYgX3Byb3BhZ2F0ZVlveW9FYXNlKHRpbWVsaW5lLCBpc1lveW8pOyAvL3JlcGVhdFJlZnJlc2ggZnVuY3Rpb25hbGl0eVxuXG4gICAgICAgICAgaWYgKHRoaXMudmFycy5yZXBlYXRSZWZyZXNoICYmICFpc1lveW8gJiYgIXRoaXMuX2xvY2spIHtcbiAgICAgICAgICAgIHRoaXMuX2xvY2sgPSBmb3JjZSA9IDE7IC8vZm9yY2UsIG90aGVyd2lzZSBpZiBsYXp5IGlzIHRydWUsIHRoZSBfYXR0ZW1wdEluaXRUd2VlbigpIHdpbGwgcmV0dXJuIGFuZCB3ZSdsbCBqdW1wIG91dCBhbmQgZ2V0IGNhdWdodCBib3VuY2luZyBvbiBlYWNoIHRpY2suXG5cbiAgICAgICAgICAgIHRoaXMucmVuZGVyKF9yb3VuZFByZWNpc2UoY3ljbGVEdXJhdGlvbiAqIGl0ZXJhdGlvbiksIHRydWUpLmludmFsaWRhdGUoKS5fbG9jayA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5faW5pdHRlZCkge1xuICAgICAgICBpZiAoX2F0dGVtcHRJbml0VHdlZW4odGhpcywgaXNOZWdhdGl2ZSA/IHRvdGFsVGltZSA6IHRpbWUsIGZvcmNlLCBzdXBwcmVzc0V2ZW50cykpIHtcbiAgICAgICAgICB0aGlzLl90VGltZSA9IDA7IC8vIGluIGNvbnN0cnVjdG9yIGlmIGltbWVkaWF0ZVJlbmRlciBpcyB0cnVlLCB3ZSBzZXQgX3RUaW1lIHRvIC1fdGlueU51bSB0byBoYXZlIHRoZSBwbGF5aGVhZCBjcm9zcyB0aGUgc3RhcnRpbmcgcG9pbnQgYnV0IHdlIGNhbid0IGxlYXZlIF90VGltZSBhcyBhIG5lZ2F0aXZlIG51bWJlci5cblxuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHByZXZUaW1lICE9PSB0aGlzLl90aW1lKSB7XG4gICAgICAgICAgLy8gcmFyZSBlZGdlIGNhc2UgLSBkdXJpbmcgaW5pdGlhbGl6YXRpb24sIGFuIG9uVXBkYXRlIGluIHRoZSBfc3RhcnRBdCAoLmZyb21UbygpKSBtaWdodCBmb3JjZSB0aGlzIHR3ZWVuIHRvIHJlbmRlciBhdCBhIGRpZmZlcmVudCBzcG90IGluIHdoaWNoIGNhc2Ugd2Ugc2hvdWxkIGRpdGNoIHRoaXMgcmVuZGVyKCkgY2FsbCBzbyB0aGF0IGl0IGRvZXNuJ3QgcmV2ZXJ0IHRoZSB2YWx1ZXMuXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZHVyICE9PSB0aGlzLl9kdXIpIHtcbiAgICAgICAgICAvLyB3aGlsZSBpbml0dGluZywgYSBwbHVnaW4gbGlrZSBJbmVydGlhUGx1Z2luIG1pZ2h0IGFsdGVyIHRoZSBkdXJhdGlvbiwgc28gcmVydW4gZnJvbSB0aGUgc3RhcnQgdG8gZW5zdXJlIGV2ZXJ5dGhpbmcgcmVuZGVycyBhcyBpdCBzaG91bGQuXG4gICAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyKHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLl90VGltZSA9IHRUaW1lO1xuICAgICAgdGhpcy5fdGltZSA9IHRpbWU7XG5cbiAgICAgIGlmICghdGhpcy5fYWN0ICYmIHRoaXMuX3RzKSB7XG4gICAgICAgIHRoaXMuX2FjdCA9IDE7IC8vYXMgbG9uZyBhcyBpdCdzIG5vdCBwYXVzZWQsIGZvcmNlIGl0IHRvIGJlIGFjdGl2ZSBzbyB0aGF0IGlmIHRoZSB1c2VyIHJlbmRlcnMgaW5kZXBlbmRlbnQgb2YgdGhlIHBhcmVudCB0aW1lbGluZSwgaXQnbGwgYmUgZm9yY2VkIHRvIHJlLXJlbmRlciBvbiB0aGUgbmV4dCB0aWNrLlxuXG4gICAgICAgIHRoaXMuX2xhenkgPSAwO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnJhdGlvID0gcmF0aW8gPSAoeW95b0Vhc2UgfHwgdGhpcy5fZWFzZSkodGltZSAvIGR1cik7XG5cbiAgICAgIGlmICh0aGlzLl9mcm9tKSB7XG4gICAgICAgIHRoaXMucmF0aW8gPSByYXRpbyA9IDEgLSByYXRpbztcbiAgICAgIH1cblxuICAgICAgaWYgKHRpbWUgJiYgIXByZXZUaW1lICYmICFzdXBwcmVzc0V2ZW50cykge1xuICAgICAgICBfY2FsbGJhY2sodGhpcywgXCJvblN0YXJ0XCIpO1xuXG4gICAgICAgIGlmICh0aGlzLl90VGltZSAhPT0gdFRpbWUpIHtcbiAgICAgICAgICAvLyBpbiBjYXNlIHRoZSBvblN0YXJ0IHRyaWdnZXJlZCBhIHJlbmRlciBhdCBhIGRpZmZlcmVudCBzcG90LCBlamVjdC4gTGlrZSBpZiBzb21lb25lIGRpZCBhbmltYXRpb24ucGF1c2UoMC41KSBvciBzb21ldGhpbmcgaW5zaWRlIHRoZSBvblN0YXJ0LlxuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHB0ID0gdGhpcy5fcHQ7XG5cbiAgICAgIHdoaWxlIChwdCkge1xuICAgICAgICBwdC5yKHJhdGlvLCBwdC5kKTtcbiAgICAgICAgcHQgPSBwdC5fbmV4dDtcbiAgICAgIH1cblxuICAgICAgdGltZWxpbmUgJiYgdGltZWxpbmUucmVuZGVyKHRvdGFsVGltZSA8IDAgPyB0b3RhbFRpbWUgOiAhdGltZSAmJiBpc1lveW8gPyAtX3RpbnlOdW0gOiB0aW1lbGluZS5fZHVyICogdGltZWxpbmUuX2Vhc2UodGltZSAvIHRoaXMuX2R1ciksIHN1cHByZXNzRXZlbnRzLCBmb3JjZSkgfHwgdGhpcy5fc3RhcnRBdCAmJiAodGhpcy5felRpbWUgPSB0b3RhbFRpbWUpO1xuXG4gICAgICBpZiAodGhpcy5fb25VcGRhdGUgJiYgIXN1cHByZXNzRXZlbnRzKSB7XG4gICAgICAgIGlzTmVnYXRpdmUgJiYgX3Jld2luZFN0YXJ0QXQodGhpcywgdG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpOyAvL25vdGU6IGZvciBwZXJmb3JtYW5jZSByZWFzb25zLCB3ZSB0dWNrIHRoaXMgY29uZGl0aW9uYWwgbG9naWMgaW5zaWRlIGxlc3MgdHJhdmVsZWQgYXJlYXMgKG1vc3QgdHdlZW5zIGRvbid0IGhhdmUgYW4gb25VcGRhdGUpLiBXZSdkIGp1c3QgaGF2ZSBpdCBhdCB0aGUgZW5kIGJlZm9yZSB0aGUgb25Db21wbGV0ZSwgYnV0IHRoZSB2YWx1ZXMgc2hvdWxkIGJlIHVwZGF0ZWQgYmVmb3JlIGFueSBvblVwZGF0ZSBpcyBjYWxsZWQsIHNvIHdlIEFMU08gcHV0IGl0IGhlcmUgYW5kIHRoZW4gaWYgaXQncyBub3QgY2FsbGVkLCB3ZSBkbyBzbyBsYXRlciBuZWFyIHRoZSBvbkNvbXBsZXRlLlxuXG4gICAgICAgIF9jYWxsYmFjayh0aGlzLCBcIm9uVXBkYXRlXCIpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9yZXBlYXQgJiYgaXRlcmF0aW9uICE9PSBwcmV2SXRlcmF0aW9uICYmIHRoaXMudmFycy5vblJlcGVhdCAmJiAhc3VwcHJlc3NFdmVudHMgJiYgdGhpcy5wYXJlbnQgJiYgX2NhbGxiYWNrKHRoaXMsIFwib25SZXBlYXRcIik7XG5cbiAgICAgIGlmICgodFRpbWUgPT09IHRoaXMuX3REdXIgfHwgIXRUaW1lKSAmJiB0aGlzLl90VGltZSA9PT0gdFRpbWUpIHtcbiAgICAgICAgaXNOZWdhdGl2ZSAmJiAhdGhpcy5fb25VcGRhdGUgJiYgX3Jld2luZFN0YXJ0QXQodGhpcywgdG90YWxUaW1lLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgKHRvdGFsVGltZSB8fCAhZHVyKSAmJiAodFRpbWUgPT09IHRoaXMuX3REdXIgJiYgdGhpcy5fdHMgPiAwIHx8ICF0VGltZSAmJiB0aGlzLl90cyA8IDApICYmIF9yZW1vdmVGcm9tUGFyZW50KHRoaXMsIDEpOyAvLyBkb24ndCByZW1vdmUgaWYgd2UncmUgcmVuZGVyaW5nIGF0IGV4YWN0bHkgYSB0aW1lIG9mIDAsIGFzIHRoZXJlIGNvdWxkIGJlIGF1dG9SZXZlcnQgdmFsdWVzIHRoYXQgc2hvdWxkIGdldCBzZXQgb24gdGhlIG5leHQgdGljayAoaWYgdGhlIHBsYXloZWFkIGdvZXMgYmFja3dhcmQgYmV5b25kIHRoZSBzdGFydFRpbWUsIG5lZ2F0aXZlIHRvdGFsVGltZSkuIERvbid0IHJlbW92ZSBpZiB0aGUgdGltZWxpbmUgaXMgcmV2ZXJzZWQgYW5kIHRoZSBwbGF5aGVhZCBpc24ndCBhdCAwLCBvdGhlcndpc2UgdGwucHJvZ3Jlc3MoMSkucmV2ZXJzZSgpIHdvbid0IHdvcmsuIE9ubHkgcmVtb3ZlIGlmIHRoZSBwbGF5aGVhZCBpcyBhdCB0aGUgZW5kIGFuZCB0aW1lU2NhbGUgaXMgcG9zaXRpdmUsIG9yIGlmIHRoZSBwbGF5aGVhZCBpcyBhdCAwIGFuZCB0aGUgdGltZVNjYWxlIGlzIG5lZ2F0aXZlLlxuXG4gICAgICAgIGlmICghc3VwcHJlc3NFdmVudHMgJiYgIShpc05lZ2F0aXZlICYmICFwcmV2VGltZSkgJiYgKHRUaW1lIHx8IHByZXZUaW1lKSkge1xuICAgICAgICAgIC8vIGlmIHByZXZUaW1lIGFuZCB0VGltZSBhcmUgemVybywgd2Ugc2hvdWxkbid0IGZpcmUgdGhlIG9uUmV2ZXJzZUNvbXBsZXRlLiBUaGlzIGNvdWxkIGhhcHBlbiBpZiB5b3UgZ3NhcC50byguLi4ge3BhdXNlZDp0cnVlfSkucGxheSgpO1xuICAgICAgICAgIF9jYWxsYmFjayh0aGlzLCB0VGltZSA9PT0gdER1ciA/IFwib25Db21wbGV0ZVwiIDogXCJvblJldmVyc2VDb21wbGV0ZVwiLCB0cnVlKTtcblxuICAgICAgICAgIHRoaXMuX3Byb20gJiYgISh0VGltZSA8IHREdXIgJiYgdGhpcy50aW1lU2NhbGUoKSA+IDApICYmIHRoaXMuX3Byb20oKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzMudGFyZ2V0cyA9IGZ1bmN0aW9uIHRhcmdldHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3RhcmdldHM7XG4gIH07XG5cbiAgX3Byb3RvMy5pbnZhbGlkYXRlID0gZnVuY3Rpb24gaW52YWxpZGF0ZSgpIHtcbiAgICB0aGlzLl9wdCA9IHRoaXMuX29wID0gdGhpcy5fc3RhcnRBdCA9IHRoaXMuX29uVXBkYXRlID0gdGhpcy5fbGF6eSA9IHRoaXMucmF0aW8gPSAwO1xuICAgIHRoaXMuX3B0TG9va3VwID0gW107XG4gICAgdGhpcy50aW1lbGluZSAmJiB0aGlzLnRpbWVsaW5lLmludmFsaWRhdGUoKTtcbiAgICByZXR1cm4gX0FuaW1hdGlvbjIucHJvdG90eXBlLmludmFsaWRhdGUuY2FsbCh0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8zLnJlc2V0VG8gPSBmdW5jdGlvbiByZXNldFRvKHByb3BlcnR5LCB2YWx1ZSwgc3RhcnQsIHN0YXJ0SXNSZWxhdGl2ZSkge1xuICAgIF90aWNrZXJBY3RpdmUgfHwgX3RpY2tlci53YWtlKCk7XG4gICAgdGhpcy5fdHMgfHwgdGhpcy5wbGF5KCk7XG4gICAgdmFyIHRpbWUgPSBNYXRoLm1pbih0aGlzLl9kdXIsICh0aGlzLl9kcC5fdGltZSAtIHRoaXMuX3N0YXJ0KSAqIHRoaXMuX3RzKSxcbiAgICAgICAgcmF0aW87XG4gICAgdGhpcy5faW5pdHRlZCB8fCBfaW5pdFR3ZWVuKHRoaXMsIHRpbWUpO1xuICAgIHJhdGlvID0gdGhpcy5fZWFzZSh0aW1lIC8gdGhpcy5fZHVyKTsgLy8gZG9uJ3QganVzdCBnZXQgdHdlZW4ucmF0aW8gYmVjYXVzZSBpdCBtYXkgbm90IGhhdmUgcmVuZGVyZWQgeWV0LlxuICAgIC8vIHBvc3NpYmxlIGZ1dHVyZSBhZGRpdGlvbiB0byBhbGxvdyBhbiBvYmplY3Qgd2l0aCBtdWx0aXBsZSB2YWx1ZXMgdG8gdXBkYXRlLCBsaWtlIHR3ZWVuLnJlc2V0VG8oe3g6IDEwMCwgeTogMjAwfSk7IEF0IHRoaXMgcG9pbnQsIGl0IGRvZXNuJ3Qgc2VlbSB3b3J0aCB0aGUgYWRkZWQga2IgZ2l2ZW4gdGhlIGZhY3QgdGhhdCBtb3N0IHVzZXJzIHdpbGwgbGlrZWx5IG9wdCBmb3IgdGhlIGNvbnZlbmllbnQgZ3NhcC5xdWlja1RvKCkgd2F5IG9mIGludGVyYWN0aW5nIHdpdGggdGhpcyBtZXRob2QuXG4gICAgLy8gaWYgKF9pc09iamVjdChwcm9wZXJ0eSkpIHsgLy8gcGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uXG4gICAgLy8gXHRmb3IgKHAgaW4gcHJvcGVydHkpIHtcbiAgICAvLyBcdFx0aWYgKF91cGRhdGVQcm9wVHdlZW5zKHRoaXMsIHAsIHByb3BlcnR5W3BdLCB2YWx1ZSA/IHZhbHVlW3BdIDogbnVsbCwgc3RhcnQsIHJhdGlvLCB0aW1lKSkge1xuICAgIC8vIFx0XHRcdHJldHVybiB0aGlzLnJlc2V0VG8ocHJvcGVydHksIHZhbHVlLCBzdGFydCwgc3RhcnRJc1JlbGF0aXZlKTsgLy8gaWYgYSBQcm9wVHdlZW4gd2Fzbid0IGZvdW5kIGZvciB0aGUgcHJvcGVydHksIGl0J2xsIGdldCBmb3JjZWQgd2l0aCBhIHJlLWluaXRpYWxpemF0aW9uIHNvIHdlIG5lZWQgdG8ganVtcCBvdXQgYW5kIHN0YXJ0IG92ZXIgYWdhaW4uXG4gICAgLy8gXHRcdH1cbiAgICAvLyBcdH1cbiAgICAvLyB9IGVsc2Uge1xuXG4gICAgaWYgKF91cGRhdGVQcm9wVHdlZW5zKHRoaXMsIHByb3BlcnR5LCB2YWx1ZSwgc3RhcnQsIHN0YXJ0SXNSZWxhdGl2ZSwgcmF0aW8sIHRpbWUpKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXNldFRvKHByb3BlcnR5LCB2YWx1ZSwgc3RhcnQsIHN0YXJ0SXNSZWxhdGl2ZSk7IC8vIGlmIGEgUHJvcFR3ZWVuIHdhc24ndCBmb3VuZCBmb3IgdGhlIHByb3BlcnR5LCBpdCdsbCBnZXQgZm9yY2VkIHdpdGggYSByZS1pbml0aWFsaXphdGlvbiBzbyB3ZSBuZWVkIHRvIGp1bXAgb3V0IGFuZCBzdGFydCBvdmVyIGFnYWluLlxuICAgIH0gLy99XG5cblxuICAgIF9hbGlnblBsYXloZWFkKHRoaXMsIDApO1xuXG4gICAgdGhpcy5wYXJlbnQgfHwgX2FkZExpbmtlZExpc3RJdGVtKHRoaXMuX2RwLCB0aGlzLCBcIl9maXJzdFwiLCBcIl9sYXN0XCIsIHRoaXMuX2RwLl9zb3J0ID8gXCJfc3RhcnRcIiA6IDApO1xuICAgIHJldHVybiB0aGlzLnJlbmRlcigwKTtcbiAgfTtcblxuICBfcHJvdG8zLmtpbGwgPSBmdW5jdGlvbiBraWxsKHRhcmdldHMsIHZhcnMpIHtcbiAgICBpZiAodmFycyA9PT0gdm9pZCAwKSB7XG4gICAgICB2YXJzID0gXCJhbGxcIjtcbiAgICB9XG5cbiAgICBpZiAoIXRhcmdldHMgJiYgKCF2YXJzIHx8IHZhcnMgPT09IFwiYWxsXCIpKSB7XG4gICAgICB0aGlzLl9sYXp5ID0gdGhpcy5fcHQgPSAwO1xuICAgICAgcmV0dXJuIHRoaXMucGFyZW50ID8gX2ludGVycnVwdCh0aGlzKSA6IHRoaXM7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMudGltZWxpbmUpIHtcbiAgICAgIHZhciB0RHVyID0gdGhpcy50aW1lbGluZS50b3RhbER1cmF0aW9uKCk7XG4gICAgICB0aGlzLnRpbWVsaW5lLmtpbGxUd2VlbnNPZih0YXJnZXRzLCB2YXJzLCBfb3ZlcndyaXRpbmdUd2VlbiAmJiBfb3ZlcndyaXRpbmdUd2Vlbi52YXJzLm92ZXJ3cml0ZSAhPT0gdHJ1ZSkuX2ZpcnN0IHx8IF9pbnRlcnJ1cHQodGhpcyk7IC8vIGlmIG5vdGhpbmcgaXMgbGVmdCB0d2VlbmluZywgaW50ZXJydXB0LlxuXG4gICAgICB0aGlzLnBhcmVudCAmJiB0RHVyICE9PSB0aGlzLnRpbWVsaW5lLnRvdGFsRHVyYXRpb24oKSAmJiBfc2V0RHVyYXRpb24odGhpcywgdGhpcy5fZHVyICogdGhpcy50aW1lbGluZS5fdER1ciAvIHREdXIsIDAsIDEpOyAvLyBpZiBhIG5lc3RlZCB0d2VlbiBpcyBraWxsZWQgdGhhdCBjaGFuZ2VzIHRoZSBkdXJhdGlvbiwgaXQgc2hvdWxkIGFmZmVjdCB0aGlzIHR3ZWVuJ3MgZHVyYXRpb24uIFdlIG11c3QgdXNlIHRoZSByYXRpbywgdGhvdWdoLCBiZWNhdXNlIHNvbWV0aW1lcyB0aGUgaW50ZXJuYWwgdGltZWxpbmUgaXMgc3RyZXRjaGVkIGxpa2UgZm9yIGtleWZyYW1lcyB3aGVyZSB0aGV5IGRvbid0IGFsbCBhZGQgdXAgdG8gd2hhdGV2ZXIgdGhlIHBhcmVudCB0d2VlbidzIGR1cmF0aW9uIHdhcyBzZXQgdG8uXG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHZhciBwYXJzZWRUYXJnZXRzID0gdGhpcy5fdGFyZ2V0cyxcbiAgICAgICAga2lsbGluZ1RhcmdldHMgPSB0YXJnZXRzID8gdG9BcnJheSh0YXJnZXRzKSA6IHBhcnNlZFRhcmdldHMsXG4gICAgICAgIHByb3BUd2Vlbkxvb2t1cCA9IHRoaXMuX3B0TG9va3VwLFxuICAgICAgICBmaXJzdFBUID0gdGhpcy5fcHQsXG4gICAgICAgIG92ZXJ3cml0dGVuUHJvcHMsXG4gICAgICAgIGN1ckxvb2t1cCxcbiAgICAgICAgY3VyT3ZlcndyaXRlUHJvcHMsXG4gICAgICAgIHByb3BzLFxuICAgICAgICBwLFxuICAgICAgICBwdCxcbiAgICAgICAgaTtcblxuICAgIGlmICgoIXZhcnMgfHwgdmFycyA9PT0gXCJhbGxcIikgJiYgX2FycmF5c01hdGNoKHBhcnNlZFRhcmdldHMsIGtpbGxpbmdUYXJnZXRzKSkge1xuICAgICAgdmFycyA9PT0gXCJhbGxcIiAmJiAodGhpcy5fcHQgPSAwKTtcbiAgICAgIHJldHVybiBfaW50ZXJydXB0KHRoaXMpO1xuICAgIH1cblxuICAgIG92ZXJ3cml0dGVuUHJvcHMgPSB0aGlzLl9vcCA9IHRoaXMuX29wIHx8IFtdO1xuXG4gICAgaWYgKHZhcnMgIT09IFwiYWxsXCIpIHtcbiAgICAgIC8vc28gcGVvcGxlIGNhbiBwYXNzIGluIGEgY29tbWEtZGVsaW1pdGVkIGxpc3Qgb2YgcHJvcGVydHkgbmFtZXNcbiAgICAgIGlmIChfaXNTdHJpbmcodmFycykpIHtcbiAgICAgICAgcCA9IHt9O1xuXG4gICAgICAgIF9mb3JFYWNoTmFtZSh2YXJzLCBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgIHJldHVybiBwW25hbWVdID0gMTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFycyA9IHA7XG4gICAgICB9XG5cbiAgICAgIHZhcnMgPSBfYWRkQWxpYXNlc1RvVmFycyhwYXJzZWRUYXJnZXRzLCB2YXJzKTtcbiAgICB9XG5cbiAgICBpID0gcGFyc2VkVGFyZ2V0cy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBpZiAofmtpbGxpbmdUYXJnZXRzLmluZGV4T2YocGFyc2VkVGFyZ2V0c1tpXSkpIHtcbiAgICAgICAgY3VyTG9va3VwID0gcHJvcFR3ZWVuTG9va3VwW2ldO1xuXG4gICAgICAgIGlmICh2YXJzID09PSBcImFsbFwiKSB7XG4gICAgICAgICAgb3ZlcndyaXR0ZW5Qcm9wc1tpXSA9IHZhcnM7XG4gICAgICAgICAgcHJvcHMgPSBjdXJMb29rdXA7XG4gICAgICAgICAgY3VyT3ZlcndyaXRlUHJvcHMgPSB7fTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjdXJPdmVyd3JpdGVQcm9wcyA9IG92ZXJ3cml0dGVuUHJvcHNbaV0gPSBvdmVyd3JpdHRlblByb3BzW2ldIHx8IHt9O1xuICAgICAgICAgIHByb3BzID0gdmFycztcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAocCBpbiBwcm9wcykge1xuICAgICAgICAgIHB0ID0gY3VyTG9va3VwICYmIGN1ckxvb2t1cFtwXTtcblxuICAgICAgICAgIGlmIChwdCkge1xuICAgICAgICAgICAgaWYgKCEoXCJraWxsXCIgaW4gcHQuZCkgfHwgcHQuZC5raWxsKHApID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgIF9yZW1vdmVMaW5rZWRMaXN0SXRlbSh0aGlzLCBwdCwgXCJfcHRcIik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRlbGV0ZSBjdXJMb29rdXBbcF07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGN1ck92ZXJ3cml0ZVByb3BzICE9PSBcImFsbFwiKSB7XG4gICAgICAgICAgICBjdXJPdmVyd3JpdGVQcm9wc1twXSA9IDE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5faW5pdHRlZCAmJiAhdGhpcy5fcHQgJiYgZmlyc3RQVCAmJiBfaW50ZXJydXB0KHRoaXMpOyAvL2lmIGFsbCB0d2VlbmluZyBwcm9wZXJ0aWVzIGFyZSBraWxsZWQsIGtpbGwgdGhlIHR3ZWVuLiBXaXRob3V0IHRoaXMgbGluZSwgaWYgdGhlcmUncyBhIHR3ZWVuIHdpdGggbXVsdGlwbGUgdGFyZ2V0cyBhbmQgdGhlbiB5b3Uga2lsbFR3ZWVuc09mKCkgZWFjaCB0YXJnZXQgaW5kaXZpZHVhbGx5LCB0aGUgdHdlZW4gd291bGQgdGVjaG5pY2FsbHkgc3RpbGwgcmVtYWluIGFjdGl2ZSBhbmQgZmlyZSBpdHMgb25Db21wbGV0ZSBldmVuIHRob3VnaCB0aGVyZSBhcmVuJ3QgYW55IG1vcmUgcHJvcGVydGllcyB0d2VlbmluZy5cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIFR3ZWVuLnRvID0gZnVuY3Rpb24gdG8odGFyZ2V0cywgdmFycykge1xuICAgIHJldHVybiBuZXcgVHdlZW4odGFyZ2V0cywgdmFycywgYXJndW1lbnRzWzJdKTtcbiAgfTtcblxuICBUd2Vlbi5mcm9tID0gZnVuY3Rpb24gZnJvbSh0YXJnZXRzLCB2YXJzKSB7XG4gICAgcmV0dXJuIF9jcmVhdGVUd2VlblR5cGUoMSwgYXJndW1lbnRzKTtcbiAgfTtcblxuICBUd2Vlbi5kZWxheWVkQ2FsbCA9IGZ1bmN0aW9uIGRlbGF5ZWRDYWxsKGRlbGF5LCBjYWxsYmFjaywgcGFyYW1zLCBzY29wZSkge1xuICAgIHJldHVybiBuZXcgVHdlZW4oY2FsbGJhY2ssIDAsIHtcbiAgICAgIGltbWVkaWF0ZVJlbmRlcjogZmFsc2UsXG4gICAgICBsYXp5OiBmYWxzZSxcbiAgICAgIG92ZXJ3cml0ZTogZmFsc2UsXG4gICAgICBkZWxheTogZGVsYXksXG4gICAgICBvbkNvbXBsZXRlOiBjYWxsYmFjayxcbiAgICAgIG9uUmV2ZXJzZUNvbXBsZXRlOiBjYWxsYmFjayxcbiAgICAgIG9uQ29tcGxldGVQYXJhbXM6IHBhcmFtcyxcbiAgICAgIG9uUmV2ZXJzZUNvbXBsZXRlUGFyYW1zOiBwYXJhbXMsXG4gICAgICBjYWxsYmFja1Njb3BlOiBzY29wZVxuICAgIH0pOyAvLyB3ZSBtdXN0IHVzZSBvblJldmVyc2VDb21wbGV0ZSB0b28gZm9yIHRoaW5ncyBsaWtlIHRpbWVsaW5lLmFkZCgoKSA9PiB7Li4ufSkgd2hpY2ggc2hvdWxkIGJlIHRyaWdnZXJlZCBpbiBCT1RIIGRpcmVjdGlvbnMgKGZvcndhcmQgYW5kIHJldmVyc2UpXG4gIH07XG5cbiAgVHdlZW4uZnJvbVRvID0gZnVuY3Rpb24gZnJvbVRvKHRhcmdldHMsIGZyb21WYXJzLCB0b1ZhcnMpIHtcbiAgICByZXR1cm4gX2NyZWF0ZVR3ZWVuVHlwZSgyLCBhcmd1bWVudHMpO1xuICB9O1xuXG4gIFR3ZWVuLnNldCA9IGZ1bmN0aW9uIHNldCh0YXJnZXRzLCB2YXJzKSB7XG4gICAgdmFycy5kdXJhdGlvbiA9IDA7XG4gICAgdmFycy5yZXBlYXREZWxheSB8fCAodmFycy5yZXBlYXQgPSAwKTtcbiAgICByZXR1cm4gbmV3IFR3ZWVuKHRhcmdldHMsIHZhcnMpO1xuICB9O1xuXG4gIFR3ZWVuLmtpbGxUd2VlbnNPZiA9IGZ1bmN0aW9uIGtpbGxUd2VlbnNPZih0YXJnZXRzLCBwcm9wcywgb25seUFjdGl2ZSkge1xuICAgIHJldHVybiBfZ2xvYmFsVGltZWxpbmUua2lsbFR3ZWVuc09mKHRhcmdldHMsIHByb3BzLCBvbmx5QWN0aXZlKTtcbiAgfTtcblxuICByZXR1cm4gVHdlZW47XG59KEFuaW1hdGlvbik7XG5cbl9zZXREZWZhdWx0cyhUd2Vlbi5wcm90b3R5cGUsIHtcbiAgX3RhcmdldHM6IFtdLFxuICBfbGF6eTogMCxcbiAgX3N0YXJ0QXQ6IDAsXG4gIF9vcDogMCxcbiAgX29uSW5pdDogMFxufSk7IC8vYWRkIHRoZSBwZXJ0aW5lbnQgdGltZWxpbmUgbWV0aG9kcyB0byBUd2VlbiBpbnN0YW5jZXMgc28gdGhhdCB1c2VycyBjYW4gY2hhaW4gY29udmVuaWVudGx5IGFuZCBjcmVhdGUgYSB0aW1lbGluZSBhdXRvbWF0aWNhbGx5LiAocmVtb3ZlZCBkdWUgdG8gY29uY2VybnMgdGhhdCBpdCdkIHVsdGltYXRlbHkgYWRkIHRvIG1vcmUgY29uZnVzaW9uIGVzcGVjaWFsbHkgZm9yIGJlZ2lubmVycylcbi8vIF9mb3JFYWNoTmFtZShcInRvLGZyb20sZnJvbVRvLHNldCxjYWxsLGFkZCxhZGRMYWJlbCxhZGRQYXVzZVwiLCBuYW1lID0+IHtcbi8vIFx0VHdlZW4ucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24oKSB7XG4vLyBcdFx0bGV0IHRsID0gbmV3IFRpbWVsaW5lKCk7XG4vLyBcdFx0cmV0dXJuIF9hZGRUb1RpbWVsaW5lKHRsLCB0aGlzKVtuYW1lXS5hcHBseSh0bCwgdG9BcnJheShhcmd1bWVudHMpKTtcbi8vIFx0fVxuLy8gfSk7XG4vL2ZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LiBMZXZlcmFnZSB0aGUgdGltZWxpbmUgY2FsbHMuXG5cblxuX2ZvckVhY2hOYW1lKFwic3RhZ2dlclRvLHN0YWdnZXJGcm9tLHN0YWdnZXJGcm9tVG9cIiwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgVHdlZW5bbmFtZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRsID0gbmV3IFRpbWVsaW5lKCksXG4gICAgICAgIHBhcmFtcyA9IF9zbGljZS5jYWxsKGFyZ3VtZW50cywgMCk7XG5cbiAgICBwYXJhbXMuc3BsaWNlKG5hbWUgPT09IFwic3RhZ2dlckZyb21Ub1wiID8gNSA6IDQsIDAsIDApO1xuICAgIHJldHVybiB0bFtuYW1lXS5hcHBseSh0bCwgcGFyYW1zKTtcbiAgfTtcbn0pO1xuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBQUk9QVFdFRU5cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuXG52YXIgX3NldHRlclBsYWluID0gZnVuY3Rpb24gX3NldHRlclBsYWluKHRhcmdldCwgcHJvcGVydHksIHZhbHVlKSB7XG4gIHJldHVybiB0YXJnZXRbcHJvcGVydHldID0gdmFsdWU7XG59LFxuICAgIF9zZXR0ZXJGdW5jID0gZnVuY3Rpb24gX3NldHRlckZ1bmModGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgcmV0dXJuIHRhcmdldFtwcm9wZXJ0eV0odmFsdWUpO1xufSxcbiAgICBfc2V0dGVyRnVuY1dpdGhQYXJhbSA9IGZ1bmN0aW9uIF9zZXR0ZXJGdW5jV2l0aFBhcmFtKHRhcmdldCwgcHJvcGVydHksIHZhbHVlLCBkYXRhKSB7XG4gIHJldHVybiB0YXJnZXRbcHJvcGVydHldKGRhdGEuZnAsIHZhbHVlKTtcbn0sXG4gICAgX3NldHRlckF0dHJpYnV0ZSA9IGZ1bmN0aW9uIF9zZXR0ZXJBdHRyaWJ1dGUodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgcmV0dXJuIHRhcmdldC5zZXRBdHRyaWJ1dGUocHJvcGVydHksIHZhbHVlKTtcbn0sXG4gICAgX2dldFNldHRlciA9IGZ1bmN0aW9uIF9nZXRTZXR0ZXIodGFyZ2V0LCBwcm9wZXJ0eSkge1xuICByZXR1cm4gX2lzRnVuY3Rpb24odGFyZ2V0W3Byb3BlcnR5XSkgPyBfc2V0dGVyRnVuYyA6IF9pc1VuZGVmaW5lZCh0YXJnZXRbcHJvcGVydHldKSAmJiB0YXJnZXQuc2V0QXR0cmlidXRlID8gX3NldHRlckF0dHJpYnV0ZSA6IF9zZXR0ZXJQbGFpbjtcbn0sXG4gICAgX3JlbmRlclBsYWluID0gZnVuY3Rpb24gX3JlbmRlclBsYWluKHJhdGlvLCBkYXRhKSB7XG4gIHJldHVybiBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgTWF0aC5yb3VuZCgoZGF0YS5zICsgZGF0YS5jICogcmF0aW8pICogMTAwMDAwMCkgLyAxMDAwMDAwLCBkYXRhKTtcbn0sXG4gICAgX3JlbmRlckJvb2xlYW4gPSBmdW5jdGlvbiBfcmVuZGVyQm9vbGVhbihyYXRpbywgZGF0YSkge1xuICByZXR1cm4gZGF0YS5zZXQoZGF0YS50LCBkYXRhLnAsICEhKGRhdGEucyArIGRhdGEuYyAqIHJhdGlvKSwgZGF0YSk7XG59LFxuICAgIF9yZW5kZXJDb21wbGV4U3RyaW5nID0gZnVuY3Rpb24gX3JlbmRlckNvbXBsZXhTdHJpbmcocmF0aW8sIGRhdGEpIHtcbiAgdmFyIHB0ID0gZGF0YS5fcHQsXG4gICAgICBzID0gXCJcIjtcblxuICBpZiAoIXJhdGlvICYmIGRhdGEuYikge1xuICAgIC8vYiA9IGJlZ2lubmluZyBzdHJpbmdcbiAgICBzID0gZGF0YS5iO1xuICB9IGVsc2UgaWYgKHJhdGlvID09PSAxICYmIGRhdGEuZSkge1xuICAgIC8vZSA9IGVuZGluZyBzdHJpbmdcbiAgICBzID0gZGF0YS5lO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChwdCkge1xuICAgICAgcyA9IHB0LnAgKyAocHQubSA/IHB0Lm0ocHQucyArIHB0LmMgKiByYXRpbykgOiBNYXRoLnJvdW5kKChwdC5zICsgcHQuYyAqIHJhdGlvKSAqIDEwMDAwKSAvIDEwMDAwKSArIHM7IC8vd2UgdXNlIHRoZSBcInBcIiBwcm9wZXJ0eSBmb3IgdGhlIHRleHQgaW5iZXR3ZWVuIChsaWtlIGEgc3VmZml4KS4gQW5kIGluIHRoZSBjb250ZXh0IG9mIGEgY29tcGxleCBzdHJpbmcsIHRoZSBtb2RpZmllciAobSkgaXMgdHlwaWNhbGx5IGp1c3QgTWF0aC5yb3VuZCgpLCBsaWtlIGZvciBSR0IgY29sb3JzLlxuXG4gICAgICBwdCA9IHB0Ll9uZXh0O1xuICAgIH1cblxuICAgIHMgKz0gZGF0YS5jOyAvL3dlIHVzZSB0aGUgXCJjXCIgb2YgdGhlIFByb3BUd2VlbiB0byBzdG9yZSB0aGUgZmluYWwgY2h1bmsgb2Ygbm9uLW51bWVyaWMgdGV4dC5cbiAgfVxuXG4gIGRhdGEuc2V0KGRhdGEudCwgZGF0YS5wLCBzLCBkYXRhKTtcbn0sXG4gICAgX3JlbmRlclByb3BUd2VlbnMgPSBmdW5jdGlvbiBfcmVuZGVyUHJvcFR3ZWVucyhyYXRpbywgZGF0YSkge1xuICB2YXIgcHQgPSBkYXRhLl9wdDtcblxuICB3aGlsZSAocHQpIHtcbiAgICBwdC5yKHJhdGlvLCBwdC5kKTtcbiAgICBwdCA9IHB0Ll9uZXh0O1xuICB9XG59LFxuICAgIF9hZGRQbHVnaW5Nb2RpZmllciA9IGZ1bmN0aW9uIF9hZGRQbHVnaW5Nb2RpZmllcihtb2RpZmllciwgdHdlZW4sIHRhcmdldCwgcHJvcGVydHkpIHtcbiAgdmFyIHB0ID0gdGhpcy5fcHQsXG4gICAgICBuZXh0O1xuXG4gIHdoaWxlIChwdCkge1xuICAgIG5leHQgPSBwdC5fbmV4dDtcbiAgICBwdC5wID09PSBwcm9wZXJ0eSAmJiBwdC5tb2RpZmllcihtb2RpZmllciwgdHdlZW4sIHRhcmdldCk7XG4gICAgcHQgPSBuZXh0O1xuICB9XG59LFxuICAgIF9raWxsUHJvcFR3ZWVuc09mID0gZnVuY3Rpb24gX2tpbGxQcm9wVHdlZW5zT2YocHJvcGVydHkpIHtcbiAgdmFyIHB0ID0gdGhpcy5fcHQsXG4gICAgICBoYXNOb25EZXBlbmRlbnRSZW1haW5pbmcsXG4gICAgICBuZXh0O1xuXG4gIHdoaWxlIChwdCkge1xuICAgIG5leHQgPSBwdC5fbmV4dDtcblxuICAgIGlmIChwdC5wID09PSBwcm9wZXJ0eSAmJiAhcHQub3AgfHwgcHQub3AgPT09IHByb3BlcnR5KSB7XG4gICAgICBfcmVtb3ZlTGlua2VkTGlzdEl0ZW0odGhpcywgcHQsIFwiX3B0XCIpO1xuICAgIH0gZWxzZSBpZiAoIXB0LmRlcCkge1xuICAgICAgaGFzTm9uRGVwZW5kZW50UmVtYWluaW5nID0gMTtcbiAgICB9XG5cbiAgICBwdCA9IG5leHQ7XG4gIH1cblxuICByZXR1cm4gIWhhc05vbkRlcGVuZGVudFJlbWFpbmluZztcbn0sXG4gICAgX3NldHRlcldpdGhNb2RpZmllciA9IGZ1bmN0aW9uIF9zZXR0ZXJXaXRoTW9kaWZpZXIodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUsIGRhdGEpIHtcbiAgZGF0YS5tU2V0KHRhcmdldCwgcHJvcGVydHksIGRhdGEubS5jYWxsKGRhdGEudHdlZW4sIHZhbHVlLCBkYXRhLm10KSwgZGF0YSk7XG59LFxuICAgIF9zb3J0UHJvcFR3ZWVuc0J5UHJpb3JpdHkgPSBmdW5jdGlvbiBfc29ydFByb3BUd2VlbnNCeVByaW9yaXR5KHBhcmVudCkge1xuICB2YXIgcHQgPSBwYXJlbnQuX3B0LFxuICAgICAgbmV4dCxcbiAgICAgIHB0MixcbiAgICAgIGZpcnN0LFxuICAgICAgbGFzdDsgLy9zb3J0cyB0aGUgUHJvcFR3ZWVuIGxpbmtlZCBsaXN0IGluIG9yZGVyIG9mIHByaW9yaXR5IGJlY2F1c2Ugc29tZSBwbHVnaW5zIG5lZWQgdG8gZG8gdGhlaXIgd29yayBhZnRlciBBTEwgb2YgdGhlIFByb3BUd2VlbnMgd2VyZSBjcmVhdGVkIChsaWtlIFJvdW5kUHJvcHNQbHVnaW4gYW5kIE1vZGlmaWVyc1BsdWdpbilcblxuICB3aGlsZSAocHQpIHtcbiAgICBuZXh0ID0gcHQuX25leHQ7XG4gICAgcHQyID0gZmlyc3Q7XG5cbiAgICB3aGlsZSAocHQyICYmIHB0Mi5wciA+IHB0LnByKSB7XG4gICAgICBwdDIgPSBwdDIuX25leHQ7XG4gICAgfVxuXG4gICAgaWYgKHB0Ll9wcmV2ID0gcHQyID8gcHQyLl9wcmV2IDogbGFzdCkge1xuICAgICAgcHQuX3ByZXYuX25leHQgPSBwdDtcbiAgICB9IGVsc2Uge1xuICAgICAgZmlyc3QgPSBwdDtcbiAgICB9XG5cbiAgICBpZiAocHQuX25leHQgPSBwdDIpIHtcbiAgICAgIHB0Mi5fcHJldiA9IHB0O1xuICAgIH0gZWxzZSB7XG4gICAgICBsYXN0ID0gcHQ7XG4gICAgfVxuXG4gICAgcHQgPSBuZXh0O1xuICB9XG5cbiAgcGFyZW50Ll9wdCA9IGZpcnN0O1xufTsgLy9Qcm9wVHdlZW4ga2V5OiB0ID0gdGFyZ2V0LCBwID0gcHJvcCwgciA9IHJlbmRlcmVyLCBkID0gZGF0YSwgcyA9IHN0YXJ0LCBjID0gY2hhbmdlLCBvcCA9IG92ZXJ3cml0ZVByb3BlcnR5IChPTkxZIHBvcHVsYXRlZCB3aGVuIGl0J3MgZGlmZmVyZW50IHRoYW4gcCksIHByID0gcHJpb3JpdHksIF9uZXh0L19wcmV2IGZvciB0aGUgbGlua2VkIGxpc3Qgc2libGluZ3MsIHNldCA9IHNldHRlciwgbSA9IG1vZGlmaWVyLCBtU2V0ID0gbW9kaWZpZXJTZXR0ZXIgKHRoZSBvcmlnaW5hbCBzZXR0ZXIsIGJlZm9yZSBhIG1vZGlmaWVyIHdhcyBhZGRlZClcblxuXG5leHBvcnQgdmFyIFByb3BUd2VlbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFByb3BUd2VlbihuZXh0LCB0YXJnZXQsIHByb3AsIHN0YXJ0LCBjaGFuZ2UsIHJlbmRlcmVyLCBkYXRhLCBzZXR0ZXIsIHByaW9yaXR5KSB7XG4gICAgdGhpcy50ID0gdGFyZ2V0O1xuICAgIHRoaXMucyA9IHN0YXJ0O1xuICAgIHRoaXMuYyA9IGNoYW5nZTtcbiAgICB0aGlzLnAgPSBwcm9wO1xuICAgIHRoaXMuciA9IHJlbmRlcmVyIHx8IF9yZW5kZXJQbGFpbjtcbiAgICB0aGlzLmQgPSBkYXRhIHx8IHRoaXM7XG4gICAgdGhpcy5zZXQgPSBzZXR0ZXIgfHwgX3NldHRlclBsYWluO1xuICAgIHRoaXMucHIgPSBwcmlvcml0eSB8fCAwO1xuICAgIHRoaXMuX25leHQgPSBuZXh0O1xuXG4gICAgaWYgKG5leHQpIHtcbiAgICAgIG5leHQuX3ByZXYgPSB0aGlzO1xuICAgIH1cbiAgfVxuXG4gIHZhciBfcHJvdG80ID0gUHJvcFR3ZWVuLnByb3RvdHlwZTtcblxuICBfcHJvdG80Lm1vZGlmaWVyID0gZnVuY3Rpb24gbW9kaWZpZXIoZnVuYywgdHdlZW4sIHRhcmdldCkge1xuICAgIHRoaXMubVNldCA9IHRoaXMubVNldCB8fCB0aGlzLnNldDsgLy9pbiBjYXNlIGl0IHdhcyBhbHJlYWR5IHNldCAoYSBQcm9wVHdlZW4gY2FuIG9ubHkgaGF2ZSBvbmUgbW9kaWZpZXIpXG5cbiAgICB0aGlzLnNldCA9IF9zZXR0ZXJXaXRoTW9kaWZpZXI7XG4gICAgdGhpcy5tID0gZnVuYztcbiAgICB0aGlzLm10ID0gdGFyZ2V0OyAvL21vZGlmaWVyIHRhcmdldFxuXG4gICAgdGhpcy50d2VlbiA9IHR3ZWVuO1xuICB9O1xuXG4gIHJldHVybiBQcm9wVHdlZW47XG59KCk7IC8vSW5pdGlhbGl6YXRpb24gdGFza3NcblxuX2ZvckVhY2hOYW1lKF9jYWxsYmFja05hbWVzICsgXCJwYXJlbnQsZHVyYXRpb24sZWFzZSxkZWxheSxvdmVyd3JpdGUscnVuQmFja3dhcmRzLHN0YXJ0QXQseW95byxpbW1lZGlhdGVSZW5kZXIscmVwZWF0LHJlcGVhdERlbGF5LGRhdGEscGF1c2VkLHJldmVyc2VkLGxhenksY2FsbGJhY2tTY29wZSxzdHJpbmdGaWx0ZXIsaWQseW95b0Vhc2Usc3RhZ2dlcixpbmhlcml0LHJlcGVhdFJlZnJlc2gsa2V5ZnJhbWVzLGF1dG9SZXZlcnQsc2Nyb2xsVHJpZ2dlclwiLCBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gX3Jlc2VydmVkUHJvcHNbbmFtZV0gPSAxO1xufSk7XG5cbl9nbG9iYWxzLlR3ZWVuTWF4ID0gX2dsb2JhbHMuVHdlZW5MaXRlID0gVHdlZW47XG5fZ2xvYmFscy5UaW1lbGluZUxpdGUgPSBfZ2xvYmFscy5UaW1lbGluZU1heCA9IFRpbWVsaW5lO1xuX2dsb2JhbFRpbWVsaW5lID0gbmV3IFRpbWVsaW5lKHtcbiAgc29ydENoaWxkcmVuOiBmYWxzZSxcbiAgZGVmYXVsdHM6IF9kZWZhdWx0cyxcbiAgYXV0b1JlbW92ZUNoaWxkcmVuOiB0cnVlLFxuICBpZDogXCJyb290XCIsXG4gIHNtb290aENoaWxkVGltaW5nOiB0cnVlXG59KTtcbl9jb25maWcuc3RyaW5nRmlsdGVyID0gX2NvbG9yU3RyaW5nRmlsdGVyO1xuXG52YXIgX21lZGlhID0gW10sXG4gICAgX2xpc3RlbmVycyA9IHt9LFxuICAgIF9lbXB0eUFycmF5ID0gW10sXG4gICAgX2xhc3RNZWRpYVRpbWUgPSAwLFxuICAgIF9kaXNwYXRjaCA9IGZ1bmN0aW9uIF9kaXNwYXRjaCh0eXBlKSB7XG4gIHJldHVybiAoX2xpc3RlbmVyc1t0eXBlXSB8fCBfZW1wdHlBcnJheSkubWFwKGZ1bmN0aW9uIChmKSB7XG4gICAgcmV0dXJuIGYoKTtcbiAgfSk7XG59LFxuICAgIF9vbk1lZGlhQ2hhbmdlID0gZnVuY3Rpb24gX29uTWVkaWFDaGFuZ2UoKSB7XG4gIHZhciB0aW1lID0gRGF0ZS5ub3coKSxcbiAgICAgIG1hdGNoZXMgPSBbXTtcblxuICBpZiAodGltZSAtIF9sYXN0TWVkaWFUaW1lID4gMikge1xuICAgIF9kaXNwYXRjaChcIm1hdGNoTWVkaWFJbml0XCIpO1xuXG4gICAgX21lZGlhLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAgIHZhciBxdWVyaWVzID0gYy5xdWVyaWVzLFxuICAgICAgICAgIGNvbmRpdGlvbnMgPSBjLmNvbmRpdGlvbnMsXG4gICAgICAgICAgbWF0Y2gsXG4gICAgICAgICAgcCxcbiAgICAgICAgICBhbnlNYXRjaCxcbiAgICAgICAgICB0b2dnbGVkO1xuXG4gICAgICBmb3IgKHAgaW4gcXVlcmllcykge1xuICAgICAgICBtYXRjaCA9IF93aW4ubWF0Y2hNZWRpYShxdWVyaWVzW3BdKS5tYXRjaGVzOyAvLyBGaXJlZm94IGRvZXNuJ3QgdXBkYXRlIHRoZSBcIm1hdGNoZXNcIiBwcm9wZXJ0eSBvZiB0aGUgTWVkaWFRdWVyeUxpc3Qgb2JqZWN0IGNvcnJlY3RseSAtIGl0IG9ubHkgZG9lcyBzbyBhcyBpdCBjYWxscyBpdHMgY2hhbmdlIGhhbmRsZXIgLSBzbyB3ZSBtdXN0IHJlLWNyZWF0ZSBhIG1lZGlhIHF1ZXJ5IGhlcmUgdG8gZW5zdXJlIGl0J3MgYWNjdXJhdGUuXG5cbiAgICAgICAgbWF0Y2ggJiYgKGFueU1hdGNoID0gMSk7XG5cbiAgICAgICAgaWYgKG1hdGNoICE9PSBjb25kaXRpb25zW3BdKSB7XG4gICAgICAgICAgY29uZGl0aW9uc1twXSA9IG1hdGNoO1xuICAgICAgICAgIHRvZ2dsZWQgPSAxO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0b2dnbGVkKSB7XG4gICAgICAgIGMucmV2ZXJ0KCk7XG4gICAgICAgIGFueU1hdGNoICYmIG1hdGNoZXMucHVzaChjKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF9kaXNwYXRjaChcIm1hdGNoTWVkaWFSZXZlcnRcIik7XG5cbiAgICBtYXRjaGVzLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAgIHJldHVybiBjLm9uTWF0Y2goYyk7XG4gICAgfSk7XG4gICAgX2xhc3RNZWRpYVRpbWUgPSB0aW1lO1xuXG4gICAgX2Rpc3BhdGNoKFwibWF0Y2hNZWRpYVwiKTtcbiAgfVxufTtcblxudmFyIENvbnRleHQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBDb250ZXh0KGZ1bmMsIHNjb3BlKSB7XG4gICAgdGhpcy5zZWxlY3RvciA9IHNjb3BlICYmIHNlbGVjdG9yKHNjb3BlKTtcbiAgICB0aGlzLmRhdGEgPSBbXTtcbiAgICB0aGlzLl9yID0gW107IC8vIHJldHVybmVkL2NsZWFudXAgZnVuY3Rpb25zXG5cbiAgICB0aGlzLmlzUmV2ZXJ0ZWQgPSBmYWxzZTtcbiAgICBmdW5jICYmIHRoaXMuYWRkKGZ1bmMpO1xuICB9XG5cbiAgdmFyIF9wcm90bzUgPSBDb250ZXh0LnByb3RvdHlwZTtcblxuICBfcHJvdG81LmFkZCA9IGZ1bmN0aW9uIGFkZChuYW1lLCBmdW5jLCBzY29wZSkge1xuICAgIGlmIChfaXNGdW5jdGlvbihuYW1lKSkge1xuICAgICAgc2NvcGUgPSBmdW5jO1xuICAgICAgZnVuYyA9IG5hbWU7XG4gICAgICBuYW1lID0gX2lzRnVuY3Rpb247XG4gICAgfVxuXG4gICAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgICBmID0gZnVuY3Rpb24gZigpIHtcbiAgICAgIHZhciBwcmV2ID0gX2NvbnRleHQsXG4gICAgICAgICAgcHJldlNlbGVjdG9yID0gc2VsZi5zZWxlY3RvcixcbiAgICAgICAgICByZXN1bHQ7XG4gICAgICBwcmV2ICYmIHByZXYgIT09IHNlbGYgJiYgcHJldi5kYXRhLnB1c2goc2VsZik7XG4gICAgICBzY29wZSAmJiAoc2VsZi5zZWxlY3RvciA9IHNlbGVjdG9yKHNjb3BlKSk7XG4gICAgICBfY29udGV4dCA9IHNlbGY7XG4gICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KHNlbGYsIGFyZ3VtZW50cyk7XG4gICAgICBfaXNGdW5jdGlvbihyZXN1bHQpICYmIHNlbGYuX3IucHVzaChyZXN1bHQpO1xuICAgICAgX2NvbnRleHQgPSBwcmV2O1xuICAgICAgc2VsZi5zZWxlY3RvciA9IHByZXZTZWxlY3RvcjtcbiAgICAgIHNlbGYuaXNSZXZlcnRlZCA9IGZhbHNlO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgc2VsZi5sYXN0ID0gZjtcbiAgICByZXR1cm4gbmFtZSA9PT0gX2lzRnVuY3Rpb24gPyBmKHNlbGYpIDogbmFtZSA/IHNlbGZbbmFtZV0gPSBmIDogZjtcbiAgfTtcblxuICBfcHJvdG81Lmlnbm9yZSA9IGZ1bmN0aW9uIGlnbm9yZShmdW5jKSB7XG4gICAgdmFyIHByZXYgPSBfY29udGV4dDtcbiAgICBfY29udGV4dCA9IG51bGw7XG4gICAgZnVuYyh0aGlzKTtcbiAgICBfY29udGV4dCA9IHByZXY7XG4gIH07XG5cbiAgX3Byb3RvNS5nZXRUd2VlbnMgPSBmdW5jdGlvbiBnZXRUd2VlbnMoKSB7XG4gICAgdmFyIGEgPSBbXTtcbiAgICB0aGlzLmRhdGEuZm9yRWFjaChmdW5jdGlvbiAoZSkge1xuICAgICAgcmV0dXJuIGUgaW5zdGFuY2VvZiBDb250ZXh0ID8gYS5wdXNoLmFwcGx5KGEsIGUuZ2V0VHdlZW5zKCkpIDogZSBpbnN0YW5jZW9mIFR3ZWVuICYmIGEucHVzaChlKTtcbiAgICB9KTtcbiAgICByZXR1cm4gYTtcbiAgfTtcblxuICBfcHJvdG81LmNsZWFyID0gZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgdGhpcy5fci5sZW5ndGggPSB0aGlzLmRhdGEubGVuZ3RoID0gMDtcbiAgfTtcblxuICBfcHJvdG81LmtpbGwgPSBmdW5jdGlvbiBraWxsKHJldmVydCwgbWF0Y2hNZWRpYSkge1xuICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgaWYgKHJldmVydCkge1xuICAgICAgLy8gc2F2ZSBhcyBhbiBvYmplY3Qgc28gdGhhdCB3ZSBjYW4gY2FjaGUgdGhlIGdsb2JhbFRpbWUgZm9yIGVhY2ggdHdlZW4gdG8gb3B0aW1pemUgcGVyZm9ybWFuY2UgZHVyaW5nIHRoZSBzb3J0XG4gICAgICB0aGlzLmdldFR3ZWVucygpLm1hcChmdW5jdGlvbiAodCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGc6IHQuZ2xvYmFsVGltZSgwKSxcbiAgICAgICAgICB0OiB0XG4gICAgICAgIH07XG4gICAgICB9KS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgIHJldHVybiBiLmcgLSBhLmcgfHwgLTE7XG4gICAgICB9KS5mb3JFYWNoKGZ1bmN0aW9uIChvKSB7XG4gICAgICAgIHJldHVybiBvLnQucmV2ZXJ0KHJldmVydCk7XG4gICAgICB9KTsgLy8gbm90ZTogYWxsIG9mIHRoZSBfc3RhcnRBdCB0d2VlbnMgc2hvdWxkIGJlIHJldmVydGVkIGluIHJldmVyc2Ugb3JkZXIgdGhhdCB0aHkgd2VyZSBjcmVhdGVkLCBhbmQgdGhleSdsbCBhbGwgaGF2ZSB0aGUgc2FtZSBnbG9iYWxUaW1lICgtMSkgc28gdGhlIFwiIHx8IC0xXCIgaW4gdGhlIHNvcnQga2VlcHMgdGhlIG9yZGVyIHByb3Blcmx5LlxuXG4gICAgICB0aGlzLmRhdGEuZm9yRWFjaChmdW5jdGlvbiAoZSkge1xuICAgICAgICByZXR1cm4gIShlIGluc3RhbmNlb2YgQW5pbWF0aW9uKSAmJiBlLnJldmVydCAmJiBlLnJldmVydChyZXZlcnQpO1xuICAgICAgfSk7XG5cbiAgICAgIHRoaXMuX3IuZm9yRWFjaChmdW5jdGlvbiAoZikge1xuICAgICAgICByZXR1cm4gZihyZXZlcnQsIF90aGlzNCk7XG4gICAgICB9KTtcblxuICAgICAgdGhpcy5pc1JldmVydGVkID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kYXRhLmZvckVhY2goZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgcmV0dXJuIGUua2lsbCAmJiBlLmtpbGwoKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHRoaXMuY2xlYXIoKTtcblxuICAgIGlmIChtYXRjaE1lZGlhKSB7XG4gICAgICB2YXIgaSA9IF9tZWRpYS5pbmRleE9mKHRoaXMpO1xuXG4gICAgICAhIX5pICYmIF9tZWRpYS5zcGxpY2UoaSwgMSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90bzUucmV2ZXJ0ID0gZnVuY3Rpb24gcmV2ZXJ0KGNvbmZpZykge1xuICAgIHRoaXMua2lsbChjb25maWcgfHwge30pO1xuICB9O1xuXG4gIHJldHVybiBDb250ZXh0O1xufSgpO1xuXG52YXIgTWF0Y2hNZWRpYSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIE1hdGNoTWVkaWEoc2NvcGUpIHtcbiAgICB0aGlzLmNvbnRleHRzID0gW107XG4gICAgdGhpcy5zY29wZSA9IHNjb3BlO1xuICB9XG5cbiAgdmFyIF9wcm90bzYgPSBNYXRjaE1lZGlhLnByb3RvdHlwZTtcblxuICBfcHJvdG82LmFkZCA9IGZ1bmN0aW9uIGFkZChjb25kaXRpb25zLCBmdW5jLCBzY29wZSkge1xuICAgIF9pc09iamVjdChjb25kaXRpb25zKSB8fCAoY29uZGl0aW9ucyA9IHtcbiAgICAgIG1hdGNoZXM6IGNvbmRpdGlvbnNcbiAgICB9KTtcbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KDAsIHNjb3BlIHx8IHRoaXMuc2NvcGUpLFxuICAgICAgICBjb25kID0gY29udGV4dC5jb25kaXRpb25zID0ge30sXG4gICAgICAgIG1xLFxuICAgICAgICBwLFxuICAgICAgICBhY3RpdmU7XG4gICAgdGhpcy5jb250ZXh0cy5wdXNoKGNvbnRleHQpO1xuICAgIGZ1bmMgPSBjb250ZXh0LmFkZChcIm9uTWF0Y2hcIiwgZnVuYyk7XG4gICAgY29udGV4dC5xdWVyaWVzID0gY29uZGl0aW9ucztcblxuICAgIGZvciAocCBpbiBjb25kaXRpb25zKSB7XG4gICAgICBpZiAocCA9PT0gXCJhbGxcIikge1xuICAgICAgICBhY3RpdmUgPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbXEgPSBfd2luLm1hdGNoTWVkaWEoY29uZGl0aW9uc1twXSk7XG5cbiAgICAgICAgaWYgKG1xKSB7XG4gICAgICAgICAgX21lZGlhLmluZGV4T2YoY29udGV4dCkgPCAwICYmIF9tZWRpYS5wdXNoKGNvbnRleHQpO1xuICAgICAgICAgIChjb25kW3BdID0gbXEubWF0Y2hlcykgJiYgKGFjdGl2ZSA9IDEpO1xuICAgICAgICAgIG1xLmFkZExpc3RlbmVyID8gbXEuYWRkTGlzdGVuZXIoX29uTWVkaWFDaGFuZ2UpIDogbXEuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCBfb25NZWRpYUNoYW5nZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBhY3RpdmUgJiYgZnVuYyhjb250ZXh0KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfSAvLyByZWZyZXNoKCkge1xuICAvLyBcdGxldCB0aW1lID0gX2xhc3RNZWRpYVRpbWUsXG4gIC8vIFx0XHRtZWRpYSA9IF9tZWRpYTtcbiAgLy8gXHRfbGFzdE1lZGlhVGltZSA9IC0xO1xuICAvLyBcdF9tZWRpYSA9IHRoaXMuY29udGV4dHM7XG4gIC8vIFx0X29uTWVkaWFDaGFuZ2UoKTtcbiAgLy8gXHRfbGFzdE1lZGlhVGltZSA9IHRpbWU7XG4gIC8vIFx0X21lZGlhID0gbWVkaWE7XG4gIC8vIH1cbiAgO1xuXG4gIF9wcm90bzYucmV2ZXJ0ID0gZnVuY3Rpb24gcmV2ZXJ0KGNvbmZpZykge1xuICAgIHRoaXMua2lsbChjb25maWcgfHwge30pO1xuICB9O1xuXG4gIF9wcm90bzYua2lsbCA9IGZ1bmN0aW9uIGtpbGwocmV2ZXJ0KSB7XG4gICAgdGhpcy5jb250ZXh0cy5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7XG4gICAgICByZXR1cm4gYy5raWxsKHJldmVydCwgdHJ1ZSk7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIE1hdGNoTWVkaWE7XG59KCk7XG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEdTQVBcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuXG52YXIgX2dzYXAgPSB7XG4gIHJlZ2lzdGVyUGx1Z2luOiBmdW5jdGlvbiByZWdpc3RlclBsdWdpbigpIHtcbiAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICB9XG5cbiAgICBhcmdzLmZvckVhY2goZnVuY3Rpb24gKGNvbmZpZykge1xuICAgICAgcmV0dXJuIF9jcmVhdGVQbHVnaW4oY29uZmlnKTtcbiAgICB9KTtcbiAgfSxcbiAgdGltZWxpbmU6IGZ1bmN0aW9uIHRpbWVsaW5lKHZhcnMpIHtcbiAgICByZXR1cm4gbmV3IFRpbWVsaW5lKHZhcnMpO1xuICB9LFxuICBnZXRUd2VlbnNPZjogZnVuY3Rpb24gZ2V0VHdlZW5zT2YodGFyZ2V0cywgb25seUFjdGl2ZSkge1xuICAgIHJldHVybiBfZ2xvYmFsVGltZWxpbmUuZ2V0VHdlZW5zT2YodGFyZ2V0cywgb25seUFjdGl2ZSk7XG4gIH0sXG4gIGdldFByb3BlcnR5OiBmdW5jdGlvbiBnZXRQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5LCB1bml0LCB1bmNhY2hlKSB7XG4gICAgX2lzU3RyaW5nKHRhcmdldCkgJiYgKHRhcmdldCA9IHRvQXJyYXkodGFyZ2V0KVswXSk7IC8vaW4gY2FzZSBzZWxlY3RvciB0ZXh0IG9yIGFuIGFycmF5IGlzIHBhc3NlZCBpblxuXG4gICAgdmFyIGdldHRlciA9IF9nZXRDYWNoZSh0YXJnZXQgfHwge30pLmdldCxcbiAgICAgICAgZm9ybWF0ID0gdW5pdCA/IF9wYXNzVGhyb3VnaCA6IF9udW1lcmljSWZQb3NzaWJsZTtcblxuICAgIHVuaXQgPT09IFwibmF0aXZlXCIgJiYgKHVuaXQgPSBcIlwiKTtcbiAgICByZXR1cm4gIXRhcmdldCA/IHRhcmdldCA6ICFwcm9wZXJ0eSA/IGZ1bmN0aW9uIChwcm9wZXJ0eSwgdW5pdCwgdW5jYWNoZSkge1xuICAgICAgcmV0dXJuIGZvcm1hdCgoX3BsdWdpbnNbcHJvcGVydHldICYmIF9wbHVnaW5zW3Byb3BlcnR5XS5nZXQgfHwgZ2V0dGVyKSh0YXJnZXQsIHByb3BlcnR5LCB1bml0LCB1bmNhY2hlKSk7XG4gICAgfSA6IGZvcm1hdCgoX3BsdWdpbnNbcHJvcGVydHldICYmIF9wbHVnaW5zW3Byb3BlcnR5XS5nZXQgfHwgZ2V0dGVyKSh0YXJnZXQsIHByb3BlcnR5LCB1bml0LCB1bmNhY2hlKSk7XG4gIH0sXG4gIHF1aWNrU2V0dGVyOiBmdW5jdGlvbiBxdWlja1NldHRlcih0YXJnZXQsIHByb3BlcnR5LCB1bml0KSB7XG4gICAgdGFyZ2V0ID0gdG9BcnJheSh0YXJnZXQpO1xuXG4gICAgaWYgKHRhcmdldC5sZW5ndGggPiAxKSB7XG4gICAgICB2YXIgc2V0dGVycyA9IHRhcmdldC5tYXAoZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgcmV0dXJuIGdzYXAucXVpY2tTZXR0ZXIodCwgcHJvcGVydHksIHVuaXQpO1xuICAgICAgfSksXG4gICAgICAgICAgbCA9IHNldHRlcnMubGVuZ3RoO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgaSA9IGw7XG5cbiAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgIHNldHRlcnNbaV0odmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIHRhcmdldCA9IHRhcmdldFswXSB8fCB7fTtcblxuICAgIHZhciBQbHVnaW4gPSBfcGx1Z2luc1twcm9wZXJ0eV0sXG4gICAgICAgIGNhY2hlID0gX2dldENhY2hlKHRhcmdldCksXG4gICAgICAgIHAgPSBjYWNoZS5oYXJuZXNzICYmIChjYWNoZS5oYXJuZXNzLmFsaWFzZXMgfHwge30pW3Byb3BlcnR5XSB8fCBwcm9wZXJ0eSxcbiAgICAgICAgLy8gaW4gY2FzZSBpdCdzIGFuIGFsaWFzLCBsaWtlIFwicm90YXRlXCIgZm9yIFwicm90YXRpb25cIi5cbiAgICBzZXR0ZXIgPSBQbHVnaW4gPyBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHZhciBwID0gbmV3IFBsdWdpbigpO1xuICAgICAgX3F1aWNrVHdlZW4uX3B0ID0gMDtcbiAgICAgIHAuaW5pdCh0YXJnZXQsIHVuaXQgPyB2YWx1ZSArIHVuaXQgOiB2YWx1ZSwgX3F1aWNrVHdlZW4sIDAsIFt0YXJnZXRdKTtcbiAgICAgIHAucmVuZGVyKDEsIHApO1xuICAgICAgX3F1aWNrVHdlZW4uX3B0ICYmIF9yZW5kZXJQcm9wVHdlZW5zKDEsIF9xdWlja1R3ZWVuKTtcbiAgICB9IDogY2FjaGUuc2V0KHRhcmdldCwgcCk7XG5cbiAgICByZXR1cm4gUGx1Z2luID8gc2V0dGVyIDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICByZXR1cm4gc2V0dGVyKHRhcmdldCwgcCwgdW5pdCA/IHZhbHVlICsgdW5pdCA6IHZhbHVlLCBjYWNoZSwgMSk7XG4gICAgfTtcbiAgfSxcbiAgcXVpY2tUbzogZnVuY3Rpb24gcXVpY2tUbyh0YXJnZXQsIHByb3BlcnR5LCB2YXJzKSB7XG4gICAgdmFyIF9tZXJnZTI7XG5cbiAgICB2YXIgdHdlZW4gPSBnc2FwLnRvKHRhcmdldCwgX21lcmdlKChfbWVyZ2UyID0ge30sIF9tZXJnZTJbcHJvcGVydHldID0gXCIrPTAuMVwiLCBfbWVyZ2UyLnBhdXNlZCA9IHRydWUsIF9tZXJnZTIpLCB2YXJzIHx8IHt9KSksXG4gICAgICAgIGZ1bmMgPSBmdW5jdGlvbiBmdW5jKHZhbHVlLCBzdGFydCwgc3RhcnRJc1JlbGF0aXZlKSB7XG4gICAgICByZXR1cm4gdHdlZW4ucmVzZXRUbyhwcm9wZXJ0eSwgdmFsdWUsIHN0YXJ0LCBzdGFydElzUmVsYXRpdmUpO1xuICAgIH07XG5cbiAgICBmdW5jLnR3ZWVuID0gdHdlZW47XG4gICAgcmV0dXJuIGZ1bmM7XG4gIH0sXG4gIGlzVHdlZW5pbmc6IGZ1bmN0aW9uIGlzVHdlZW5pbmcodGFyZ2V0cykge1xuICAgIHJldHVybiBfZ2xvYmFsVGltZWxpbmUuZ2V0VHdlZW5zT2YodGFyZ2V0cywgdHJ1ZSkubGVuZ3RoID4gMDtcbiAgfSxcbiAgZGVmYXVsdHM6IGZ1bmN0aW9uIGRlZmF1bHRzKHZhbHVlKSB7XG4gICAgdmFsdWUgJiYgdmFsdWUuZWFzZSAmJiAodmFsdWUuZWFzZSA9IF9wYXJzZUVhc2UodmFsdWUuZWFzZSwgX2RlZmF1bHRzLmVhc2UpKTtcbiAgICByZXR1cm4gX21lcmdlRGVlcChfZGVmYXVsdHMsIHZhbHVlIHx8IHt9KTtcbiAgfSxcbiAgY29uZmlnOiBmdW5jdGlvbiBjb25maWcodmFsdWUpIHtcbiAgICByZXR1cm4gX21lcmdlRGVlcChfY29uZmlnLCB2YWx1ZSB8fCB7fSk7XG4gIH0sXG4gIHJlZ2lzdGVyRWZmZWN0OiBmdW5jdGlvbiByZWdpc3RlckVmZmVjdChfcmVmMykge1xuICAgIHZhciBuYW1lID0gX3JlZjMubmFtZSxcbiAgICAgICAgZWZmZWN0ID0gX3JlZjMuZWZmZWN0LFxuICAgICAgICBwbHVnaW5zID0gX3JlZjMucGx1Z2lucyxcbiAgICAgICAgZGVmYXVsdHMgPSBfcmVmMy5kZWZhdWx0cyxcbiAgICAgICAgZXh0ZW5kVGltZWxpbmUgPSBfcmVmMy5leHRlbmRUaW1lbGluZTtcbiAgICAocGx1Z2lucyB8fCBcIlwiKS5zcGxpdChcIixcIikuZm9yRWFjaChmdW5jdGlvbiAocGx1Z2luTmFtZSkge1xuICAgICAgcmV0dXJuIHBsdWdpbk5hbWUgJiYgIV9wbHVnaW5zW3BsdWdpbk5hbWVdICYmICFfZ2xvYmFsc1twbHVnaW5OYW1lXSAmJiBfd2FybihuYW1lICsgXCIgZWZmZWN0IHJlcXVpcmVzIFwiICsgcGx1Z2luTmFtZSArIFwiIHBsdWdpbi5cIik7XG4gICAgfSk7XG5cbiAgICBfZWZmZWN0c1tuYW1lXSA9IGZ1bmN0aW9uICh0YXJnZXRzLCB2YXJzLCB0bCkge1xuICAgICAgcmV0dXJuIGVmZmVjdCh0b0FycmF5KHRhcmdldHMpLCBfc2V0RGVmYXVsdHModmFycyB8fCB7fSwgZGVmYXVsdHMpLCB0bCk7XG4gICAgfTtcblxuICAgIGlmIChleHRlbmRUaW1lbGluZSkge1xuICAgICAgVGltZWxpbmUucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24gKHRhcmdldHMsIHZhcnMsIHBvc2l0aW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFkZChfZWZmZWN0c1tuYW1lXSh0YXJnZXRzLCBfaXNPYmplY3QodmFycykgPyB2YXJzIDogKHBvc2l0aW9uID0gdmFycykgJiYge30sIHRoaXMpLCBwb3NpdGlvbik7XG4gICAgICB9O1xuICAgIH1cbiAgfSxcbiAgcmVnaXN0ZXJFYXNlOiBmdW5jdGlvbiByZWdpc3RlckVhc2UobmFtZSwgZWFzZSkge1xuICAgIF9lYXNlTWFwW25hbWVdID0gX3BhcnNlRWFzZShlYXNlKTtcbiAgfSxcbiAgcGFyc2VFYXNlOiBmdW5jdGlvbiBwYXJzZUVhc2UoZWFzZSwgZGVmYXVsdEVhc2UpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IF9wYXJzZUVhc2UoZWFzZSwgZGVmYXVsdEVhc2UpIDogX2Vhc2VNYXA7XG4gIH0sXG4gIGdldEJ5SWQ6IGZ1bmN0aW9uIGdldEJ5SWQoaWQpIHtcbiAgICByZXR1cm4gX2dsb2JhbFRpbWVsaW5lLmdldEJ5SWQoaWQpO1xuICB9LFxuICBleHBvcnRSb290OiBmdW5jdGlvbiBleHBvcnRSb290KHZhcnMsIGluY2x1ZGVEZWxheWVkQ2FsbHMpIHtcbiAgICBpZiAodmFycyA9PT0gdm9pZCAwKSB7XG4gICAgICB2YXJzID0ge307XG4gICAgfVxuXG4gICAgdmFyIHRsID0gbmV3IFRpbWVsaW5lKHZhcnMpLFxuICAgICAgICBjaGlsZCxcbiAgICAgICAgbmV4dDtcbiAgICB0bC5zbW9vdGhDaGlsZFRpbWluZyA9IF9pc05vdEZhbHNlKHZhcnMuc21vb3RoQ2hpbGRUaW1pbmcpO1xuXG4gICAgX2dsb2JhbFRpbWVsaW5lLnJlbW92ZSh0bCk7XG5cbiAgICB0bC5fZHAgPSAwOyAvL290aGVyd2lzZSBpdCdsbCBnZXQgcmUtYWN0aXZhdGVkIHdoZW4gYWRkaW5nIGNoaWxkcmVuIGFuZCBiZSByZS1pbnRyb2R1Y2VkIGludG8gX2dsb2JhbFRpbWVsaW5lJ3MgbGlua2VkIGxpc3QgKHRoZW4gYWRkZWQgdG8gaXRzZWxmKS5cblxuICAgIHRsLl90aW1lID0gdGwuX3RUaW1lID0gX2dsb2JhbFRpbWVsaW5lLl90aW1lO1xuICAgIGNoaWxkID0gX2dsb2JhbFRpbWVsaW5lLl9maXJzdDtcblxuICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgbmV4dCA9IGNoaWxkLl9uZXh0O1xuXG4gICAgICBpZiAoaW5jbHVkZURlbGF5ZWRDYWxscyB8fCAhKCFjaGlsZC5fZHVyICYmIGNoaWxkIGluc3RhbmNlb2YgVHdlZW4gJiYgY2hpbGQudmFycy5vbkNvbXBsZXRlID09PSBjaGlsZC5fdGFyZ2V0c1swXSkpIHtcbiAgICAgICAgX2FkZFRvVGltZWxpbmUodGwsIGNoaWxkLCBjaGlsZC5fc3RhcnQgLSBjaGlsZC5fZGVsYXkpO1xuICAgICAgfVxuXG4gICAgICBjaGlsZCA9IG5leHQ7XG4gICAgfVxuXG4gICAgX2FkZFRvVGltZWxpbmUoX2dsb2JhbFRpbWVsaW5lLCB0bCwgMCk7XG5cbiAgICByZXR1cm4gdGw7XG4gIH0sXG4gIGNvbnRleHQ6IGZ1bmN0aW9uIGNvbnRleHQoZnVuYywgc2NvcGUpIHtcbiAgICByZXR1cm4gZnVuYyA/IG5ldyBDb250ZXh0KGZ1bmMsIHNjb3BlKSA6IF9jb250ZXh0O1xuICB9LFxuICBtYXRjaE1lZGlhOiBmdW5jdGlvbiBtYXRjaE1lZGlhKHNjb3BlKSB7XG4gICAgcmV0dXJuIG5ldyBNYXRjaE1lZGlhKHNjb3BlKTtcbiAgfSxcbiAgbWF0Y2hNZWRpYVJlZnJlc2g6IGZ1bmN0aW9uIG1hdGNoTWVkaWFSZWZyZXNoKCkge1xuICAgIHJldHVybiBfbWVkaWEuZm9yRWFjaChmdW5jdGlvbiAoYykge1xuICAgICAgdmFyIGNvbmQgPSBjLmNvbmRpdGlvbnMsXG4gICAgICAgICAgZm91bmQsXG4gICAgICAgICAgcDtcblxuICAgICAgZm9yIChwIGluIGNvbmQpIHtcbiAgICAgICAgaWYgKGNvbmRbcF0pIHtcbiAgICAgICAgICBjb25kW3BdID0gZmFsc2U7XG4gICAgICAgICAgZm91bmQgPSAxO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZvdW5kICYmIGMucmV2ZXJ0KCk7XG4gICAgfSkgfHwgX29uTWVkaWFDaGFuZ2UoKTtcbiAgfSxcbiAgYWRkRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBjYWxsYmFjaykge1xuICAgIHZhciBhID0gX2xpc3RlbmVyc1t0eXBlXSB8fCAoX2xpc3RlbmVyc1t0eXBlXSA9IFtdKTtcbiAgICB+YS5pbmRleE9mKGNhbGxiYWNrKSB8fCBhLnB1c2goY2FsbGJhY2spO1xuICB9LFxuICByZW1vdmVFdmVudExpc3RlbmVyOiBmdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGEgPSBfbGlzdGVuZXJzW3R5cGVdLFxuICAgICAgICBpID0gYSAmJiBhLmluZGV4T2YoY2FsbGJhY2spO1xuICAgIGkgPj0gMCAmJiBhLnNwbGljZShpLCAxKTtcbiAgfSxcbiAgdXRpbHM6IHtcbiAgICB3cmFwOiB3cmFwLFxuICAgIHdyYXBZb3lvOiB3cmFwWW95byxcbiAgICBkaXN0cmlidXRlOiBkaXN0cmlidXRlLFxuICAgIHJhbmRvbTogcmFuZG9tLFxuICAgIHNuYXA6IHNuYXAsXG4gICAgbm9ybWFsaXplOiBub3JtYWxpemUsXG4gICAgZ2V0VW5pdDogZ2V0VW5pdCxcbiAgICBjbGFtcDogY2xhbXAsXG4gICAgc3BsaXRDb2xvcjogc3BsaXRDb2xvcixcbiAgICB0b0FycmF5OiB0b0FycmF5LFxuICAgIHNlbGVjdG9yOiBzZWxlY3RvcixcbiAgICBtYXBSYW5nZTogbWFwUmFuZ2UsXG4gICAgcGlwZTogcGlwZSxcbiAgICB1bml0aXplOiB1bml0aXplLFxuICAgIGludGVycG9sYXRlOiBpbnRlcnBvbGF0ZSxcbiAgICBzaHVmZmxlOiBzaHVmZmxlXG4gIH0sXG4gIGluc3RhbGw6IF9pbnN0YWxsLFxuICBlZmZlY3RzOiBfZWZmZWN0cyxcbiAgdGlja2VyOiBfdGlja2VyLFxuICB1cGRhdGVSb290OiBUaW1lbGluZS51cGRhdGVSb290LFxuICBwbHVnaW5zOiBfcGx1Z2lucyxcbiAgZ2xvYmFsVGltZWxpbmU6IF9nbG9iYWxUaW1lbGluZSxcbiAgY29yZToge1xuICAgIFByb3BUd2VlbjogUHJvcFR3ZWVuLFxuICAgIGdsb2JhbHM6IF9hZGRHbG9iYWwsXG4gICAgVHdlZW46IFR3ZWVuLFxuICAgIFRpbWVsaW5lOiBUaW1lbGluZSxcbiAgICBBbmltYXRpb246IEFuaW1hdGlvbixcbiAgICBnZXRDYWNoZTogX2dldENhY2hlLFxuICAgIF9yZW1vdmVMaW5rZWRMaXN0SXRlbTogX3JlbW92ZUxpbmtlZExpc3RJdGVtLFxuICAgIHJldmVydGluZzogZnVuY3Rpb24gcmV2ZXJ0aW5nKCkge1xuICAgICAgcmV0dXJuIF9yZXZlcnRpbmc7XG4gICAgfSxcbiAgICBjb250ZXh0OiBmdW5jdGlvbiBjb250ZXh0KHRvQWRkKSB7XG4gICAgICBpZiAodG9BZGQgJiYgX2NvbnRleHQpIHtcbiAgICAgICAgX2NvbnRleHQuZGF0YS5wdXNoKHRvQWRkKTtcblxuICAgICAgICB0b0FkZC5fY3R4ID0gX2NvbnRleHQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfY29udGV4dDtcbiAgICB9LFxuICAgIHN1cHByZXNzT3ZlcndyaXRlczogZnVuY3Rpb24gc3VwcHJlc3NPdmVyd3JpdGVzKHZhbHVlKSB7XG4gICAgICByZXR1cm4gX3N1cHByZXNzT3ZlcndyaXRlcyA9IHZhbHVlO1xuICAgIH1cbiAgfVxufTtcblxuX2ZvckVhY2hOYW1lKFwidG8sZnJvbSxmcm9tVG8sZGVsYXllZENhbGwsc2V0LGtpbGxUd2VlbnNPZlwiLCBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gX2dzYXBbbmFtZV0gPSBUd2VlbltuYW1lXTtcbn0pO1xuXG5fdGlja2VyLmFkZChUaW1lbGluZS51cGRhdGVSb290KTtcblxuX3F1aWNrVHdlZW4gPSBfZ3NhcC50byh7fSwge1xuICBkdXJhdGlvbjogMFxufSk7IC8vIC0tLS0gRVhUUkEgUExVR0lOUyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG52YXIgX2dldFBsdWdpblByb3BUd2VlbiA9IGZ1bmN0aW9uIF9nZXRQbHVnaW5Qcm9wVHdlZW4ocGx1Z2luLCBwcm9wKSB7XG4gIHZhciBwdCA9IHBsdWdpbi5fcHQ7XG5cbiAgd2hpbGUgKHB0ICYmIHB0LnAgIT09IHByb3AgJiYgcHQub3AgIT09IHByb3AgJiYgcHQuZnAgIT09IHByb3ApIHtcbiAgICBwdCA9IHB0Ll9uZXh0O1xuICB9XG5cbiAgcmV0dXJuIHB0O1xufSxcbiAgICBfYWRkTW9kaWZpZXJzID0gZnVuY3Rpb24gX2FkZE1vZGlmaWVycyh0d2VlbiwgbW9kaWZpZXJzKSB7XG4gIHZhciB0YXJnZXRzID0gdHdlZW4uX3RhcmdldHMsXG4gICAgICBwLFxuICAgICAgaSxcbiAgICAgIHB0O1xuXG4gIGZvciAocCBpbiBtb2RpZmllcnMpIHtcbiAgICBpID0gdGFyZ2V0cy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBwdCA9IHR3ZWVuLl9wdExvb2t1cFtpXVtwXTtcblxuICAgICAgaWYgKHB0ICYmIChwdCA9IHB0LmQpKSB7XG4gICAgICAgIGlmIChwdC5fcHQpIHtcbiAgICAgICAgICAvLyBpcyBhIHBsdWdpblxuICAgICAgICAgIHB0ID0gX2dldFBsdWdpblByb3BUd2VlbihwdCwgcCk7XG4gICAgICAgIH1cblxuICAgICAgICBwdCAmJiBwdC5tb2RpZmllciAmJiBwdC5tb2RpZmllcihtb2RpZmllcnNbcF0sIHR3ZWVuLCB0YXJnZXRzW2ldLCBwKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0sXG4gICAgX2J1aWxkTW9kaWZpZXJQbHVnaW4gPSBmdW5jdGlvbiBfYnVpbGRNb2RpZmllclBsdWdpbihuYW1lLCBtb2RpZmllcikge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IG5hbWUsXG4gICAgcmF3VmFyczogMSxcbiAgICAvL2Rvbid0IHByZS1wcm9jZXNzIGZ1bmN0aW9uLWJhc2VkIHZhbHVlcyBvciBcInJhbmRvbSgpXCIgc3RyaW5ncy5cbiAgICBpbml0OiBmdW5jdGlvbiBpbml0KHRhcmdldCwgdmFycywgdHdlZW4pIHtcbiAgICAgIHR3ZWVuLl9vbkluaXQgPSBmdW5jdGlvbiAodHdlZW4pIHtcbiAgICAgICAgdmFyIHRlbXAsIHA7XG5cbiAgICAgICAgaWYgKF9pc1N0cmluZyh2YXJzKSkge1xuICAgICAgICAgIHRlbXAgPSB7fTtcblxuICAgICAgICAgIF9mb3JFYWNoTmFtZSh2YXJzLCBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRlbXBbbmFtZV0gPSAxO1xuICAgICAgICAgIH0pOyAvL2lmIHRoZSB1c2VyIHBhc3NlcyBpbiBhIGNvbW1hLWRlbGltaXRlZCBsaXN0IG9mIHByb3BlcnR5IG5hbWVzIHRvIHJvdW5kUHJvcHMsIGxpa2UgXCJ4LHlcIiwgd2Ugcm91bmQgdG8gd2hvbGUgbnVtYmVycy5cblxuXG4gICAgICAgICAgdmFycyA9IHRlbXA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobW9kaWZpZXIpIHtcbiAgICAgICAgICB0ZW1wID0ge307XG5cbiAgICAgICAgICBmb3IgKHAgaW4gdmFycykge1xuICAgICAgICAgICAgdGVtcFtwXSA9IG1vZGlmaWVyKHZhcnNbcF0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhcnMgPSB0ZW1wO1xuICAgICAgICB9XG5cbiAgICAgICAgX2FkZE1vZGlmaWVycyh0d2VlbiwgdmFycyk7XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn07IC8vcmVnaXN0ZXIgY29yZSBwbHVnaW5zXG5cblxuZXhwb3J0IHZhciBnc2FwID0gX2dzYXAucmVnaXN0ZXJQbHVnaW4oe1xuICBuYW1lOiBcImF0dHJcIixcbiAgaW5pdDogZnVuY3Rpb24gaW5pdCh0YXJnZXQsIHZhcnMsIHR3ZWVuLCBpbmRleCwgdGFyZ2V0cykge1xuICAgIHZhciBwLCBwdCwgdjtcbiAgICB0aGlzLnR3ZWVuID0gdHdlZW47XG5cbiAgICBmb3IgKHAgaW4gdmFycykge1xuICAgICAgdiA9IHRhcmdldC5nZXRBdHRyaWJ1dGUocCkgfHwgXCJcIjtcbiAgICAgIHB0ID0gdGhpcy5hZGQodGFyZ2V0LCBcInNldEF0dHJpYnV0ZVwiLCAodiB8fCAwKSArIFwiXCIsIHZhcnNbcF0sIGluZGV4LCB0YXJnZXRzLCAwLCAwLCBwKTtcbiAgICAgIHB0Lm9wID0gcDtcbiAgICAgIHB0LmIgPSB2OyAvLyByZWNvcmQgdGhlIGJlZ2lubmluZyB2YWx1ZSBzbyB3ZSBjYW4gcmV2ZXJ0KClcblxuICAgICAgdGhpcy5fcHJvcHMucHVzaChwKTtcbiAgICB9XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKHJhdGlvLCBkYXRhKSB7XG4gICAgdmFyIHB0ID0gZGF0YS5fcHQ7XG5cbiAgICB3aGlsZSAocHQpIHtcbiAgICAgIF9yZXZlcnRpbmcgPyBwdC5zZXQocHQudCwgcHQucCwgcHQuYiwgcHQpIDogcHQucihyYXRpbywgcHQuZCk7IC8vIGlmIHJldmVydGluZywgZ28gYmFjayB0byB0aGUgb3JpZ2luYWwgKHB0LmIpXG5cbiAgICAgIHB0ID0gcHQuX25leHQ7XG4gICAgfVxuICB9XG59LCB7XG4gIG5hbWU6IFwiZW5kQXJyYXlcIixcbiAgaW5pdDogZnVuY3Rpb24gaW5pdCh0YXJnZXQsIHZhbHVlKSB7XG4gICAgdmFyIGkgPSB2YWx1ZS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB0aGlzLmFkZCh0YXJnZXQsIGksIHRhcmdldFtpXSB8fCAwLCB2YWx1ZVtpXSwgMCwgMCwgMCwgMCwgMCwgMSk7XG4gICAgfVxuICB9XG59LCBfYnVpbGRNb2RpZmllclBsdWdpbihcInJvdW5kUHJvcHNcIiwgX3JvdW5kTW9kaWZpZXIpLCBfYnVpbGRNb2RpZmllclBsdWdpbihcIm1vZGlmaWVyc1wiKSwgX2J1aWxkTW9kaWZpZXJQbHVnaW4oXCJzbmFwXCIsIHNuYXApKSB8fCBfZ3NhcDsgLy90byBwcmV2ZW50IHRoZSBjb3JlIHBsdWdpbnMgZnJvbSBiZWluZyBkcm9wcGVkIHZpYSBhZ2dyZXNzaXZlIHRyZWUgc2hha2luZywgd2UgbXVzdCBpbmNsdWRlIHRoZW0gaW4gdGhlIHZhcmlhYmxlIGRlY2xhcmF0aW9uIGluIHRoaXMgd2F5LlxuXG5Ud2Vlbi52ZXJzaW9uID0gVGltZWxpbmUudmVyc2lvbiA9IGdzYXAudmVyc2lvbiA9IFwiMy4xMS4xXCI7XG5fY29yZVJlYWR5ID0gMTtcbl93aW5kb3dFeGlzdHMoKSAmJiBfd2FrZSgpO1xudmFyIFBvd2VyMCA9IF9lYXNlTWFwLlBvd2VyMCxcbiAgICBQb3dlcjEgPSBfZWFzZU1hcC5Qb3dlcjEsXG4gICAgUG93ZXIyID0gX2Vhc2VNYXAuUG93ZXIyLFxuICAgIFBvd2VyMyA9IF9lYXNlTWFwLlBvd2VyMyxcbiAgICBQb3dlcjQgPSBfZWFzZU1hcC5Qb3dlcjQsXG4gICAgTGluZWFyID0gX2Vhc2VNYXAuTGluZWFyLFxuICAgIFF1YWQgPSBfZWFzZU1hcC5RdWFkLFxuICAgIEN1YmljID0gX2Vhc2VNYXAuQ3ViaWMsXG4gICAgUXVhcnQgPSBfZWFzZU1hcC5RdWFydCxcbiAgICBRdWludCA9IF9lYXNlTWFwLlF1aW50LFxuICAgIFN0cm9uZyA9IF9lYXNlTWFwLlN0cm9uZyxcbiAgICBFbGFzdGljID0gX2Vhc2VNYXAuRWxhc3RpYyxcbiAgICBCYWNrID0gX2Vhc2VNYXAuQmFjayxcbiAgICBTdGVwcGVkRWFzZSA9IF9lYXNlTWFwLlN0ZXBwZWRFYXNlLFxuICAgIEJvdW5jZSA9IF9lYXNlTWFwLkJvdW5jZSxcbiAgICBTaW5lID0gX2Vhc2VNYXAuU2luZSxcbiAgICBFeHBvID0gX2Vhc2VNYXAuRXhwbyxcbiAgICBDaXJjID0gX2Vhc2VNYXAuQ2lyYztcbmV4cG9ydCB7IFBvd2VyMCwgUG93ZXIxLCBQb3dlcjIsIFBvd2VyMywgUG93ZXI0LCBMaW5lYXIsIFF1YWQsIEN1YmljLCBRdWFydCwgUXVpbnQsIFN0cm9uZywgRWxhc3RpYywgQmFjaywgU3RlcHBlZEVhc2UsIEJvdW5jZSwgU2luZSwgRXhwbywgQ2lyYyB9O1xuZXhwb3J0IHsgVHdlZW4gYXMgVHdlZW5NYXgsIFR3ZWVuIGFzIFR3ZWVuTGl0ZSwgVGltZWxpbmUgYXMgVGltZWxpbmVNYXgsIFRpbWVsaW5lIGFzIFRpbWVsaW5lTGl0ZSwgZ3NhcCBhcyBkZWZhdWx0LCB3cmFwLCB3cmFwWW95bywgZGlzdHJpYnV0ZSwgcmFuZG9tLCBzbmFwLCBub3JtYWxpemUsIGdldFVuaXQsIGNsYW1wLCBzcGxpdENvbG9yLCB0b0FycmF5LCBzZWxlY3RvciwgbWFwUmFuZ2UsIHBpcGUsIHVuaXRpemUsIGludGVycG9sYXRlLCBzaHVmZmxlIH07IC8vZXhwb3J0IHNvbWUgaW50ZXJuYWwgbWV0aG9kcy9vcm9qZWN0cyBmb3IgdXNlIGluIENTU1BsdWdpbiBzbyB0aGF0IHdlIGNhbiBleHRlcm5hbGl6ZSB0aGF0IGZpbGUgYW5kIGFsbG93IGN1c3RvbSBidWlsZHMgdGhhdCBleGNsdWRlIGl0LlxuXG5leHBvcnQgeyBfZ2V0UHJvcGVydHksIF9udW1FeHAsIF9udW1XaXRoVW5pdEV4cCwgX2lzU3RyaW5nLCBfaXNVbmRlZmluZWQsIF9yZW5kZXJDb21wbGV4U3RyaW5nLCBfcmVsRXhwLCBfc2V0RGVmYXVsdHMsIF9yZW1vdmVMaW5rZWRMaXN0SXRlbSwgX2ZvckVhY2hOYW1lLCBfc29ydFByb3BUd2VlbnNCeVByaW9yaXR5LCBfY29sb3JTdHJpbmdGaWx0ZXIsIF9yZXBsYWNlUmFuZG9tLCBfY2hlY2tQbHVnaW4sIF9wbHVnaW5zLCBfdGlja2VyLCBfY29uZmlnLCBfcm91bmRNb2RpZmllciwgX3JvdW5kLCBfbWlzc2luZ1BsdWdpbiwgX2dldFNldHRlciwgX2dldENhY2hlLCBfY29sb3JFeHAsIF9wYXJzZVJlbGF0aXZlIH07IiwiLyohXG4gKiBDU1NQbHVnaW4gMy4xMS4xXG4gKiBodHRwczovL2dyZWVuc29jay5jb21cbiAqXG4gKiBDb3B5cmlnaHQgMjAwOC0yMDIyLCBHcmVlblNvY2suIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBTdWJqZWN0IHRvIHRoZSB0ZXJtcyBhdCBodHRwczovL2dyZWVuc29jay5jb20vc3RhbmRhcmQtbGljZW5zZSBvciBmb3JcbiAqIENsdWIgR3JlZW5Tb2NrIG1lbWJlcnMsIHRoZSBhZ3JlZW1lbnQgaXNzdWVkIHdpdGggdGhhdCBtZW1iZXJzaGlwLlxuICogQGF1dGhvcjogSmFjayBEb3lsZSwgamFja0BncmVlbnNvY2suY29tXG4qL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuaW1wb3J0IHsgZ3NhcCwgX2dldFByb3BlcnR5LCBfbnVtRXhwLCBfbnVtV2l0aFVuaXRFeHAsIGdldFVuaXQsIF9pc1N0cmluZywgX2lzVW5kZWZpbmVkLCBfcmVuZGVyQ29tcGxleFN0cmluZywgX3JlbEV4cCwgX2ZvckVhY2hOYW1lLCBfc29ydFByb3BUd2VlbnNCeVByaW9yaXR5LCBfY29sb3JTdHJpbmdGaWx0ZXIsIF9jaGVja1BsdWdpbiwgX3JlcGxhY2VSYW5kb20sIF9wbHVnaW5zLCBHU0NhY2hlLCBQcm9wVHdlZW4sIF9jb25maWcsIF90aWNrZXIsIF9yb3VuZCwgX21pc3NpbmdQbHVnaW4sIF9nZXRTZXR0ZXIsIF9nZXRDYWNoZSwgX2NvbG9yRXhwLCBfcGFyc2VSZWxhdGl2ZSwgX3NldERlZmF1bHRzLCBfcmVtb3ZlTGlua2VkTGlzdEl0ZW0gLy9mb3IgdGhlIGNvbW1lbnRlZC1vdXQgY2xhc3NOYW1lIGZlYXR1cmUuXG59IGZyb20gXCIuL2dzYXAtY29yZS5qc1wiO1xuXG52YXIgX3dpbixcbiAgICBfZG9jLFxuICAgIF9kb2NFbGVtZW50LFxuICAgIF9wbHVnaW5Jbml0dGVkLFxuICAgIF90ZW1wRGl2LFxuICAgIF90ZW1wRGl2U3R5bGVyLFxuICAgIF9yZWNlbnRTZXR0ZXJQbHVnaW4sXG4gICAgX3JldmVydGluZyxcbiAgICBfd2luZG93RXhpc3RzID0gZnVuY3Rpb24gX3dpbmRvd0V4aXN0cygpIHtcbiAgcmV0dXJuIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCI7XG59LFxuICAgIF90cmFuc2Zvcm1Qcm9wcyA9IHt9LFxuICAgIF9SQUQyREVHID0gMTgwIC8gTWF0aC5QSSxcbiAgICBfREVHMlJBRCA9IE1hdGguUEkgLyAxODAsXG4gICAgX2F0YW4yID0gTWF0aC5hdGFuMixcbiAgICBfYmlnTnVtID0gMWU4LFxuICAgIF9jYXBzRXhwID0gLyhbQS1aXSkvZyxcbiAgICBfaG9yaXpvbnRhbEV4cCA9IC8obGVmdHxyaWdodHx3aWR0aHxtYXJnaW58cGFkZGluZ3x4KS9pLFxuICAgIF9jb21wbGV4RXhwID0gL1tcXHMsXFwoXVxcUy8sXG4gICAgX3Byb3BlcnR5QWxpYXNlcyA9IHtcbiAgYXV0b0FscGhhOiBcIm9wYWNpdHksdmlzaWJpbGl0eVwiLFxuICBzY2FsZTogXCJzY2FsZVgsc2NhbGVZXCIsXG4gIGFscGhhOiBcIm9wYWNpdHlcIlxufSxcbiAgICBfcmVuZGVyQ1NTUHJvcCA9IGZ1bmN0aW9uIF9yZW5kZXJDU1NQcm9wKHJhdGlvLCBkYXRhKSB7XG4gIHJldHVybiBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgTWF0aC5yb3VuZCgoZGF0YS5zICsgZGF0YS5jICogcmF0aW8pICogMTAwMDApIC8gMTAwMDAgKyBkYXRhLnUsIGRhdGEpO1xufSxcbiAgICBfcmVuZGVyUHJvcFdpdGhFbmQgPSBmdW5jdGlvbiBfcmVuZGVyUHJvcFdpdGhFbmQocmF0aW8sIGRhdGEpIHtcbiAgcmV0dXJuIGRhdGEuc2V0KGRhdGEudCwgZGF0YS5wLCByYXRpbyA9PT0gMSA/IGRhdGEuZSA6IE1hdGgucm91bmQoKGRhdGEucyArIGRhdGEuYyAqIHJhdGlvKSAqIDEwMDAwKSAvIDEwMDAwICsgZGF0YS51LCBkYXRhKTtcbn0sXG4gICAgX3JlbmRlckNTU1Byb3BXaXRoQmVnaW5uaW5nID0gZnVuY3Rpb24gX3JlbmRlckNTU1Byb3BXaXRoQmVnaW5uaW5nKHJhdGlvLCBkYXRhKSB7XG4gIHJldHVybiBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgcmF0aW8gPyBNYXRoLnJvdW5kKChkYXRhLnMgKyBkYXRhLmMgKiByYXRpbykgKiAxMDAwMCkgLyAxMDAwMCArIGRhdGEudSA6IGRhdGEuYiwgZGF0YSk7XG59LFxuICAgIC8vaWYgdW5pdHMgY2hhbmdlLCB3ZSBuZWVkIGEgd2F5IHRvIHJlbmRlciB0aGUgb3JpZ2luYWwgdW5pdC92YWx1ZSB3aGVuIHRoZSB0d2VlbiBnb2VzIGFsbCB0aGUgd2F5IGJhY2sgdG8gdGhlIGJlZ2lubmluZyAocmF0aW86MClcbl9yZW5kZXJSb3VuZGVkQ1NTUHJvcCA9IGZ1bmN0aW9uIF9yZW5kZXJSb3VuZGVkQ1NTUHJvcChyYXRpbywgZGF0YSkge1xuICB2YXIgdmFsdWUgPSBkYXRhLnMgKyBkYXRhLmMgKiByYXRpbztcbiAgZGF0YS5zZXQoZGF0YS50LCBkYXRhLnAsIH5+KHZhbHVlICsgKHZhbHVlIDwgMCA/IC0uNSA6IC41KSkgKyBkYXRhLnUsIGRhdGEpO1xufSxcbiAgICBfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZSA9IGZ1bmN0aW9uIF9yZW5kZXJOb25Ud2VlbmluZ1ZhbHVlKHJhdGlvLCBkYXRhKSB7XG4gIHJldHVybiBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgcmF0aW8gPyBkYXRhLmUgOiBkYXRhLmIsIGRhdGEpO1xufSxcbiAgICBfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZU9ubHlBdEVuZCA9IGZ1bmN0aW9uIF9yZW5kZXJOb25Ud2VlbmluZ1ZhbHVlT25seUF0RW5kKHJhdGlvLCBkYXRhKSB7XG4gIHJldHVybiBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgcmF0aW8gIT09IDEgPyBkYXRhLmIgOiBkYXRhLmUsIGRhdGEpO1xufSxcbiAgICBfc2V0dGVyQ1NTU3R5bGUgPSBmdW5jdGlvbiBfc2V0dGVyQ1NTU3R5bGUodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgcmV0dXJuIHRhcmdldC5zdHlsZVtwcm9wZXJ0eV0gPSB2YWx1ZTtcbn0sXG4gICAgX3NldHRlckNTU1Byb3AgPSBmdW5jdGlvbiBfc2V0dGVyQ1NTUHJvcCh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSkge1xuICByZXR1cm4gdGFyZ2V0LnN0eWxlLnNldFByb3BlcnR5KHByb3BlcnR5LCB2YWx1ZSk7XG59LFxuICAgIF9zZXR0ZXJUcmFuc2Zvcm0gPSBmdW5jdGlvbiBfc2V0dGVyVHJhbnNmb3JtKHRhcmdldCwgcHJvcGVydHksIHZhbHVlKSB7XG4gIHJldHVybiB0YXJnZXQuX2dzYXBbcHJvcGVydHldID0gdmFsdWU7XG59LFxuICAgIF9zZXR0ZXJTY2FsZSA9IGZ1bmN0aW9uIF9zZXR0ZXJTY2FsZSh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSkge1xuICByZXR1cm4gdGFyZ2V0Ll9nc2FwLnNjYWxlWCA9IHRhcmdldC5fZ3NhcC5zY2FsZVkgPSB2YWx1ZTtcbn0sXG4gICAgX3NldHRlclNjYWxlV2l0aFJlbmRlciA9IGZ1bmN0aW9uIF9zZXR0ZXJTY2FsZVdpdGhSZW5kZXIodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUsIGRhdGEsIHJhdGlvKSB7XG4gIHZhciBjYWNoZSA9IHRhcmdldC5fZ3NhcDtcbiAgY2FjaGUuc2NhbGVYID0gY2FjaGUuc2NhbGVZID0gdmFsdWU7XG4gIGNhY2hlLnJlbmRlclRyYW5zZm9ybShyYXRpbywgY2FjaGUpO1xufSxcbiAgICBfc2V0dGVyVHJhbnNmb3JtV2l0aFJlbmRlciA9IGZ1bmN0aW9uIF9zZXR0ZXJUcmFuc2Zvcm1XaXRoUmVuZGVyKHRhcmdldCwgcHJvcGVydHksIHZhbHVlLCBkYXRhLCByYXRpbykge1xuICB2YXIgY2FjaGUgPSB0YXJnZXQuX2dzYXA7XG4gIGNhY2hlW3Byb3BlcnR5XSA9IHZhbHVlO1xuICBjYWNoZS5yZW5kZXJUcmFuc2Zvcm0ocmF0aW8sIGNhY2hlKTtcbn0sXG4gICAgX3RyYW5zZm9ybVByb3AgPSBcInRyYW5zZm9ybVwiLFxuICAgIF90cmFuc2Zvcm1PcmlnaW5Qcm9wID0gX3RyYW5zZm9ybVByb3AgKyBcIk9yaWdpblwiLFxuICAgIF9zYXZlU3R5bGUgPSBmdW5jdGlvbiBfc2F2ZVN0eWxlKHByb3BlcnR5KSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgdmFyIHRhcmdldCA9IHRoaXMudGFyZ2V0LFxuICAgICAgc3R5bGUgPSB0YXJnZXQuc3R5bGU7XG5cbiAgaWYgKHByb3BlcnR5IGluIF90cmFuc2Zvcm1Qcm9wcykge1xuICAgIHRoaXMudGZtID0gdGhpcy50Zm0gfHwge307XG5cbiAgICBpZiAocHJvcGVydHkgIT09IFwidHJhbnNmb3JtXCIpIHtcbiAgICAgIHByb3BlcnR5ID0gX3Byb3BlcnR5QWxpYXNlc1twcm9wZXJ0eV0gfHwgcHJvcGVydHk7XG4gICAgICB+cHJvcGVydHkuaW5kZXhPZihcIixcIikgPyBwcm9wZXJ0eS5zcGxpdChcIixcIikuZm9yRWFjaChmdW5jdGlvbiAoYSkge1xuICAgICAgICByZXR1cm4gX3RoaXMudGZtW2FdID0gX2dldCh0YXJnZXQsIGEpO1xuICAgICAgfSkgOiB0aGlzLnRmbVtwcm9wZXJ0eV0gPSB0YXJnZXQuX2dzYXAueCA/IHRhcmdldC5fZ3NhcFtwcm9wZXJ0eV0gOiBfZ2V0KHRhcmdldCwgcHJvcGVydHkpOyAvLyBub3RlOiBzY2FsZSB3b3VsZCBtYXAgdG8gXCJzY2FsZVgsc2NhbGVZXCIsIHRodXMgd2UgbG9vcCBhbmQgYXBwbHkgdGhlbSBib3RoLlxuICAgIH1cblxuICAgIGlmICh0aGlzLnByb3BzLmluZGV4T2YoX3RyYW5zZm9ybVByb3ApID49IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGFyZ2V0Ll9nc2FwLnN2Zykge1xuICAgICAgdGhpcy5zdmdvID0gdGFyZ2V0LmdldEF0dHJpYnV0ZShcImRhdGEtc3ZnLW9yaWdpblwiKTtcbiAgICAgIHRoaXMucHJvcHMucHVzaChfdHJhbnNmb3JtT3JpZ2luUHJvcCwgXCJcIik7XG4gICAgfVxuXG4gICAgcHJvcGVydHkgPSBfdHJhbnNmb3JtUHJvcDtcbiAgfVxuXG4gIHN0eWxlICYmIHRoaXMucHJvcHMucHVzaChwcm9wZXJ0eSwgc3R5bGVbcHJvcGVydHldKTtcbn0sXG4gICAgX3JlbW92ZUluZGVwZW5kZW50VHJhbnNmb3JtcyA9IGZ1bmN0aW9uIF9yZW1vdmVJbmRlcGVuZGVudFRyYW5zZm9ybXMoc3R5bGUpIHtcbiAgaWYgKHN0eWxlLnRyYW5zbGF0ZSkge1xuICAgIHN0eWxlLnJlbW92ZVByb3BlcnR5KFwidHJhbnNsYXRlXCIpO1xuICAgIHN0eWxlLnJlbW92ZVByb3BlcnR5KFwic2NhbGVcIik7XG4gICAgc3R5bGUucmVtb3ZlUHJvcGVydHkoXCJyb3RhdGVcIik7XG4gIH1cbn0sXG4gICAgX3JldmVydFN0eWxlID0gZnVuY3Rpb24gX3JldmVydFN0eWxlKCkge1xuICB2YXIgcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgdGFyZ2V0ID0gdGhpcy50YXJnZXQsXG4gICAgICBzdHlsZSA9IHRhcmdldC5zdHlsZSxcbiAgICAgIGNhY2hlID0gdGFyZ2V0Ll9nc2FwLFxuICAgICAgaSxcbiAgICAgIHA7XG5cbiAgZm9yIChpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgcHJvcHNbaSArIDFdID8gc3R5bGVbcHJvcHNbaV1dID0gcHJvcHNbaSArIDFdIDogc3R5bGUucmVtb3ZlUHJvcGVydHkocHJvcHNbaV0ucmVwbGFjZShfY2Fwc0V4cCwgXCItJDFcIikudG9Mb3dlckNhc2UoKSk7XG4gIH1cblxuICBpZiAodGhpcy50Zm0pIHtcbiAgICBmb3IgKHAgaW4gdGhpcy50Zm0pIHtcbiAgICAgIGNhY2hlW3BdID0gdGhpcy50Zm1bcF07XG4gICAgfVxuXG4gICAgaWYgKGNhY2hlLnN2Zykge1xuICAgICAgY2FjaGUucmVuZGVyVHJhbnNmb3JtKCk7XG4gICAgICB0YXJnZXQuc2V0QXR0cmlidXRlKFwiZGF0YS1zdmctb3JpZ2luXCIsIHRoaXMuc3ZnbyB8fCBcIlwiKTtcbiAgICB9XG5cbiAgICBpID0gX3JldmVydGluZygpO1xuXG4gICAgaWYgKGkgJiYgIWkuaXNTdGFydCAmJiAhc3R5bGVbX3RyYW5zZm9ybVByb3BdKSB7XG4gICAgICBfcmVtb3ZlSW5kZXBlbmRlbnRUcmFuc2Zvcm1zKHN0eWxlKTtcblxuICAgICAgY2FjaGUudW5jYWNoZSA9IDE7IC8vIGlmIGl0J3MgYSBzdGFydEF0IHRoYXQncyBiZWluZyByZXZlcnRlZCBpbiB0aGUgX2luaXRUd2VlbigpIG9mIHRoZSBjb3JlLCB3ZSBkb24ndCBuZWVkIHRvIHVuY2FjaGUgdHJhbnNmb3Jtcy4gVGhpcyBpcyBwdXJlbHkgYSBwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb24uXG4gICAgfVxuICB9XG59LFxuICAgIF9nZXRTdHlsZVNhdmVyID0gZnVuY3Rpb24gX2dldFN0eWxlU2F2ZXIodGFyZ2V0LCBwcm9wZXJ0aWVzKSB7XG4gIHZhciBzYXZlciA9IHtcbiAgICB0YXJnZXQ6IHRhcmdldCxcbiAgICBwcm9wczogW10sXG4gICAgcmV2ZXJ0OiBfcmV2ZXJ0U3R5bGUsXG4gICAgc2F2ZTogX3NhdmVTdHlsZVxuICB9O1xuICBwcm9wZXJ0aWVzICYmIHByb3BlcnRpZXMuc3BsaXQoXCIsXCIpLmZvckVhY2goZnVuY3Rpb24gKHApIHtcbiAgICByZXR1cm4gc2F2ZXIuc2F2ZShwKTtcbiAgfSk7XG4gIHJldHVybiBzYXZlcjtcbn0sXG4gICAgX3N1cHBvcnRzM0QsXG4gICAgX2NyZWF0ZUVsZW1lbnQgPSBmdW5jdGlvbiBfY3JlYXRlRWxlbWVudCh0eXBlLCBucykge1xuICB2YXIgZSA9IF9kb2MuY3JlYXRlRWxlbWVudE5TID8gX2RvYy5jcmVhdGVFbGVtZW50TlMoKG5zIHx8IFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiKS5yZXBsYWNlKC9eaHR0cHMvLCBcImh0dHBcIiksIHR5cGUpIDogX2RvYy5jcmVhdGVFbGVtZW50KHR5cGUpOyAvL3NvbWUgc2VydmVycyBzd2FwIGluIGh0dHBzIGZvciBodHRwIGluIHRoZSBuYW1lc3BhY2Ugd2hpY2ggY2FuIGJyZWFrIHRoaW5ncywgbWFraW5nIFwic3R5bGVcIiBpbmFjY2Vzc2libGUuXG5cbiAgcmV0dXJuIGUuc3R5bGUgPyBlIDogX2RvYy5jcmVhdGVFbGVtZW50KHR5cGUpOyAvL3NvbWUgZW52aXJvbm1lbnRzIHdvbid0IGFsbG93IGFjY2VzcyB0byB0aGUgZWxlbWVudCdzIHN0eWxlIHdoZW4gY3JlYXRlZCB3aXRoIGEgbmFtZXNwYWNlIGluIHdoaWNoIGNhc2Ugd2UgZGVmYXVsdCB0byB0aGUgc3RhbmRhcmQgY3JlYXRlRWxlbWVudCgpIHRvIHdvcmsgYXJvdW5kIHRoZSBpc3N1ZS4gQWxzbyBub3RlIHRoYXQgd2hlbiBHU0FQIGlzIGVtYmVkZGVkIGRpcmVjdGx5IGluc2lkZSBhbiBTVkcgZmlsZSwgY3JlYXRlRWxlbWVudCgpIHdvbid0IGFsbG93IGFjY2VzcyB0byB0aGUgc3R5bGUgb2JqZWN0IGluIEZpcmVmb3ggKHNlZSBodHRwczovL2dyZWVuc29jay5jb20vZm9ydW1zL3RvcGljLzIwMjE1LXByb2JsZW0tdXNpbmctdHdlZW5tYXgtaW4tc3RhbmRhbG9uZS1zZWxmLWNvbnRhaW5pbmctc3ZnLWZpbGUtZXJyLWNhbm5vdC1zZXQtcHJvcGVydHktY3NzdGV4dC1vZi11bmRlZmluZWQvKS5cbn0sXG4gICAgX2dldENvbXB1dGVkUHJvcGVydHkgPSBmdW5jdGlvbiBfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5LCBza2lwUHJlZml4RmFsbGJhY2spIHtcbiAgdmFyIGNzID0gZ2V0Q29tcHV0ZWRTdHlsZSh0YXJnZXQpO1xuICByZXR1cm4gY3NbcHJvcGVydHldIHx8IGNzLmdldFByb3BlcnR5VmFsdWUocHJvcGVydHkucmVwbGFjZShfY2Fwc0V4cCwgXCItJDFcIikudG9Mb3dlckNhc2UoKSkgfHwgY3MuZ2V0UHJvcGVydHlWYWx1ZShwcm9wZXJ0eSkgfHwgIXNraXBQcmVmaXhGYWxsYmFjayAmJiBfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIF9jaGVja1Byb3BQcmVmaXgocHJvcGVydHkpIHx8IHByb3BlcnR5LCAxKSB8fCBcIlwiOyAvL2NzcyB2YXJpYWJsZXMgbWF5IG5vdCBuZWVkIGNhcHMgc3dhcHBlZCBvdXQgZm9yIGRhc2hlcyBhbmQgbG93ZXJjYXNlLlxufSxcbiAgICBfcHJlZml4ZXMgPSBcIk8sTW96LG1zLE1zLFdlYmtpdFwiLnNwbGl0KFwiLFwiKSxcbiAgICBfY2hlY2tQcm9wUHJlZml4ID0gZnVuY3Rpb24gX2NoZWNrUHJvcFByZWZpeChwcm9wZXJ0eSwgZWxlbWVudCwgcHJlZmVyUHJlZml4KSB7XG4gIHZhciBlID0gZWxlbWVudCB8fCBfdGVtcERpdixcbiAgICAgIHMgPSBlLnN0eWxlLFxuICAgICAgaSA9IDU7XG5cbiAgaWYgKHByb3BlcnR5IGluIHMgJiYgIXByZWZlclByZWZpeCkge1xuICAgIHJldHVybiBwcm9wZXJ0eTtcbiAgfVxuXG4gIHByb3BlcnR5ID0gcHJvcGVydHkuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBwcm9wZXJ0eS5zdWJzdHIoMSk7XG5cbiAgd2hpbGUgKGktLSAmJiAhKF9wcmVmaXhlc1tpXSArIHByb3BlcnR5IGluIHMpKSB7fVxuXG4gIHJldHVybiBpIDwgMCA/IG51bGwgOiAoaSA9PT0gMyA/IFwibXNcIiA6IGkgPj0gMCA/IF9wcmVmaXhlc1tpXSA6IFwiXCIpICsgcHJvcGVydHk7XG59LFxuICAgIF9pbml0Q29yZSA9IGZ1bmN0aW9uIF9pbml0Q29yZSgpIHtcbiAgaWYgKF93aW5kb3dFeGlzdHMoKSAmJiB3aW5kb3cuZG9jdW1lbnQpIHtcbiAgICBfd2luID0gd2luZG93O1xuICAgIF9kb2MgPSBfd2luLmRvY3VtZW50O1xuICAgIF9kb2NFbGVtZW50ID0gX2RvYy5kb2N1bWVudEVsZW1lbnQ7XG4gICAgX3RlbXBEaXYgPSBfY3JlYXRlRWxlbWVudChcImRpdlwiKSB8fCB7XG4gICAgICBzdHlsZToge31cbiAgICB9O1xuICAgIF90ZW1wRGl2U3R5bGVyID0gX2NyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgX3RyYW5zZm9ybVByb3AgPSBfY2hlY2tQcm9wUHJlZml4KF90cmFuc2Zvcm1Qcm9wKTtcbiAgICBfdHJhbnNmb3JtT3JpZ2luUHJvcCA9IF90cmFuc2Zvcm1Qcm9wICsgXCJPcmlnaW5cIjtcbiAgICBfdGVtcERpdi5zdHlsZS5jc3NUZXh0ID0gXCJib3JkZXItd2lkdGg6MDtsaW5lLWhlaWdodDowO3Bvc2l0aW9uOmFic29sdXRlO3BhZGRpbmc6MFwiOyAvL21ha2Ugc3VyZSB0byBvdmVycmlkZSBjZXJ0YWluIHByb3BlcnRpZXMgdGhhdCBtYXkgY29udGFtaW5hdGUgbWVhc3VyZW1lbnRzLCBpbiBjYXNlIHRoZSB1c2VyIGhhcyBvdmVycmVhY2hpbmcgc3R5bGUgc2hlZXRzLlxuXG4gICAgX3N1cHBvcnRzM0QgPSAhIV9jaGVja1Byb3BQcmVmaXgoXCJwZXJzcGVjdGl2ZVwiKTtcbiAgICBfcmV2ZXJ0aW5nID0gZ3NhcC5jb3JlLnJldmVydGluZztcbiAgICBfcGx1Z2luSW5pdHRlZCA9IDE7XG4gIH1cbn0sXG4gICAgX2dldEJCb3hIYWNrID0gZnVuY3Rpb24gX2dldEJCb3hIYWNrKHN3YXBJZlBvc3NpYmxlKSB7XG4gIC8vd29ya3MgYXJvdW5kIGlzc3VlcyBpbiBzb21lIGJyb3dzZXJzIChsaWtlIEZpcmVmb3gpIHRoYXQgZG9uJ3QgY29ycmVjdGx5IHJlcG9ydCBnZXRCQm94KCkgb24gU1ZHIGVsZW1lbnRzIGluc2lkZSBhIDxkZWZzPiBlbGVtZW50IGFuZC9vciA8bWFzaz4uIFdlIHRyeSBjcmVhdGluZyBhbiBTVkcsIGFkZGluZyBpdCB0byB0aGUgZG9jdW1lbnRFbGVtZW50IGFuZCB0b3NzIHRoZSBlbGVtZW50IGluIHRoZXJlIHNvIHRoYXQgaXQncyBkZWZpbml0ZWx5IHBhcnQgb2YgdGhlIHJlbmRlcmluZyB0cmVlLCB0aGVuIGdyYWIgdGhlIGJib3ggYW5kIGlmIGl0IHdvcmtzLCB3ZSBhY3R1YWxseSBzd2FwIG91dCB0aGUgb3JpZ2luYWwgZ2V0QkJveCgpIG1ldGhvZCBmb3Igb3VyIG93biB0aGF0IGRvZXMgdGhlc2UgZXh0cmEgc3RlcHMgd2hlbmV2ZXIgZ2V0QkJveCBpcyBuZWVkZWQuIFRoaXMgaGVscHMgZW5zdXJlIHRoYXQgcGVyZm9ybWFuY2UgaXMgb3B0aW1hbCAob25seSBkbyBhbGwgdGhlc2UgZXh0cmEgc3RlcHMgd2hlbiBhYnNvbHV0ZWx5IG5lY2Vzc2FyeS4uLm1vc3QgZWxlbWVudHMgZG9uJ3QgbmVlZCBpdCkuXG4gIHZhciBzdmcgPSBfY3JlYXRlRWxlbWVudChcInN2Z1wiLCB0aGlzLm93bmVyU1ZHRWxlbWVudCAmJiB0aGlzLm93bmVyU1ZHRWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJ4bWxuc1wiKSB8fCBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIpLFxuICAgICAgb2xkUGFyZW50ID0gdGhpcy5wYXJlbnROb2RlLFxuICAgICAgb2xkU2libGluZyA9IHRoaXMubmV4dFNpYmxpbmcsXG4gICAgICBvbGRDU1MgPSB0aGlzLnN0eWxlLmNzc1RleHQsXG4gICAgICBiYm94O1xuXG4gIF9kb2NFbGVtZW50LmFwcGVuZENoaWxkKHN2Zyk7XG5cbiAgc3ZnLmFwcGVuZENoaWxkKHRoaXMpO1xuICB0aGlzLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG5cbiAgaWYgKHN3YXBJZlBvc3NpYmxlKSB7XG4gICAgdHJ5IHtcbiAgICAgIGJib3ggPSB0aGlzLmdldEJCb3goKTtcbiAgICAgIHRoaXMuX2dzYXBCQm94ID0gdGhpcy5nZXRCQm94OyAvL3N0b3JlIHRoZSBvcmlnaW5hbFxuXG4gICAgICB0aGlzLmdldEJCb3ggPSBfZ2V0QkJveEhhY2s7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfSBlbHNlIGlmICh0aGlzLl9nc2FwQkJveCkge1xuICAgIGJib3ggPSB0aGlzLl9nc2FwQkJveCgpO1xuICB9XG5cbiAgaWYgKG9sZFBhcmVudCkge1xuICAgIGlmIChvbGRTaWJsaW5nKSB7XG4gICAgICBvbGRQYXJlbnQuaW5zZXJ0QmVmb3JlKHRoaXMsIG9sZFNpYmxpbmcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvbGRQYXJlbnQuYXBwZW5kQ2hpbGQodGhpcyk7XG4gICAgfVxuICB9XG5cbiAgX2RvY0VsZW1lbnQucmVtb3ZlQ2hpbGQoc3ZnKTtcblxuICB0aGlzLnN0eWxlLmNzc1RleHQgPSBvbGRDU1M7XG4gIHJldHVybiBiYm94O1xufSxcbiAgICBfZ2V0QXR0cmlidXRlRmFsbGJhY2tzID0gZnVuY3Rpb24gX2dldEF0dHJpYnV0ZUZhbGxiYWNrcyh0YXJnZXQsIGF0dHJpYnV0ZXNBcnJheSkge1xuICB2YXIgaSA9IGF0dHJpYnV0ZXNBcnJheS5sZW5ndGg7XG5cbiAgd2hpbGUgKGktLSkge1xuICAgIGlmICh0YXJnZXQuaGFzQXR0cmlidXRlKGF0dHJpYnV0ZXNBcnJheVtpXSkpIHtcbiAgICAgIHJldHVybiB0YXJnZXQuZ2V0QXR0cmlidXRlKGF0dHJpYnV0ZXNBcnJheVtpXSk7XG4gICAgfVxuICB9XG59LFxuICAgIF9nZXRCQm94ID0gZnVuY3Rpb24gX2dldEJCb3godGFyZ2V0KSB7XG4gIHZhciBib3VuZHM7XG5cbiAgdHJ5IHtcbiAgICBib3VuZHMgPSB0YXJnZXQuZ2V0QkJveCgpOyAvL0ZpcmVmb3ggdGhyb3dzIGVycm9ycyBpZiB5b3UgdHJ5IGNhbGxpbmcgZ2V0QkJveCgpIG9uIGFuIFNWRyBlbGVtZW50IHRoYXQncyBub3QgcmVuZGVyZWQgKGxpa2UgaW4gYSA8c3ltYm9sPiBvciA8ZGVmcz4pLiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02MTIxMThcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBib3VuZHMgPSBfZ2V0QkJveEhhY2suY2FsbCh0YXJnZXQsIHRydWUpO1xuICB9XG5cbiAgYm91bmRzICYmIChib3VuZHMud2lkdGggfHwgYm91bmRzLmhlaWdodCkgfHwgdGFyZ2V0LmdldEJCb3ggPT09IF9nZXRCQm94SGFjayB8fCAoYm91bmRzID0gX2dldEJCb3hIYWNrLmNhbGwodGFyZ2V0LCB0cnVlKSk7IC8vc29tZSBicm93c2VycyAobGlrZSBGaXJlZm94KSBtaXNyZXBvcnQgdGhlIGJvdW5kcyBpZiB0aGUgZWxlbWVudCBoYXMgemVybyB3aWR0aCBhbmQgaGVpZ2h0IChpdCBqdXN0IGFzc3VtZXMgaXQncyBhdCB4OjAsIHk6MCksIHRodXMgd2UgbmVlZCB0byBtYW51YWxseSBncmFiIHRoZSBwb3NpdGlvbiBpbiB0aGF0IGNhc2UuXG5cbiAgcmV0dXJuIGJvdW5kcyAmJiAhYm91bmRzLndpZHRoICYmICFib3VuZHMueCAmJiAhYm91bmRzLnkgPyB7XG4gICAgeDogK19nZXRBdHRyaWJ1dGVGYWxsYmFja3ModGFyZ2V0LCBbXCJ4XCIsIFwiY3hcIiwgXCJ4MVwiXSkgfHwgMCxcbiAgICB5OiArX2dldEF0dHJpYnV0ZUZhbGxiYWNrcyh0YXJnZXQsIFtcInlcIiwgXCJjeVwiLCBcInkxXCJdKSB8fCAwLFxuICAgIHdpZHRoOiAwLFxuICAgIGhlaWdodDogMFxuICB9IDogYm91bmRzO1xufSxcbiAgICBfaXNTVkcgPSBmdW5jdGlvbiBfaXNTVkcoZSkge1xuICByZXR1cm4gISEoZS5nZXRDVE0gJiYgKCFlLnBhcmVudE5vZGUgfHwgZS5vd25lclNWR0VsZW1lbnQpICYmIF9nZXRCQm94KGUpKTtcbn0sXG4gICAgLy9yZXBvcnRzIGlmIHRoZSBlbGVtZW50IGlzIGFuIFNWRyBvbiB3aGljaCBnZXRCQm94KCkgYWN0dWFsbHkgd29ya3Ncbl9yZW1vdmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIF9yZW1vdmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5KSB7XG4gIGlmIChwcm9wZXJ0eSkge1xuICAgIHZhciBzdHlsZSA9IHRhcmdldC5zdHlsZTtcblxuICAgIGlmIChwcm9wZXJ0eSBpbiBfdHJhbnNmb3JtUHJvcHMgJiYgcHJvcGVydHkgIT09IF90cmFuc2Zvcm1PcmlnaW5Qcm9wKSB7XG4gICAgICBwcm9wZXJ0eSA9IF90cmFuc2Zvcm1Qcm9wO1xuICAgIH1cblxuICAgIGlmIChzdHlsZS5yZW1vdmVQcm9wZXJ0eSkge1xuICAgICAgaWYgKHByb3BlcnR5LnN1YnN0cigwLCAyKSA9PT0gXCJtc1wiIHx8IHByb3BlcnR5LnN1YnN0cigwLCA2KSA9PT0gXCJ3ZWJraXRcIikge1xuICAgICAgICAvL01pY3Jvc29mdCBhbmQgc29tZSBXZWJraXQgYnJvd3NlcnMgZG9uJ3QgY29uZm9ybSB0byB0aGUgc3RhbmRhcmQgb2YgY2FwaXRhbGl6aW5nIHRoZSBmaXJzdCBwcmVmaXggY2hhcmFjdGVyLCBzbyB3ZSBhZGp1c3Qgc28gdGhhdCB3aGVuIHdlIHByZWZpeCB0aGUgY2FwcyB3aXRoIGEgZGFzaCwgaXQncyBjb3JyZWN0IChvdGhlcndpc2UgaXQnZCBiZSBcIm1zLXRyYW5zZm9ybVwiIGluc3RlYWQgb2YgXCItbXMtdHJhbnNmb3JtXCIgZm9yIElFOSwgZm9yIGV4YW1wbGUpXG4gICAgICAgIHByb3BlcnR5ID0gXCItXCIgKyBwcm9wZXJ0eTtcbiAgICAgIH1cblxuICAgICAgc3R5bGUucmVtb3ZlUHJvcGVydHkocHJvcGVydHkucmVwbGFjZShfY2Fwc0V4cCwgXCItJDFcIikudG9Mb3dlckNhc2UoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vbm90ZTogb2xkIHZlcnNpb25zIG9mIElFIHVzZSBcInJlbW92ZUF0dHJpYnV0ZSgpXCIgaW5zdGVhZCBvZiBcInJlbW92ZVByb3BlcnR5KClcIlxuICAgICAgc3R5bGUucmVtb3ZlQXR0cmlidXRlKHByb3BlcnR5KTtcbiAgICB9XG4gIH1cbn0sXG4gICAgX2FkZE5vblR3ZWVuaW5nUFQgPSBmdW5jdGlvbiBfYWRkTm9uVHdlZW5pbmdQVChwbHVnaW4sIHRhcmdldCwgcHJvcGVydHksIGJlZ2lubmluZywgZW5kLCBvbmx5U2V0QXRFbmQpIHtcbiAgdmFyIHB0ID0gbmV3IFByb3BUd2VlbihwbHVnaW4uX3B0LCB0YXJnZXQsIHByb3BlcnR5LCAwLCAxLCBvbmx5U2V0QXRFbmQgPyBfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZU9ubHlBdEVuZCA6IF9yZW5kZXJOb25Ud2VlbmluZ1ZhbHVlKTtcbiAgcGx1Z2luLl9wdCA9IHB0O1xuICBwdC5iID0gYmVnaW5uaW5nO1xuICBwdC5lID0gZW5kO1xuXG4gIHBsdWdpbi5fcHJvcHMucHVzaChwcm9wZXJ0eSk7XG5cbiAgcmV0dXJuIHB0O1xufSxcbiAgICBfbm9uQ29udmVydGlibGVVbml0cyA9IHtcbiAgZGVnOiAxLFxuICByYWQ6IDEsXG4gIHR1cm46IDFcbn0sXG4gICAgX25vblN0YW5kYXJkTGF5b3V0cyA9IHtcbiAgZ3JpZDogMSxcbiAgZmxleDogMVxufSxcbiAgICAvL3Rha2VzIGEgc2luZ2xlIHZhbHVlIGxpa2UgMjBweCBhbmQgY29udmVydHMgaXQgdG8gdGhlIHVuaXQgc3BlY2lmaWVkLCBsaWtlIFwiJVwiLCByZXR1cm5pbmcgb25seSB0aGUgbnVtZXJpYyBhbW91bnQuXG5fY29udmVydFRvVW5pdCA9IGZ1bmN0aW9uIF9jb252ZXJ0VG9Vbml0KHRhcmdldCwgcHJvcGVydHksIHZhbHVlLCB1bml0KSB7XG4gIHZhciBjdXJWYWx1ZSA9IHBhcnNlRmxvYXQodmFsdWUpIHx8IDAsXG4gICAgICBjdXJVbml0ID0gKHZhbHVlICsgXCJcIikudHJpbSgpLnN1YnN0cigoY3VyVmFsdWUgKyBcIlwiKS5sZW5ndGgpIHx8IFwicHhcIixcbiAgICAgIC8vIHNvbWUgYnJvd3NlcnMgbGVhdmUgZXh0cmEgd2hpdGVzcGFjZSBhdCB0aGUgYmVnaW5uaW5nIG9mIENTUyB2YXJpYWJsZXMsIGhlbmNlIHRoZSBuZWVkIHRvIHRyaW0oKVxuICBzdHlsZSA9IF90ZW1wRGl2LnN0eWxlLFxuICAgICAgaG9yaXpvbnRhbCA9IF9ob3Jpem9udGFsRXhwLnRlc3QocHJvcGVydHkpLFxuICAgICAgaXNSb290U1ZHID0gdGFyZ2V0LnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJzdmdcIixcbiAgICAgIG1lYXN1cmVQcm9wZXJ0eSA9IChpc1Jvb3RTVkcgPyBcImNsaWVudFwiIDogXCJvZmZzZXRcIikgKyAoaG9yaXpvbnRhbCA/IFwiV2lkdGhcIiA6IFwiSGVpZ2h0XCIpLFxuICAgICAgYW1vdW50ID0gMTAwLFxuICAgICAgdG9QaXhlbHMgPSB1bml0ID09PSBcInB4XCIsXG4gICAgICB0b1BlcmNlbnQgPSB1bml0ID09PSBcIiVcIixcbiAgICAgIHB4LFxuICAgICAgcGFyZW50LFxuICAgICAgY2FjaGUsXG4gICAgICBpc1NWRztcblxuICBpZiAodW5pdCA9PT0gY3VyVW5pdCB8fCAhY3VyVmFsdWUgfHwgX25vbkNvbnZlcnRpYmxlVW5pdHNbdW5pdF0gfHwgX25vbkNvbnZlcnRpYmxlVW5pdHNbY3VyVW5pdF0pIHtcbiAgICByZXR1cm4gY3VyVmFsdWU7XG4gIH1cblxuICBjdXJVbml0ICE9PSBcInB4XCIgJiYgIXRvUGl4ZWxzICYmIChjdXJWYWx1ZSA9IF9jb252ZXJ0VG9Vbml0KHRhcmdldCwgcHJvcGVydHksIHZhbHVlLCBcInB4XCIpKTtcbiAgaXNTVkcgPSB0YXJnZXQuZ2V0Q1RNICYmIF9pc1NWRyh0YXJnZXQpO1xuXG4gIGlmICgodG9QZXJjZW50IHx8IGN1clVuaXQgPT09IFwiJVwiKSAmJiAoX3RyYW5zZm9ybVByb3BzW3Byb3BlcnR5XSB8fCB+cHJvcGVydHkuaW5kZXhPZihcImFkaXVzXCIpKSkge1xuICAgIHB4ID0gaXNTVkcgPyB0YXJnZXQuZ2V0QkJveCgpW2hvcml6b250YWwgPyBcIndpZHRoXCIgOiBcImhlaWdodFwiXSA6IHRhcmdldFttZWFzdXJlUHJvcGVydHldO1xuICAgIHJldHVybiBfcm91bmQodG9QZXJjZW50ID8gY3VyVmFsdWUgLyBweCAqIGFtb3VudCA6IGN1clZhbHVlIC8gMTAwICogcHgpO1xuICB9XG5cbiAgc3R5bGVbaG9yaXpvbnRhbCA/IFwid2lkdGhcIiA6IFwiaGVpZ2h0XCJdID0gYW1vdW50ICsgKHRvUGl4ZWxzID8gY3VyVW5pdCA6IHVuaXQpO1xuICBwYXJlbnQgPSB+cHJvcGVydHkuaW5kZXhPZihcImFkaXVzXCIpIHx8IHVuaXQgPT09IFwiZW1cIiAmJiB0YXJnZXQuYXBwZW5kQ2hpbGQgJiYgIWlzUm9vdFNWRyA/IHRhcmdldCA6IHRhcmdldC5wYXJlbnROb2RlO1xuXG4gIGlmIChpc1NWRykge1xuICAgIHBhcmVudCA9ICh0YXJnZXQub3duZXJTVkdFbGVtZW50IHx8IHt9KS5wYXJlbnROb2RlO1xuICB9XG5cbiAgaWYgKCFwYXJlbnQgfHwgcGFyZW50ID09PSBfZG9jIHx8ICFwYXJlbnQuYXBwZW5kQ2hpbGQpIHtcbiAgICBwYXJlbnQgPSBfZG9jLmJvZHk7XG4gIH1cblxuICBjYWNoZSA9IHBhcmVudC5fZ3NhcDtcblxuICBpZiAoY2FjaGUgJiYgdG9QZXJjZW50ICYmIGNhY2hlLndpZHRoICYmIGhvcml6b250YWwgJiYgY2FjaGUudGltZSA9PT0gX3RpY2tlci50aW1lICYmICFjYWNoZS51bmNhY2hlKSB7XG4gICAgcmV0dXJuIF9yb3VuZChjdXJWYWx1ZSAvIGNhY2hlLndpZHRoICogYW1vdW50KTtcbiAgfSBlbHNlIHtcbiAgICAodG9QZXJjZW50IHx8IGN1clVuaXQgPT09IFwiJVwiKSAmJiAhX25vblN0YW5kYXJkTGF5b3V0c1tfZ2V0Q29tcHV0ZWRQcm9wZXJ0eShwYXJlbnQsIFwiZGlzcGxheVwiKV0gJiYgKHN0eWxlLnBvc2l0aW9uID0gX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBcInBvc2l0aW9uXCIpKTtcbiAgICBwYXJlbnQgPT09IHRhcmdldCAmJiAoc3R5bGUucG9zaXRpb24gPSBcInN0YXRpY1wiKTsgLy8gbGlrZSBmb3IgYm9yZGVyUmFkaXVzLCBpZiBpdCdzIGEgJSB3ZSBtdXN0IGhhdmUgaXQgcmVsYXRpdmUgdG8gdGhlIHRhcmdldCBpdHNlbGYgYnV0IHRoYXQgbWF5IG5vdCBoYXZlIHBvc2l0aW9uOiByZWxhdGl2ZSBvciBwb3NpdGlvbjogYWJzb2x1dGUgaW4gd2hpY2ggY2FzZSBpdCdkIGdvIHVwIHRoZSBjaGFpbiB1bnRpbCBpdCBmaW5kcyBpdHMgb2Zmc2V0UGFyZW50IChiYWQpLiBwb3NpdGlvbjogc3RhdGljIHByb3RlY3RzIGFnYWluc3QgdGhhdC5cblxuICAgIHBhcmVudC5hcHBlbmRDaGlsZChfdGVtcERpdik7XG4gICAgcHggPSBfdGVtcERpdlttZWFzdXJlUHJvcGVydHldO1xuICAgIHBhcmVudC5yZW1vdmVDaGlsZChfdGVtcERpdik7XG4gICAgc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG5cbiAgICBpZiAoaG9yaXpvbnRhbCAmJiB0b1BlcmNlbnQpIHtcbiAgICAgIGNhY2hlID0gX2dldENhY2hlKHBhcmVudCk7XG4gICAgICBjYWNoZS50aW1lID0gX3RpY2tlci50aW1lO1xuICAgICAgY2FjaGUud2lkdGggPSBwYXJlbnRbbWVhc3VyZVByb3BlcnR5XTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gX3JvdW5kKHRvUGl4ZWxzID8gcHggKiBjdXJWYWx1ZSAvIGFtb3VudCA6IHB4ICYmIGN1clZhbHVlID8gYW1vdW50IC8gcHggKiBjdXJWYWx1ZSA6IDApO1xufSxcbiAgICBfZ2V0ID0gZnVuY3Rpb24gX2dldCh0YXJnZXQsIHByb3BlcnR5LCB1bml0LCB1bmNhY2hlKSB7XG4gIHZhciB2YWx1ZTtcbiAgX3BsdWdpbkluaXR0ZWQgfHwgX2luaXRDb3JlKCk7XG5cbiAgaWYgKHByb3BlcnR5IGluIF9wcm9wZXJ0eUFsaWFzZXMgJiYgcHJvcGVydHkgIT09IFwidHJhbnNmb3JtXCIpIHtcbiAgICBwcm9wZXJ0eSA9IF9wcm9wZXJ0eUFsaWFzZXNbcHJvcGVydHldO1xuXG4gICAgaWYgKH5wcm9wZXJ0eS5pbmRleE9mKFwiLFwiKSkge1xuICAgICAgcHJvcGVydHkgPSBwcm9wZXJ0eS5zcGxpdChcIixcIilbMF07XG4gICAgfVxuICB9XG5cbiAgaWYgKF90cmFuc2Zvcm1Qcm9wc1twcm9wZXJ0eV0gJiYgcHJvcGVydHkgIT09IFwidHJhbnNmb3JtXCIpIHtcbiAgICB2YWx1ZSA9IF9wYXJzZVRyYW5zZm9ybSh0YXJnZXQsIHVuY2FjaGUpO1xuICAgIHZhbHVlID0gcHJvcGVydHkgIT09IFwidHJhbnNmb3JtT3JpZ2luXCIgPyB2YWx1ZVtwcm9wZXJ0eV0gOiB2YWx1ZS5zdmcgPyB2YWx1ZS5vcmlnaW4gOiBfZmlyc3RUd29Pbmx5KF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgX3RyYW5zZm9ybU9yaWdpblByb3ApKSArIFwiIFwiICsgdmFsdWUuek9yaWdpbiArIFwicHhcIjtcbiAgfSBlbHNlIHtcbiAgICB2YWx1ZSA9IHRhcmdldC5zdHlsZVtwcm9wZXJ0eV07XG5cbiAgICBpZiAoIXZhbHVlIHx8IHZhbHVlID09PSBcImF1dG9cIiB8fCB1bmNhY2hlIHx8IH4odmFsdWUgKyBcIlwiKS5pbmRleE9mKFwiY2FsYyhcIikpIHtcbiAgICAgIHZhbHVlID0gX3NwZWNpYWxQcm9wc1twcm9wZXJ0eV0gJiYgX3NwZWNpYWxQcm9wc1twcm9wZXJ0eV0odGFyZ2V0LCBwcm9wZXJ0eSwgdW5pdCkgfHwgX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSkgfHwgX2dldFByb3BlcnR5KHRhcmdldCwgcHJvcGVydHkpIHx8IChwcm9wZXJ0eSA9PT0gXCJvcGFjaXR5XCIgPyAxIDogMCk7IC8vIG5vdGU6IHNvbWUgYnJvd3NlcnMsIGxpa2UgRmlyZWZveCwgZG9uJ3QgcmVwb3J0IGJvcmRlclJhZGl1cyBjb3JyZWN0bHkhIEluc3RlYWQsIGl0IG9ubHkgcmVwb3J0cyBldmVyeSBjb3JuZXIgbGlrZSAgYm9yZGVyVG9wTGVmdFJhZGl1c1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB1bml0ICYmICF+KHZhbHVlICsgXCJcIikudHJpbSgpLmluZGV4T2YoXCIgXCIpID8gX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUsIHVuaXQpICsgdW5pdCA6IHZhbHVlO1xufSxcbiAgICBfdHdlZW5Db21wbGV4Q1NTU3RyaW5nID0gZnVuY3Rpb24gX3R3ZWVuQ29tcGxleENTU1N0cmluZyh0YXJnZXQsIHByb3AsIHN0YXJ0LCBlbmQpIHtcbiAgLy8gbm90ZTogd2UgY2FsbCBfdHdlZW5Db21wbGV4Q1NTU3RyaW5nLmNhbGwocGx1Z2luSW5zdGFuY2UuLi4pIHRvIGVuc3VyZSB0aGF0IGl0J3Mgc2NvcGVkIHByb3Blcmx5LiBXZSBtYXkgY2FsbCBpdCBmcm9tIHdpdGhpbiBhIHBsdWdpbiB0b28sIHRodXMgXCJ0aGlzXCIgd291bGQgcmVmZXIgdG8gdGhlIHBsdWdpbi5cbiAgaWYgKCFzdGFydCB8fCBzdGFydCA9PT0gXCJub25lXCIpIHtcbiAgICAvLyBzb21lIGJyb3dzZXJzIGxpa2UgU2FmYXJpIGFjdHVhbGx5IFBSRUZFUiB0aGUgcHJlZml4ZWQgcHJvcGVydHkgYW5kIG1pcy1yZXBvcnQgdGhlIHVucHJlZml4ZWQgdmFsdWUgbGlrZSBjbGlwUGF0aCAoQlVHKS4gSW4gb3RoZXIgd29yZHMsIGV2ZW4gdGhvdWdoIGNsaXBQYXRoIGV4aXN0cyBpbiB0aGUgc3R5bGUgKFwiY2xpcFBhdGhcIiBpbiB0YXJnZXQuc3R5bGUpIGFuZCBpdCdzIHNldCBpbiB0aGUgQ1NTIHByb3Blcmx5IChhbG9uZyB3aXRoIC13ZWJraXQtY2xpcC1wYXRoKSwgU2FmYXJpIHJlcG9ydHMgY2xpcFBhdGggYXMgXCJub25lXCIgd2hlcmVhcyBXZWJraXRDbGlwUGF0aCByZXBvcnRzIGFjY3VyYXRlbHkgbGlrZSBcImVsbGlwc2UoMTAwJSAwJSBhdCA1MCUgMCUpXCIsIHNvIGluIHRoaXMgY2FzZSB3ZSBtdXN0IFNXSVRDSCB0byB1c2luZyB0aGUgcHJlZml4ZWQgcHJvcGVydHkgaW5zdGVhZC4gU2VlIGh0dHBzOi8vZ3JlZW5zb2NrLmNvbS9mb3J1bXMvdG9waWMvMTgzMTAtY2xpcHBhdGgtZG9lc250LXdvcmstb24taW9zL1xuICAgIHZhciBwID0gX2NoZWNrUHJvcFByZWZpeChwcm9wLCB0YXJnZXQsIDEpLFxuICAgICAgICBzID0gcCAmJiBfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIHAsIDEpO1xuXG4gICAgaWYgKHMgJiYgcyAhPT0gc3RhcnQpIHtcbiAgICAgIHByb3AgPSBwO1xuICAgICAgc3RhcnQgPSBzO1xuICAgIH0gZWxzZSBpZiAocHJvcCA9PT0gXCJib3JkZXJDb2xvclwiKSB7XG4gICAgICBzdGFydCA9IF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgXCJib3JkZXJUb3BDb2xvclwiKTsgLy8gRmlyZWZveCBidWc6IGFsd2F5cyByZXBvcnRzIFwiYm9yZGVyQ29sb3JcIiBhcyBcIlwiLCBzbyB3ZSBtdXN0IGZhbGwgYmFjayB0byBib3JkZXJUb3BDb2xvci4gU2VlIGh0dHBzOi8vZ3JlZW5zb2NrLmNvbS9mb3J1bXMvdG9waWMvMjQ1ODMtaG93LXRvLXJldHVybi1jb2xvcnMtdGhhdC1pLWhhZC1hZnRlci1yZXZlcnNlL1xuICAgIH1cbiAgfVxuXG4gIHZhciBwdCA9IG5ldyBQcm9wVHdlZW4odGhpcy5fcHQsIHRhcmdldC5zdHlsZSwgcHJvcCwgMCwgMSwgX3JlbmRlckNvbXBsZXhTdHJpbmcpLFxuICAgICAgaW5kZXggPSAwLFxuICAgICAgbWF0Y2hJbmRleCA9IDAsXG4gICAgICBhLFxuICAgICAgcmVzdWx0LFxuICAgICAgc3RhcnRWYWx1ZXMsXG4gICAgICBzdGFydE51bSxcbiAgICAgIGNvbG9yLFxuICAgICAgc3RhcnRWYWx1ZSxcbiAgICAgIGVuZFZhbHVlLFxuICAgICAgZW5kTnVtLFxuICAgICAgY2h1bmssXG4gICAgICBlbmRVbml0LFxuICAgICAgc3RhcnRVbml0LFxuICAgICAgZW5kVmFsdWVzO1xuICBwdC5iID0gc3RhcnQ7XG4gIHB0LmUgPSBlbmQ7XG4gIHN0YXJ0ICs9IFwiXCI7IC8vIGVuc3VyZSB2YWx1ZXMgYXJlIHN0cmluZ3NcblxuICBlbmQgKz0gXCJcIjtcblxuICBpZiAoZW5kID09PSBcImF1dG9cIikge1xuICAgIHRhcmdldC5zdHlsZVtwcm9wXSA9IGVuZDtcbiAgICBlbmQgPSBfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIHByb3ApIHx8IGVuZDtcbiAgICB0YXJnZXQuc3R5bGVbcHJvcF0gPSBzdGFydDtcbiAgfVxuXG4gIGEgPSBbc3RhcnQsIGVuZF07XG5cbiAgX2NvbG9yU3RyaW5nRmlsdGVyKGEpOyAvLyBwYXNzIGFuIGFycmF5IHdpdGggdGhlIHN0YXJ0aW5nIGFuZCBlbmRpbmcgdmFsdWVzIGFuZCBsZXQgdGhlIGZpbHRlciBkbyB3aGF0ZXZlciBpdCBuZWVkcyB0byB0aGUgdmFsdWVzLiBJZiBjb2xvcnMgYXJlIGZvdW5kLCBpdCByZXR1cm5zIHRydWUgYW5kIHRoZW4gd2UgbXVzdCBtYXRjaCB3aGVyZSB0aGUgY29sb3Igc2hvd3MgdXAgb3JkZXItd2lzZSBiZWNhdXNlIGZvciB0aGluZ3MgbGlrZSBib3hTaGFkb3csIHNvbWV0aW1lcyB0aGUgYnJvd3NlciBwcm92aWRlcyB0aGUgY29tcHV0ZWQgdmFsdWVzIHdpdGggdGhlIGNvbG9yIEZJUlNULCBidXQgdGhlIHVzZXIgcHJvdmlkZXMgaXQgd2l0aCB0aGUgY29sb3IgTEFTVCwgc28gZmxpcCB0aGVtIGlmIG5lY2Vzc2FyeS4gU2FtZSBmb3IgZHJvcC1zaGFkb3coKS5cblxuXG4gIHN0YXJ0ID0gYVswXTtcbiAgZW5kID0gYVsxXTtcbiAgc3RhcnRWYWx1ZXMgPSBzdGFydC5tYXRjaChfbnVtV2l0aFVuaXRFeHApIHx8IFtdO1xuICBlbmRWYWx1ZXMgPSBlbmQubWF0Y2goX251bVdpdGhVbml0RXhwKSB8fCBbXTtcblxuICBpZiAoZW5kVmFsdWVzLmxlbmd0aCkge1xuICAgIHdoaWxlIChyZXN1bHQgPSBfbnVtV2l0aFVuaXRFeHAuZXhlYyhlbmQpKSB7XG4gICAgICBlbmRWYWx1ZSA9IHJlc3VsdFswXTtcbiAgICAgIGNodW5rID0gZW5kLnN1YnN0cmluZyhpbmRleCwgcmVzdWx0LmluZGV4KTtcblxuICAgICAgaWYgKGNvbG9yKSB7XG4gICAgICAgIGNvbG9yID0gKGNvbG9yICsgMSkgJSA1O1xuICAgICAgfSBlbHNlIGlmIChjaHVuay5zdWJzdHIoLTUpID09PSBcInJnYmEoXCIgfHwgY2h1bmsuc3Vic3RyKC01KSA9PT0gXCJoc2xhKFwiKSB7XG4gICAgICAgIGNvbG9yID0gMTtcbiAgICAgIH1cblxuICAgICAgaWYgKGVuZFZhbHVlICE9PSAoc3RhcnRWYWx1ZSA9IHN0YXJ0VmFsdWVzW21hdGNoSW5kZXgrK10gfHwgXCJcIikpIHtcbiAgICAgICAgc3RhcnROdW0gPSBwYXJzZUZsb2F0KHN0YXJ0VmFsdWUpIHx8IDA7XG4gICAgICAgIHN0YXJ0VW5pdCA9IHN0YXJ0VmFsdWUuc3Vic3RyKChzdGFydE51bSArIFwiXCIpLmxlbmd0aCk7XG4gICAgICAgIGVuZFZhbHVlLmNoYXJBdCgxKSA9PT0gXCI9XCIgJiYgKGVuZFZhbHVlID0gX3BhcnNlUmVsYXRpdmUoc3RhcnROdW0sIGVuZFZhbHVlKSArIHN0YXJ0VW5pdCk7XG4gICAgICAgIGVuZE51bSA9IHBhcnNlRmxvYXQoZW5kVmFsdWUpO1xuICAgICAgICBlbmRVbml0ID0gZW5kVmFsdWUuc3Vic3RyKChlbmROdW0gKyBcIlwiKS5sZW5ndGgpO1xuICAgICAgICBpbmRleCA9IF9udW1XaXRoVW5pdEV4cC5sYXN0SW5kZXggLSBlbmRVbml0Lmxlbmd0aDtcblxuICAgICAgICBpZiAoIWVuZFVuaXQpIHtcbiAgICAgICAgICAvL2lmIHNvbWV0aGluZyBsaWtlIFwicGVyc3BlY3RpdmU6MzAwXCIgaXMgcGFzc2VkIGluIGFuZCB3ZSBtdXN0IGFkZCBhIHVuaXQgdG8gdGhlIGVuZFxuICAgICAgICAgIGVuZFVuaXQgPSBlbmRVbml0IHx8IF9jb25maWcudW5pdHNbcHJvcF0gfHwgc3RhcnRVbml0O1xuXG4gICAgICAgICAgaWYgKGluZGV4ID09PSBlbmQubGVuZ3RoKSB7XG4gICAgICAgICAgICBlbmQgKz0gZW5kVW5pdDtcbiAgICAgICAgICAgIHB0LmUgKz0gZW5kVW5pdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3RhcnRVbml0ICE9PSBlbmRVbml0KSB7XG4gICAgICAgICAgc3RhcnROdW0gPSBfY29udmVydFRvVW5pdCh0YXJnZXQsIHByb3AsIHN0YXJ0VmFsdWUsIGVuZFVuaXQpIHx8IDA7XG4gICAgICAgIH0gLy8gdGhlc2UgbmVzdGVkIFByb3BUd2VlbnMgYXJlIGhhbmRsZWQgaW4gYSBzcGVjaWFsIHdheSAtIHdlJ2xsIG5ldmVyIGFjdHVhbGx5IGNhbGwgYSByZW5kZXIgb3Igc2V0dGVyIG1ldGhvZCBvbiB0aGVtLiBXZSdsbCBqdXN0IGxvb3AgdGhyb3VnaCB0aGVtIGluIHRoZSBwYXJlbnQgY29tcGxleCBzdHJpbmcgUHJvcFR3ZWVuJ3MgcmVuZGVyIG1ldGhvZC5cblxuXG4gICAgICAgIHB0Ll9wdCA9IHtcbiAgICAgICAgICBfbmV4dDogcHQuX3B0LFxuICAgICAgICAgIHA6IGNodW5rIHx8IG1hdGNoSW5kZXggPT09IDEgPyBjaHVuayA6IFwiLFwiLFxuICAgICAgICAgIC8vbm90ZTogU1ZHIHNwZWMgYWxsb3dzIG9taXNzaW9uIG9mIGNvbW1hL3NwYWNlIHdoZW4gYSBuZWdhdGl2ZSBzaWduIGlzIHdlZGdlZCBiZXR3ZWVuIHR3byBudW1iZXJzLCBsaWtlIDIuNS01LjMgaW5zdGVhZCBvZiAyLjUsLTUuMyBidXQgd2hlbiB0d2VlbmluZywgdGhlIG5lZ2F0aXZlIHZhbHVlIG1heSBzd2l0Y2ggdG8gcG9zaXRpdmUsIHNvIHdlIGluc2VydCB0aGUgY29tbWEganVzdCBpbiBjYXNlLlxuICAgICAgICAgIHM6IHN0YXJ0TnVtLFxuICAgICAgICAgIGM6IGVuZE51bSAtIHN0YXJ0TnVtLFxuICAgICAgICAgIG06IGNvbG9yICYmIGNvbG9yIDwgNCB8fCBwcm9wID09PSBcInpJbmRleFwiID8gTWF0aC5yb3VuZCA6IDBcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwdC5jID0gaW5kZXggPCBlbmQubGVuZ3RoID8gZW5kLnN1YnN0cmluZyhpbmRleCwgZW5kLmxlbmd0aCkgOiBcIlwiOyAvL3dlIHVzZSB0aGUgXCJjXCIgb2YgdGhlIFByb3BUd2VlbiB0byBzdG9yZSB0aGUgZmluYWwgcGFydCBvZiB0aGUgc3RyaW5nIChhZnRlciB0aGUgbGFzdCBudW1iZXIpXG4gIH0gZWxzZSB7XG4gICAgcHQuciA9IHByb3AgPT09IFwiZGlzcGxheVwiICYmIGVuZCA9PT0gXCJub25lXCIgPyBfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZU9ubHlBdEVuZCA6IF9yZW5kZXJOb25Ud2VlbmluZ1ZhbHVlO1xuICB9XG5cbiAgX3JlbEV4cC50ZXN0KGVuZCkgJiYgKHB0LmUgPSAwKTsgLy9pZiB0aGUgZW5kIHN0cmluZyBjb250YWlucyByZWxhdGl2ZSB2YWx1ZXMgb3IgZHluYW1pYyByYW5kb20oLi4uKSB2YWx1ZXMsIGRlbGV0ZSB0aGUgZW5kIGl0IHNvIHRoYXQgb24gdGhlIGZpbmFsIHJlbmRlciB3ZSBkb24ndCBhY3R1YWxseSBzZXQgaXQgdG8gdGhlIHN0cmluZyB3aXRoICs9IG9yIC09IGNoYXJhY3RlcnMgKGZvcmNlcyBpdCB0byB1c2UgdGhlIGNhbGN1bGF0ZWQgdmFsdWUpLlxuXG4gIHRoaXMuX3B0ID0gcHQ7IC8vc3RhcnQgdGhlIGxpbmtlZCBsaXN0IHdpdGggdGhpcyBuZXcgUHJvcFR3ZWVuLiBSZW1lbWJlciwgd2UgY2FsbCBfdHdlZW5Db21wbGV4Q1NTU3RyaW5nLmNhbGwocGx1Z2luSW5zdGFuY2UuLi4pIHRvIGVuc3VyZSB0aGF0IGl0J3Mgc2NvcGVkIHByb3Blcmx5LiBXZSBtYXkgY2FsbCBpdCBmcm9tIHdpdGhpbiBhbm90aGVyIHBsdWdpbiB0b28sIHRodXMgXCJ0aGlzXCIgd291bGQgcmVmZXIgdG8gdGhlIHBsdWdpbi5cblxuICByZXR1cm4gcHQ7XG59LFxuICAgIF9rZXl3b3JkVG9QZXJjZW50ID0ge1xuICB0b3A6IFwiMCVcIixcbiAgYm90dG9tOiBcIjEwMCVcIixcbiAgbGVmdDogXCIwJVwiLFxuICByaWdodDogXCIxMDAlXCIsXG4gIGNlbnRlcjogXCI1MCVcIlxufSxcbiAgICBfY29udmVydEtleXdvcmRzVG9QZXJjZW50YWdlcyA9IGZ1bmN0aW9uIF9jb252ZXJ0S2V5d29yZHNUb1BlcmNlbnRhZ2VzKHZhbHVlKSB7XG4gIHZhciBzcGxpdCA9IHZhbHVlLnNwbGl0KFwiIFwiKSxcbiAgICAgIHggPSBzcGxpdFswXSxcbiAgICAgIHkgPSBzcGxpdFsxXSB8fCBcIjUwJVwiO1xuXG4gIGlmICh4ID09PSBcInRvcFwiIHx8IHggPT09IFwiYm90dG9tXCIgfHwgeSA9PT0gXCJsZWZ0XCIgfHwgeSA9PT0gXCJyaWdodFwiKSB7XG4gICAgLy90aGUgdXNlciBwcm92aWRlZCB0aGVtIGluIHRoZSB3cm9uZyBvcmRlciwgc28gZmxpcCB0aGVtXG4gICAgdmFsdWUgPSB4O1xuICAgIHggPSB5O1xuICAgIHkgPSB2YWx1ZTtcbiAgfVxuXG4gIHNwbGl0WzBdID0gX2tleXdvcmRUb1BlcmNlbnRbeF0gfHwgeDtcbiAgc3BsaXRbMV0gPSBfa2V5d29yZFRvUGVyY2VudFt5XSB8fCB5O1xuICByZXR1cm4gc3BsaXQuam9pbihcIiBcIik7XG59LFxuICAgIF9yZW5kZXJDbGVhclByb3BzID0gZnVuY3Rpb24gX3JlbmRlckNsZWFyUHJvcHMocmF0aW8sIGRhdGEpIHtcbiAgaWYgKGRhdGEudHdlZW4gJiYgZGF0YS50d2Vlbi5fdGltZSA9PT0gZGF0YS50d2Vlbi5fZHVyKSB7XG4gICAgdmFyIHRhcmdldCA9IGRhdGEudCxcbiAgICAgICAgc3R5bGUgPSB0YXJnZXQuc3R5bGUsXG4gICAgICAgIHByb3BzID0gZGF0YS51LFxuICAgICAgICBjYWNoZSA9IHRhcmdldC5fZ3NhcCxcbiAgICAgICAgcHJvcCxcbiAgICAgICAgY2xlYXJUcmFuc2Zvcm1zLFxuICAgICAgICBpO1xuXG4gICAgaWYgKHByb3BzID09PSBcImFsbFwiIHx8IHByb3BzID09PSB0cnVlKSB7XG4gICAgICBzdHlsZS5jc3NUZXh0ID0gXCJcIjtcbiAgICAgIGNsZWFyVHJhbnNmb3JtcyA9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb3BzID0gcHJvcHMuc3BsaXQoXCIsXCIpO1xuICAgICAgaSA9IHByb3BzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKC0taSA+IC0xKSB7XG4gICAgICAgIHByb3AgPSBwcm9wc1tpXTtcblxuICAgICAgICBpZiAoX3RyYW5zZm9ybVByb3BzW3Byb3BdKSB7XG4gICAgICAgICAgY2xlYXJUcmFuc2Zvcm1zID0gMTtcbiAgICAgICAgICBwcm9wID0gcHJvcCA9PT0gXCJ0cmFuc2Zvcm1PcmlnaW5cIiA/IF90cmFuc2Zvcm1PcmlnaW5Qcm9wIDogX3RyYW5zZm9ybVByb3A7XG4gICAgICAgIH1cblxuICAgICAgICBfcmVtb3ZlUHJvcGVydHkodGFyZ2V0LCBwcm9wKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY2xlYXJUcmFuc2Zvcm1zKSB7XG4gICAgICBfcmVtb3ZlUHJvcGVydHkodGFyZ2V0LCBfdHJhbnNmb3JtUHJvcCk7XG5cbiAgICAgIGlmIChjYWNoZSkge1xuICAgICAgICBjYWNoZS5zdmcgJiYgdGFyZ2V0LnJlbW92ZUF0dHJpYnV0ZShcInRyYW5zZm9ybVwiKTtcblxuICAgICAgICBfcGFyc2VUcmFuc2Zvcm0odGFyZ2V0LCAxKTsgLy8gZm9yY2UgYWxsIHRoZSBjYWNoZWQgdmFsdWVzIGJhY2sgdG8gXCJub3JtYWxcIi9pZGVudGl0eSwgb3RoZXJ3aXNlIGlmIHRoZXJlJ3MgYW5vdGhlciB0d2VlbiB0aGF0J3MgYWxyZWFkeSBzZXQgdG8gcmVuZGVyIHRyYW5zZm9ybXMgb24gdGhpcyBlbGVtZW50LCBpdCBjb3VsZCBkaXNwbGF5IHRoZSB3cm9uZyB2YWx1ZXMuXG5cblxuICAgICAgICBjYWNoZS51bmNhY2hlID0gMTtcblxuICAgICAgICBfcmVtb3ZlSW5kZXBlbmRlbnRUcmFuc2Zvcm1zKHN0eWxlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0sXG4gICAgLy8gbm90ZTogc3BlY2lhbFByb3BzIHNob3VsZCByZXR1cm4gMSBpZiAoYW5kIG9ubHkgaWYpIHRoZXkgaGF2ZSBhIG5vbi16ZXJvIHByaW9yaXR5LiBJdCBpbmRpY2F0ZXMgd2UgbmVlZCB0byBzb3J0IHRoZSBsaW5rZWQgbGlzdC5cbl9zcGVjaWFsUHJvcHMgPSB7XG4gIGNsZWFyUHJvcHM6IGZ1bmN0aW9uIGNsZWFyUHJvcHMocGx1Z2luLCB0YXJnZXQsIHByb3BlcnR5LCBlbmRWYWx1ZSwgdHdlZW4pIHtcbiAgICBpZiAodHdlZW4uZGF0YSAhPT0gXCJpc0Zyb21TdGFydFwiKSB7XG4gICAgICB2YXIgcHQgPSBwbHVnaW4uX3B0ID0gbmV3IFByb3BUd2VlbihwbHVnaW4uX3B0LCB0YXJnZXQsIHByb3BlcnR5LCAwLCAwLCBfcmVuZGVyQ2xlYXJQcm9wcyk7XG4gICAgICBwdC51ID0gZW5kVmFsdWU7XG4gICAgICBwdC5wciA9IC0xMDtcbiAgICAgIHB0LnR3ZWVuID0gdHdlZW47XG5cbiAgICAgIHBsdWdpbi5fcHJvcHMucHVzaChwcm9wZXJ0eSk7XG5cbiAgICAgIHJldHVybiAxO1xuICAgIH1cbiAgfVxuICAvKiBjbGFzc05hbWUgZmVhdHVyZSAoYWJvdXQgMC40a2IgZ3ppcHBlZCkuXG4gICwgY2xhc3NOYW1lKHBsdWdpbiwgdGFyZ2V0LCBwcm9wZXJ0eSwgZW5kVmFsdWUsIHR3ZWVuKSB7XG4gIFx0bGV0IF9yZW5kZXJDbGFzc05hbWUgPSAocmF0aW8sIGRhdGEpID0+IHtcbiAgXHRcdFx0ZGF0YS5jc3MucmVuZGVyKHJhdGlvLCBkYXRhLmNzcyk7XG4gIFx0XHRcdGlmICghcmF0aW8gfHwgcmF0aW8gPT09IDEpIHtcbiAgXHRcdFx0XHRsZXQgaW5saW5lID0gZGF0YS5ybXYsXG4gIFx0XHRcdFx0XHR0YXJnZXQgPSBkYXRhLnQsXG4gIFx0XHRcdFx0XHRwO1xuICBcdFx0XHRcdHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCByYXRpbyA/IGRhdGEuZSA6IGRhdGEuYik7XG4gIFx0XHRcdFx0Zm9yIChwIGluIGlubGluZSkge1xuICBcdFx0XHRcdFx0X3JlbW92ZVByb3BlcnR5KHRhcmdldCwgcCk7XG4gIFx0XHRcdFx0fVxuICBcdFx0XHR9XG4gIFx0XHR9LFxuICBcdFx0X2dldEFsbFN0eWxlcyA9ICh0YXJnZXQpID0+IHtcbiAgXHRcdFx0bGV0IHN0eWxlcyA9IHt9LFxuICBcdFx0XHRcdGNvbXB1dGVkID0gZ2V0Q29tcHV0ZWRTdHlsZSh0YXJnZXQpLFxuICBcdFx0XHRcdHA7XG4gIFx0XHRcdGZvciAocCBpbiBjb21wdXRlZCkge1xuICBcdFx0XHRcdGlmIChpc05hTihwKSAmJiBwICE9PSBcImNzc1RleHRcIiAmJiBwICE9PSBcImxlbmd0aFwiKSB7XG4gIFx0XHRcdFx0XHRzdHlsZXNbcF0gPSBjb21wdXRlZFtwXTtcbiAgXHRcdFx0XHR9XG4gIFx0XHRcdH1cbiAgXHRcdFx0X3NldERlZmF1bHRzKHN0eWxlcywgX3BhcnNlVHJhbnNmb3JtKHRhcmdldCwgMSkpO1xuICBcdFx0XHRyZXR1cm4gc3R5bGVzO1xuICBcdFx0fSxcbiAgXHRcdHN0YXJ0Q2xhc3NMaXN0ID0gdGFyZ2V0LmdldEF0dHJpYnV0ZShcImNsYXNzXCIpLFxuICBcdFx0c3R5bGUgPSB0YXJnZXQuc3R5bGUsXG4gIFx0XHRjc3NUZXh0ID0gc3R5bGUuY3NzVGV4dCxcbiAgXHRcdGNhY2hlID0gdGFyZ2V0Ll9nc2FwLFxuICBcdFx0Y2xhc3NQVCA9IGNhY2hlLmNsYXNzUFQsXG4gIFx0XHRpbmxpbmVUb1JlbW92ZUF0RW5kID0ge30sXG4gIFx0XHRkYXRhID0ge3Q6dGFyZ2V0LCBwbHVnaW46cGx1Z2luLCBybXY6aW5saW5lVG9SZW1vdmVBdEVuZCwgYjpzdGFydENsYXNzTGlzdCwgZTooZW5kVmFsdWUuY2hhckF0KDEpICE9PSBcIj1cIikgPyBlbmRWYWx1ZSA6IHN0YXJ0Q2xhc3NMaXN0LnJlcGxhY2UobmV3IFJlZ0V4cChcIig/OlxcXFxzfF4pXCIgKyBlbmRWYWx1ZS5zdWJzdHIoMikgKyBcIig/IVtcXFxcdy1dKVwiKSwgXCJcIikgKyAoKGVuZFZhbHVlLmNoYXJBdCgwKSA9PT0gXCIrXCIpID8gXCIgXCIgKyBlbmRWYWx1ZS5zdWJzdHIoMikgOiBcIlwiKX0sXG4gIFx0XHRjaGFuZ2luZ1ZhcnMgPSB7fSxcbiAgXHRcdHN0YXJ0VmFycyA9IF9nZXRBbGxTdHlsZXModGFyZ2V0KSxcbiAgXHRcdHRyYW5zZm9ybVJlbGF0ZWQgPSAvKHRyYW5zZm9ybXxwZXJzcGVjdGl2ZSkvaSxcbiAgXHRcdGVuZFZhcnMsIHA7XG4gIFx0aWYgKGNsYXNzUFQpIHtcbiAgXHRcdGNsYXNzUFQucigxLCBjbGFzc1BULmQpO1xuICBcdFx0X3JlbW92ZUxpbmtlZExpc3RJdGVtKGNsYXNzUFQuZC5wbHVnaW4sIGNsYXNzUFQsIFwiX3B0XCIpO1xuICBcdH1cbiAgXHR0YXJnZXQuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgZGF0YS5lKTtcbiAgXHRlbmRWYXJzID0gX2dldEFsbFN0eWxlcyh0YXJnZXQsIHRydWUpO1xuICBcdHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBzdGFydENsYXNzTGlzdCk7XG4gIFx0Zm9yIChwIGluIGVuZFZhcnMpIHtcbiAgXHRcdGlmIChlbmRWYXJzW3BdICE9PSBzdGFydFZhcnNbcF0gJiYgIXRyYW5zZm9ybVJlbGF0ZWQudGVzdChwKSkge1xuICBcdFx0XHRjaGFuZ2luZ1ZhcnNbcF0gPSBlbmRWYXJzW3BdO1xuICBcdFx0XHRpZiAoIXN0eWxlW3BdICYmIHN0eWxlW3BdICE9PSBcIjBcIikge1xuICBcdFx0XHRcdGlubGluZVRvUmVtb3ZlQXRFbmRbcF0gPSAxO1xuICBcdFx0XHR9XG4gIFx0XHR9XG4gIFx0fVxuICBcdGNhY2hlLmNsYXNzUFQgPSBwbHVnaW4uX3B0ID0gbmV3IFByb3BUd2VlbihwbHVnaW4uX3B0LCB0YXJnZXQsIFwiY2xhc3NOYW1lXCIsIDAsIDAsIF9yZW5kZXJDbGFzc05hbWUsIGRhdGEsIDAsIC0xMSk7XG4gIFx0aWYgKHN0eWxlLmNzc1RleHQgIT09IGNzc1RleHQpIHsgLy9vbmx5IGFwcGx5IGlmIHRoaW5ncyBjaGFuZ2UuIE90aGVyd2lzZSwgaW4gY2FzZXMgbGlrZSBhIGJhY2tncm91bmQtaW1hZ2UgdGhhdCdzIHB1bGxlZCBkeW5hbWljYWxseSwgaXQgY291bGQgY2F1c2UgYSByZWZyZXNoLiBTZWUgaHR0cHM6Ly9ncmVlbnNvY2suY29tL2ZvcnVtcy90b3BpYy8yMDM2OC1wb3NzaWJsZS1nc2FwLWJ1Zy1zd2l0Y2hpbmctY2xhc3NuYW1lcy1pbi1jaHJvbWUvLlxuICBcdFx0c3R5bGUuY3NzVGV4dCA9IGNzc1RleHQ7IC8vd2UgcmVjb3JkZWQgY3NzVGV4dCBiZWZvcmUgd2Ugc3dhcHBlZCBjbGFzc2VzIGFuZCByYW4gX2dldEFsbFN0eWxlcygpIGJlY2F1c2UgaW4gY2FzZXMgd2hlbiBhIGNsYXNzTmFtZSB0d2VlbiBpcyBvdmVyd3JpdHRlbiwgd2UgcmVtb3ZlIGFsbCB0aGUgcmVsYXRlZCB0d2VlbmluZyBwcm9wZXJ0aWVzIGZyb20gdGhhdCBjbGFzcyBjaGFuZ2UgKG90aGVyd2lzZSBjbGFzcy1zcGVjaWZpYyBzdHVmZiBjYW4ndCBvdmVycmlkZSBwcm9wZXJ0aWVzIHdlJ3ZlIGRpcmVjdGx5IHNldCBvbiB0aGUgdGFyZ2V0J3Mgc3R5bGUgb2JqZWN0IGR1ZSB0byBzcGVjaWZpY2l0eSkuXG4gIFx0fVxuICBcdF9wYXJzZVRyYW5zZm9ybSh0YXJnZXQsIHRydWUpOyAvL3RvIGNsZWFyIHRoZSBjYWNoaW5nIG9mIHRyYW5zZm9ybXNcbiAgXHRkYXRhLmNzcyA9IG5ldyBnc2FwLnBsdWdpbnMuY3NzKCk7XG4gIFx0ZGF0YS5jc3MuaW5pdCh0YXJnZXQsIGNoYW5naW5nVmFycywgdHdlZW4pO1xuICBcdHBsdWdpbi5fcHJvcHMucHVzaCguLi5kYXRhLmNzcy5fcHJvcHMpO1xuICBcdHJldHVybiAxO1xuICB9XG4gICovXG5cbn0sXG5cbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogVFJBTlNGT1JNU1xuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuX2lkZW50aXR5MkRNYXRyaXggPSBbMSwgMCwgMCwgMSwgMCwgMF0sXG4gICAgX3JvdGF0aW9uYWxQcm9wZXJ0aWVzID0ge30sXG4gICAgX2lzTnVsbFRyYW5zZm9ybSA9IGZ1bmN0aW9uIF9pc051bGxUcmFuc2Zvcm0odmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09PSBcIm1hdHJpeCgxLCAwLCAwLCAxLCAwLCAwKVwiIHx8IHZhbHVlID09PSBcIm5vbmVcIiB8fCAhdmFsdWU7XG59LFxuICAgIF9nZXRDb21wdXRlZFRyYW5zZm9ybU1hdHJpeEFzQXJyYXkgPSBmdW5jdGlvbiBfZ2V0Q29tcHV0ZWRUcmFuc2Zvcm1NYXRyaXhBc0FycmF5KHRhcmdldCkge1xuICB2YXIgbWF0cml4U3RyaW5nID0gX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBfdHJhbnNmb3JtUHJvcCk7XG5cbiAgcmV0dXJuIF9pc051bGxUcmFuc2Zvcm0obWF0cml4U3RyaW5nKSA/IF9pZGVudGl0eTJETWF0cml4IDogbWF0cml4U3RyaW5nLnN1YnN0cig3KS5tYXRjaChfbnVtRXhwKS5tYXAoX3JvdW5kKTtcbn0sXG4gICAgX2dldE1hdHJpeCA9IGZ1bmN0aW9uIF9nZXRNYXRyaXgodGFyZ2V0LCBmb3JjZTJEKSB7XG4gIHZhciBjYWNoZSA9IHRhcmdldC5fZ3NhcCB8fCBfZ2V0Q2FjaGUodGFyZ2V0KSxcbiAgICAgIHN0eWxlID0gdGFyZ2V0LnN0eWxlLFxuICAgICAgbWF0cml4ID0gX2dldENvbXB1dGVkVHJhbnNmb3JtTWF0cml4QXNBcnJheSh0YXJnZXQpLFxuICAgICAgcGFyZW50LFxuICAgICAgbmV4dFNpYmxpbmcsXG4gICAgICB0ZW1wLFxuICAgICAgYWRkZWRUb0RPTTtcblxuICBpZiAoY2FjaGUuc3ZnICYmIHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIikpIHtcbiAgICB0ZW1wID0gdGFyZ2V0LnRyYW5zZm9ybS5iYXNlVmFsLmNvbnNvbGlkYXRlKCkubWF0cml4OyAvL2Vuc3VyZXMgdGhhdCBldmVuIGNvbXBsZXggdmFsdWVzIGxpa2UgXCJ0cmFuc2xhdGUoNTAsNjApIHJvdGF0ZSgxMzUsMCwwKVwiIGFyZSBwYXJzZWQgYmVjYXVzZSBpdCBtYXNoZXMgaXQgaW50byBhIG1hdHJpeC5cblxuICAgIG1hdHJpeCA9IFt0ZW1wLmEsIHRlbXAuYiwgdGVtcC5jLCB0ZW1wLmQsIHRlbXAuZSwgdGVtcC5mXTtcbiAgICByZXR1cm4gbWF0cml4LmpvaW4oXCIsXCIpID09PSBcIjEsMCwwLDEsMCwwXCIgPyBfaWRlbnRpdHkyRE1hdHJpeCA6IG1hdHJpeDtcbiAgfSBlbHNlIGlmIChtYXRyaXggPT09IF9pZGVudGl0eTJETWF0cml4ICYmICF0YXJnZXQub2Zmc2V0UGFyZW50ICYmIHRhcmdldCAhPT0gX2RvY0VsZW1lbnQgJiYgIWNhY2hlLnN2Zykge1xuICAgIC8vbm90ZTogaWYgb2Zmc2V0UGFyZW50IGlzIG51bGwsIHRoYXQgbWVhbnMgdGhlIGVsZW1lbnQgaXNuJ3QgaW4gdGhlIG5vcm1hbCBkb2N1bWVudCBmbG93LCBsaWtlIGlmIGl0IGhhcyBkaXNwbGF5Om5vbmUgb3Igb25lIG9mIGl0cyBhbmNlc3RvcnMgaGFzIGRpc3BsYXk6bm9uZSkuIEZpcmVmb3ggcmV0dXJucyBudWxsIGZvciBnZXRDb21wdXRlZFN0eWxlKCkgaWYgdGhlIGVsZW1lbnQgaXMgaW4gYW4gaWZyYW1lIHRoYXQgaGFzIGRpc3BsYXk6bm9uZS4gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NTQ4Mzk3XG4gICAgLy9icm93c2VycyBkb24ndCByZXBvcnQgdHJhbnNmb3JtcyBhY2N1cmF0ZWx5IHVubGVzcyB0aGUgZWxlbWVudCBpcyBpbiB0aGUgRE9NIGFuZCBoYXMgYSBkaXNwbGF5IHZhbHVlIHRoYXQncyBub3QgXCJub25lXCIuIEZpcmVmb3ggYW5kIE1pY3Jvc29mdCBicm93c2VycyBoYXZlIGEgcGFydGlhbCBidWcgd2hlcmUgdGhleSdsbCByZXBvcnQgdHJhbnNmb3JtcyBldmVuIGlmIGRpc3BsYXk6bm9uZSBCVVQgbm90IGFueSBwZXJjZW50YWdlLWJhc2VkIHZhbHVlcyBsaWtlIHRyYW5zbGF0ZSgtNTAlLCA4cHgpIHdpbGwgYmUgcmVwb3J0ZWQgYXMgaWYgaXQncyB0cmFuc2xhdGUoMCwgOHB4KS5cbiAgICB0ZW1wID0gc3R5bGUuZGlzcGxheTtcbiAgICBzdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICAgIHBhcmVudCA9IHRhcmdldC5wYXJlbnROb2RlO1xuXG4gICAgaWYgKCFwYXJlbnQgfHwgIXRhcmdldC5vZmZzZXRQYXJlbnQpIHtcbiAgICAgIC8vIG5vdGU6IGluIDMuMy4wIHdlIHN3aXRjaGVkIHRhcmdldC5vZmZzZXRQYXJlbnQgdG8gX2RvYy5ib2R5LmNvbnRhaW5zKHRhcmdldCkgdG8gYXZvaWQgW3NvbWV0aW1lcyB1bm5lY2Vzc2FyeV0gTXV0YXRpb25PYnNlcnZlciBjYWxscyBidXQgdGhhdCB3YXNuJ3QgYWRlcXVhdGUgYmVjYXVzZSB0aGVyZSBhcmUgZWRnZSBjYXNlcyB3aGVyZSBuZXN0ZWQgcG9zaXRpb246IGZpeGVkIGVsZW1lbnRzIG5lZWQgdG8gZ2V0IHJlcGFyZW50ZWQgdG8gYWNjdXJhdGVseSBzZW5zZSB0cmFuc2Zvcm1zLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2dyZWVuc29jay9HU0FQL2lzc3Vlcy8zODggYW5kIGh0dHBzOi8vZ2l0aHViLmNvbS9ncmVlbnNvY2svR1NBUC9pc3N1ZXMvMzc1XG4gICAgICBhZGRlZFRvRE9NID0gMTsgLy9mbGFnXG5cbiAgICAgIG5leHRTaWJsaW5nID0gdGFyZ2V0Lm5leHRFbGVtZW50U2libGluZztcblxuICAgICAgX2RvY0VsZW1lbnQuYXBwZW5kQ2hpbGQodGFyZ2V0KTsgLy93ZSBtdXN0IGFkZCBpdCB0byB0aGUgRE9NIGluIG9yZGVyIHRvIGdldCB2YWx1ZXMgcHJvcGVybHlcblxuICAgIH1cblxuICAgIG1hdHJpeCA9IF9nZXRDb21wdXRlZFRyYW5zZm9ybU1hdHJpeEFzQXJyYXkodGFyZ2V0KTtcbiAgICB0ZW1wID8gc3R5bGUuZGlzcGxheSA9IHRlbXAgOiBfcmVtb3ZlUHJvcGVydHkodGFyZ2V0LCBcImRpc3BsYXlcIik7XG5cbiAgICBpZiAoYWRkZWRUb0RPTSkge1xuICAgICAgbmV4dFNpYmxpbmcgPyBwYXJlbnQuaW5zZXJ0QmVmb3JlKHRhcmdldCwgbmV4dFNpYmxpbmcpIDogcGFyZW50ID8gcGFyZW50LmFwcGVuZENoaWxkKHRhcmdldCkgOiBfZG9jRWxlbWVudC5yZW1vdmVDaGlsZCh0YXJnZXQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmb3JjZTJEICYmIG1hdHJpeC5sZW5ndGggPiA2ID8gW21hdHJpeFswXSwgbWF0cml4WzFdLCBtYXRyaXhbNF0sIG1hdHJpeFs1XSwgbWF0cml4WzEyXSwgbWF0cml4WzEzXV0gOiBtYXRyaXg7XG59LFxuICAgIF9hcHBseVNWR09yaWdpbiA9IGZ1bmN0aW9uIF9hcHBseVNWR09yaWdpbih0YXJnZXQsIG9yaWdpbiwgb3JpZ2luSXNBYnNvbHV0ZSwgc21vb3RoLCBtYXRyaXhBcnJheSwgcGx1Z2luVG9BZGRQcm9wVHdlZW5zVG8pIHtcbiAgdmFyIGNhY2hlID0gdGFyZ2V0Ll9nc2FwLFxuICAgICAgbWF0cml4ID0gbWF0cml4QXJyYXkgfHwgX2dldE1hdHJpeCh0YXJnZXQsIHRydWUpLFxuICAgICAgeE9yaWdpbk9sZCA9IGNhY2hlLnhPcmlnaW4gfHwgMCxcbiAgICAgIHlPcmlnaW5PbGQgPSBjYWNoZS55T3JpZ2luIHx8IDAsXG4gICAgICB4T2Zmc2V0T2xkID0gY2FjaGUueE9mZnNldCB8fCAwLFxuICAgICAgeU9mZnNldE9sZCA9IGNhY2hlLnlPZmZzZXQgfHwgMCxcbiAgICAgIGEgPSBtYXRyaXhbMF0sXG4gICAgICBiID0gbWF0cml4WzFdLFxuICAgICAgYyA9IG1hdHJpeFsyXSxcbiAgICAgIGQgPSBtYXRyaXhbM10sXG4gICAgICB0eCA9IG1hdHJpeFs0XSxcbiAgICAgIHR5ID0gbWF0cml4WzVdLFxuICAgICAgb3JpZ2luU3BsaXQgPSBvcmlnaW4uc3BsaXQoXCIgXCIpLFxuICAgICAgeE9yaWdpbiA9IHBhcnNlRmxvYXQob3JpZ2luU3BsaXRbMF0pIHx8IDAsXG4gICAgICB5T3JpZ2luID0gcGFyc2VGbG9hdChvcmlnaW5TcGxpdFsxXSkgfHwgMCxcbiAgICAgIGJvdW5kcyxcbiAgICAgIGRldGVybWluYW50LFxuICAgICAgeCxcbiAgICAgIHk7XG5cbiAgaWYgKCFvcmlnaW5Jc0Fic29sdXRlKSB7XG4gICAgYm91bmRzID0gX2dldEJCb3godGFyZ2V0KTtcbiAgICB4T3JpZ2luID0gYm91bmRzLnggKyAofm9yaWdpblNwbGl0WzBdLmluZGV4T2YoXCIlXCIpID8geE9yaWdpbiAvIDEwMCAqIGJvdW5kcy53aWR0aCA6IHhPcmlnaW4pO1xuICAgIHlPcmlnaW4gPSBib3VuZHMueSArICh+KG9yaWdpblNwbGl0WzFdIHx8IG9yaWdpblNwbGl0WzBdKS5pbmRleE9mKFwiJVwiKSA/IHlPcmlnaW4gLyAxMDAgKiBib3VuZHMuaGVpZ2h0IDogeU9yaWdpbik7XG4gIH0gZWxzZSBpZiAobWF0cml4ICE9PSBfaWRlbnRpdHkyRE1hdHJpeCAmJiAoZGV0ZXJtaW5hbnQgPSBhICogZCAtIGIgKiBjKSkge1xuICAgIC8vaWYgaXQncyB6ZXJvIChsaWtlIGlmIHNjYWxlWCBhbmQgc2NhbGVZIGFyZSB6ZXJvKSwgc2tpcCBpdCB0byBhdm9pZCBlcnJvcnMgd2l0aCBkaXZpZGluZyBieSB6ZXJvLlxuICAgIHggPSB4T3JpZ2luICogKGQgLyBkZXRlcm1pbmFudCkgKyB5T3JpZ2luICogKC1jIC8gZGV0ZXJtaW5hbnQpICsgKGMgKiB0eSAtIGQgKiB0eCkgLyBkZXRlcm1pbmFudDtcbiAgICB5ID0geE9yaWdpbiAqICgtYiAvIGRldGVybWluYW50KSArIHlPcmlnaW4gKiAoYSAvIGRldGVybWluYW50KSAtIChhICogdHkgLSBiICogdHgpIC8gZGV0ZXJtaW5hbnQ7XG4gICAgeE9yaWdpbiA9IHg7XG4gICAgeU9yaWdpbiA9IHk7XG4gIH1cblxuICBpZiAoc21vb3RoIHx8IHNtb290aCAhPT0gZmFsc2UgJiYgY2FjaGUuc21vb3RoKSB7XG4gICAgdHggPSB4T3JpZ2luIC0geE9yaWdpbk9sZDtcbiAgICB0eSA9IHlPcmlnaW4gLSB5T3JpZ2luT2xkO1xuICAgIGNhY2hlLnhPZmZzZXQgPSB4T2Zmc2V0T2xkICsgKHR4ICogYSArIHR5ICogYykgLSB0eDtcbiAgICBjYWNoZS55T2Zmc2V0ID0geU9mZnNldE9sZCArICh0eCAqIGIgKyB0eSAqIGQpIC0gdHk7XG4gIH0gZWxzZSB7XG4gICAgY2FjaGUueE9mZnNldCA9IGNhY2hlLnlPZmZzZXQgPSAwO1xuICB9XG5cbiAgY2FjaGUueE9yaWdpbiA9IHhPcmlnaW47XG4gIGNhY2hlLnlPcmlnaW4gPSB5T3JpZ2luO1xuICBjYWNoZS5zbW9vdGggPSAhIXNtb290aDtcbiAgY2FjaGUub3JpZ2luID0gb3JpZ2luO1xuICBjYWNoZS5vcmlnaW5Jc0Fic29sdXRlID0gISFvcmlnaW5Jc0Fic29sdXRlO1xuICB0YXJnZXQuc3R5bGVbX3RyYW5zZm9ybU9yaWdpblByb3BdID0gXCIwcHggMHB4XCI7IC8vb3RoZXJ3aXNlLCBpZiBzb21lb25lIHNldHMgIGFuIG9yaWdpbiB2aWEgQ1NTLCBpdCB3aWxsIGxpa2VseSBpbnRlcmZlcmUgd2l0aCB0aGUgU1ZHIHRyYW5zZm9ybSBhdHRyaWJ1dGUgb25lcyAoYmVjYXVzZSByZW1lbWJlciwgd2UncmUgYmFraW5nIHRoZSBvcmlnaW4gaW50byB0aGUgbWF0cml4KCkgdmFsdWUpLlxuXG4gIGlmIChwbHVnaW5Ub0FkZFByb3BUd2VlbnNUbykge1xuICAgIF9hZGROb25Ud2VlbmluZ1BUKHBsdWdpblRvQWRkUHJvcFR3ZWVuc1RvLCBjYWNoZSwgXCJ4T3JpZ2luXCIsIHhPcmlnaW5PbGQsIHhPcmlnaW4pO1xuXG4gICAgX2FkZE5vblR3ZWVuaW5nUFQocGx1Z2luVG9BZGRQcm9wVHdlZW5zVG8sIGNhY2hlLCBcInlPcmlnaW5cIiwgeU9yaWdpbk9sZCwgeU9yaWdpbik7XG5cbiAgICBfYWRkTm9uVHdlZW5pbmdQVChwbHVnaW5Ub0FkZFByb3BUd2VlbnNUbywgY2FjaGUsIFwieE9mZnNldFwiLCB4T2Zmc2V0T2xkLCBjYWNoZS54T2Zmc2V0KTtcblxuICAgIF9hZGROb25Ud2VlbmluZ1BUKHBsdWdpblRvQWRkUHJvcFR3ZWVuc1RvLCBjYWNoZSwgXCJ5T2Zmc2V0XCIsIHlPZmZzZXRPbGQsIGNhY2hlLnlPZmZzZXQpO1xuICB9XG5cbiAgdGFyZ2V0LnNldEF0dHJpYnV0ZShcImRhdGEtc3ZnLW9yaWdpblwiLCB4T3JpZ2luICsgXCIgXCIgKyB5T3JpZ2luKTtcbn0sXG4gICAgX3BhcnNlVHJhbnNmb3JtID0gZnVuY3Rpb24gX3BhcnNlVHJhbnNmb3JtKHRhcmdldCwgdW5jYWNoZSkge1xuICB2YXIgY2FjaGUgPSB0YXJnZXQuX2dzYXAgfHwgbmV3IEdTQ2FjaGUodGFyZ2V0KTtcblxuICBpZiAoXCJ4XCIgaW4gY2FjaGUgJiYgIXVuY2FjaGUgJiYgIWNhY2hlLnVuY2FjaGUpIHtcbiAgICByZXR1cm4gY2FjaGU7XG4gIH1cblxuICB2YXIgc3R5bGUgPSB0YXJnZXQuc3R5bGUsXG4gICAgICBpbnZlcnRlZFNjYWxlWCA9IGNhY2hlLnNjYWxlWCA8IDAsXG4gICAgICBweCA9IFwicHhcIixcbiAgICAgIGRlZyA9IFwiZGVnXCIsXG4gICAgICBjcyA9IGdldENvbXB1dGVkU3R5bGUodGFyZ2V0KSxcbiAgICAgIG9yaWdpbiA9IF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgX3RyYW5zZm9ybU9yaWdpblByb3ApIHx8IFwiMFwiLFxuICAgICAgeCxcbiAgICAgIHksXG4gICAgICB6LFxuICAgICAgc2NhbGVYLFxuICAgICAgc2NhbGVZLFxuICAgICAgcm90YXRpb24sXG4gICAgICByb3RhdGlvblgsXG4gICAgICByb3RhdGlvblksXG4gICAgICBza2V3WCxcbiAgICAgIHNrZXdZLFxuICAgICAgcGVyc3BlY3RpdmUsXG4gICAgICB4T3JpZ2luLFxuICAgICAgeU9yaWdpbixcbiAgICAgIG1hdHJpeCxcbiAgICAgIGFuZ2xlLFxuICAgICAgY29zLFxuICAgICAgc2luLFxuICAgICAgYSxcbiAgICAgIGIsXG4gICAgICBjLFxuICAgICAgZCxcbiAgICAgIGExMixcbiAgICAgIGEyMixcbiAgICAgIHQxLFxuICAgICAgdDIsXG4gICAgICB0MyxcbiAgICAgIGExMyxcbiAgICAgIGEyMyxcbiAgICAgIGEzMyxcbiAgICAgIGE0MixcbiAgICAgIGE0MyxcbiAgICAgIGEzMjtcbiAgeCA9IHkgPSB6ID0gcm90YXRpb24gPSByb3RhdGlvblggPSByb3RhdGlvblkgPSBza2V3WCA9IHNrZXdZID0gcGVyc3BlY3RpdmUgPSAwO1xuICBzY2FsZVggPSBzY2FsZVkgPSAxO1xuICBjYWNoZS5zdmcgPSAhISh0YXJnZXQuZ2V0Q1RNICYmIF9pc1NWRyh0YXJnZXQpKTtcblxuICBpZiAoY3MudHJhbnNsYXRlKSB7XG4gICAgLy8gYWNjb21tb2RhdGUgaW5kZXBlbmRlbnQgdHJhbnNmb3JtcyBieSBjb21iaW5pbmcgdGhlbSBpbnRvIG5vcm1hbCBvbmVzLlxuICAgIGlmIChjcy50cmFuc2xhdGUgIT09IFwibm9uZVwiIHx8IGNzLnNjYWxlICE9PSBcIm5vbmVcIiB8fCBjcy5yb3RhdGUgIT09IFwibm9uZVwiKSB7XG4gICAgICBzdHlsZVtfdHJhbnNmb3JtUHJvcF0gPSAoY3MudHJhbnNsYXRlICE9PSBcIm5vbmVcIiA/IFwidHJhbnNsYXRlM2QoXCIgKyAoY3MudHJhbnNsYXRlICsgXCIgMCAwXCIpLnNwbGl0KFwiIFwiKS5zbGljZSgwLCAzKS5qb2luKFwiLCBcIikgKyBcIikgXCIgOiBcIlwiKSArIChjcy5yb3RhdGUgIT09IFwibm9uZVwiID8gXCJyb3RhdGUoXCIgKyBjcy5yb3RhdGUgKyBcIikgXCIgOiBcIlwiKSArIChjcy5zY2FsZSAhPT0gXCJub25lXCIgPyBcInNjYWxlKFwiICsgY3Muc2NhbGUuc3BsaXQoXCIgXCIpLmpvaW4oXCIsXCIpICsgXCIpIFwiIDogXCJcIikgKyBjc1tfdHJhbnNmb3JtUHJvcF07XG4gICAgfVxuXG4gICAgc3R5bGUuc2NhbGUgPSBzdHlsZS5yb3RhdGUgPSBzdHlsZS50cmFuc2xhdGUgPSBcIm5vbmVcIjtcbiAgfVxuXG4gIG1hdHJpeCA9IF9nZXRNYXRyaXgodGFyZ2V0LCBjYWNoZS5zdmcpO1xuXG4gIGlmIChjYWNoZS5zdmcpIHtcbiAgICBpZiAoY2FjaGUudW5jYWNoZSkge1xuICAgICAgLy8gaWYgY2FjaGUudW5jYWNoZSBpcyB0cnVlIChhbmQgbWF5YmUgaWYgb3JpZ2luIGlzIDAsMCksIHdlIG5lZWQgdG8gc2V0IGVsZW1lbnQuc3R5bGUudHJhbnNmb3JtT3JpZ2luID0gKGNhY2hlLnhPcmlnaW4gLSBiYm94LngpICsgXCJweCBcIiArIChjYWNoZS55T3JpZ2luIC0gYmJveC55KSArIFwicHhcIi4gUHJldmlvdXNseSB3ZSBsZXQgdGhlIGRhdGEtc3ZnLW9yaWdpbiBzdGF5IGluc3RlYWQsIGJ1dCB3aGVuIGludHJvZHVjaW5nIHJldmVydCgpLCBpdCBjb21wbGljYXRlZCB0aGluZ3MuXG4gICAgICB0MiA9IHRhcmdldC5nZXRCQm94KCk7XG4gICAgICBvcmlnaW4gPSBjYWNoZS54T3JpZ2luIC0gdDIueCArIFwicHggXCIgKyAoY2FjaGUueU9yaWdpbiAtIHQyLnkpICsgXCJweFwiO1xuICAgICAgdDEgPSBcIlwiO1xuICAgIH0gZWxzZSB7XG4gICAgICB0MSA9ICF1bmNhY2hlICYmIHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXN2Zy1vcmlnaW5cIik7IC8vICBSZW1lbWJlciwgdG8gd29yayBhcm91bmQgYnJvd3NlciBpbmNvbnNpc3RlbmNpZXMgd2UgYWx3YXlzIGZvcmNlIFNWRyBlbGVtZW50cycgdHJhbnNmb3JtT3JpZ2luIHRvIDAsMCBhbmQgb2Zmc2V0IHRoZSB0cmFuc2xhdGlvbiBhY2NvcmRpbmdseS5cbiAgICB9XG5cbiAgICBfYXBwbHlTVkdPcmlnaW4odGFyZ2V0LCB0MSB8fCBvcmlnaW4sICEhdDEgfHwgY2FjaGUub3JpZ2luSXNBYnNvbHV0ZSwgY2FjaGUuc21vb3RoICE9PSBmYWxzZSwgbWF0cml4KTtcbiAgfVxuXG4gIHhPcmlnaW4gPSBjYWNoZS54T3JpZ2luIHx8IDA7XG4gIHlPcmlnaW4gPSBjYWNoZS55T3JpZ2luIHx8IDA7XG5cbiAgaWYgKG1hdHJpeCAhPT0gX2lkZW50aXR5MkRNYXRyaXgpIHtcbiAgICBhID0gbWF0cml4WzBdOyAvL2ExMVxuXG4gICAgYiA9IG1hdHJpeFsxXTsgLy9hMjFcblxuICAgIGMgPSBtYXRyaXhbMl07IC8vYTMxXG5cbiAgICBkID0gbWF0cml4WzNdOyAvL2E0MVxuXG4gICAgeCA9IGExMiA9IG1hdHJpeFs0XTtcbiAgICB5ID0gYTIyID0gbWF0cml4WzVdOyAvLzJEIG1hdHJpeFxuXG4gICAgaWYgKG1hdHJpeC5sZW5ndGggPT09IDYpIHtcbiAgICAgIHNjYWxlWCA9IE1hdGguc3FydChhICogYSArIGIgKiBiKTtcbiAgICAgIHNjYWxlWSA9IE1hdGguc3FydChkICogZCArIGMgKiBjKTtcbiAgICAgIHJvdGF0aW9uID0gYSB8fCBiID8gX2F0YW4yKGIsIGEpICogX1JBRDJERUcgOiAwOyAvL25vdGU6IGlmIHNjYWxlWCBpcyAwLCB3ZSBjYW5ub3QgYWNjdXJhdGVseSBtZWFzdXJlIHJvdGF0aW9uLiBTYW1lIGZvciBza2V3WCB3aXRoIGEgc2NhbGVZIG9mIDAuIFRoZXJlZm9yZSwgd2UgZGVmYXVsdCB0byB0aGUgcHJldmlvdXNseSByZWNvcmRlZCB2YWx1ZSAob3IgemVybyBpZiB0aGF0IGRvZXNuJ3QgZXhpc3QpLlxuXG4gICAgICBza2V3WCA9IGMgfHwgZCA/IF9hdGFuMihjLCBkKSAqIF9SQUQyREVHICsgcm90YXRpb24gOiAwO1xuICAgICAgc2tld1ggJiYgKHNjYWxlWSAqPSBNYXRoLmFicyhNYXRoLmNvcyhza2V3WCAqIF9ERUcyUkFEKSkpO1xuXG4gICAgICBpZiAoY2FjaGUuc3ZnKSB7XG4gICAgICAgIHggLT0geE9yaWdpbiAtICh4T3JpZ2luICogYSArIHlPcmlnaW4gKiBjKTtcbiAgICAgICAgeSAtPSB5T3JpZ2luIC0gKHhPcmlnaW4gKiBiICsgeU9yaWdpbiAqIGQpO1xuICAgICAgfSAvLzNEIG1hdHJpeFxuXG4gICAgfSBlbHNlIHtcbiAgICAgIGEzMiA9IG1hdHJpeFs2XTtcbiAgICAgIGE0MiA9IG1hdHJpeFs3XTtcbiAgICAgIGExMyA9IG1hdHJpeFs4XTtcbiAgICAgIGEyMyA9IG1hdHJpeFs5XTtcbiAgICAgIGEzMyA9IG1hdHJpeFsxMF07XG4gICAgICBhNDMgPSBtYXRyaXhbMTFdO1xuICAgICAgeCA9IG1hdHJpeFsxMl07XG4gICAgICB5ID0gbWF0cml4WzEzXTtcbiAgICAgIHogPSBtYXRyaXhbMTRdO1xuICAgICAgYW5nbGUgPSBfYXRhbjIoYTMyLCBhMzMpO1xuICAgICAgcm90YXRpb25YID0gYW5nbGUgKiBfUkFEMkRFRzsgLy9yb3RhdGlvblhcblxuICAgICAgaWYgKGFuZ2xlKSB7XG4gICAgICAgIGNvcyA9IE1hdGguY29zKC1hbmdsZSk7XG4gICAgICAgIHNpbiA9IE1hdGguc2luKC1hbmdsZSk7XG4gICAgICAgIHQxID0gYTEyICogY29zICsgYTEzICogc2luO1xuICAgICAgICB0MiA9IGEyMiAqIGNvcyArIGEyMyAqIHNpbjtcbiAgICAgICAgdDMgPSBhMzIgKiBjb3MgKyBhMzMgKiBzaW47XG4gICAgICAgIGExMyA9IGExMiAqIC1zaW4gKyBhMTMgKiBjb3M7XG4gICAgICAgIGEyMyA9IGEyMiAqIC1zaW4gKyBhMjMgKiBjb3M7XG4gICAgICAgIGEzMyA9IGEzMiAqIC1zaW4gKyBhMzMgKiBjb3M7XG4gICAgICAgIGE0MyA9IGE0MiAqIC1zaW4gKyBhNDMgKiBjb3M7XG4gICAgICAgIGExMiA9IHQxO1xuICAgICAgICBhMjIgPSB0MjtcbiAgICAgICAgYTMyID0gdDM7XG4gICAgICB9IC8vcm90YXRpb25ZXG5cblxuICAgICAgYW5nbGUgPSBfYXRhbjIoLWMsIGEzMyk7XG4gICAgICByb3RhdGlvblkgPSBhbmdsZSAqIF9SQUQyREVHO1xuXG4gICAgICBpZiAoYW5nbGUpIHtcbiAgICAgICAgY29zID0gTWF0aC5jb3MoLWFuZ2xlKTtcbiAgICAgICAgc2luID0gTWF0aC5zaW4oLWFuZ2xlKTtcbiAgICAgICAgdDEgPSBhICogY29zIC0gYTEzICogc2luO1xuICAgICAgICB0MiA9IGIgKiBjb3MgLSBhMjMgKiBzaW47XG4gICAgICAgIHQzID0gYyAqIGNvcyAtIGEzMyAqIHNpbjtcbiAgICAgICAgYTQzID0gZCAqIHNpbiArIGE0MyAqIGNvcztcbiAgICAgICAgYSA9IHQxO1xuICAgICAgICBiID0gdDI7XG4gICAgICAgIGMgPSB0MztcbiAgICAgIH0gLy9yb3RhdGlvblpcblxuXG4gICAgICBhbmdsZSA9IF9hdGFuMihiLCBhKTtcbiAgICAgIHJvdGF0aW9uID0gYW5nbGUgKiBfUkFEMkRFRztcblxuICAgICAgaWYgKGFuZ2xlKSB7XG4gICAgICAgIGNvcyA9IE1hdGguY29zKGFuZ2xlKTtcbiAgICAgICAgc2luID0gTWF0aC5zaW4oYW5nbGUpO1xuICAgICAgICB0MSA9IGEgKiBjb3MgKyBiICogc2luO1xuICAgICAgICB0MiA9IGExMiAqIGNvcyArIGEyMiAqIHNpbjtcbiAgICAgICAgYiA9IGIgKiBjb3MgLSBhICogc2luO1xuICAgICAgICBhMjIgPSBhMjIgKiBjb3MgLSBhMTIgKiBzaW47XG4gICAgICAgIGEgPSB0MTtcbiAgICAgICAgYTEyID0gdDI7XG4gICAgICB9XG5cbiAgICAgIGlmIChyb3RhdGlvblggJiYgTWF0aC5hYnMocm90YXRpb25YKSArIE1hdGguYWJzKHJvdGF0aW9uKSA+IDM1OS45KSB7XG4gICAgICAgIC8vd2hlbiByb3RhdGlvblkgaXMgc2V0LCBpdCB3aWxsIG9mdGVuIGJlIHBhcnNlZCBhcyAxODAgZGVncmVlcyBkaWZmZXJlbnQgdGhhbiBpdCBzaG91bGQgYmUsIGFuZCByb3RhdGlvblggYW5kIHJvdGF0aW9uIGJvdGggYmVpbmcgMTgwIChpdCBsb29rcyB0aGUgc2FtZSksIHNvIHdlIGFkanVzdCBmb3IgdGhhdCBoZXJlLlxuICAgICAgICByb3RhdGlvblggPSByb3RhdGlvbiA9IDA7XG4gICAgICAgIHJvdGF0aW9uWSA9IDE4MCAtIHJvdGF0aW9uWTtcbiAgICAgIH1cblxuICAgICAgc2NhbGVYID0gX3JvdW5kKE1hdGguc3FydChhICogYSArIGIgKiBiICsgYyAqIGMpKTtcbiAgICAgIHNjYWxlWSA9IF9yb3VuZChNYXRoLnNxcnQoYTIyICogYTIyICsgYTMyICogYTMyKSk7XG4gICAgICBhbmdsZSA9IF9hdGFuMihhMTIsIGEyMik7XG4gICAgICBza2V3WCA9IE1hdGguYWJzKGFuZ2xlKSA+IDAuMDAwMiA/IGFuZ2xlICogX1JBRDJERUcgOiAwO1xuICAgICAgcGVyc3BlY3RpdmUgPSBhNDMgPyAxIC8gKGE0MyA8IDAgPyAtYTQzIDogYTQzKSA6IDA7XG4gICAgfVxuXG4gICAgaWYgKGNhY2hlLnN2Zykge1xuICAgICAgLy9zZW5zZSBpZiB0aGVyZSBhcmUgQ1NTIHRyYW5zZm9ybXMgYXBwbGllZCBvbiBhbiBTVkcgZWxlbWVudCBpbiB3aGljaCBjYXNlIHdlIG11c3Qgb3ZlcndyaXRlIHRoZW0gd2hlbiByZW5kZXJpbmcuIFRoZSB0cmFuc2Zvcm0gYXR0cmlidXRlIGlzIG1vcmUgcmVsaWFibGUgY3Jvc3MtYnJvd3NlciwgYnV0IHdlIGNhbid0IGp1c3QgcmVtb3ZlIHRoZSBDU1Mgb25lcyBiZWNhdXNlIHRoZXkgbWF5IGJlIGFwcGxpZWQgaW4gYSBDU1MgcnVsZSBzb21ld2hlcmUgKG5vdCBqdXN0IGlubGluZSkuXG4gICAgICB0MSA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIik7XG4gICAgICBjYWNoZS5mb3JjZUNTUyA9IHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIiwgXCJcIikgfHwgIV9pc051bGxUcmFuc2Zvcm0oX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBfdHJhbnNmb3JtUHJvcCkpO1xuICAgICAgdDEgJiYgdGFyZ2V0LnNldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiLCB0MSk7XG4gICAgfVxuICB9XG5cbiAgaWYgKE1hdGguYWJzKHNrZXdYKSA+IDkwICYmIE1hdGguYWJzKHNrZXdYKSA8IDI3MCkge1xuICAgIGlmIChpbnZlcnRlZFNjYWxlWCkge1xuICAgICAgc2NhbGVYICo9IC0xO1xuICAgICAgc2tld1ggKz0gcm90YXRpb24gPD0gMCA/IDE4MCA6IC0xODA7XG4gICAgICByb3RhdGlvbiArPSByb3RhdGlvbiA8PSAwID8gMTgwIDogLTE4MDtcbiAgICB9IGVsc2Uge1xuICAgICAgc2NhbGVZICo9IC0xO1xuICAgICAgc2tld1ggKz0gc2tld1ggPD0gMCA/IDE4MCA6IC0xODA7XG4gICAgfVxuICB9XG5cbiAgdW5jYWNoZSA9IHVuY2FjaGUgfHwgY2FjaGUudW5jYWNoZTtcbiAgY2FjaGUueCA9IHggLSAoKGNhY2hlLnhQZXJjZW50ID0geCAmJiAoIXVuY2FjaGUgJiYgY2FjaGUueFBlcmNlbnQgfHwgKE1hdGgucm91bmQodGFyZ2V0Lm9mZnNldFdpZHRoIC8gMikgPT09IE1hdGgucm91bmQoLXgpID8gLTUwIDogMCkpKSA/IHRhcmdldC5vZmZzZXRXaWR0aCAqIGNhY2hlLnhQZXJjZW50IC8gMTAwIDogMCkgKyBweDtcbiAgY2FjaGUueSA9IHkgLSAoKGNhY2hlLnlQZXJjZW50ID0geSAmJiAoIXVuY2FjaGUgJiYgY2FjaGUueVBlcmNlbnQgfHwgKE1hdGgucm91bmQodGFyZ2V0Lm9mZnNldEhlaWdodCAvIDIpID09PSBNYXRoLnJvdW5kKC15KSA/IC01MCA6IDApKSkgPyB0YXJnZXQub2Zmc2V0SGVpZ2h0ICogY2FjaGUueVBlcmNlbnQgLyAxMDAgOiAwKSArIHB4O1xuICBjYWNoZS56ID0geiArIHB4O1xuICBjYWNoZS5zY2FsZVggPSBfcm91bmQoc2NhbGVYKTtcbiAgY2FjaGUuc2NhbGVZID0gX3JvdW5kKHNjYWxlWSk7XG4gIGNhY2hlLnJvdGF0aW9uID0gX3JvdW5kKHJvdGF0aW9uKSArIGRlZztcbiAgY2FjaGUucm90YXRpb25YID0gX3JvdW5kKHJvdGF0aW9uWCkgKyBkZWc7XG4gIGNhY2hlLnJvdGF0aW9uWSA9IF9yb3VuZChyb3RhdGlvblkpICsgZGVnO1xuICBjYWNoZS5za2V3WCA9IHNrZXdYICsgZGVnO1xuICBjYWNoZS5za2V3WSA9IHNrZXdZICsgZGVnO1xuICBjYWNoZS50cmFuc2Zvcm1QZXJzcGVjdGl2ZSA9IHBlcnNwZWN0aXZlICsgcHg7XG5cbiAgaWYgKGNhY2hlLnpPcmlnaW4gPSBwYXJzZUZsb2F0KG9yaWdpbi5zcGxpdChcIiBcIilbMl0pIHx8IDApIHtcbiAgICBzdHlsZVtfdHJhbnNmb3JtT3JpZ2luUHJvcF0gPSBfZmlyc3RUd29Pbmx5KG9yaWdpbik7XG4gIH1cblxuICBjYWNoZS54T2Zmc2V0ID0gY2FjaGUueU9mZnNldCA9IDA7XG4gIGNhY2hlLmZvcmNlM0QgPSBfY29uZmlnLmZvcmNlM0Q7XG4gIGNhY2hlLnJlbmRlclRyYW5zZm9ybSA9IGNhY2hlLnN2ZyA/IF9yZW5kZXJTVkdUcmFuc2Zvcm1zIDogX3N1cHBvcnRzM0QgPyBfcmVuZGVyQ1NTVHJhbnNmb3JtcyA6IF9yZW5kZXJOb24zRFRyYW5zZm9ybXM7XG4gIGNhY2hlLnVuY2FjaGUgPSAwO1xuICByZXR1cm4gY2FjaGU7XG59LFxuICAgIF9maXJzdFR3b09ubHkgPSBmdW5jdGlvbiBfZmlyc3RUd29Pbmx5KHZhbHVlKSB7XG4gIHJldHVybiAodmFsdWUgPSB2YWx1ZS5zcGxpdChcIiBcIikpWzBdICsgXCIgXCIgKyB2YWx1ZVsxXTtcbn0sXG4gICAgLy9mb3IgaGFuZGxpbmcgdHJhbnNmb3JtT3JpZ2luIHZhbHVlcywgc3RyaXBwaW5nIG91dCB0aGUgM3JkIGRpbWVuc2lvblxuX2FkZFB4VHJhbnNsYXRlID0gZnVuY3Rpb24gX2FkZFB4VHJhbnNsYXRlKHRhcmdldCwgc3RhcnQsIHZhbHVlKSB7XG4gIHZhciB1bml0ID0gZ2V0VW5pdChzdGFydCk7XG4gIHJldHVybiBfcm91bmQocGFyc2VGbG9hdChzdGFydCkgKyBwYXJzZUZsb2F0KF9jb252ZXJ0VG9Vbml0KHRhcmdldCwgXCJ4XCIsIHZhbHVlICsgXCJweFwiLCB1bml0KSkpICsgdW5pdDtcbn0sXG4gICAgX3JlbmRlck5vbjNEVHJhbnNmb3JtcyA9IGZ1bmN0aW9uIF9yZW5kZXJOb24zRFRyYW5zZm9ybXMocmF0aW8sIGNhY2hlKSB7XG4gIGNhY2hlLnogPSBcIjBweFwiO1xuICBjYWNoZS5yb3RhdGlvblkgPSBjYWNoZS5yb3RhdGlvblggPSBcIjBkZWdcIjtcbiAgY2FjaGUuZm9yY2UzRCA9IDA7XG5cbiAgX3JlbmRlckNTU1RyYW5zZm9ybXMocmF0aW8sIGNhY2hlKTtcbn0sXG4gICAgX3plcm9EZWcgPSBcIjBkZWdcIixcbiAgICBfemVyb1B4ID0gXCIwcHhcIixcbiAgICBfZW5kUGFyZW50aGVzaXMgPSBcIikgXCIsXG4gICAgX3JlbmRlckNTU1RyYW5zZm9ybXMgPSBmdW5jdGlvbiBfcmVuZGVyQ1NTVHJhbnNmb3JtcyhyYXRpbywgY2FjaGUpIHtcbiAgdmFyIF9yZWYgPSBjYWNoZSB8fCB0aGlzLFxuICAgICAgeFBlcmNlbnQgPSBfcmVmLnhQZXJjZW50LFxuICAgICAgeVBlcmNlbnQgPSBfcmVmLnlQZXJjZW50LFxuICAgICAgeCA9IF9yZWYueCxcbiAgICAgIHkgPSBfcmVmLnksXG4gICAgICB6ID0gX3JlZi56LFxuICAgICAgcm90YXRpb24gPSBfcmVmLnJvdGF0aW9uLFxuICAgICAgcm90YXRpb25ZID0gX3JlZi5yb3RhdGlvblksXG4gICAgICByb3RhdGlvblggPSBfcmVmLnJvdGF0aW9uWCxcbiAgICAgIHNrZXdYID0gX3JlZi5za2V3WCxcbiAgICAgIHNrZXdZID0gX3JlZi5za2V3WSxcbiAgICAgIHNjYWxlWCA9IF9yZWYuc2NhbGVYLFxuICAgICAgc2NhbGVZID0gX3JlZi5zY2FsZVksXG4gICAgICB0cmFuc2Zvcm1QZXJzcGVjdGl2ZSA9IF9yZWYudHJhbnNmb3JtUGVyc3BlY3RpdmUsXG4gICAgICBmb3JjZTNEID0gX3JlZi5mb3JjZTNELFxuICAgICAgdGFyZ2V0ID0gX3JlZi50YXJnZXQsXG4gICAgICB6T3JpZ2luID0gX3JlZi56T3JpZ2luLFxuICAgICAgdHJhbnNmb3JtcyA9IFwiXCIsXG4gICAgICB1c2UzRCA9IGZvcmNlM0QgPT09IFwiYXV0b1wiICYmIHJhdGlvICYmIHJhdGlvICE9PSAxIHx8IGZvcmNlM0QgPT09IHRydWU7IC8vIFNhZmFyaSBoYXMgYSBidWcgdGhhdCBjYXVzZXMgaXQgbm90IHRvIHJlbmRlciAzRCB0cmFuc2Zvcm0tb3JpZ2luIHZhbHVlcyBwcm9wZXJseSwgc28gd2UgZm9yY2UgdGhlIHogb3JpZ2luIHRvIDAsIHJlY29yZCBpdCBpbiB0aGUgY2FjaGUsIGFuZCB0aGVuIGRvIHRoZSBtYXRoIGhlcmUgdG8gb2Zmc2V0IHRoZSB0cmFuc2xhdGUgdmFsdWVzIGFjY29yZGluZ2x5IChiYXNpY2FsbHkgZG8gdGhlIDNEIHRyYW5zZm9ybS1vcmlnaW4gcGFydCBtYW51YWxseSlcblxuXG4gIGlmICh6T3JpZ2luICYmIChyb3RhdGlvblggIT09IF96ZXJvRGVnIHx8IHJvdGF0aW9uWSAhPT0gX3plcm9EZWcpKSB7XG4gICAgdmFyIGFuZ2xlID0gcGFyc2VGbG9hdChyb3RhdGlvblkpICogX0RFRzJSQUQsXG4gICAgICAgIGExMyA9IE1hdGguc2luKGFuZ2xlKSxcbiAgICAgICAgYTMzID0gTWF0aC5jb3MoYW5nbGUpLFxuICAgICAgICBjb3M7XG5cbiAgICBhbmdsZSA9IHBhcnNlRmxvYXQocm90YXRpb25YKSAqIF9ERUcyUkFEO1xuICAgIGNvcyA9IE1hdGguY29zKGFuZ2xlKTtcbiAgICB4ID0gX2FkZFB4VHJhbnNsYXRlKHRhcmdldCwgeCwgYTEzICogY29zICogLXpPcmlnaW4pO1xuICAgIHkgPSBfYWRkUHhUcmFuc2xhdGUodGFyZ2V0LCB5LCAtTWF0aC5zaW4oYW5nbGUpICogLXpPcmlnaW4pO1xuICAgIHogPSBfYWRkUHhUcmFuc2xhdGUodGFyZ2V0LCB6LCBhMzMgKiBjb3MgKiAtek9yaWdpbiArIHpPcmlnaW4pO1xuICB9XG5cbiAgaWYgKHRyYW5zZm9ybVBlcnNwZWN0aXZlICE9PSBfemVyb1B4KSB7XG4gICAgdHJhbnNmb3JtcyArPSBcInBlcnNwZWN0aXZlKFwiICsgdHJhbnNmb3JtUGVyc3BlY3RpdmUgKyBfZW5kUGFyZW50aGVzaXM7XG4gIH1cblxuICBpZiAoeFBlcmNlbnQgfHwgeVBlcmNlbnQpIHtcbiAgICB0cmFuc2Zvcm1zICs9IFwidHJhbnNsYXRlKFwiICsgeFBlcmNlbnQgKyBcIiUsIFwiICsgeVBlcmNlbnQgKyBcIiUpIFwiO1xuICB9XG5cbiAgaWYgKHVzZTNEIHx8IHggIT09IF96ZXJvUHggfHwgeSAhPT0gX3plcm9QeCB8fCB6ICE9PSBfemVyb1B4KSB7XG4gICAgdHJhbnNmb3JtcyArPSB6ICE9PSBfemVyb1B4IHx8IHVzZTNEID8gXCJ0cmFuc2xhdGUzZChcIiArIHggKyBcIiwgXCIgKyB5ICsgXCIsIFwiICsgeiArIFwiKSBcIiA6IFwidHJhbnNsYXRlKFwiICsgeCArIFwiLCBcIiArIHkgKyBfZW5kUGFyZW50aGVzaXM7XG4gIH1cblxuICBpZiAocm90YXRpb24gIT09IF96ZXJvRGVnKSB7XG4gICAgdHJhbnNmb3JtcyArPSBcInJvdGF0ZShcIiArIHJvdGF0aW9uICsgX2VuZFBhcmVudGhlc2lzO1xuICB9XG5cbiAgaWYgKHJvdGF0aW9uWSAhPT0gX3plcm9EZWcpIHtcbiAgICB0cmFuc2Zvcm1zICs9IFwicm90YXRlWShcIiArIHJvdGF0aW9uWSArIF9lbmRQYXJlbnRoZXNpcztcbiAgfVxuXG4gIGlmIChyb3RhdGlvblggIT09IF96ZXJvRGVnKSB7XG4gICAgdHJhbnNmb3JtcyArPSBcInJvdGF0ZVgoXCIgKyByb3RhdGlvblggKyBfZW5kUGFyZW50aGVzaXM7XG4gIH1cblxuICBpZiAoc2tld1ggIT09IF96ZXJvRGVnIHx8IHNrZXdZICE9PSBfemVyb0RlZykge1xuICAgIHRyYW5zZm9ybXMgKz0gXCJza2V3KFwiICsgc2tld1ggKyBcIiwgXCIgKyBza2V3WSArIF9lbmRQYXJlbnRoZXNpcztcbiAgfVxuXG4gIGlmIChzY2FsZVggIT09IDEgfHwgc2NhbGVZICE9PSAxKSB7XG4gICAgdHJhbnNmb3JtcyArPSBcInNjYWxlKFwiICsgc2NhbGVYICsgXCIsIFwiICsgc2NhbGVZICsgX2VuZFBhcmVudGhlc2lzO1xuICB9XG5cbiAgdGFyZ2V0LnN0eWxlW190cmFuc2Zvcm1Qcm9wXSA9IHRyYW5zZm9ybXMgfHwgXCJ0cmFuc2xhdGUoMCwgMClcIjtcbn0sXG4gICAgX3JlbmRlclNWR1RyYW5zZm9ybXMgPSBmdW5jdGlvbiBfcmVuZGVyU1ZHVHJhbnNmb3JtcyhyYXRpbywgY2FjaGUpIHtcbiAgdmFyIF9yZWYyID0gY2FjaGUgfHwgdGhpcyxcbiAgICAgIHhQZXJjZW50ID0gX3JlZjIueFBlcmNlbnQsXG4gICAgICB5UGVyY2VudCA9IF9yZWYyLnlQZXJjZW50LFxuICAgICAgeCA9IF9yZWYyLngsXG4gICAgICB5ID0gX3JlZjIueSxcbiAgICAgIHJvdGF0aW9uID0gX3JlZjIucm90YXRpb24sXG4gICAgICBza2V3WCA9IF9yZWYyLnNrZXdYLFxuICAgICAgc2tld1kgPSBfcmVmMi5za2V3WSxcbiAgICAgIHNjYWxlWCA9IF9yZWYyLnNjYWxlWCxcbiAgICAgIHNjYWxlWSA9IF9yZWYyLnNjYWxlWSxcbiAgICAgIHRhcmdldCA9IF9yZWYyLnRhcmdldCxcbiAgICAgIHhPcmlnaW4gPSBfcmVmMi54T3JpZ2luLFxuICAgICAgeU9yaWdpbiA9IF9yZWYyLnlPcmlnaW4sXG4gICAgICB4T2Zmc2V0ID0gX3JlZjIueE9mZnNldCxcbiAgICAgIHlPZmZzZXQgPSBfcmVmMi55T2Zmc2V0LFxuICAgICAgZm9yY2VDU1MgPSBfcmVmMi5mb3JjZUNTUyxcbiAgICAgIHR4ID0gcGFyc2VGbG9hdCh4KSxcbiAgICAgIHR5ID0gcGFyc2VGbG9hdCh5KSxcbiAgICAgIGExMSxcbiAgICAgIGEyMSxcbiAgICAgIGExMixcbiAgICAgIGEyMixcbiAgICAgIHRlbXA7XG5cbiAgcm90YXRpb24gPSBwYXJzZUZsb2F0KHJvdGF0aW9uKTtcbiAgc2tld1ggPSBwYXJzZUZsb2F0KHNrZXdYKTtcbiAgc2tld1kgPSBwYXJzZUZsb2F0KHNrZXdZKTtcblxuICBpZiAoc2tld1kpIHtcbiAgICAvL2ZvciBwZXJmb3JtYW5jZSByZWFzb25zLCB3ZSBjb21iaW5lIGFsbCBza2V3aW5nIGludG8gdGhlIHNrZXdYIGFuZCByb3RhdGlvbiB2YWx1ZXMuIFJlbWVtYmVyLCBhIHNrZXdZIG9mIDEwIGRlZ3JlZXMgbG9va3MgdGhlIHNhbWUgYXMgYSByb3RhdGlvbiBvZiAxMCBkZWdyZWVzIHBsdXMgYSBza2V3WCBvZiAxMCBkZWdyZWVzLlxuICAgIHNrZXdZID0gcGFyc2VGbG9hdChza2V3WSk7XG4gICAgc2tld1ggKz0gc2tld1k7XG4gICAgcm90YXRpb24gKz0gc2tld1k7XG4gIH1cblxuICBpZiAocm90YXRpb24gfHwgc2tld1gpIHtcbiAgICByb3RhdGlvbiAqPSBfREVHMlJBRDtcbiAgICBza2V3WCAqPSBfREVHMlJBRDtcbiAgICBhMTEgPSBNYXRoLmNvcyhyb3RhdGlvbikgKiBzY2FsZVg7XG4gICAgYTIxID0gTWF0aC5zaW4ocm90YXRpb24pICogc2NhbGVYO1xuICAgIGExMiA9IE1hdGguc2luKHJvdGF0aW9uIC0gc2tld1gpICogLXNjYWxlWTtcbiAgICBhMjIgPSBNYXRoLmNvcyhyb3RhdGlvbiAtIHNrZXdYKSAqIHNjYWxlWTtcblxuICAgIGlmIChza2V3WCkge1xuICAgICAgc2tld1kgKj0gX0RFRzJSQUQ7XG4gICAgICB0ZW1wID0gTWF0aC50YW4oc2tld1ggLSBza2V3WSk7XG4gICAgICB0ZW1wID0gTWF0aC5zcXJ0KDEgKyB0ZW1wICogdGVtcCk7XG4gICAgICBhMTIgKj0gdGVtcDtcbiAgICAgIGEyMiAqPSB0ZW1wO1xuXG4gICAgICBpZiAoc2tld1kpIHtcbiAgICAgICAgdGVtcCA9IE1hdGgudGFuKHNrZXdZKTtcbiAgICAgICAgdGVtcCA9IE1hdGguc3FydCgxICsgdGVtcCAqIHRlbXApO1xuICAgICAgICBhMTEgKj0gdGVtcDtcbiAgICAgICAgYTIxICo9IHRlbXA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgYTExID0gX3JvdW5kKGExMSk7XG4gICAgYTIxID0gX3JvdW5kKGEyMSk7XG4gICAgYTEyID0gX3JvdW5kKGExMik7XG4gICAgYTIyID0gX3JvdW5kKGEyMik7XG4gIH0gZWxzZSB7XG4gICAgYTExID0gc2NhbGVYO1xuICAgIGEyMiA9IHNjYWxlWTtcbiAgICBhMjEgPSBhMTIgPSAwO1xuICB9XG5cbiAgaWYgKHR4ICYmICF+KHggKyBcIlwiKS5pbmRleE9mKFwicHhcIikgfHwgdHkgJiYgIX4oeSArIFwiXCIpLmluZGV4T2YoXCJweFwiKSkge1xuICAgIHR4ID0gX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBcInhcIiwgeCwgXCJweFwiKTtcbiAgICB0eSA9IF9jb252ZXJ0VG9Vbml0KHRhcmdldCwgXCJ5XCIsIHksIFwicHhcIik7XG4gIH1cblxuICBpZiAoeE9yaWdpbiB8fCB5T3JpZ2luIHx8IHhPZmZzZXQgfHwgeU9mZnNldCkge1xuICAgIHR4ID0gX3JvdW5kKHR4ICsgeE9yaWdpbiAtICh4T3JpZ2luICogYTExICsgeU9yaWdpbiAqIGExMikgKyB4T2Zmc2V0KTtcbiAgICB0eSA9IF9yb3VuZCh0eSArIHlPcmlnaW4gLSAoeE9yaWdpbiAqIGEyMSArIHlPcmlnaW4gKiBhMjIpICsgeU9mZnNldCk7XG4gIH1cblxuICBpZiAoeFBlcmNlbnQgfHwgeVBlcmNlbnQpIHtcbiAgICAvL1RoZSBTVkcgc3BlYyBkb2Vzbid0IHN1cHBvcnQgcGVyY2VudGFnZS1iYXNlZCB0cmFuc2xhdGlvbiBpbiB0aGUgXCJ0cmFuc2Zvcm1cIiBhdHRyaWJ1dGUsIHNvIHdlIG1lcmdlIGl0IGludG8gdGhlIHRyYW5zbGF0aW9uIHRvIHNpbXVsYXRlIGl0LlxuICAgIHRlbXAgPSB0YXJnZXQuZ2V0QkJveCgpO1xuICAgIHR4ID0gX3JvdW5kKHR4ICsgeFBlcmNlbnQgLyAxMDAgKiB0ZW1wLndpZHRoKTtcbiAgICB0eSA9IF9yb3VuZCh0eSArIHlQZXJjZW50IC8gMTAwICogdGVtcC5oZWlnaHQpO1xuICB9XG5cbiAgdGVtcCA9IFwibWF0cml4KFwiICsgYTExICsgXCIsXCIgKyBhMjEgKyBcIixcIiArIGExMiArIFwiLFwiICsgYTIyICsgXCIsXCIgKyB0eCArIFwiLFwiICsgdHkgKyBcIilcIjtcbiAgdGFyZ2V0LnNldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiLCB0ZW1wKTtcbiAgZm9yY2VDU1MgJiYgKHRhcmdldC5zdHlsZVtfdHJhbnNmb3JtUHJvcF0gPSB0ZW1wKTsgLy9zb21lIGJyb3dzZXJzIHByaW9yaXRpemUgQ1NTIHRyYW5zZm9ybXMgb3ZlciB0aGUgdHJhbnNmb3JtIGF0dHJpYnV0ZS4gV2hlbiB3ZSBzZW5zZSB0aGF0IHRoZSB1c2VyIGhhcyBDU1MgdHJhbnNmb3JtcyBhcHBsaWVkLCB3ZSBtdXN0IG92ZXJ3cml0ZSB0aGVtIHRoaXMgd2F5IChvdGhlcndpc2Ugc29tZSBicm93c2VyIHNpbXBseSB3b24ndCByZW5kZXIgdGhlIHRyYW5zZm9ybSBhdHRyaWJ1dGUgY2hhbmdlcyEpXG59LFxuICAgIF9hZGRSb3RhdGlvbmFsUHJvcFR3ZWVuID0gZnVuY3Rpb24gX2FkZFJvdGF0aW9uYWxQcm9wVHdlZW4ocGx1Z2luLCB0YXJnZXQsIHByb3BlcnR5LCBzdGFydE51bSwgZW5kVmFsdWUpIHtcbiAgdmFyIGNhcCA9IDM2MCxcbiAgICAgIGlzU3RyaW5nID0gX2lzU3RyaW5nKGVuZFZhbHVlKSxcbiAgICAgIGVuZE51bSA9IHBhcnNlRmxvYXQoZW5kVmFsdWUpICogKGlzU3RyaW5nICYmIH5lbmRWYWx1ZS5pbmRleE9mKFwicmFkXCIpID8gX1JBRDJERUcgOiAxKSxcbiAgICAgIGNoYW5nZSA9IGVuZE51bSAtIHN0YXJ0TnVtLFxuICAgICAgZmluYWxWYWx1ZSA9IHN0YXJ0TnVtICsgY2hhbmdlICsgXCJkZWdcIixcbiAgICAgIGRpcmVjdGlvbixcbiAgICAgIHB0O1xuXG4gIGlmIChpc1N0cmluZykge1xuICAgIGRpcmVjdGlvbiA9IGVuZFZhbHVlLnNwbGl0KFwiX1wiKVsxXTtcblxuICAgIGlmIChkaXJlY3Rpb24gPT09IFwic2hvcnRcIikge1xuICAgICAgY2hhbmdlICU9IGNhcDtcblxuICAgICAgaWYgKGNoYW5nZSAhPT0gY2hhbmdlICUgKGNhcCAvIDIpKSB7XG4gICAgICAgIGNoYW5nZSArPSBjaGFuZ2UgPCAwID8gY2FwIDogLWNhcDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZGlyZWN0aW9uID09PSBcImN3XCIgJiYgY2hhbmdlIDwgMCkge1xuICAgICAgY2hhbmdlID0gKGNoYW5nZSArIGNhcCAqIF9iaWdOdW0pICUgY2FwIC0gfn4oY2hhbmdlIC8gY2FwKSAqIGNhcDtcbiAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gXCJjY3dcIiAmJiBjaGFuZ2UgPiAwKSB7XG4gICAgICBjaGFuZ2UgPSAoY2hhbmdlIC0gY2FwICogX2JpZ051bSkgJSBjYXAgLSB+fihjaGFuZ2UgLyBjYXApICogY2FwO1xuICAgIH1cbiAgfVxuXG4gIHBsdWdpbi5fcHQgPSBwdCA9IG5ldyBQcm9wVHdlZW4ocGx1Z2luLl9wdCwgdGFyZ2V0LCBwcm9wZXJ0eSwgc3RhcnROdW0sIGNoYW5nZSwgX3JlbmRlclByb3BXaXRoRW5kKTtcbiAgcHQuZSA9IGZpbmFsVmFsdWU7XG4gIHB0LnUgPSBcImRlZ1wiO1xuXG4gIHBsdWdpbi5fcHJvcHMucHVzaChwcm9wZXJ0eSk7XG5cbiAgcmV0dXJuIHB0O1xufSxcbiAgICBfYXNzaWduID0gZnVuY3Rpb24gX2Fzc2lnbih0YXJnZXQsIHNvdXJjZSkge1xuICAvLyBJbnRlcm5ldCBFeHBsb3JlciBkb2Vzbid0IGhhdmUgT2JqZWN0LmFzc2lnbigpLCBzbyB3ZSByZWNyZWF0ZSBpdCBoZXJlLlxuICBmb3IgKHZhciBwIGluIHNvdXJjZSkge1xuICAgIHRhcmdldFtwXSA9IHNvdXJjZVtwXTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59LFxuICAgIF9hZGRSYXdUcmFuc2Zvcm1QVHMgPSBmdW5jdGlvbiBfYWRkUmF3VHJhbnNmb3JtUFRzKHBsdWdpbiwgdHJhbnNmb3JtcywgdGFyZ2V0KSB7XG4gIC8vZm9yIGhhbmRsaW5nIGNhc2VzIHdoZXJlIHNvbWVvbmUgcGFzc2VzIGluIGEgd2hvbGUgdHJhbnNmb3JtIHN0cmluZywgbGlrZSB0cmFuc2Zvcm06IFwic2NhbGUoMiwgMykgcm90YXRlKDIwZGVnKSB0cmFuc2xhdGVZKDMwZW0pXCJcbiAgdmFyIHN0YXJ0Q2FjaGUgPSBfYXNzaWduKHt9LCB0YXJnZXQuX2dzYXApLFxuICAgICAgZXhjbHVkZSA9IFwicGVyc3BlY3RpdmUsZm9yY2UzRCx0cmFuc2Zvcm1PcmlnaW4sc3ZnT3JpZ2luXCIsXG4gICAgICBzdHlsZSA9IHRhcmdldC5zdHlsZSxcbiAgICAgIGVuZENhY2hlLFxuICAgICAgcCxcbiAgICAgIHN0YXJ0VmFsdWUsXG4gICAgICBlbmRWYWx1ZSxcbiAgICAgIHN0YXJ0TnVtLFxuICAgICAgZW5kTnVtLFxuICAgICAgc3RhcnRVbml0LFxuICAgICAgZW5kVW5pdDtcblxuICBpZiAoc3RhcnRDYWNoZS5zdmcpIHtcbiAgICBzdGFydFZhbHVlID0gdGFyZ2V0LmdldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiKTtcbiAgICB0YXJnZXQuc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsIFwiXCIpO1xuICAgIHN0eWxlW190cmFuc2Zvcm1Qcm9wXSA9IHRyYW5zZm9ybXM7XG4gICAgZW5kQ2FjaGUgPSBfcGFyc2VUcmFuc2Zvcm0odGFyZ2V0LCAxKTtcblxuICAgIF9yZW1vdmVQcm9wZXJ0eSh0YXJnZXQsIF90cmFuc2Zvcm1Qcm9wKTtcblxuICAgIHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIiwgc3RhcnRWYWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgc3RhcnRWYWx1ZSA9IGdldENvbXB1dGVkU3R5bGUodGFyZ2V0KVtfdHJhbnNmb3JtUHJvcF07XG4gICAgc3R5bGVbX3RyYW5zZm9ybVByb3BdID0gdHJhbnNmb3JtcztcbiAgICBlbmRDYWNoZSA9IF9wYXJzZVRyYW5zZm9ybSh0YXJnZXQsIDEpO1xuICAgIHN0eWxlW190cmFuc2Zvcm1Qcm9wXSA9IHN0YXJ0VmFsdWU7XG4gIH1cblxuICBmb3IgKHAgaW4gX3RyYW5zZm9ybVByb3BzKSB7XG4gICAgc3RhcnRWYWx1ZSA9IHN0YXJ0Q2FjaGVbcF07XG4gICAgZW5kVmFsdWUgPSBlbmRDYWNoZVtwXTtcblxuICAgIGlmIChzdGFydFZhbHVlICE9PSBlbmRWYWx1ZSAmJiBleGNsdWRlLmluZGV4T2YocCkgPCAwKSB7XG4gICAgICAvL3R3ZWVuaW5nIHRvIG5vIHBlcnNwZWN0aXZlIGdpdmVzIHZlcnkgdW5pbnR1aXRpdmUgcmVzdWx0cyAtIGp1c3Qga2VlcCB0aGUgc2FtZSBwZXJzcGVjdGl2ZSBpbiB0aGF0IGNhc2UuXG4gICAgICBzdGFydFVuaXQgPSBnZXRVbml0KHN0YXJ0VmFsdWUpO1xuICAgICAgZW5kVW5pdCA9IGdldFVuaXQoZW5kVmFsdWUpO1xuICAgICAgc3RhcnROdW0gPSBzdGFydFVuaXQgIT09IGVuZFVuaXQgPyBfY29udmVydFRvVW5pdCh0YXJnZXQsIHAsIHN0YXJ0VmFsdWUsIGVuZFVuaXQpIDogcGFyc2VGbG9hdChzdGFydFZhbHVlKTtcbiAgICAgIGVuZE51bSA9IHBhcnNlRmxvYXQoZW5kVmFsdWUpO1xuICAgICAgcGx1Z2luLl9wdCA9IG5ldyBQcm9wVHdlZW4ocGx1Z2luLl9wdCwgZW5kQ2FjaGUsIHAsIHN0YXJ0TnVtLCBlbmROdW0gLSBzdGFydE51bSwgX3JlbmRlckNTU1Byb3ApO1xuICAgICAgcGx1Z2luLl9wdC51ID0gZW5kVW5pdCB8fCAwO1xuXG4gICAgICBwbHVnaW4uX3Byb3BzLnB1c2gocCk7XG4gICAgfVxuICB9XG5cbiAgX2Fzc2lnbihlbmRDYWNoZSwgc3RhcnRDYWNoZSk7XG59OyAvLyBoYW5kbGUgc3BsaXR0aW5nIGFwYXJ0IHBhZGRpbmcsIG1hcmdpbiwgYm9yZGVyV2lkdGgsIGFuZCBib3JkZXJSYWRpdXMgaW50byB0aGVpciA0IGNvbXBvbmVudHMuIEZpcmVmb3gsIGZvciBleGFtcGxlLCB3b24ndCByZXBvcnQgYm9yZGVyUmFkaXVzIGNvcnJlY3RseSAtIGl0IHdpbGwgb25seSBkbyBib3JkZXJUb3BMZWZ0UmFkaXVzIGFuZCB0aGUgb3RoZXIgY29ybmVycy4gV2UgYWxzbyB3YW50IHRvIGhhbmRsZSBwYWRkaW5nVG9wLCBtYXJnaW5MZWZ0LCBib3JkZXJSaWdodFdpZHRoLCBldGMuXG5cblxuX2ZvckVhY2hOYW1lKFwicGFkZGluZyxtYXJnaW4sV2lkdGgsUmFkaXVzXCIsIGZ1bmN0aW9uIChuYW1lLCBpbmRleCkge1xuICB2YXIgdCA9IFwiVG9wXCIsXG4gICAgICByID0gXCJSaWdodFwiLFxuICAgICAgYiA9IFwiQm90dG9tXCIsXG4gICAgICBsID0gXCJMZWZ0XCIsXG4gICAgICBwcm9wcyA9IChpbmRleCA8IDMgPyBbdCwgciwgYiwgbF0gOiBbdCArIGwsIHQgKyByLCBiICsgciwgYiArIGxdKS5tYXAoZnVuY3Rpb24gKHNpZGUpIHtcbiAgICByZXR1cm4gaW5kZXggPCAyID8gbmFtZSArIHNpZGUgOiBcImJvcmRlclwiICsgc2lkZSArIG5hbWU7XG4gIH0pO1xuXG4gIF9zcGVjaWFsUHJvcHNbaW5kZXggPiAxID8gXCJib3JkZXJcIiArIG5hbWUgOiBuYW1lXSA9IGZ1bmN0aW9uIChwbHVnaW4sIHRhcmdldCwgcHJvcGVydHksIGVuZFZhbHVlLCB0d2Vlbikge1xuICAgIHZhciBhLCB2YXJzO1xuXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCA0KSB7XG4gICAgICAvLyBnZXR0ZXIsIHBhc3NlZCB0YXJnZXQsIHByb3BlcnR5LCBhbmQgdW5pdCAoZnJvbSBfZ2V0KCkpXG4gICAgICBhID0gcHJvcHMubWFwKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICAgIHJldHVybiBfZ2V0KHBsdWdpbiwgcHJvcCwgcHJvcGVydHkpO1xuICAgICAgfSk7XG4gICAgICB2YXJzID0gYS5qb2luKFwiIFwiKTtcbiAgICAgIHJldHVybiB2YXJzLnNwbGl0KGFbMF0pLmxlbmd0aCA9PT0gNSA/IGFbMF0gOiB2YXJzO1xuICAgIH1cblxuICAgIGEgPSAoZW5kVmFsdWUgKyBcIlwiKS5zcGxpdChcIiBcIik7XG4gICAgdmFycyA9IHt9O1xuICAgIHByb3BzLmZvckVhY2goZnVuY3Rpb24gKHByb3AsIGkpIHtcbiAgICAgIHJldHVybiB2YXJzW3Byb3BdID0gYVtpXSA9IGFbaV0gfHwgYVsoaSAtIDEpIC8gMiB8IDBdO1xuICAgIH0pO1xuICAgIHBsdWdpbi5pbml0KHRhcmdldCwgdmFycywgdHdlZW4pO1xuICB9O1xufSk7XG5cbmV4cG9ydCB2YXIgQ1NTUGx1Z2luID0ge1xuICBuYW1lOiBcImNzc1wiLFxuICByZWdpc3RlcjogX2luaXRDb3JlLFxuICB0YXJnZXRUZXN0OiBmdW5jdGlvbiB0YXJnZXRUZXN0KHRhcmdldCkge1xuICAgIHJldHVybiB0YXJnZXQuc3R5bGUgJiYgdGFyZ2V0Lm5vZGVUeXBlO1xuICB9LFxuICBpbml0OiBmdW5jdGlvbiBpbml0KHRhcmdldCwgdmFycywgdHdlZW4sIGluZGV4LCB0YXJnZXRzKSB7XG4gICAgdmFyIHByb3BzID0gdGhpcy5fcHJvcHMsXG4gICAgICAgIHN0eWxlID0gdGFyZ2V0LnN0eWxlLFxuICAgICAgICBzdGFydEF0ID0gdHdlZW4udmFycy5zdGFydEF0LFxuICAgICAgICBzdGFydFZhbHVlLFxuICAgICAgICBlbmRWYWx1ZSxcbiAgICAgICAgZW5kTnVtLFxuICAgICAgICBzdGFydE51bSxcbiAgICAgICAgdHlwZSxcbiAgICAgICAgc3BlY2lhbFByb3AsXG4gICAgICAgIHAsXG4gICAgICAgIHN0YXJ0VW5pdCxcbiAgICAgICAgZW5kVW5pdCxcbiAgICAgICAgcmVsYXRpdmUsXG4gICAgICAgIGlzVHJhbnNmb3JtUmVsYXRlZCxcbiAgICAgICAgdHJhbnNmb3JtUHJvcFR3ZWVuLFxuICAgICAgICBjYWNoZSxcbiAgICAgICAgc21vb3RoLFxuICAgICAgICBoYXNQcmlvcml0eSxcbiAgICAgICAgaW5saW5lUHJvcHM7XG4gICAgX3BsdWdpbkluaXR0ZWQgfHwgX2luaXRDb3JlKCk7IC8vIHdlIG1heSBjYWxsIGluaXQoKSBtdWx0aXBsZSB0aW1lcyBvbiB0aGUgc2FtZSBwbHVnaW4gaW5zdGFuY2UsIGxpa2Ugd2hlbiBhZGRpbmcgc3BlY2lhbCBwcm9wZXJ0aWVzLCBzbyBtYWtlIHN1cmUgd2UgZG9uJ3Qgb3ZlcndyaXRlIHRoZSByZXZlcnQgZGF0YSBvciBpbmxpbmVQcm9wc1xuXG4gICAgdGhpcy5zdHlsZXMgPSB0aGlzLnN0eWxlcyB8fCBfZ2V0U3R5bGVTYXZlcih0YXJnZXQpO1xuICAgIGlubGluZVByb3BzID0gdGhpcy5zdHlsZXMucHJvcHM7XG4gICAgdGhpcy50d2VlbiA9IHR3ZWVuO1xuXG4gICAgZm9yIChwIGluIHZhcnMpIHtcbiAgICAgIGlmIChwID09PSBcImF1dG9Sb3VuZFwiKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBlbmRWYWx1ZSA9IHZhcnNbcF07XG5cbiAgICAgIGlmIChfcGx1Z2luc1twXSAmJiBfY2hlY2tQbHVnaW4ocCwgdmFycywgdHdlZW4sIGluZGV4LCB0YXJnZXQsIHRhcmdldHMpKSB7XG4gICAgICAgIC8vIHBsdWdpbnNcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIHR5cGUgPSB0eXBlb2YgZW5kVmFsdWU7XG4gICAgICBzcGVjaWFsUHJvcCA9IF9zcGVjaWFsUHJvcHNbcF07XG5cbiAgICAgIGlmICh0eXBlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgZW5kVmFsdWUgPSBlbmRWYWx1ZS5jYWxsKHR3ZWVuLCBpbmRleCwgdGFyZ2V0LCB0YXJnZXRzKTtcbiAgICAgICAgdHlwZSA9IHR5cGVvZiBlbmRWYWx1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGUgPT09IFwic3RyaW5nXCIgJiYgfmVuZFZhbHVlLmluZGV4T2YoXCJyYW5kb20oXCIpKSB7XG4gICAgICAgIGVuZFZhbHVlID0gX3JlcGxhY2VSYW5kb20oZW5kVmFsdWUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3BlY2lhbFByb3ApIHtcbiAgICAgICAgc3BlY2lhbFByb3AodGhpcywgdGFyZ2V0LCBwLCBlbmRWYWx1ZSwgdHdlZW4pICYmIChoYXNQcmlvcml0eSA9IDEpO1xuICAgICAgfSBlbHNlIGlmIChwLnN1YnN0cigwLCAyKSA9PT0gXCItLVwiKSB7XG4gICAgICAgIC8vQ1NTIHZhcmlhYmxlXG4gICAgICAgIHN0YXJ0VmFsdWUgPSAoZ2V0Q29tcHV0ZWRTdHlsZSh0YXJnZXQpLmdldFByb3BlcnR5VmFsdWUocCkgKyBcIlwiKS50cmltKCk7XG4gICAgICAgIGVuZFZhbHVlICs9IFwiXCI7XG4gICAgICAgIF9jb2xvckV4cC5sYXN0SW5kZXggPSAwO1xuXG4gICAgICAgIGlmICghX2NvbG9yRXhwLnRlc3Qoc3RhcnRWYWx1ZSkpIHtcbiAgICAgICAgICAvLyBjb2xvcnMgZG9uJ3QgaGF2ZSB1bml0c1xuICAgICAgICAgIHN0YXJ0VW5pdCA9IGdldFVuaXQoc3RhcnRWYWx1ZSk7XG4gICAgICAgICAgZW5kVW5pdCA9IGdldFVuaXQoZW5kVmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgZW5kVW5pdCA/IHN0YXJ0VW5pdCAhPT0gZW5kVW5pdCAmJiAoc3RhcnRWYWx1ZSA9IF9jb252ZXJ0VG9Vbml0KHRhcmdldCwgcCwgc3RhcnRWYWx1ZSwgZW5kVW5pdCkgKyBlbmRVbml0KSA6IHN0YXJ0VW5pdCAmJiAoZW5kVmFsdWUgKz0gc3RhcnRVbml0KTtcbiAgICAgICAgdGhpcy5hZGQoc3R5bGUsIFwic2V0UHJvcGVydHlcIiwgc3RhcnRWYWx1ZSwgZW5kVmFsdWUsIGluZGV4LCB0YXJnZXRzLCAwLCAwLCBwKTtcbiAgICAgICAgcHJvcHMucHVzaChwKTtcbiAgICAgICAgaW5saW5lUHJvcHMucHVzaChwLCBzdHlsZVtwXSk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHN0YXJ0QXQgJiYgcCBpbiBzdGFydEF0KSB7XG4gICAgICAgICAgLy8gaW4gY2FzZSBzb21lb25lIGhhcmQtY29kZXMgYSBjb21wbGV4IHZhbHVlIGFzIHRoZSBzdGFydCwgbGlrZSB0b3A6IFwiY2FsYygydmggLyAyKVwiLiBXaXRob3V0IHRoaXMsIGl0J2QgdXNlIHRoZSBjb21wdXRlZCB2YWx1ZSAoYWx3YXlzIGluIHB4KVxuICAgICAgICAgIHN0YXJ0VmFsdWUgPSB0eXBlb2Ygc3RhcnRBdFtwXSA9PT0gXCJmdW5jdGlvblwiID8gc3RhcnRBdFtwXS5jYWxsKHR3ZWVuLCBpbmRleCwgdGFyZ2V0LCB0YXJnZXRzKSA6IHN0YXJ0QXRbcF07XG4gICAgICAgICAgX2lzU3RyaW5nKHN0YXJ0VmFsdWUpICYmIH5zdGFydFZhbHVlLmluZGV4T2YoXCJyYW5kb20oXCIpICYmIChzdGFydFZhbHVlID0gX3JlcGxhY2VSYW5kb20oc3RhcnRWYWx1ZSkpO1xuICAgICAgICAgIGdldFVuaXQoc3RhcnRWYWx1ZSArIFwiXCIpIHx8IChzdGFydFZhbHVlICs9IF9jb25maWcudW5pdHNbcF0gfHwgZ2V0VW5pdChfZ2V0KHRhcmdldCwgcCkpIHx8IFwiXCIpOyAvLyBmb3IgY2FzZXMgd2hlbiBzb21lb25lIHBhc3NlcyBpbiBhIHVuaXRsZXNzIHZhbHVlIGxpa2Uge3g6IDEwMH07IGlmIHdlIHRyeSBzZXR0aW5nIHRyYW5zbGF0ZSgxMDAsIDBweCkgaXQgd29uJ3Qgd29yay5cblxuICAgICAgICAgIChzdGFydFZhbHVlICsgXCJcIikuY2hhckF0KDEpID09PSBcIj1cIiAmJiAoc3RhcnRWYWx1ZSA9IF9nZXQodGFyZ2V0LCBwKSk7IC8vIGNhbid0IHdvcmsgd2l0aCByZWxhdGl2ZSB2YWx1ZXNcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdGFydFZhbHVlID0gX2dldCh0YXJnZXQsIHApO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhcnROdW0gPSBwYXJzZUZsb2F0KHN0YXJ0VmFsdWUpO1xuICAgICAgICByZWxhdGl2ZSA9IHR5cGUgPT09IFwic3RyaW5nXCIgJiYgZW5kVmFsdWUuY2hhckF0KDEpID09PSBcIj1cIiAmJiBlbmRWYWx1ZS5zdWJzdHIoMCwgMik7XG4gICAgICAgIHJlbGF0aXZlICYmIChlbmRWYWx1ZSA9IGVuZFZhbHVlLnN1YnN0cigyKSk7XG4gICAgICAgIGVuZE51bSA9IHBhcnNlRmxvYXQoZW5kVmFsdWUpO1xuXG4gICAgICAgIGlmIChwIGluIF9wcm9wZXJ0eUFsaWFzZXMpIHtcbiAgICAgICAgICBpZiAocCA9PT0gXCJhdXRvQWxwaGFcIikge1xuICAgICAgICAgICAgLy9zcGVjaWFsIGNhc2Ugd2hlcmUgd2UgY29udHJvbCB0aGUgdmlzaWJpbGl0eSBhbG9uZyB3aXRoIG9wYWNpdHkuIFdlIHN0aWxsIGFsbG93IHRoZSBvcGFjaXR5IHZhbHVlIHRvIHBhc3MgdGhyb3VnaCBhbmQgZ2V0IHR3ZWVuZWQuXG4gICAgICAgICAgICBpZiAoc3RhcnROdW0gPT09IDEgJiYgX2dldCh0YXJnZXQsIFwidmlzaWJpbGl0eVwiKSA9PT0gXCJoaWRkZW5cIiAmJiBlbmROdW0pIHtcbiAgICAgICAgICAgICAgLy9pZiB2aXNpYmlsaXR5IGlzIGluaXRpYWxseSBzZXQgdG8gXCJoaWRkZW5cIiwgd2Ugc2hvdWxkIGludGVycHJldCB0aGF0IGFzIGludGVudCB0byBtYWtlIG9wYWNpdHkgMCAoYSBjb252ZW5pZW5jZSlcbiAgICAgICAgICAgICAgc3RhcnROdW0gPSAwO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpbmxpbmVQcm9wcy5wdXNoKFwidmlzaWJpbGl0eVwiLCBzdHlsZS52aXNpYmlsaXR5KTtcblxuICAgICAgICAgICAgX2FkZE5vblR3ZWVuaW5nUFQodGhpcywgc3R5bGUsIFwidmlzaWJpbGl0eVwiLCBzdGFydE51bSA/IFwiaW5oZXJpdFwiIDogXCJoaWRkZW5cIiwgZW5kTnVtID8gXCJpbmhlcml0XCIgOiBcImhpZGRlblwiLCAhZW5kTnVtKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAocCAhPT0gXCJzY2FsZVwiICYmIHAgIT09IFwidHJhbnNmb3JtXCIpIHtcbiAgICAgICAgICAgIHAgPSBfcHJvcGVydHlBbGlhc2VzW3BdO1xuICAgICAgICAgICAgfnAuaW5kZXhPZihcIixcIikgJiYgKHAgPSBwLnNwbGl0KFwiLFwiKVswXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaXNUcmFuc2Zvcm1SZWxhdGVkID0gcCBpbiBfdHJhbnNmb3JtUHJvcHM7IC8vLS0tIFRSQU5TRk9STS1SRUxBVEVEIC0tLVxuXG4gICAgICAgIGlmIChpc1RyYW5zZm9ybVJlbGF0ZWQpIHtcbiAgICAgICAgICB0aGlzLnN0eWxlcy5zYXZlKHApO1xuXG4gICAgICAgICAgaWYgKCF0cmFuc2Zvcm1Qcm9wVHdlZW4pIHtcbiAgICAgICAgICAgIGNhY2hlID0gdGFyZ2V0Ll9nc2FwO1xuICAgICAgICAgICAgY2FjaGUucmVuZGVyVHJhbnNmb3JtICYmICF2YXJzLnBhcnNlVHJhbnNmb3JtIHx8IF9wYXJzZVRyYW5zZm9ybSh0YXJnZXQsIHZhcnMucGFyc2VUcmFuc2Zvcm0pOyAvLyBpZiwgZm9yIGV4YW1wbGUsIGdzYXAuc2V0KC4uLiB7dHJhbnNmb3JtOlwidHJhbnNsYXRlWCg1MHZ3KVwifSksIHRoZSBfZ2V0KCkgY2FsbCBkb2Vzbid0IHBhcnNlIHRoZSB0cmFuc2Zvcm0sIHRodXMgY2FjaGUucmVuZGVyVHJhbnNmb3JtIHdvbid0IGJlIHNldCB5ZXQgc28gZm9yY2UgdGhlIHBhcnNpbmcgb2YgdGhlIHRyYW5zZm9ybSBoZXJlLlxuXG4gICAgICAgICAgICBzbW9vdGggPSB2YXJzLnNtb290aE9yaWdpbiAhPT0gZmFsc2UgJiYgY2FjaGUuc21vb3RoO1xuICAgICAgICAgICAgdHJhbnNmb3JtUHJvcFR3ZWVuID0gdGhpcy5fcHQgPSBuZXcgUHJvcFR3ZWVuKHRoaXMuX3B0LCBzdHlsZSwgX3RyYW5zZm9ybVByb3AsIDAsIDEsIGNhY2hlLnJlbmRlclRyYW5zZm9ybSwgY2FjaGUsIDAsIC0xKTsgLy90aGUgZmlyc3QgdGltZSB0aHJvdWdoLCBjcmVhdGUgdGhlIHJlbmRlcmluZyBQcm9wVHdlZW4gc28gdGhhdCBpdCBydW5zIExBU1QgKGluIHRoZSBsaW5rZWQgbGlzdCwgd2Uga2VlcCBhZGRpbmcgdG8gdGhlIGJlZ2lubmluZylcblxuICAgICAgICAgICAgdHJhbnNmb3JtUHJvcFR3ZWVuLmRlcCA9IDE7IC8vZmxhZyBpdCBhcyBkZXBlbmRlbnQgc28gdGhhdCBpZiB0aGluZ3MgZ2V0IGtpbGxlZC9vdmVyd3JpdHRlbiBhbmQgdGhpcyBpcyB0aGUgb25seSBQcm9wVHdlZW4gbGVmdCwgd2UgY2FuIHNhZmVseSBraWxsIHRoZSB3aG9sZSB0d2Vlbi5cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAocCA9PT0gXCJzY2FsZVwiKSB7XG4gICAgICAgICAgICB0aGlzLl9wdCA9IG5ldyBQcm9wVHdlZW4odGhpcy5fcHQsIGNhY2hlLCBcInNjYWxlWVwiLCBjYWNoZS5zY2FsZVksIChyZWxhdGl2ZSA/IF9wYXJzZVJlbGF0aXZlKGNhY2hlLnNjYWxlWSwgcmVsYXRpdmUgKyBlbmROdW0pIDogZW5kTnVtKSAtIGNhY2hlLnNjYWxlWSB8fCAwLCBfcmVuZGVyQ1NTUHJvcCk7XG4gICAgICAgICAgICB0aGlzLl9wdC51ID0gMDtcbiAgICAgICAgICAgIHByb3BzLnB1c2goXCJzY2FsZVlcIiwgcCk7XG4gICAgICAgICAgICBwICs9IFwiWFwiO1xuICAgICAgICAgIH0gZWxzZSBpZiAocCA9PT0gXCJ0cmFuc2Zvcm1PcmlnaW5cIikge1xuICAgICAgICAgICAgaW5saW5lUHJvcHMucHVzaChfdHJhbnNmb3JtT3JpZ2luUHJvcCwgc3R5bGVbX3RyYW5zZm9ybU9yaWdpblByb3BdKTtcbiAgICAgICAgICAgIGVuZFZhbHVlID0gX2NvbnZlcnRLZXl3b3Jkc1RvUGVyY2VudGFnZXMoZW5kVmFsdWUpOyAvL2luIGNhc2Ugc29tZXRoaW5nIGxpa2UgXCJsZWZ0IHRvcFwiIG9yIFwiYm90dG9tIHJpZ2h0XCIgaXMgcGFzc2VkIGluLiBDb252ZXJ0IHRvIHBlcmNlbnRhZ2VzLlxuXG4gICAgICAgICAgICBpZiAoY2FjaGUuc3ZnKSB7XG4gICAgICAgICAgICAgIF9hcHBseVNWR09yaWdpbih0YXJnZXQsIGVuZFZhbHVlLCAwLCBzbW9vdGgsIDAsIHRoaXMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZW5kVW5pdCA9IHBhcnNlRmxvYXQoZW5kVmFsdWUuc3BsaXQoXCIgXCIpWzJdKSB8fCAwOyAvL2hhbmRsZSB0aGUgek9yaWdpbiBzZXBhcmF0ZWx5IVxuXG4gICAgICAgICAgICAgIGVuZFVuaXQgIT09IGNhY2hlLnpPcmlnaW4gJiYgX2FkZE5vblR3ZWVuaW5nUFQodGhpcywgY2FjaGUsIFwiek9yaWdpblwiLCBjYWNoZS56T3JpZ2luLCBlbmRVbml0KTtcblxuICAgICAgICAgICAgICBfYWRkTm9uVHdlZW5pbmdQVCh0aGlzLCBzdHlsZSwgcCwgX2ZpcnN0VHdvT25seShzdGFydFZhbHVlKSwgX2ZpcnN0VHdvT25seShlbmRWYWx1ZSkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHAgPT09IFwic3ZnT3JpZ2luXCIpIHtcbiAgICAgICAgICAgIF9hcHBseVNWR09yaWdpbih0YXJnZXQsIGVuZFZhbHVlLCAxLCBzbW9vdGgsIDAsIHRoaXMpO1xuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHAgaW4gX3JvdGF0aW9uYWxQcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICBfYWRkUm90YXRpb25hbFByb3BUd2Vlbih0aGlzLCBjYWNoZSwgcCwgc3RhcnROdW0sIHJlbGF0aXZlID8gX3BhcnNlUmVsYXRpdmUoc3RhcnROdW0sIHJlbGF0aXZlICsgZW5kVmFsdWUpIDogZW5kVmFsdWUpO1xuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHAgPT09IFwic21vb3RoT3JpZ2luXCIpIHtcbiAgICAgICAgICAgIF9hZGROb25Ud2VlbmluZ1BUKHRoaXMsIGNhY2hlLCBcInNtb290aFwiLCBjYWNoZS5zbW9vdGgsIGVuZFZhbHVlKTtcblxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfSBlbHNlIGlmIChwID09PSBcImZvcmNlM0RcIikge1xuICAgICAgICAgICAgY2FjaGVbcF0gPSBlbmRWYWx1ZTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH0gZWxzZSBpZiAocCA9PT0gXCJ0cmFuc2Zvcm1cIikge1xuICAgICAgICAgICAgX2FkZFJhd1RyYW5zZm9ybVBUcyh0aGlzLCBlbmRWYWx1ZSwgdGFyZ2V0KTtcblxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCEocCBpbiBzdHlsZSkpIHtcbiAgICAgICAgICBwID0gX2NoZWNrUHJvcFByZWZpeChwKSB8fCBwO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzVHJhbnNmb3JtUmVsYXRlZCB8fCAoZW5kTnVtIHx8IGVuZE51bSA9PT0gMCkgJiYgKHN0YXJ0TnVtIHx8IHN0YXJ0TnVtID09PSAwKSAmJiAhX2NvbXBsZXhFeHAudGVzdChlbmRWYWx1ZSkgJiYgcCBpbiBzdHlsZSkge1xuICAgICAgICAgIHN0YXJ0VW5pdCA9IChzdGFydFZhbHVlICsgXCJcIikuc3Vic3RyKChzdGFydE51bSArIFwiXCIpLmxlbmd0aCk7XG4gICAgICAgICAgZW5kTnVtIHx8IChlbmROdW0gPSAwKTsgLy8gcHJvdGVjdCBhZ2FpbnN0IE5hTlxuXG4gICAgICAgICAgZW5kVW5pdCA9IGdldFVuaXQoZW5kVmFsdWUpIHx8IChwIGluIF9jb25maWcudW5pdHMgPyBfY29uZmlnLnVuaXRzW3BdIDogc3RhcnRVbml0KTtcbiAgICAgICAgICBzdGFydFVuaXQgIT09IGVuZFVuaXQgJiYgKHN0YXJ0TnVtID0gX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBwLCBzdGFydFZhbHVlLCBlbmRVbml0KSk7XG4gICAgICAgICAgdGhpcy5fcHQgPSBuZXcgUHJvcFR3ZWVuKHRoaXMuX3B0LCBpc1RyYW5zZm9ybVJlbGF0ZWQgPyBjYWNoZSA6IHN0eWxlLCBwLCBzdGFydE51bSwgKHJlbGF0aXZlID8gX3BhcnNlUmVsYXRpdmUoc3RhcnROdW0sIHJlbGF0aXZlICsgZW5kTnVtKSA6IGVuZE51bSkgLSBzdGFydE51bSwgIWlzVHJhbnNmb3JtUmVsYXRlZCAmJiAoZW5kVW5pdCA9PT0gXCJweFwiIHx8IHAgPT09IFwiekluZGV4XCIpICYmIHZhcnMuYXV0b1JvdW5kICE9PSBmYWxzZSA/IF9yZW5kZXJSb3VuZGVkQ1NTUHJvcCA6IF9yZW5kZXJDU1NQcm9wKTtcbiAgICAgICAgICB0aGlzLl9wdC51ID0gZW5kVW5pdCB8fCAwO1xuXG4gICAgICAgICAgaWYgKHN0YXJ0VW5pdCAhPT0gZW5kVW5pdCAmJiBlbmRVbml0ICE9PSBcIiVcIikge1xuICAgICAgICAgICAgLy93aGVuIHRoZSB0d2VlbiBnb2VzIGFsbCB0aGUgd2F5IGJhY2sgdG8gdGhlIGJlZ2lubmluZywgd2UgbmVlZCB0byByZXZlcnQgaXQgdG8gdGhlIE9MRC9PUklHSU5BTCB2YWx1ZSAod2l0aCB0aG9zZSB1bml0cykuIFdlIHJlY29yZCB0aGF0IGFzIGEgXCJiXCIgKGJlZ2lubmluZykgcHJvcGVydHkgYW5kIHBvaW50IHRvIGEgcmVuZGVyIG1ldGhvZCB0aGF0IGhhbmRsZXMgdGhhdC4gKHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbilcbiAgICAgICAgICAgIHRoaXMuX3B0LmIgPSBzdGFydFZhbHVlO1xuICAgICAgICAgICAgdGhpcy5fcHQuciA9IF9yZW5kZXJDU1NQcm9wV2l0aEJlZ2lubmluZztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoIShwIGluIHN0eWxlKSkge1xuICAgICAgICAgIGlmIChwIGluIHRhcmdldCkge1xuICAgICAgICAgICAgLy9tYXliZSBpdCdzIG5vdCBhIHN0eWxlIC0gaXQgY291bGQgYmUgYSBwcm9wZXJ0eSBhZGRlZCBkaXJlY3RseSB0byBhbiBlbGVtZW50IGluIHdoaWNoIGNhc2Ugd2UnbGwgdHJ5IHRvIGFuaW1hdGUgdGhhdC5cbiAgICAgICAgICAgIHRoaXMuYWRkKHRhcmdldCwgcCwgc3RhcnRWYWx1ZSB8fCB0YXJnZXRbcF0sIHJlbGF0aXZlID8gcmVsYXRpdmUgKyBlbmRWYWx1ZSA6IGVuZFZhbHVlLCBpbmRleCwgdGFyZ2V0cyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF9taXNzaW5nUGx1Z2luKHAsIGVuZFZhbHVlKTtcblxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90d2VlbkNvbXBsZXhDU1NTdHJpbmcuY2FsbCh0aGlzLCB0YXJnZXQsIHAsIHN0YXJ0VmFsdWUsIHJlbGF0aXZlID8gcmVsYXRpdmUgKyBlbmRWYWx1ZSA6IGVuZFZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlzVHJhbnNmb3JtUmVsYXRlZCB8fCBpbmxpbmVQcm9wcy5wdXNoKHAsIHN0eWxlW3BdKTtcbiAgICAgICAgcHJvcHMucHVzaChwKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBoYXNQcmlvcml0eSAmJiBfc29ydFByb3BUd2VlbnNCeVByaW9yaXR5KHRoaXMpO1xuICB9LFxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcihyYXRpbywgZGF0YSkge1xuICAgIGlmIChkYXRhLnR3ZWVuLl90aW1lIHx8ICFfcmV2ZXJ0aW5nKCkpIHtcbiAgICAgIHZhciBwdCA9IGRhdGEuX3B0O1xuXG4gICAgICB3aGlsZSAocHQpIHtcbiAgICAgICAgcHQucihyYXRpbywgcHQuZCk7XG4gICAgICAgIHB0ID0gcHQuX25leHQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGRhdGEuc3R5bGVzLnJldmVydCgpO1xuICAgIH1cbiAgfSxcbiAgZ2V0OiBfZ2V0LFxuICBhbGlhc2VzOiBfcHJvcGVydHlBbGlhc2VzLFxuICBnZXRTZXR0ZXI6IGZ1bmN0aW9uIGdldFNldHRlcih0YXJnZXQsIHByb3BlcnR5LCBwbHVnaW4pIHtcbiAgICAvL3JldHVybnMgYSBzZXR0ZXIgZnVuY3Rpb24gdGhhdCBhY2NlcHRzIHRhcmdldCwgcHJvcGVydHksIHZhbHVlIGFuZCBhcHBsaWVzIGl0IGFjY29yZGluZ2x5LiBSZW1lbWJlciwgcHJvcGVydGllcyBsaWtlIFwieFwiIGFyZW4ndCBhcyBzaW1wbGUgYXMgdGFyZ2V0LnN0eWxlLnByb3BlcnR5ID0gdmFsdWUgYmVjYXVzZSB0aGV5J3ZlIGdvdCB0byBiZSBhcHBsaWVkIHRvIGEgcHJveHkgb2JqZWN0IGFuZCB0aGVuIG1lcmdlZCBpbnRvIGEgdHJhbnNmb3JtIHN0cmluZyBpbiBhIHJlbmRlcmVyLlxuICAgIHZhciBwID0gX3Byb3BlcnR5QWxpYXNlc1twcm9wZXJ0eV07XG4gICAgcCAmJiBwLmluZGV4T2YoXCIsXCIpIDwgMCAmJiAocHJvcGVydHkgPSBwKTtcbiAgICByZXR1cm4gcHJvcGVydHkgaW4gX3RyYW5zZm9ybVByb3BzICYmIHByb3BlcnR5ICE9PSBfdHJhbnNmb3JtT3JpZ2luUHJvcCAmJiAodGFyZ2V0Ll9nc2FwLnggfHwgX2dldCh0YXJnZXQsIFwieFwiKSkgPyBwbHVnaW4gJiYgX3JlY2VudFNldHRlclBsdWdpbiA9PT0gcGx1Z2luID8gcHJvcGVydHkgPT09IFwic2NhbGVcIiA/IF9zZXR0ZXJTY2FsZSA6IF9zZXR0ZXJUcmFuc2Zvcm0gOiAoX3JlY2VudFNldHRlclBsdWdpbiA9IHBsdWdpbiB8fCB7fSkgJiYgKHByb3BlcnR5ID09PSBcInNjYWxlXCIgPyBfc2V0dGVyU2NhbGVXaXRoUmVuZGVyIDogX3NldHRlclRyYW5zZm9ybVdpdGhSZW5kZXIpIDogdGFyZ2V0LnN0eWxlICYmICFfaXNVbmRlZmluZWQodGFyZ2V0LnN0eWxlW3Byb3BlcnR5XSkgPyBfc2V0dGVyQ1NTU3R5bGUgOiB+cHJvcGVydHkuaW5kZXhPZihcIi1cIikgPyBfc2V0dGVyQ1NTUHJvcCA6IF9nZXRTZXR0ZXIodGFyZ2V0LCBwcm9wZXJ0eSk7XG4gIH0sXG4gIGNvcmU6IHtcbiAgICBfcmVtb3ZlUHJvcGVydHk6IF9yZW1vdmVQcm9wZXJ0eSxcbiAgICBfZ2V0TWF0cml4OiBfZ2V0TWF0cml4XG4gIH1cbn07XG5nc2FwLnV0aWxzLmNoZWNrUHJlZml4ID0gX2NoZWNrUHJvcFByZWZpeDtcbmdzYXAuY29yZS5nZXRTdHlsZVNhdmVyID0gX2dldFN0eWxlU2F2ZXI7XG5cbihmdW5jdGlvbiAocG9zaXRpb25BbmRTY2FsZSwgcm90YXRpb24sIG90aGVycywgYWxpYXNlcykge1xuICB2YXIgYWxsID0gX2ZvckVhY2hOYW1lKHBvc2l0aW9uQW5kU2NhbGUgKyBcIixcIiArIHJvdGF0aW9uICsgXCIsXCIgKyBvdGhlcnMsIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgX3RyYW5zZm9ybVByb3BzW25hbWVdID0gMTtcbiAgfSk7XG5cbiAgX2ZvckVhY2hOYW1lKHJvdGF0aW9uLCBmdW5jdGlvbiAobmFtZSkge1xuICAgIF9jb25maWcudW5pdHNbbmFtZV0gPSBcImRlZ1wiO1xuICAgIF9yb3RhdGlvbmFsUHJvcGVydGllc1tuYW1lXSA9IDE7XG4gIH0pO1xuXG4gIF9wcm9wZXJ0eUFsaWFzZXNbYWxsWzEzXV0gPSBwb3NpdGlvbkFuZFNjYWxlICsgXCIsXCIgKyByb3RhdGlvbjtcblxuICBfZm9yRWFjaE5hbWUoYWxpYXNlcywgZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB2YXIgc3BsaXQgPSBuYW1lLnNwbGl0KFwiOlwiKTtcbiAgICBfcHJvcGVydHlBbGlhc2VzW3NwbGl0WzFdXSA9IGFsbFtzcGxpdFswXV07XG4gIH0pO1xufSkoXCJ4LHkseixzY2FsZSxzY2FsZVgsc2NhbGVZLHhQZXJjZW50LHlQZXJjZW50XCIsIFwicm90YXRpb24scm90YXRpb25YLHJvdGF0aW9uWSxza2V3WCxza2V3WVwiLCBcInRyYW5zZm9ybSx0cmFuc2Zvcm1PcmlnaW4sc3ZnT3JpZ2luLGZvcmNlM0Qsc21vb3RoT3JpZ2luLHRyYW5zZm9ybVBlcnNwZWN0aXZlXCIsIFwiMDp0cmFuc2xhdGVYLDE6dHJhbnNsYXRlWSwyOnRyYW5zbGF0ZVosODpyb3RhdGUsODpyb3RhdGlvblosODpyb3RhdGVaLDk6cm90YXRlWCwxMDpyb3RhdGVZXCIpO1xuXG5fZm9yRWFjaE5hbWUoXCJ4LHkseix0b3AscmlnaHQsYm90dG9tLGxlZnQsd2lkdGgsaGVpZ2h0LGZvbnRTaXplLHBhZGRpbmcsbWFyZ2luLHBlcnNwZWN0aXZlXCIsIGZ1bmN0aW9uIChuYW1lKSB7XG4gIF9jb25maWcudW5pdHNbbmFtZV0gPSBcInB4XCI7XG59KTtcblxuZ3NhcC5yZWdpc3RlclBsdWdpbihDU1NQbHVnaW4pO1xuZXhwb3J0IHsgQ1NTUGx1Z2luIGFzIGRlZmF1bHQsIF9nZXRCQm94LCBfY3JlYXRlRWxlbWVudCwgX2NoZWNrUHJvcFByZWZpeCBhcyBjaGVja1ByZWZpeCB9OyIsImltcG9ydCB7IGdzYXAsIFBvd2VyMCwgUG93ZXIxLCBQb3dlcjIsIFBvd2VyMywgUG93ZXI0LCBMaW5lYXIsIFF1YWQsIEN1YmljLCBRdWFydCwgUXVpbnQsIFN0cm9uZywgRWxhc3RpYywgQmFjaywgU3RlcHBlZEVhc2UsIEJvdW5jZSwgU2luZSwgRXhwbywgQ2lyYywgVHdlZW5MaXRlLCBUaW1lbGluZUxpdGUsIFRpbWVsaW5lTWF4IH0gZnJvbSBcIi4vZ3NhcC1jb3JlLmpzXCI7XG5pbXBvcnQgeyBDU1NQbHVnaW4gfSBmcm9tIFwiLi9DU1NQbHVnaW4uanNcIjtcbnZhciBnc2FwV2l0aENTUyA9IGdzYXAucmVnaXN0ZXJQbHVnaW4oQ1NTUGx1Z2luKSB8fCBnc2FwLFxuICAgIC8vIHRvIHByb3RlY3QgZnJvbSB0cmVlIHNoYWtpbmdcblR3ZWVuTWF4V2l0aENTUyA9IGdzYXBXaXRoQ1NTLmNvcmUuVHdlZW47XG5leHBvcnQgeyBnc2FwV2l0aENTUyBhcyBnc2FwLCBnc2FwV2l0aENTUyBhcyBkZWZhdWx0LCBDU1NQbHVnaW4sIFR3ZWVuTWF4V2l0aENTUyBhcyBUd2Vlbk1heCwgVHdlZW5MaXRlLCBUaW1lbGluZU1heCwgVGltZWxpbmVMaXRlLCBQb3dlcjAsIFBvd2VyMSwgUG93ZXIyLCBQb3dlcjMsIFBvd2VyNCwgTGluZWFyLCBRdWFkLCBDdWJpYywgUXVhcnQsIFF1aW50LCBTdHJvbmcsIEVsYXN0aWMsIEJhY2ssIFN0ZXBwZWRFYXNlLCBCb3VuY2UsIFNpbmUsIEV4cG8sIENpcmMgfTsiLCJmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbi8qIVxuICogT2JzZXJ2ZXIgMy4xMS4xXG4gKiBodHRwczovL2dyZWVuc29jay5jb21cbiAqXG4gKiBAbGljZW5zZSBDb3B5cmlnaHQgMjAwOC0yMDIyLCBHcmVlblNvY2suIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBTdWJqZWN0IHRvIHRoZSB0ZXJtcyBhdCBodHRwczovL2dyZWVuc29jay5jb20vc3RhbmRhcmQtbGljZW5zZSBvciBmb3JcbiAqIENsdWIgR3JlZW5Tb2NrIG1lbWJlcnMsIHRoZSBhZ3JlZW1lbnQgaXNzdWVkIHdpdGggdGhhdCBtZW1iZXJzaGlwLlxuICogQGF1dGhvcjogSmFjayBEb3lsZSwgamFja0BncmVlbnNvY2suY29tXG4qL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xudmFyIGdzYXAsXG4gICAgX2NvcmVJbml0dGVkLFxuICAgIF9jbGFtcCxcbiAgICBfd2luLFxuICAgIF9kb2MsXG4gICAgX2RvY0VsLFxuICAgIF9ib2R5LFxuICAgIF9pc1RvdWNoLFxuICAgIF9wb2ludGVyVHlwZSxcbiAgICBTY3JvbGxUcmlnZ2VyLFxuICAgIF9yb290LFxuICAgIF9ub3JtYWxpemVyLFxuICAgIF9ldmVudFR5cGVzLFxuICAgIF9nZXRHU0FQID0gZnVuY3Rpb24gX2dldEdTQVAoKSB7XG4gIHJldHVybiBnc2FwIHx8IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgKGdzYXAgPSB3aW5kb3cuZ3NhcCkgJiYgZ3NhcC5yZWdpc3RlclBsdWdpbiAmJiBnc2FwO1xufSxcbiAgICBfcGFzc1Rocm91Z2ggPSBmdW5jdGlvbiBfcGFzc1Rocm91Z2gocCkge1xuICByZXR1cm4gcDtcbn0sXG4gICAgX3N0YXJ0dXAgPSAxLFxuICAgIF9vYnNlcnZlcnMgPSBbXSxcbiAgICBfc2Nyb2xsZXJzID0gW10sXG4gICAgX3Byb3hpZXMgPSBbXSxcbiAgICBfZ2V0VGltZSA9IERhdGUubm93LFxuICAgIF9icmlkZ2UgPSBmdW5jdGlvbiBfYnJpZGdlKG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZTtcbn0sXG4gICAgX2ludGVncmF0ZSA9IGZ1bmN0aW9uIF9pbnRlZ3JhdGUoKSB7XG4gIHZhciBjb3JlID0gU2Nyb2xsVHJpZ2dlci5jb3JlLFxuICAgICAgZGF0YSA9IGNvcmUuYnJpZGdlIHx8IHt9LFxuICAgICAgc2Nyb2xsZXJzID0gY29yZS5fc2Nyb2xsZXJzLFxuICAgICAgcHJveGllcyA9IGNvcmUuX3Byb3hpZXM7XG4gIHNjcm9sbGVycy5wdXNoLmFwcGx5KHNjcm9sbGVycywgX3Njcm9sbGVycyk7XG4gIHByb3hpZXMucHVzaC5hcHBseShwcm94aWVzLCBfcHJveGllcyk7XG4gIF9zY3JvbGxlcnMgPSBzY3JvbGxlcnM7XG4gIF9wcm94aWVzID0gcHJveGllcztcblxuICBfYnJpZGdlID0gZnVuY3Rpb24gX2JyaWRnZShuYW1lLCB2YWx1ZSkge1xuICAgIHJldHVybiBkYXRhW25hbWVdKHZhbHVlKTtcbiAgfTtcbn0sXG4gICAgX2dldFByb3h5UHJvcCA9IGZ1bmN0aW9uIF9nZXRQcm94eVByb3AoZWxlbWVudCwgcHJvcGVydHkpIHtcbiAgcmV0dXJuIH5fcHJveGllcy5pbmRleE9mKGVsZW1lbnQpICYmIF9wcm94aWVzW19wcm94aWVzLmluZGV4T2YoZWxlbWVudCkgKyAxXVtwcm9wZXJ0eV07XG59LFxuICAgIF9pc1ZpZXdwb3J0ID0gZnVuY3Rpb24gX2lzVmlld3BvcnQoZWwpIHtcbiAgcmV0dXJuICEhfl9yb290LmluZGV4T2YoZWwpO1xufSxcbiAgICBfYWRkTGlzdGVuZXIgPSBmdW5jdGlvbiBfYWRkTGlzdGVuZXIoZWxlbWVudCwgdHlwZSwgZnVuYywgbm9uUGFzc2l2ZSwgY2FwdHVyZSkge1xuICByZXR1cm4gZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGZ1bmMsIHtcbiAgICBwYXNzaXZlOiAhbm9uUGFzc2l2ZSxcbiAgICBjYXB0dXJlOiAhIWNhcHR1cmVcbiAgfSk7XG59LFxuICAgIF9yZW1vdmVMaXN0ZW5lciA9IGZ1bmN0aW9uIF9yZW1vdmVMaXN0ZW5lcihlbGVtZW50LCB0eXBlLCBmdW5jLCBjYXB0dXJlKSB7XG4gIHJldHVybiBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgZnVuYywgISFjYXB0dXJlKTtcbn0sXG4gICAgX3Njcm9sbExlZnQgPSBcInNjcm9sbExlZnRcIixcbiAgICBfc2Nyb2xsVG9wID0gXCJzY3JvbGxUb3BcIixcbiAgICBfb25TY3JvbGwgPSBmdW5jdGlvbiBfb25TY3JvbGwoKSB7XG4gIHJldHVybiBfbm9ybWFsaXplciAmJiBfbm9ybWFsaXplci5pc1ByZXNzZWQgfHwgX3Njcm9sbGVycy5jYWNoZSsrO1xufSxcbiAgICBfc2Nyb2xsQ2FjaGVGdW5jID0gZnVuY3Rpb24gX3Njcm9sbENhY2hlRnVuYyhmLCBkb05vdENhY2hlKSB7XG4gIHZhciBjYWNoaW5nRnVuYyA9IGZ1bmN0aW9uIGNhY2hpbmdGdW5jKHZhbHVlKSB7XG4gICAgLy8gc2luY2UgcmVhZGluZyB0aGUgc2Nyb2xsVG9wL3Njcm9sbExlZnQvcGFnZU9mZnNldFkvcGFnZU9mZnNldFggY2FuIHRyaWdnZXIgYSBsYXlvdXQsIHRoaXMgZnVuY3Rpb24gYWxsb3dzIHVzIHRvIGNhY2hlIHRoZSB2YWx1ZSBzbyBpdCBvbmx5IGdldHMgcmVhZCBmcmVzaCBhZnRlciBhIFwic2Nyb2xsXCIgZXZlbnQgZmlyZXMgKG9yIHdoaWxlIHdlJ3JlIHJlZnJlc2hpbmcgYmVjYXVzZSB0aGF0IGNhbiBsZW5ndGhlbiB0aGUgcGFnZSBhbmQgYWx0ZXIgdGhlIHNjcm9sbCBwb3NpdGlvbikuIHdoZW4gXCJzb2Z0XCIgaXMgdHJ1ZSwgdGhhdCBtZWFucyBkb24ndCBhY3R1YWxseSBzZXQgdGhlIHNjcm9sbCwgYnV0IGNhY2hlIHRoZSBuZXcgdmFsdWUgaW5zdGVhZCAodXNlZnVsIGluIFNjcm9sbFNtb290aGVyKVxuICAgIGlmICh2YWx1ZSB8fCB2YWx1ZSA9PT0gMCkge1xuICAgICAgX3N0YXJ0dXAgJiYgKF93aW4uaGlzdG9yeS5zY3JvbGxSZXN0b3JhdGlvbiA9IFwibWFudWFsXCIpOyAvLyBvdGhlcndpc2UgdGhlIG5ldyBwb3NpdGlvbiB3aWxsIGdldCBvdmVyd3JpdHRlbiBieSB0aGUgYnJvd3NlciBvbmxvYWQuXG5cbiAgICAgIHZhciBpc05vcm1hbGl6aW5nID0gX25vcm1hbGl6ZXIgJiYgX25vcm1hbGl6ZXIuaXNQcmVzc2VkO1xuICAgICAgdmFsdWUgPSBjYWNoaW5nRnVuYy52ID0gTWF0aC5yb3VuZCh2YWx1ZSkgfHwgKF9ub3JtYWxpemVyICYmIF9ub3JtYWxpemVyLmlPUyA/IDEgOiAwKTsgLy9UT0RPOiBpT1MgQnVnOiBpZiB5b3UgYWxsb3cgaXQgdG8gZ28gdG8gMCwgU2FmYXJpIGNhbiBzdGFydCB0byByZXBvcnQgc3VwZXIgc3RyYW5nZSAod2lsZGx5IGluYWNjdXJhdGUpIHRvdWNoIHBvc2l0aW9ucyFcblxuICAgICAgZih2YWx1ZSk7XG4gICAgICBjYWNoaW5nRnVuYy5jYWNoZUlEID0gX3Njcm9sbGVycy5jYWNoZTtcbiAgICAgIGlzTm9ybWFsaXppbmcgJiYgX2JyaWRnZShcInNzXCIsIHZhbHVlKTsgLy8gc2V0IHNjcm9sbCAobm90aWZ5IFNjcm9sbFRyaWdnZXIgc28gaXQgY2FuIGRpc3BhdGNoIGEgXCJzY3JvbGxTdGFydFwiIGV2ZW50IGlmIG5lY2Vzc2FyeVxuICAgIH0gZWxzZSBpZiAoZG9Ob3RDYWNoZSB8fCBfc2Nyb2xsZXJzLmNhY2hlICE9PSBjYWNoaW5nRnVuYy5jYWNoZUlEIHx8IF9icmlkZ2UoXCJyZWZcIikpIHtcbiAgICAgIGNhY2hpbmdGdW5jLmNhY2hlSUQgPSBfc2Nyb2xsZXJzLmNhY2hlO1xuICAgICAgY2FjaGluZ0Z1bmMudiA9IGYoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2FjaGluZ0Z1bmMudiArIGNhY2hpbmdGdW5jLm9mZnNldDtcbiAgfTtcblxuICBjYWNoaW5nRnVuYy5vZmZzZXQgPSAwO1xuICByZXR1cm4gZiAmJiBjYWNoaW5nRnVuYztcbn0sXG4gICAgX2hvcml6b250YWwgPSB7XG4gIHM6IF9zY3JvbGxMZWZ0LFxuICBwOiBcImxlZnRcIixcbiAgcDI6IFwiTGVmdFwiLFxuICBvczogXCJyaWdodFwiLFxuICBvczI6IFwiUmlnaHRcIixcbiAgZDogXCJ3aWR0aFwiLFxuICBkMjogXCJXaWR0aFwiLFxuICBhOiBcInhcIixcbiAgc2M6IF9zY3JvbGxDYWNoZUZ1bmMoZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyBfd2luLnNjcm9sbFRvKHZhbHVlLCBfdmVydGljYWwuc2MoKSkgOiBfd2luLnBhZ2VYT2Zmc2V0IHx8IF9kb2NbX3Njcm9sbExlZnRdIHx8IF9kb2NFbFtfc2Nyb2xsTGVmdF0gfHwgX2JvZHlbX3Njcm9sbExlZnRdIHx8IDA7XG4gIH0pXG59LFxuICAgIF92ZXJ0aWNhbCA9IHtcbiAgczogX3Njcm9sbFRvcCxcbiAgcDogXCJ0b3BcIixcbiAgcDI6IFwiVG9wXCIsXG4gIG9zOiBcImJvdHRvbVwiLFxuICBvczI6IFwiQm90dG9tXCIsXG4gIGQ6IFwiaGVpZ2h0XCIsXG4gIGQyOiBcIkhlaWdodFwiLFxuICBhOiBcInlcIixcbiAgb3A6IF9ob3Jpem9udGFsLFxuICBzYzogX3Njcm9sbENhY2hlRnVuYyhmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IF93aW4uc2Nyb2xsVG8oX2hvcml6b250YWwuc2MoKSwgdmFsdWUpIDogX3dpbi5wYWdlWU9mZnNldCB8fCBfZG9jW19zY3JvbGxUb3BdIHx8IF9kb2NFbFtfc2Nyb2xsVG9wXSB8fCBfYm9keVtfc2Nyb2xsVG9wXSB8fCAwO1xuICB9KVxufSxcbiAgICBfZ2V0VGFyZ2V0ID0gZnVuY3Rpb24gX2dldFRhcmdldCh0KSB7XG4gIHJldHVybiBnc2FwLnV0aWxzLnRvQXJyYXkodClbMF0gfHwgKHR5cGVvZiB0ID09PSBcInN0cmluZ1wiICYmIGdzYXAuY29uZmlnKCkubnVsbFRhcmdldFdhcm4gIT09IGZhbHNlID8gY29uc29sZS53YXJuKFwiRWxlbWVudCBub3QgZm91bmQ6XCIsIHQpIDogbnVsbCk7XG59LFxuICAgIF9nZXRTY3JvbGxGdW5jID0gZnVuY3Rpb24gX2dldFNjcm9sbEZ1bmMoZWxlbWVudCwgX3JlZikge1xuICB2YXIgcyA9IF9yZWYucyxcbiAgICAgIHNjID0gX3JlZi5zYztcblxuICAvLyB3ZSBzdG9yZSB0aGUgc2Nyb2xsZXIgZnVuY3Rpb25zIGluIGEgYWx0ZXJuYXRpbmcgc2VxdWVuY2VkIEFycmF5IGxpa2UgW2VsZW1lbnQsIHZlcnRpY2FsU2Nyb2xsRnVuYywgaG9yaXpvbnRhbFNjcm9sbEZ1bmMsIC4uLl0gc28gdGhhdCB3ZSBjYW4gbWluaW1pemUgbWVtb3J5LCBtYXhpbWl6ZSBwZXJmb3JtYW5jZSwgYW5kIHdlIGFsc28gcmVjb3JkIHRoZSBsYXN0IHBvc2l0aW9uIGFzIGEgXCIucmVjXCIgcHJvcGVydHkgaW4gb3JkZXIgdG8gcmV2ZXJ0IHRvIHRoYXQgYWZ0ZXIgcmVmcmVzaGluZyB0byBlbnN1cmUgdGhpbmdzIGRvbid0IHNoaWZ0IGFyb3VuZC5cbiAgdmFyIGkgPSBfc2Nyb2xsZXJzLmluZGV4T2YoZWxlbWVudCksXG4gICAgICBvZmZzZXQgPSBzYyA9PT0gX3ZlcnRpY2FsLnNjID8gMSA6IDI7XG5cbiAgIX5pICYmIChpID0gX3Njcm9sbGVycy5wdXNoKGVsZW1lbnQpIC0gMSk7XG4gIHJldHVybiBfc2Nyb2xsZXJzW2kgKyBvZmZzZXRdIHx8IChfc2Nyb2xsZXJzW2kgKyBvZmZzZXRdID0gX3Njcm9sbENhY2hlRnVuYyhfZ2V0UHJveHlQcm9wKGVsZW1lbnQsIHMpLCB0cnVlKSB8fCAoX2lzVmlld3BvcnQoZWxlbWVudCkgPyBzYyA6IF9zY3JvbGxDYWNoZUZ1bmMoZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyBlbGVtZW50W3NdID0gdmFsdWUgOiBlbGVtZW50W3NdO1xuICB9KSkpO1xufSxcbiAgICBfZ2V0VmVsb2NpdHlQcm9wID0gZnVuY3Rpb24gX2dldFZlbG9jaXR5UHJvcCh2YWx1ZSwgbWluVGltZVJlZnJlc2gsIHVzZURlbHRhKSB7XG4gIHZhciB2MSA9IHZhbHVlLFxuICAgICAgdjIgPSB2YWx1ZSxcbiAgICAgIHQxID0gX2dldFRpbWUoKSxcbiAgICAgIHQyID0gdDEsXG4gICAgICBtaW4gPSBtaW5UaW1lUmVmcmVzaCB8fCA1MCxcbiAgICAgIGRyb3BUb1plcm9UaW1lID0gTWF0aC5tYXgoNTAwLCBtaW4gKiAzKSxcbiAgICAgIHVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSh2YWx1ZSwgZm9yY2UpIHtcbiAgICB2YXIgdCA9IF9nZXRUaW1lKCk7XG5cbiAgICBpZiAoZm9yY2UgfHwgdCAtIHQxID4gbWluKSB7XG4gICAgICB2MiA9IHYxO1xuICAgICAgdjEgPSB2YWx1ZTtcbiAgICAgIHQyID0gdDE7XG4gICAgICB0MSA9IHQ7XG4gICAgfSBlbHNlIGlmICh1c2VEZWx0YSkge1xuICAgICAgdjEgKz0gdmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIG5vdCB0b3RhbGx5IG5lY2Vzc2FyeSwgYnV0IG1ha2VzIGl0IGEgYml0IG1vcmUgYWNjdXJhdGUgYnkgYWRqdXN0aW5nIHRoZSB2MSB2YWx1ZSBhY2NvcmRpbmcgdG8gdGhlIG5ldyBzbG9wZS4gVGhpcyB3YXkgd2UncmUgbm90IGp1c3QgaWdub3JpbmcgdGhlIGluY29taW5nIGRhdGEuIFJlbW92aW5nIGZvciBub3cgYmVjYXVzZSBpdCBkb2Vzbid0IHNlZW0gdG8gbWFrZSBtdWNoIHByYWN0aWNhbCBkaWZmZXJlbmNlIGFuZCBpdCdzIHByb2JhYmx5IG5vdCB3b3J0aCB0aGUga2IuXG4gICAgICB2MSA9IHYyICsgKHZhbHVlIC0gdjIpIC8gKHQgLSB0MikgKiAodDEgLSB0Mik7XG4gICAgfVxuICB9LFxuICAgICAgcmVzZXQgPSBmdW5jdGlvbiByZXNldCgpIHtcbiAgICB2MiA9IHYxID0gdXNlRGVsdGEgPyAwIDogdjE7XG4gICAgdDIgPSB0MSA9IDA7XG4gIH0sXG4gICAgICBnZXRWZWxvY2l0eSA9IGZ1bmN0aW9uIGdldFZlbG9jaXR5KGxhdGVzdFZhbHVlKSB7XG4gICAgdmFyIHRPbGQgPSB0MixcbiAgICAgICAgdk9sZCA9IHYyLFxuICAgICAgICB0ID0gX2dldFRpbWUoKTtcblxuICAgIChsYXRlc3RWYWx1ZSB8fCBsYXRlc3RWYWx1ZSA9PT0gMCkgJiYgbGF0ZXN0VmFsdWUgIT09IHYxICYmIHVwZGF0ZShsYXRlc3RWYWx1ZSk7XG4gICAgcmV0dXJuIHQxID09PSB0MiB8fCB0IC0gdDIgPiBkcm9wVG9aZXJvVGltZSA/IDAgOiAodjEgKyAodXNlRGVsdGEgPyB2T2xkIDogLXZPbGQpKSAvICgodXNlRGVsdGEgPyB0IDogdDEpIC0gdE9sZCkgKiAxMDAwO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiB1cGRhdGUsXG4gICAgcmVzZXQ6IHJlc2V0LFxuICAgIGdldFZlbG9jaXR5OiBnZXRWZWxvY2l0eVxuICB9O1xufSxcbiAgICBfZ2V0RXZlbnQgPSBmdW5jdGlvbiBfZ2V0RXZlbnQoZSwgcHJldmVudERlZmF1bHQpIHtcbiAgcHJldmVudERlZmF1bHQgJiYgIWUuX2dzYXBBbGxvdyAmJiBlLnByZXZlbnREZWZhdWx0KCk7XG4gIHJldHVybiBlLmNoYW5nZWRUb3VjaGVzID8gZS5jaGFuZ2VkVG91Y2hlc1swXSA6IGU7XG59LFxuICAgIF9nZXRBYnNvbHV0ZU1heCA9IGZ1bmN0aW9uIF9nZXRBYnNvbHV0ZU1heChhKSB7XG4gIHZhciBtYXggPSBNYXRoLm1heC5hcHBseShNYXRoLCBhKSxcbiAgICAgIG1pbiA9IE1hdGgubWluLmFwcGx5KE1hdGgsIGEpO1xuICByZXR1cm4gTWF0aC5hYnMobWF4KSA+PSBNYXRoLmFicyhtaW4pID8gbWF4IDogbWluO1xufSxcbiAgICBfc2V0U2Nyb2xsVHJpZ2dlciA9IGZ1bmN0aW9uIF9zZXRTY3JvbGxUcmlnZ2VyKCkge1xuICBTY3JvbGxUcmlnZ2VyID0gZ3NhcC5jb3JlLmdsb2JhbHMoKS5TY3JvbGxUcmlnZ2VyO1xuICBTY3JvbGxUcmlnZ2VyICYmIFNjcm9sbFRyaWdnZXIuY29yZSAmJiBfaW50ZWdyYXRlKCk7XG59LFxuICAgIF9pbml0Q29yZSA9IGZ1bmN0aW9uIF9pbml0Q29yZShjb3JlKSB7XG4gIGdzYXAgPSBjb3JlIHx8IF9nZXRHU0FQKCk7XG5cbiAgaWYgKGdzYXAgJiYgdHlwZW9mIGRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50LmJvZHkpIHtcbiAgICBfd2luID0gd2luZG93O1xuICAgIF9kb2MgPSBkb2N1bWVudDtcbiAgICBfZG9jRWwgPSBfZG9jLmRvY3VtZW50RWxlbWVudDtcbiAgICBfYm9keSA9IF9kb2MuYm9keTtcbiAgICBfcm9vdCA9IFtfd2luLCBfZG9jLCBfZG9jRWwsIF9ib2R5XTtcbiAgICBfY2xhbXAgPSBnc2FwLnV0aWxzLmNsYW1wO1xuICAgIF9wb2ludGVyVHlwZSA9IFwib25wb2ludGVyZW50ZXJcIiBpbiBfYm9keSA/IFwicG9pbnRlclwiIDogXCJtb3VzZVwiOyAvLyBpc1RvdWNoIGlzIDAgaWYgbm8gdG91Y2gsIDEgaWYgT05MWSB0b3VjaCwgYW5kIDIgaWYgaXQgY2FuIGFjY29tbW9kYXRlIHRvdWNoIGJ1dCBhbHNvIG90aGVyIHR5cGVzIGxpa2UgbW91c2UvcG9pbnRlci5cblxuICAgIF9pc1RvdWNoID0gT2JzZXJ2ZXIuaXNUb3VjaCA9IF93aW4ubWF0Y2hNZWRpYSAmJiBfd2luLm1hdGNoTWVkaWEoXCIoaG92ZXI6IG5vbmUpLCAocG9pbnRlcjogY29hcnNlKVwiKS5tYXRjaGVzID8gMSA6IFwib250b3VjaHN0YXJ0XCIgaW4gX3dpbiB8fCBuYXZpZ2F0b3IubWF4VG91Y2hQb2ludHMgPiAwIHx8IG5hdmlnYXRvci5tc01heFRvdWNoUG9pbnRzID4gMCA/IDIgOiAwO1xuICAgIF9ldmVudFR5cGVzID0gT2JzZXJ2ZXIuZXZlbnRUeXBlcyA9IChcIm9udG91Y2hzdGFydFwiIGluIF9kb2NFbCA/IFwidG91Y2hzdGFydCx0b3VjaG1vdmUsdG91Y2hjYW5jZWwsdG91Y2hlbmRcIiA6ICEoXCJvbnBvaW50ZXJkb3duXCIgaW4gX2RvY0VsKSA/IFwibW91c2Vkb3duLG1vdXNlbW92ZSxtb3VzZXVwLG1vdXNldXBcIiA6IFwicG9pbnRlcmRvd24scG9pbnRlcm1vdmUscG9pbnRlcmNhbmNlbCxwb2ludGVydXBcIikuc3BsaXQoXCIsXCIpO1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF9zdGFydHVwID0gMDtcbiAgICB9LCA1MDApO1xuXG4gICAgX3NldFNjcm9sbFRyaWdnZXIoKTtcblxuICAgIF9jb3JlSW5pdHRlZCA9IDE7XG4gIH1cblxuICByZXR1cm4gX2NvcmVJbml0dGVkO1xufTtcblxuX2hvcml6b250YWwub3AgPSBfdmVydGljYWw7XG5fc2Nyb2xsZXJzLmNhY2hlID0gMDtcbmV4cG9ydCB2YXIgT2JzZXJ2ZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBPYnNlcnZlcih2YXJzKSB7XG4gICAgdGhpcy5pbml0KHZhcnMpO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IE9ic2VydmVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8uaW5pdCA9IGZ1bmN0aW9uIGluaXQodmFycykge1xuICAgIF9jb3JlSW5pdHRlZCB8fCBfaW5pdENvcmUoZ3NhcCkgfHwgY29uc29sZS53YXJuKFwiUGxlYXNlIGdzYXAucmVnaXN0ZXJQbHVnaW4oT2JzZXJ2ZXIpXCIpO1xuICAgIFNjcm9sbFRyaWdnZXIgfHwgX3NldFNjcm9sbFRyaWdnZXIoKTtcbiAgICB2YXIgdG9sZXJhbmNlID0gdmFycy50b2xlcmFuY2UsXG4gICAgICAgIGRyYWdNaW5pbXVtID0gdmFycy5kcmFnTWluaW11bSxcbiAgICAgICAgdHlwZSA9IHZhcnMudHlwZSxcbiAgICAgICAgdGFyZ2V0ID0gdmFycy50YXJnZXQsXG4gICAgICAgIGxpbmVIZWlnaHQgPSB2YXJzLmxpbmVIZWlnaHQsXG4gICAgICAgIGRlYm91bmNlID0gdmFycy5kZWJvdW5jZSxcbiAgICAgICAgcHJldmVudERlZmF1bHQgPSB2YXJzLnByZXZlbnREZWZhdWx0LFxuICAgICAgICBvblN0b3AgPSB2YXJzLm9uU3RvcCxcbiAgICAgICAgb25TdG9wRGVsYXkgPSB2YXJzLm9uU3RvcERlbGF5LFxuICAgICAgICBpZ25vcmUgPSB2YXJzLmlnbm9yZSxcbiAgICAgICAgd2hlZWxTcGVlZCA9IHZhcnMud2hlZWxTcGVlZCxcbiAgICAgICAgZXZlbnQgPSB2YXJzLmV2ZW50LFxuICAgICAgICBvbkRyYWdTdGFydCA9IHZhcnMub25EcmFnU3RhcnQsXG4gICAgICAgIG9uRHJhZ0VuZCA9IHZhcnMub25EcmFnRW5kLFxuICAgICAgICBvbkRyYWcgPSB2YXJzLm9uRHJhZyxcbiAgICAgICAgb25QcmVzcyA9IHZhcnMub25QcmVzcyxcbiAgICAgICAgb25SZWxlYXNlID0gdmFycy5vblJlbGVhc2UsXG4gICAgICAgIG9uUmlnaHQgPSB2YXJzLm9uUmlnaHQsXG4gICAgICAgIG9uTGVmdCA9IHZhcnMub25MZWZ0LFxuICAgICAgICBvblVwID0gdmFycy5vblVwLFxuICAgICAgICBvbkRvd24gPSB2YXJzLm9uRG93bixcbiAgICAgICAgb25DaGFuZ2VYID0gdmFycy5vbkNoYW5nZVgsXG4gICAgICAgIG9uQ2hhbmdlWSA9IHZhcnMub25DaGFuZ2VZLFxuICAgICAgICBvbkNoYW5nZSA9IHZhcnMub25DaGFuZ2UsXG4gICAgICAgIG9uVG9nZ2xlWCA9IHZhcnMub25Ub2dnbGVYLFxuICAgICAgICBvblRvZ2dsZVkgPSB2YXJzLm9uVG9nZ2xlWSxcbiAgICAgICAgb25Ib3ZlciA9IHZhcnMub25Ib3ZlcixcbiAgICAgICAgb25Ib3ZlckVuZCA9IHZhcnMub25Ib3ZlckVuZCxcbiAgICAgICAgb25Nb3ZlID0gdmFycy5vbk1vdmUsXG4gICAgICAgIGlnbm9yZUNoZWNrID0gdmFycy5pZ25vcmVDaGVjayxcbiAgICAgICAgaXNOb3JtYWxpemVyID0gdmFycy5pc05vcm1hbGl6ZXIsXG4gICAgICAgIG9uR2VzdHVyZVN0YXJ0ID0gdmFycy5vbkdlc3R1cmVTdGFydCxcbiAgICAgICAgb25HZXN0dXJlRW5kID0gdmFycy5vbkdlc3R1cmVFbmQsXG4gICAgICAgIG9uV2hlZWwgPSB2YXJzLm9uV2hlZWwsXG4gICAgICAgIG9uRW5hYmxlID0gdmFycy5vbkVuYWJsZSxcbiAgICAgICAgb25EaXNhYmxlID0gdmFycy5vbkRpc2FibGUsXG4gICAgICAgIG9uQ2xpY2sgPSB2YXJzLm9uQ2xpY2ssXG4gICAgICAgIHNjcm9sbFNwZWVkID0gdmFycy5zY3JvbGxTcGVlZCxcbiAgICAgICAgY2FwdHVyZSA9IHZhcnMuY2FwdHVyZSxcbiAgICAgICAgYWxsb3dDbGlja3MgPSB2YXJzLmFsbG93Q2xpY2tzLFxuICAgICAgICBsb2NrQXhpcyA9IHZhcnMubG9ja0F4aXMsXG4gICAgICAgIG9uTG9ja0F4aXMgPSB2YXJzLm9uTG9ja0F4aXM7XG4gICAgdGhpcy50YXJnZXQgPSB0YXJnZXQgPSBfZ2V0VGFyZ2V0KHRhcmdldCkgfHwgX2RvY0VsO1xuICAgIHRoaXMudmFycyA9IHZhcnM7XG4gICAgaWdub3JlICYmIChpZ25vcmUgPSBnc2FwLnV0aWxzLnRvQXJyYXkoaWdub3JlKSk7XG4gICAgdG9sZXJhbmNlID0gdG9sZXJhbmNlIHx8IDFlLTk7XG4gICAgZHJhZ01pbmltdW0gPSBkcmFnTWluaW11bSB8fCAwO1xuICAgIHdoZWVsU3BlZWQgPSB3aGVlbFNwZWVkIHx8IDE7XG4gICAgc2Nyb2xsU3BlZWQgPSBzY3JvbGxTcGVlZCB8fCAxO1xuICAgIHR5cGUgPSB0eXBlIHx8IFwid2hlZWwsdG91Y2gscG9pbnRlclwiO1xuICAgIGRlYm91bmNlID0gZGVib3VuY2UgIT09IGZhbHNlO1xuICAgIGxpbmVIZWlnaHQgfHwgKGxpbmVIZWlnaHQgPSBwYXJzZUZsb2F0KF93aW4uZ2V0Q29tcHV0ZWRTdHlsZShfYm9keSkubGluZUhlaWdodCkgfHwgMjIpOyAvLyBub3RlOiBicm93c2VyIG1heSByZXBvcnQgXCJub3JtYWxcIiwgc28gZGVmYXVsdCB0byAyMi5cblxuICAgIHZhciBpZCxcbiAgICAgICAgb25TdG9wRGVsYXllZENhbGwsXG4gICAgICAgIGRyYWdnZWQsXG4gICAgICAgIG1vdmVkLFxuICAgICAgICB3aGVlbGVkLFxuICAgICAgICBsb2NrZWQsXG4gICAgICAgIGF4aXMsXG4gICAgICAgIHNlbGYgPSB0aGlzLFxuICAgICAgICBwcmV2RGVsdGFYID0gMCxcbiAgICAgICAgcHJldkRlbHRhWSA9IDAsXG4gICAgICAgIHNjcm9sbEZ1bmNYID0gX2dldFNjcm9sbEZ1bmModGFyZ2V0LCBfaG9yaXpvbnRhbCksXG4gICAgICAgIHNjcm9sbEZ1bmNZID0gX2dldFNjcm9sbEZ1bmModGFyZ2V0LCBfdmVydGljYWwpLFxuICAgICAgICBzY3JvbGxYID0gc2Nyb2xsRnVuY1goKSxcbiAgICAgICAgc2Nyb2xsWSA9IHNjcm9sbEZ1bmNZKCksXG4gICAgICAgIGxpbWl0VG9Ub3VjaCA9IH50eXBlLmluZGV4T2YoXCJ0b3VjaFwiKSAmJiAhfnR5cGUuaW5kZXhPZihcInBvaW50ZXJcIikgJiYgX2V2ZW50VHlwZXNbMF0gPT09IFwicG9pbnRlcmRvd25cIixcbiAgICAgICAgLy8gZm9yIGRldmljZXMgdGhhdCBhY2NvbW1vZGF0ZSBtb3VzZSBldmVudHMgYW5kIHRvdWNoIGV2ZW50cywgd2UgbmVlZCB0byBkaXN0aW5ndWlzaC5cbiAgICBpc1ZpZXdwb3J0ID0gX2lzVmlld3BvcnQodGFyZ2V0KSxcbiAgICAgICAgb3duZXJEb2MgPSB0YXJnZXQub3duZXJEb2N1bWVudCB8fCBfZG9jLFxuICAgICAgICBkZWx0YVggPSBbMCwgMCwgMF0sXG4gICAgICAgIC8vIHdoZWVsLCBzY3JvbGwsIHBvaW50ZXIvdG91Y2hcbiAgICBkZWx0YVkgPSBbMCwgMCwgMF0sXG4gICAgICAgIG9uQ2xpY2tUaW1lID0gMCxcbiAgICAgICAgY2xpY2tDYXB0dXJlID0gZnVuY3Rpb24gY2xpY2tDYXB0dXJlKCkge1xuICAgICAgcmV0dXJuIG9uQ2xpY2tUaW1lID0gX2dldFRpbWUoKTtcbiAgICB9LFxuICAgICAgICBfaWdub3JlQ2hlY2sgPSBmdW5jdGlvbiBfaWdub3JlQ2hlY2soZSwgaXNQb2ludGVyT3JUb3VjaCkge1xuICAgICAgcmV0dXJuIChzZWxmLmV2ZW50ID0gZSkgJiYgaWdub3JlICYmIH5pZ25vcmUuaW5kZXhPZihlLnRhcmdldCkgfHwgaXNQb2ludGVyT3JUb3VjaCAmJiBsaW1pdFRvVG91Y2ggJiYgZS5wb2ludGVyVHlwZSAhPT0gXCJ0b3VjaFwiIHx8IGlnbm9yZUNoZWNrICYmIGlnbm9yZUNoZWNrKGUsIGlzUG9pbnRlck9yVG91Y2gpO1xuICAgIH0sXG4gICAgICAgIG9uU3RvcEZ1bmMgPSBmdW5jdGlvbiBvblN0b3BGdW5jKCkge1xuICAgICAgc2VsZi5fdngucmVzZXQoKTtcblxuICAgICAgc2VsZi5fdnkucmVzZXQoKTtcblxuICAgICAgb25TdG9wRGVsYXllZENhbGwucGF1c2UoKTtcbiAgICAgIG9uU3RvcCAmJiBvblN0b3Aoc2VsZik7XG4gICAgfSxcbiAgICAgICAgdXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgICAgdmFyIGR4ID0gc2VsZi5kZWx0YVggPSBfZ2V0QWJzb2x1dGVNYXgoZGVsdGFYKSxcbiAgICAgICAgICBkeSA9IHNlbGYuZGVsdGFZID0gX2dldEFic29sdXRlTWF4KGRlbHRhWSksXG4gICAgICAgICAgY2hhbmdlZFggPSBNYXRoLmFicyhkeCkgPj0gdG9sZXJhbmNlLFxuICAgICAgICAgIGNoYW5nZWRZID0gTWF0aC5hYnMoZHkpID49IHRvbGVyYW5jZTtcblxuICAgICAgb25DaGFuZ2UgJiYgKGNoYW5nZWRYIHx8IGNoYW5nZWRZKSAmJiBvbkNoYW5nZShzZWxmLCBkeCwgZHksIGRlbHRhWCwgZGVsdGFZKTsgLy8gaW4gU2Nyb2xsVHJpZ2dlci5ub3JtYWxpemVTY3JvbGwoKSwgd2UgbmVlZCB0byBrbm93IGlmIGl0IHdhcyB0b3VjaC9wb2ludGVyIHNvIHdlIG5lZWQgYWNjZXNzIHRvIHRoZSBkZWx0YVgvZGVsdGFZIEFycmF5cyBiZWZvcmUgd2UgY2xlYXIgdGhlbSBvdXQuXG5cbiAgICAgIGlmIChjaGFuZ2VkWCkge1xuICAgICAgICBvblJpZ2h0ICYmIHNlbGYuZGVsdGFYID4gMCAmJiBvblJpZ2h0KHNlbGYpO1xuICAgICAgICBvbkxlZnQgJiYgc2VsZi5kZWx0YVggPCAwICYmIG9uTGVmdChzZWxmKTtcbiAgICAgICAgb25DaGFuZ2VYICYmIG9uQ2hhbmdlWChzZWxmKTtcbiAgICAgICAgb25Ub2dnbGVYICYmIHNlbGYuZGVsdGFYIDwgMCAhPT0gcHJldkRlbHRhWCA8IDAgJiYgb25Ub2dnbGVYKHNlbGYpO1xuICAgICAgICBwcmV2RGVsdGFYID0gc2VsZi5kZWx0YVg7XG4gICAgICAgIGRlbHRhWFswXSA9IGRlbHRhWFsxXSA9IGRlbHRhWFsyXSA9IDA7XG4gICAgICB9XG5cbiAgICAgIGlmIChjaGFuZ2VkWSkge1xuICAgICAgICBvbkRvd24gJiYgc2VsZi5kZWx0YVkgPiAwICYmIG9uRG93bihzZWxmKTtcbiAgICAgICAgb25VcCAmJiBzZWxmLmRlbHRhWSA8IDAgJiYgb25VcChzZWxmKTtcbiAgICAgICAgb25DaGFuZ2VZICYmIG9uQ2hhbmdlWShzZWxmKTtcbiAgICAgICAgb25Ub2dnbGVZICYmIHNlbGYuZGVsdGFZIDwgMCAhPT0gcHJldkRlbHRhWSA8IDAgJiYgb25Ub2dnbGVZKHNlbGYpO1xuICAgICAgICBwcmV2RGVsdGFZID0gc2VsZi5kZWx0YVk7XG4gICAgICAgIGRlbHRhWVswXSA9IGRlbHRhWVsxXSA9IGRlbHRhWVsyXSA9IDA7XG4gICAgICB9XG5cbiAgICAgIGlmIChtb3ZlZCB8fCBkcmFnZ2VkKSB7XG4gICAgICAgIG9uTW92ZSAmJiBvbk1vdmUoc2VsZik7XG5cbiAgICAgICAgaWYgKGRyYWdnZWQpIHtcbiAgICAgICAgICBvbkRyYWcoc2VsZik7XG4gICAgICAgICAgZHJhZ2dlZCA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgbW92ZWQgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgbG9ja2VkICYmICEobG9ja2VkID0gZmFsc2UpICYmIG9uTG9ja0F4aXMgJiYgb25Mb2NrQXhpcyhzZWxmKTtcblxuICAgICAgaWYgKHdoZWVsZWQpIHtcbiAgICAgICAgb25XaGVlbChzZWxmKTtcbiAgICAgICAgd2hlZWxlZCA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpZCA9IDA7XG4gICAgfSxcbiAgICAgICAgb25EZWx0YSA9IGZ1bmN0aW9uIG9uRGVsdGEoeCwgeSwgaW5kZXgpIHtcbiAgICAgIGRlbHRhWFtpbmRleF0gKz0geDtcbiAgICAgIGRlbHRhWVtpbmRleF0gKz0geTtcblxuICAgICAgc2VsZi5fdngudXBkYXRlKHgpO1xuXG4gICAgICBzZWxmLl92eS51cGRhdGUoeSk7XG5cbiAgICAgIGRlYm91bmNlID8gaWQgfHwgKGlkID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHVwZGF0ZSkpIDogdXBkYXRlKCk7XG4gICAgfSxcbiAgICAgICAgb25Ub3VjaE9yUG9pbnRlckRlbHRhID0gZnVuY3Rpb24gb25Ub3VjaE9yUG9pbnRlckRlbHRhKHgsIHkpIHtcbiAgICAgIGlmIChsb2NrQXhpcyAmJiAhYXhpcykge1xuICAgICAgICBzZWxmLmF4aXMgPSBheGlzID0gTWF0aC5hYnMoeCkgPiBNYXRoLmFicyh5KSA/IFwieFwiIDogXCJ5XCI7XG4gICAgICAgIGxvY2tlZCA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChheGlzICE9PSBcInlcIikge1xuICAgICAgICBkZWx0YVhbMl0gKz0geDtcblxuICAgICAgICBzZWxmLl92eC51cGRhdGUoeCwgdHJ1ZSk7IC8vIHVwZGF0ZSB0aGUgdmVsb2NpdHkgYXMgZnJlcXVlbnRseSBhcyBwb3NzaWJsZSBpbnN0ZWFkIG9mIGluIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gc28gdGhhdCB2ZXJ5IHF1aWNrIHRvdWNoLXNjcm9sbHMgKGZsaWNrcykgZmVlbCBuYXR1cmFsLiBJZiBpdCdzIHRoZSBtb3VzZS90b3VjaC9wb2ludGVyLCBmb3JjZSBpdCBzbyB0aGF0IHdlIGdldCBzbmFwcHkvYWNjdXJhdGUgbW9tZW50dW0gc2Nyb2xsLlxuXG4gICAgICB9XG5cbiAgICAgIGlmIChheGlzICE9PSBcInhcIikge1xuICAgICAgICBkZWx0YVlbMl0gKz0geTtcblxuICAgICAgICBzZWxmLl92eS51cGRhdGUoeSwgdHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIGRlYm91bmNlID8gaWQgfHwgKGlkID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHVwZGF0ZSkpIDogdXBkYXRlKCk7XG4gICAgfSxcbiAgICAgICAgX29uRHJhZyA9IGZ1bmN0aW9uIF9vbkRyYWcoZSkge1xuICAgICAgaWYgKF9pZ25vcmVDaGVjayhlLCAxKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGUgPSBfZ2V0RXZlbnQoZSwgcHJldmVudERlZmF1bHQpO1xuICAgICAgdmFyIHggPSBlLmNsaWVudFgsXG4gICAgICAgICAgeSA9IGUuY2xpZW50WSxcbiAgICAgICAgICBkeCA9IHggLSBzZWxmLngsXG4gICAgICAgICAgZHkgPSB5IC0gc2VsZi55LFxuICAgICAgICAgIGlzRHJhZ2dpbmcgPSBzZWxmLmlzRHJhZ2dpbmc7XG4gICAgICBzZWxmLnggPSB4O1xuICAgICAgc2VsZi55ID0geTtcblxuICAgICAgaWYgKGlzRHJhZ2dpbmcgfHwgTWF0aC5hYnMoc2VsZi5zdGFydFggLSB4KSA+PSBkcmFnTWluaW11bSB8fCBNYXRoLmFicyhzZWxmLnN0YXJ0WSAtIHkpID49IGRyYWdNaW5pbXVtKSB7XG4gICAgICAgIG9uRHJhZyAmJiAoZHJhZ2dlZCA9IHRydWUpO1xuICAgICAgICBpc0RyYWdnaW5nIHx8IChzZWxmLmlzRHJhZ2dpbmcgPSB0cnVlKTtcbiAgICAgICAgb25Ub3VjaE9yUG9pbnRlckRlbHRhKGR4LCBkeSk7XG4gICAgICAgIGlzRHJhZ2dpbmcgfHwgb25EcmFnU3RhcnQgJiYgb25EcmFnU3RhcnQoc2VsZik7XG4gICAgICB9XG4gICAgfSxcbiAgICAgICAgX29uUHJlc3MgPSBzZWxmLm9uUHJlc3MgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgaWYgKF9pZ25vcmVDaGVjayhlLCAxKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHNlbGYuYXhpcyA9IGF4aXMgPSBudWxsO1xuICAgICAgb25TdG9wRGVsYXllZENhbGwucGF1c2UoKTtcbiAgICAgIHNlbGYuaXNQcmVzc2VkID0gdHJ1ZTtcbiAgICAgIGUgPSBfZ2V0RXZlbnQoZSk7IC8vIG5vdGU6IG1heSBuZWVkIHRvIHByZXZlbnREZWZhdWx0KD8pIFdvbid0IHNpZGUtc2Nyb2xsIG9uIGlPUyBTYWZhcmkgaWYgd2UgZG8sIHRob3VnaC5cblxuICAgICAgcHJldkRlbHRhWCA9IHByZXZEZWx0YVkgPSAwO1xuICAgICAgc2VsZi5zdGFydFggPSBzZWxmLnggPSBlLmNsaWVudFg7XG4gICAgICBzZWxmLnN0YXJ0WSA9IHNlbGYueSA9IGUuY2xpZW50WTtcblxuICAgICAgc2VsZi5fdngucmVzZXQoKTsgLy8gb3RoZXJ3aXNlIHRoZSB0MiBtYXkgYmUgc3RhbGUgaWYgdGhlIHVzZXIgdG91Y2hlcyBhbmQgZmxpY2tzIHN1cGVyIGZhc3QgYW5kIHJlbGVhc2VzIGluIGxlc3MgdGhhbiAyIHJlcXVlc3RBbmltYXRpb25GcmFtZSB0aWNrcywgY2F1c2luZyB2ZWxvY2l0eSB0byBiZSAwLlxuXG5cbiAgICAgIHNlbGYuX3Z5LnJlc2V0KCk7XG5cbiAgICAgIF9hZGRMaXN0ZW5lcihpc05vcm1hbGl6ZXIgPyB0YXJnZXQgOiBvd25lckRvYywgX2V2ZW50VHlwZXNbMV0sIF9vbkRyYWcsIHByZXZlbnREZWZhdWx0LCB0cnVlKTtcblxuICAgICAgc2VsZi5kZWx0YVggPSBzZWxmLmRlbHRhWSA9IDA7XG4gICAgICBvblByZXNzICYmIG9uUHJlc3Moc2VsZik7XG4gICAgfSxcbiAgICAgICAgX29uUmVsZWFzZSA9IGZ1bmN0aW9uIF9vblJlbGVhc2UoZSkge1xuICAgICAgaWYgKF9pZ25vcmVDaGVjayhlLCAxKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIF9yZW1vdmVMaXN0ZW5lcihpc05vcm1hbGl6ZXIgPyB0YXJnZXQgOiBvd25lckRvYywgX2V2ZW50VHlwZXNbMV0sIF9vbkRyYWcsIHRydWUpO1xuXG4gICAgICB2YXIgd2FzRHJhZ2dpbmcgPSBzZWxmLmlzRHJhZ2dpbmcgJiYgKE1hdGguYWJzKHNlbGYueCAtIHNlbGYuc3RhcnRYKSA+IDMgfHwgTWF0aC5hYnMoc2VsZi55IC0gc2VsZi5zdGFydFkpID4gMyksXG4gICAgICAgICAgLy8gc29tZSB0b3VjaCBkZXZpY2VzIG5lZWQgc29tZSB3aWdnbGUgcm9vbSBpbiB0ZXJtcyBvZiBzZW5zaW5nIGNsaWNrcyAtIHRoZSBmaW5nZXIgbWF5IG1vdmUgYSBmZXcgcGl4ZWxzLlxuICAgICAgZXZlbnREYXRhID0gX2dldEV2ZW50KGUpO1xuXG4gICAgICBpZiAoIXdhc0RyYWdnaW5nKSB7XG4gICAgICAgIHNlbGYuX3Z4LnJlc2V0KCk7XG5cbiAgICAgICAgc2VsZi5fdnkucmVzZXQoKTtcblxuICAgICAgICBpZiAocHJldmVudERlZmF1bHQgJiYgYWxsb3dDbGlja3MpIHtcbiAgICAgICAgICBnc2FwLmRlbGF5ZWRDYWxsKDAuMDgsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIHNvbWUgYnJvd3NlcnMgKGxpa2UgRmlyZWZveCkgd29uJ3QgdHJ1c3Qgc2NyaXB0LWdlbmVyYXRlZCBjbGlja3MsIHNvIGlmIHRoZSB1c2VyIHRyaWVzIHRvIGNsaWNrIG9uIGEgdmlkZW8gdG8gcGxheSBpdCwgZm9yIGV4YW1wbGUsIGl0IHNpbXBseSB3b24ndCB3b3JrLiBTaW5jZSBhIHJlZ3VsYXIgXCJjbGlja1wiIGV2ZW50IHdpbGwgbW9zdCBsaWtlbHkgYmUgZ2VuZXJhdGVkIGFueXdheSAob25lIHRoYXQgaGFzIGl0cyBpc1RydXN0ZWQgZmxhZyBzZXQgdG8gdHJ1ZSksIHdlIG11c3Qgc2xpZ2h0bHkgZGVsYXkgb3VyIHNjcmlwdC1nZW5lcmF0ZWQgY2xpY2sgc28gdGhhdCB0aGUgXCJyZWFsXCIvdHJ1c3RlZCBvbmUgaXMgcHJpb3JpdGl6ZWQuIFJlbWVtYmVyLCB3aGVuIHRoZXJlIGFyZSBkdXBsaWNhdGUgZXZlbnRzIGluIHF1aWNrIHN1Y2Nlc3Npb24sIHdlIHN1cHByZXNzIGFsbCBidXQgdGhlIGZpcnN0IG9uZS4gU29tZSBicm93c2VycyBkb24ndCBldmVuIHRyaWdnZXIgdGhlIFwicmVhbFwiIG9uZSBhdCBhbGwsIHNvIG91ciBzeW50aGV0aWMgb25lIGlzIGEgc2FmZXR5IHZhbHZlIHRoYXQgZW5zdXJlcyB0aGF0IG5vIG1hdHRlciB3aGF0LCBhIGNsaWNrIGV2ZW50IGRvZXMgZ2V0IGRpc3BhdGNoZWQuXG4gICAgICAgICAgICBpZiAoX2dldFRpbWUoKSAtIG9uQ2xpY2tUaW1lID4gMzAwICYmICFlLmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgICAgICAgaWYgKGUudGFyZ2V0LmNsaWNrKSB7XG4gICAgICAgICAgICAgICAgLy9zb21lIGJyb3dzZXJzIChsaWtlIG1vYmlsZSBTYWZhcmkpIGRvbid0IHByb3Blcmx5IHRyaWdnZXIgdGhlIGNsaWNrIGV2ZW50XG4gICAgICAgICAgICAgICAgZS50YXJnZXQuY2xpY2soKTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChvd25lckRvYy5jcmVhdGVFdmVudCkge1xuICAgICAgICAgICAgICAgIHZhciBzeW50aGV0aWNFdmVudCA9IG93bmVyRG9jLmNyZWF0ZUV2ZW50KFwiTW91c2VFdmVudHNcIik7XG4gICAgICAgICAgICAgICAgc3ludGhldGljRXZlbnQuaW5pdE1vdXNlRXZlbnQoXCJjbGlja1wiLCB0cnVlLCB0cnVlLCBfd2luLCAxLCBldmVudERhdGEuc2NyZWVuWCwgZXZlbnREYXRhLnNjcmVlblksIGV2ZW50RGF0YS5jbGllbnRYLCBldmVudERhdGEuY2xpZW50WSwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDAsIG51bGwpO1xuICAgICAgICAgICAgICAgIGUudGFyZ2V0LmRpc3BhdGNoRXZlbnQoc3ludGhldGljRXZlbnQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc2VsZi5pc0RyYWdnaW5nID0gc2VsZi5pc0dlc3R1cmluZyA9IHNlbGYuaXNQcmVzc2VkID0gZmFsc2U7XG4gICAgICBvblN0b3AgJiYgIWlzTm9ybWFsaXplciAmJiBvblN0b3BEZWxheWVkQ2FsbC5yZXN0YXJ0KHRydWUpO1xuICAgICAgb25EcmFnRW5kICYmIHdhc0RyYWdnaW5nICYmIG9uRHJhZ0VuZChzZWxmKTtcbiAgICAgIG9uUmVsZWFzZSAmJiBvblJlbGVhc2Uoc2VsZiwgd2FzRHJhZ2dpbmcpO1xuICAgIH0sXG4gICAgICAgIF9vbkdlc3R1cmVTdGFydCA9IGZ1bmN0aW9uIF9vbkdlc3R1cmVTdGFydChlKSB7XG4gICAgICByZXR1cm4gZS50b3VjaGVzICYmIGUudG91Y2hlcy5sZW5ndGggPiAxICYmIChzZWxmLmlzR2VzdHVyaW5nID0gdHJ1ZSkgJiYgb25HZXN0dXJlU3RhcnQoZSwgc2VsZi5pc0RyYWdnaW5nKTtcbiAgICB9LFxuICAgICAgICBfb25HZXN0dXJlRW5kID0gZnVuY3Rpb24gX29uR2VzdHVyZUVuZCgpIHtcbiAgICAgIHJldHVybiAoc2VsZi5pc0dlc3R1cmluZyA9IGZhbHNlKSB8fCBvbkdlc3R1cmVFbmQoc2VsZik7XG4gICAgfSxcbiAgICAgICAgb25TY3JvbGwgPSBmdW5jdGlvbiBvblNjcm9sbChlKSB7XG4gICAgICBpZiAoX2lnbm9yZUNoZWNrKGUpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHggPSBzY3JvbGxGdW5jWCgpLFxuICAgICAgICAgIHkgPSBzY3JvbGxGdW5jWSgpO1xuICAgICAgb25EZWx0YSgoeCAtIHNjcm9sbFgpICogc2Nyb2xsU3BlZWQsICh5IC0gc2Nyb2xsWSkgKiBzY3JvbGxTcGVlZCwgMSk7XG4gICAgICBzY3JvbGxYID0geDtcbiAgICAgIHNjcm9sbFkgPSB5O1xuICAgICAgb25TdG9wICYmIG9uU3RvcERlbGF5ZWRDYWxsLnJlc3RhcnQodHJ1ZSk7XG4gICAgfSxcbiAgICAgICAgX29uV2hlZWwgPSBmdW5jdGlvbiBfb25XaGVlbChlKSB7XG4gICAgICBpZiAoX2lnbm9yZUNoZWNrKGUpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZSA9IF9nZXRFdmVudChlLCBwcmV2ZW50RGVmYXVsdCk7XG4gICAgICBvbldoZWVsICYmICh3aGVlbGVkID0gdHJ1ZSk7XG4gICAgICB2YXIgbXVsdGlwbGllciA9IChlLmRlbHRhTW9kZSA9PT0gMSA/IGxpbmVIZWlnaHQgOiBlLmRlbHRhTW9kZSA9PT0gMiA/IF93aW4uaW5uZXJIZWlnaHQgOiAxKSAqIHdoZWVsU3BlZWQ7XG4gICAgICBvbkRlbHRhKGUuZGVsdGFYICogbXVsdGlwbGllciwgZS5kZWx0YVkgKiBtdWx0aXBsaWVyLCAwKTtcbiAgICAgIG9uU3RvcCAmJiAhaXNOb3JtYWxpemVyICYmIG9uU3RvcERlbGF5ZWRDYWxsLnJlc3RhcnQodHJ1ZSk7XG4gICAgfSxcbiAgICAgICAgX29uTW92ZSA9IGZ1bmN0aW9uIF9vbk1vdmUoZSkge1xuICAgICAgaWYgKF9pZ25vcmVDaGVjayhlKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciB4ID0gZS5jbGllbnRYLFxuICAgICAgICAgIHkgPSBlLmNsaWVudFksXG4gICAgICAgICAgZHggPSB4IC0gc2VsZi54LFxuICAgICAgICAgIGR5ID0geSAtIHNlbGYueTtcbiAgICAgIHNlbGYueCA9IHg7XG4gICAgICBzZWxmLnkgPSB5O1xuICAgICAgbW92ZWQgPSB0cnVlO1xuICAgICAgKGR4IHx8IGR5KSAmJiBvblRvdWNoT3JQb2ludGVyRGVsdGEoZHgsIGR5KTtcbiAgICB9LFxuICAgICAgICBfb25Ib3ZlciA9IGZ1bmN0aW9uIF9vbkhvdmVyKGUpIHtcbiAgICAgIHNlbGYuZXZlbnQgPSBlO1xuICAgICAgb25Ib3ZlcihzZWxmKTtcbiAgICB9LFxuICAgICAgICBfb25Ib3ZlckVuZCA9IGZ1bmN0aW9uIF9vbkhvdmVyRW5kKGUpIHtcbiAgICAgIHNlbGYuZXZlbnQgPSBlO1xuICAgICAgb25Ib3ZlckVuZChzZWxmKTtcbiAgICB9LFxuICAgICAgICBfb25DbGljayA9IGZ1bmN0aW9uIF9vbkNsaWNrKGUpIHtcbiAgICAgIHJldHVybiBfaWdub3JlQ2hlY2soZSkgfHwgX2dldEV2ZW50KGUsIHByZXZlbnREZWZhdWx0KSAmJiBvbkNsaWNrKHNlbGYpO1xuICAgIH07XG5cbiAgICBvblN0b3BEZWxheWVkQ2FsbCA9IHNlbGYuX2RjID0gZ3NhcC5kZWxheWVkQ2FsbChvblN0b3BEZWxheSB8fCAwLjI1LCBvblN0b3BGdW5jKS5wYXVzZSgpO1xuICAgIHNlbGYuZGVsdGFYID0gc2VsZi5kZWx0YVkgPSAwO1xuICAgIHNlbGYuX3Z4ID0gX2dldFZlbG9jaXR5UHJvcCgwLCA1MCwgdHJ1ZSk7XG4gICAgc2VsZi5fdnkgPSBfZ2V0VmVsb2NpdHlQcm9wKDAsIDUwLCB0cnVlKTtcbiAgICBzZWxmLnNjcm9sbFggPSBzY3JvbGxGdW5jWDtcbiAgICBzZWxmLnNjcm9sbFkgPSBzY3JvbGxGdW5jWTtcbiAgICBzZWxmLmlzRHJhZ2dpbmcgPSBzZWxmLmlzR2VzdHVyaW5nID0gc2VsZi5pc1ByZXNzZWQgPSBmYWxzZTtcblxuICAgIHNlbGYuZW5hYmxlID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIGlmICghc2VsZi5pc0VuYWJsZWQpIHtcbiAgICAgICAgX2FkZExpc3RlbmVyKGlzVmlld3BvcnQgPyBvd25lckRvYyA6IHRhcmdldCwgXCJzY3JvbGxcIiwgX29uU2Nyb2xsKTtcblxuICAgICAgICB0eXBlLmluZGV4T2YoXCJzY3JvbGxcIikgPj0gMCAmJiBfYWRkTGlzdGVuZXIoaXNWaWV3cG9ydCA/IG93bmVyRG9jIDogdGFyZ2V0LCBcInNjcm9sbFwiLCBvblNjcm9sbCwgcHJldmVudERlZmF1bHQsIGNhcHR1cmUpO1xuICAgICAgICB0eXBlLmluZGV4T2YoXCJ3aGVlbFwiKSA+PSAwICYmIF9hZGRMaXN0ZW5lcih0YXJnZXQsIFwid2hlZWxcIiwgX29uV2hlZWwsIHByZXZlbnREZWZhdWx0LCBjYXB0dXJlKTtcblxuICAgICAgICBpZiAodHlwZS5pbmRleE9mKFwidG91Y2hcIikgPj0gMCAmJiBfaXNUb3VjaCB8fCB0eXBlLmluZGV4T2YoXCJwb2ludGVyXCIpID49IDApIHtcbiAgICAgICAgICBfYWRkTGlzdGVuZXIodGFyZ2V0LCBfZXZlbnRUeXBlc1swXSwgX29uUHJlc3MsIHByZXZlbnREZWZhdWx0LCBjYXB0dXJlKTtcblxuICAgICAgICAgIF9hZGRMaXN0ZW5lcihvd25lckRvYywgX2V2ZW50VHlwZXNbMl0sIF9vblJlbGVhc2UpO1xuXG4gICAgICAgICAgX2FkZExpc3RlbmVyKG93bmVyRG9jLCBfZXZlbnRUeXBlc1szXSwgX29uUmVsZWFzZSk7XG5cbiAgICAgICAgICBhbGxvd0NsaWNrcyAmJiBfYWRkTGlzdGVuZXIodGFyZ2V0LCBcImNsaWNrXCIsIGNsaWNrQ2FwdHVyZSwgZmFsc2UsIHRydWUpO1xuICAgICAgICAgIG9uQ2xpY2sgJiYgX2FkZExpc3RlbmVyKHRhcmdldCwgXCJjbGlja1wiLCBfb25DbGljayk7XG4gICAgICAgICAgb25HZXN0dXJlU3RhcnQgJiYgX2FkZExpc3RlbmVyKG93bmVyRG9jLCBcImdlc3R1cmVzdGFydFwiLCBfb25HZXN0dXJlU3RhcnQpO1xuICAgICAgICAgIG9uR2VzdHVyZUVuZCAmJiBfYWRkTGlzdGVuZXIob3duZXJEb2MsIFwiZ2VzdHVyZWVuZFwiLCBfb25HZXN0dXJlRW5kKTtcbiAgICAgICAgICBvbkhvdmVyICYmIF9hZGRMaXN0ZW5lcih0YXJnZXQsIF9wb2ludGVyVHlwZSArIFwiZW50ZXJcIiwgX29uSG92ZXIpO1xuICAgICAgICAgIG9uSG92ZXJFbmQgJiYgX2FkZExpc3RlbmVyKHRhcmdldCwgX3BvaW50ZXJUeXBlICsgXCJsZWF2ZVwiLCBfb25Ib3ZlckVuZCk7XG4gICAgICAgICAgb25Nb3ZlICYmIF9hZGRMaXN0ZW5lcih0YXJnZXQsIF9wb2ludGVyVHlwZSArIFwibW92ZVwiLCBfb25Nb3ZlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNlbGYuaXNFbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgZSAmJiBlLnR5cGUgJiYgX29uUHJlc3MoZSk7XG4gICAgICAgIG9uRW5hYmxlICYmIG9uRW5hYmxlKHNlbGYpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9O1xuXG4gICAgc2VsZi5kaXNhYmxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHNlbGYuaXNFbmFibGVkKSB7XG4gICAgICAgIC8vIG9ubHkgcmVtb3ZlIHRoZSBfb25TY3JvbGwgbGlzdGVuZXIgaWYgdGhlcmUgYXJlbid0IGFueSBvdGhlcnMgdGhhdCByZWx5IG9uIHRoZSBmdW5jdGlvbmFsaXR5LlxuICAgICAgICBfb2JzZXJ2ZXJzLmZpbHRlcihmdW5jdGlvbiAobykge1xuICAgICAgICAgIHJldHVybiBvICE9PSBzZWxmICYmIF9pc1ZpZXdwb3J0KG8udGFyZ2V0KTtcbiAgICAgICAgfSkubGVuZ3RoIHx8IF9yZW1vdmVMaXN0ZW5lcihpc1ZpZXdwb3J0ID8gb3duZXJEb2MgOiB0YXJnZXQsIFwic2Nyb2xsXCIsIF9vblNjcm9sbCk7XG5cbiAgICAgICAgaWYgKHNlbGYuaXNQcmVzc2VkKSB7XG4gICAgICAgICAgc2VsZi5fdngucmVzZXQoKTtcblxuICAgICAgICAgIHNlbGYuX3Z5LnJlc2V0KCk7XG5cbiAgICAgICAgICBfcmVtb3ZlTGlzdGVuZXIoaXNOb3JtYWxpemVyID8gdGFyZ2V0IDogb3duZXJEb2MsIF9ldmVudFR5cGVzWzFdLCBfb25EcmFnLCB0cnVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF9yZW1vdmVMaXN0ZW5lcihpc1ZpZXdwb3J0ID8gb3duZXJEb2MgOiB0YXJnZXQsIFwic2Nyb2xsXCIsIG9uU2Nyb2xsLCBjYXB0dXJlKTtcblxuICAgICAgICBfcmVtb3ZlTGlzdGVuZXIodGFyZ2V0LCBcIndoZWVsXCIsIF9vbldoZWVsLCBjYXB0dXJlKTtcblxuICAgICAgICBfcmVtb3ZlTGlzdGVuZXIodGFyZ2V0LCBfZXZlbnRUeXBlc1swXSwgX29uUHJlc3MsIGNhcHR1cmUpO1xuXG4gICAgICAgIF9yZW1vdmVMaXN0ZW5lcihvd25lckRvYywgX2V2ZW50VHlwZXNbMl0sIF9vblJlbGVhc2UpO1xuXG4gICAgICAgIF9yZW1vdmVMaXN0ZW5lcihvd25lckRvYywgX2V2ZW50VHlwZXNbM10sIF9vblJlbGVhc2UpO1xuXG4gICAgICAgIF9yZW1vdmVMaXN0ZW5lcih0YXJnZXQsIFwiY2xpY2tcIiwgY2xpY2tDYXB0dXJlLCB0cnVlKTtcblxuICAgICAgICBfcmVtb3ZlTGlzdGVuZXIodGFyZ2V0LCBcImNsaWNrXCIsIF9vbkNsaWNrKTtcblxuICAgICAgICBfcmVtb3ZlTGlzdGVuZXIob3duZXJEb2MsIFwiZ2VzdHVyZXN0YXJ0XCIsIF9vbkdlc3R1cmVTdGFydCk7XG5cbiAgICAgICAgX3JlbW92ZUxpc3RlbmVyKG93bmVyRG9jLCBcImdlc3R1cmVlbmRcIiwgX29uR2VzdHVyZUVuZCk7XG5cbiAgICAgICAgX3JlbW92ZUxpc3RlbmVyKHRhcmdldCwgX3BvaW50ZXJUeXBlICsgXCJlbnRlclwiLCBfb25Ib3Zlcik7XG5cbiAgICAgICAgX3JlbW92ZUxpc3RlbmVyKHRhcmdldCwgX3BvaW50ZXJUeXBlICsgXCJsZWF2ZVwiLCBfb25Ib3ZlckVuZCk7XG5cbiAgICAgICAgX3JlbW92ZUxpc3RlbmVyKHRhcmdldCwgX3BvaW50ZXJUeXBlICsgXCJtb3ZlXCIsIF9vbk1vdmUpO1xuXG4gICAgICAgIHNlbGYuaXNFbmFibGVkID0gc2VsZi5pc1ByZXNzZWQgPSBzZWxmLmlzRHJhZ2dpbmcgPSBmYWxzZTtcbiAgICAgICAgb25EaXNhYmxlICYmIG9uRGlzYWJsZShzZWxmKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgc2VsZi5raWxsID0gZnVuY3Rpb24gKCkge1xuICAgICAgc2VsZi5kaXNhYmxlKCk7XG5cbiAgICAgIHZhciBpID0gX29ic2VydmVycy5pbmRleE9mKHNlbGYpO1xuXG4gICAgICBpID49IDAgJiYgX29ic2VydmVycy5zcGxpY2UoaSwgMSk7XG4gICAgICBfbm9ybWFsaXplciA9PT0gc2VsZiAmJiAoX25vcm1hbGl6ZXIgPSAwKTtcbiAgICB9O1xuXG4gICAgX29ic2VydmVycy5wdXNoKHNlbGYpO1xuXG4gICAgaXNOb3JtYWxpemVyICYmIF9pc1ZpZXdwb3J0KHRhcmdldCkgJiYgKF9ub3JtYWxpemVyID0gc2VsZik7XG4gICAgc2VsZi5lbmFibGUoZXZlbnQpO1xuICB9O1xuXG4gIF9jcmVhdGVDbGFzcyhPYnNlcnZlciwgW3tcbiAgICBrZXk6IFwidmVsb2NpdHlYXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdnguZ2V0VmVsb2NpdHkoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwidmVsb2NpdHlZXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdnkuZ2V0VmVsb2NpdHkoKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gT2JzZXJ2ZXI7XG59KCk7XG5PYnNlcnZlci52ZXJzaW9uID0gXCIzLjExLjFcIjtcblxuT2JzZXJ2ZXIuY3JlYXRlID0gZnVuY3Rpb24gKHZhcnMpIHtcbiAgcmV0dXJuIG5ldyBPYnNlcnZlcih2YXJzKTtcbn07XG5cbk9ic2VydmVyLnJlZ2lzdGVyID0gX2luaXRDb3JlO1xuXG5PYnNlcnZlci5nZXRBbGwgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBfb2JzZXJ2ZXJzLnNsaWNlKCk7XG59O1xuXG5PYnNlcnZlci5nZXRCeUlkID0gZnVuY3Rpb24gKGlkKSB7XG4gIHJldHVybiBfb2JzZXJ2ZXJzLmZpbHRlcihmdW5jdGlvbiAobykge1xuICAgIHJldHVybiBvLnZhcnMuaWQgPT09IGlkO1xuICB9KVswXTtcbn07XG5cbl9nZXRHU0FQKCkgJiYgZ3NhcC5yZWdpc3RlclBsdWdpbihPYnNlcnZlcik7XG5leHBvcnQgeyBPYnNlcnZlciBhcyBkZWZhdWx0LCBfaXNWaWV3cG9ydCwgX3Njcm9sbGVycywgX2dldFNjcm9sbEZ1bmMsIF9nZXRQcm94eVByb3AsIF9wcm94aWVzLCBfZ2V0VmVsb2NpdHlQcm9wLCBfdmVydGljYWwsIF9ob3Jpem9udGFsLCBfZ2V0VGFyZ2V0IH07IiwiLyohXG4gKiBTY3JvbGxUcmlnZ2VyIDMuMTEuMVxuICogaHR0cHM6Ly9ncmVlbnNvY2suY29tXG4gKlxuICogQGxpY2Vuc2UgQ29weXJpZ2h0IDIwMDgtMjAyMiwgR3JlZW5Tb2NrLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogU3ViamVjdCB0byB0aGUgdGVybXMgYXQgaHR0cHM6Ly9ncmVlbnNvY2suY29tL3N0YW5kYXJkLWxpY2Vuc2Ugb3IgZm9yXG4gKiBDbHViIEdyZWVuU29jayBtZW1iZXJzLCB0aGUgYWdyZWVtZW50IGlzc3VlZCB3aXRoIHRoYXQgbWVtYmVyc2hpcC5cbiAqIEBhdXRob3I6IEphY2sgRG95bGUsIGphY2tAZ3JlZW5zb2NrLmNvbVxuKi9cblxuLyogZXNsaW50LWRpc2FibGUgKi9cbmltcG9ydCB7IE9ic2VydmVyLCBfZ2V0VGFyZ2V0LCBfdmVydGljYWwsIF9ob3Jpem9udGFsLCBfc2Nyb2xsZXJzLCBfcHJveGllcywgX2dldFNjcm9sbEZ1bmMsIF9nZXRQcm94eVByb3AsIF9nZXRWZWxvY2l0eVByb3AgfSBmcm9tIFwiLi9PYnNlcnZlci5qc1wiO1xuXG52YXIgZ3NhcCxcbiAgICBfY29yZUluaXR0ZWQsXG4gICAgX3dpbixcbiAgICBfZG9jLFxuICAgIF9kb2NFbCxcbiAgICBfYm9keSxcbiAgICBfcm9vdCxcbiAgICBfcmVzaXplRGVsYXksXG4gICAgX3RvQXJyYXksXG4gICAgX2NsYW1wLFxuICAgIF90aW1lMixcbiAgICBfc3luY0ludGVydmFsLFxuICAgIF9yZWZyZXNoaW5nLFxuICAgIF9wb2ludGVySXNEb3duLFxuICAgIF90cmFuc2Zvcm1Qcm9wLFxuICAgIF9pLFxuICAgIF9wcmV2V2lkdGgsXG4gICAgX3ByZXZIZWlnaHQsXG4gICAgX2F1dG9SZWZyZXNoLFxuICAgIF9zb3J0LFxuICAgIF9zdXBwcmVzc092ZXJ3cml0ZXMsXG4gICAgX2lnbm9yZVJlc2l6ZSxcbiAgICBfbm9ybWFsaXplcixcbiAgICBfaWdub3JlTW9iaWxlUmVzaXplLFxuICAgIF9iYXNlU2NyZWVuSGVpZ2h0LFxuICAgIF9iYXNlU2NyZWVuV2lkdGgsXG4gICAgX2ZpeElPU0J1ZyxcbiAgICBfY29udGV4dCxcbiAgICBfbGltaXRDYWxsYmFja3MsXG4gICAgLy8gaWYgdHJ1ZSwgd2UnbGwgb25seSB0cmlnZ2VyIGNhbGxiYWNrcyBpZiB0aGUgYWN0aXZlIHN0YXRlIHRvZ2dsZXMsIHNvIGlmIHlvdSBzY3JvbGwgaW1tZWRpYXRlbHkgcGFzdCBib3RoIHRoZSBzdGFydCBhbmQgZW5kIHBvc2l0aW9ucyBvZiBhIFNjcm9sbFRyaWdnZXIgKHRodXMgaW5hY3RpdmUgdG8gaW5hY3RpdmUpLCBuZWl0aGVyIGl0cyBvbkVudGVyIG5vciBvbkxlYXZlIHdpbGwgYmUgY2FsbGVkLiBUaGlzIGlzIHVzZWZ1bCBkdXJpbmcgc3RhcnR1cC5cbl9zdGFydHVwID0gMSxcbiAgICBfZ2V0VGltZSA9IERhdGUubm93LFxuICAgIF90aW1lMSA9IF9nZXRUaW1lKCksXG4gICAgX2xhc3RTY3JvbGxUaW1lID0gMCxcbiAgICBfZW5hYmxlZCA9IDAsXG4gICAgX3BvaW50ZXJEb3duSGFuZGxlciA9IGZ1bmN0aW9uIF9wb2ludGVyRG93bkhhbmRsZXIoKSB7XG4gIHJldHVybiBfcG9pbnRlcklzRG93biA9IDE7XG59LFxuICAgIF9wb2ludGVyVXBIYW5kbGVyID0gZnVuY3Rpb24gX3BvaW50ZXJVcEhhbmRsZXIoKSB7XG4gIHJldHVybiBfcG9pbnRlcklzRG93biA9IDA7XG59LFxuICAgIF9wYXNzVGhyb3VnaCA9IGZ1bmN0aW9uIF9wYXNzVGhyb3VnaCh2KSB7XG4gIHJldHVybiB2O1xufSxcbiAgICBfcm91bmQgPSBmdW5jdGlvbiBfcm91bmQodmFsdWUpIHtcbiAgcmV0dXJuIE1hdGgucm91bmQodmFsdWUgKiAxMDAwMDApIC8gMTAwMDAwIHx8IDA7XG59LFxuICAgIF93aW5kb3dFeGlzdHMgPSBmdW5jdGlvbiBfd2luZG93RXhpc3RzKCkge1xuICByZXR1cm4gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIjtcbn0sXG4gICAgX2dldEdTQVAgPSBmdW5jdGlvbiBfZ2V0R1NBUCgpIHtcbiAgcmV0dXJuIGdzYXAgfHwgX3dpbmRvd0V4aXN0cygpICYmIChnc2FwID0gd2luZG93LmdzYXApICYmIGdzYXAucmVnaXN0ZXJQbHVnaW4gJiYgZ3NhcDtcbn0sXG4gICAgX2lzVmlld3BvcnQgPSBmdW5jdGlvbiBfaXNWaWV3cG9ydChlKSB7XG4gIHJldHVybiAhIX5fcm9vdC5pbmRleE9mKGUpO1xufSxcbiAgICBfZ2V0Qm91bmRzRnVuYyA9IGZ1bmN0aW9uIF9nZXRCb3VuZHNGdW5jKGVsZW1lbnQpIHtcbiAgcmV0dXJuIF9nZXRQcm94eVByb3AoZWxlbWVudCwgXCJnZXRCb3VuZGluZ0NsaWVudFJlY3RcIikgfHwgKF9pc1ZpZXdwb3J0KGVsZW1lbnQpID8gZnVuY3Rpb24gKCkge1xuICAgIF93aW5PZmZzZXRzLndpZHRoID0gX3dpbi5pbm5lcldpZHRoO1xuICAgIF93aW5PZmZzZXRzLmhlaWdodCA9IF93aW4uaW5uZXJIZWlnaHQ7XG4gICAgcmV0dXJuIF93aW5PZmZzZXRzO1xuICB9IDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfZ2V0Qm91bmRzKGVsZW1lbnQpO1xuICB9KTtcbn0sXG4gICAgX2dldFNpemVGdW5jID0gZnVuY3Rpb24gX2dldFNpemVGdW5jKHNjcm9sbGVyLCBpc1ZpZXdwb3J0LCBfcmVmKSB7XG4gIHZhciBkID0gX3JlZi5kLFxuICAgICAgZDIgPSBfcmVmLmQyLFxuICAgICAgYSA9IF9yZWYuYTtcbiAgcmV0dXJuIChhID0gX2dldFByb3h5UHJvcChzY3JvbGxlciwgXCJnZXRCb3VuZGluZ0NsaWVudFJlY3RcIikpID8gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBhKClbZF07XG4gIH0gOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIChpc1ZpZXdwb3J0ID8gX3dpbltcImlubmVyXCIgKyBkMl0gOiBzY3JvbGxlcltcImNsaWVudFwiICsgZDJdKSB8fCAwO1xuICB9O1xufSxcbiAgICBfZ2V0T2Zmc2V0c0Z1bmMgPSBmdW5jdGlvbiBfZ2V0T2Zmc2V0c0Z1bmMoZWxlbWVudCwgaXNWaWV3cG9ydCkge1xuICByZXR1cm4gIWlzVmlld3BvcnQgfHwgfl9wcm94aWVzLmluZGV4T2YoZWxlbWVudCkgPyBfZ2V0Qm91bmRzRnVuYyhlbGVtZW50KSA6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX3dpbk9mZnNldHM7XG4gIH07XG59LFxuICAgIF9tYXhTY3JvbGwgPSBmdW5jdGlvbiBfbWF4U2Nyb2xsKGVsZW1lbnQsIF9yZWYyKSB7XG4gIHZhciBzID0gX3JlZjIucyxcbiAgICAgIGQyID0gX3JlZjIuZDIsXG4gICAgICBkID0gX3JlZjIuZCxcbiAgICAgIGEgPSBfcmVmMi5hO1xuICByZXR1cm4gKHMgPSBcInNjcm9sbFwiICsgZDIpICYmIChhID0gX2dldFByb3h5UHJvcChlbGVtZW50LCBzKSkgPyBhKCkgLSBfZ2V0Qm91bmRzRnVuYyhlbGVtZW50KSgpW2RdIDogX2lzVmlld3BvcnQoZWxlbWVudCkgPyAoX2RvY0VsW3NdIHx8IF9ib2R5W3NdKSAtIChfd2luW1wiaW5uZXJcIiArIGQyXSB8fCBfZG9jRWxbXCJjbGllbnRcIiArIGQyXSB8fCBfYm9keVtcImNsaWVudFwiICsgZDJdKSA6IGVsZW1lbnRbc10gLSBlbGVtZW50W1wib2Zmc2V0XCIgKyBkMl07XG59LFxuICAgIF9pdGVyYXRlQXV0b1JlZnJlc2ggPSBmdW5jdGlvbiBfaXRlcmF0ZUF1dG9SZWZyZXNoKGZ1bmMsIGV2ZW50cykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IF9hdXRvUmVmcmVzaC5sZW5ndGg7IGkgKz0gMykge1xuICAgICghZXZlbnRzIHx8IH5ldmVudHMuaW5kZXhPZihfYXV0b1JlZnJlc2hbaSArIDFdKSkgJiYgZnVuYyhfYXV0b1JlZnJlc2hbaV0sIF9hdXRvUmVmcmVzaFtpICsgMV0sIF9hdXRvUmVmcmVzaFtpICsgMl0pO1xuICB9XG59LFxuICAgIF9pc1N0cmluZyA9IGZ1bmN0aW9uIF9pc1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiO1xufSxcbiAgICBfaXNGdW5jdGlvbiA9IGZ1bmN0aW9uIF9pc0Z1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIjtcbn0sXG4gICAgX2lzTnVtYmVyID0gZnVuY3Rpb24gX2lzTnVtYmVyKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCI7XG59LFxuICAgIF9pc09iamVjdCA9IGZ1bmN0aW9uIF9pc09iamVjdCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiO1xufSxcbiAgICBfY2FsbElmRnVuYyA9IGZ1bmN0aW9uIF9jYWxsSWZGdW5jKHZhbHVlKSB7XG4gIHJldHVybiBfaXNGdW5jdGlvbih2YWx1ZSkgJiYgdmFsdWUoKTtcbn0sXG4gICAgX2NvbWJpbmVGdW5jID0gZnVuY3Rpb24gX2NvbWJpbmVGdW5jKGYxLCBmMikge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciByZXN1bHQxID0gX2NhbGxJZkZ1bmMoZjEpLFxuICAgICAgICByZXN1bHQyID0gX2NhbGxJZkZ1bmMoZjIpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIF9jYWxsSWZGdW5jKHJlc3VsdDEpO1xuXG4gICAgICBfY2FsbElmRnVuYyhyZXN1bHQyKTtcbiAgICB9O1xuICB9O1xufSxcbiAgICBfZW5kQW5pbWF0aW9uID0gZnVuY3Rpb24gX2VuZEFuaW1hdGlvbihhbmltYXRpb24sIHJldmVyc2VkLCBwYXVzZSkge1xuICByZXR1cm4gYW5pbWF0aW9uICYmIGFuaW1hdGlvbi5wcm9ncmVzcyhyZXZlcnNlZCA/IDAgOiAxKSAmJiBwYXVzZSAmJiBhbmltYXRpb24ucGF1c2UoKTtcbn0sXG4gICAgX2NhbGxiYWNrID0gZnVuY3Rpb24gX2NhbGxiYWNrKHNlbGYsIGZ1bmMpIHtcbiAgaWYgKHNlbGYuZW5hYmxlZCkge1xuICAgIHZhciByZXN1bHQgPSBmdW5jKHNlbGYpO1xuICAgIHJlc3VsdCAmJiByZXN1bHQudG90YWxUaW1lICYmIChzZWxmLmNhbGxiYWNrQW5pbWF0aW9uID0gcmVzdWx0KTtcbiAgfVxufSxcbiAgICBfYWJzID0gTWF0aC5hYnMsXG4gICAgX3Njcm9sbExlZnQgPSBcInNjcm9sbExlZnRcIixcbiAgICBfc2Nyb2xsVG9wID0gXCJzY3JvbGxUb3BcIixcbiAgICBfbGVmdCA9IFwibGVmdFwiLFxuICAgIF90b3AgPSBcInRvcFwiLFxuICAgIF9yaWdodCA9IFwicmlnaHRcIixcbiAgICBfYm90dG9tID0gXCJib3R0b21cIixcbiAgICBfd2lkdGggPSBcIndpZHRoXCIsXG4gICAgX2hlaWdodCA9IFwiaGVpZ2h0XCIsXG4gICAgX1JpZ2h0ID0gXCJSaWdodFwiLFxuICAgIF9MZWZ0ID0gXCJMZWZ0XCIsXG4gICAgX1RvcCA9IFwiVG9wXCIsXG4gICAgX0JvdHRvbSA9IFwiQm90dG9tXCIsXG4gICAgX3BhZGRpbmcgPSBcInBhZGRpbmdcIixcbiAgICBfbWFyZ2luID0gXCJtYXJnaW5cIixcbiAgICBfV2lkdGggPSBcIldpZHRoXCIsXG4gICAgX0hlaWdodCA9IFwiSGVpZ2h0XCIsXG4gICAgX3B4ID0gXCJweFwiLFxuICAgIF9nZXRDb21wdXRlZFN0eWxlID0gZnVuY3Rpb24gX2dldENvbXB1dGVkU3R5bGUoZWxlbWVudCkge1xuICByZXR1cm4gX3dpbi5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xufSxcbiAgICBfbWFrZVBvc2l0aW9uYWJsZSA9IGZ1bmN0aW9uIF9tYWtlUG9zaXRpb25hYmxlKGVsZW1lbnQpIHtcbiAgLy8gaWYgdGhlIGVsZW1lbnQgYWxyZWFkeSBoYXMgcG9zaXRpb246IGFic29sdXRlIG9yIGZpeGVkLCBsZWF2ZSB0aGF0LCBvdGhlcndpc2UgbWFrZSBpdCBwb3NpdGlvbjogcmVsYXRpdmVcbiAgdmFyIHBvc2l0aW9uID0gX2dldENvbXB1dGVkU3R5bGUoZWxlbWVudCkucG9zaXRpb247XG5cbiAgZWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9IHBvc2l0aW9uID09PSBcImFic29sdXRlXCIgfHwgcG9zaXRpb24gPT09IFwiZml4ZWRcIiA/IHBvc2l0aW9uIDogXCJyZWxhdGl2ZVwiO1xufSxcbiAgICBfc2V0RGVmYXVsdHMgPSBmdW5jdGlvbiBfc2V0RGVmYXVsdHMob2JqLCBkZWZhdWx0cykge1xuICBmb3IgKHZhciBwIGluIGRlZmF1bHRzKSB7XG4gICAgcCBpbiBvYmogfHwgKG9ialtwXSA9IGRlZmF1bHRzW3BdKTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59LFxuICAgIF9nZXRCb3VuZHMgPSBmdW5jdGlvbiBfZ2V0Qm91bmRzKGVsZW1lbnQsIHdpdGhvdXRUcmFuc2Zvcm1zKSB7XG4gIHZhciB0d2VlbiA9IHdpdGhvdXRUcmFuc2Zvcm1zICYmIF9nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpW190cmFuc2Zvcm1Qcm9wXSAhPT0gXCJtYXRyaXgoMSwgMCwgMCwgMSwgMCwgMClcIiAmJiBnc2FwLnRvKGVsZW1lbnQsIHtcbiAgICB4OiAwLFxuICAgIHk6IDAsXG4gICAgeFBlcmNlbnQ6IDAsXG4gICAgeVBlcmNlbnQ6IDAsXG4gICAgcm90YXRpb246IDAsXG4gICAgcm90YXRpb25YOiAwLFxuICAgIHJvdGF0aW9uWTogMCxcbiAgICBzY2FsZTogMSxcbiAgICBza2V3WDogMCxcbiAgICBza2V3WTogMFxuICB9KS5wcm9ncmVzcygxKSxcbiAgICAgIGJvdW5kcyA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIHR3ZWVuICYmIHR3ZWVuLnByb2dyZXNzKDApLmtpbGwoKTtcbiAgcmV0dXJuIGJvdW5kcztcbn0sXG4gICAgX2dldFNpemUgPSBmdW5jdGlvbiBfZ2V0U2l6ZShlbGVtZW50LCBfcmVmMykge1xuICB2YXIgZDIgPSBfcmVmMy5kMjtcbiAgcmV0dXJuIGVsZW1lbnRbXCJvZmZzZXRcIiArIGQyXSB8fCBlbGVtZW50W1wiY2xpZW50XCIgKyBkMl0gfHwgMDtcbn0sXG4gICAgX2dldExhYmVsUmF0aW9BcnJheSA9IGZ1bmN0aW9uIF9nZXRMYWJlbFJhdGlvQXJyYXkodGltZWxpbmUpIHtcbiAgdmFyIGEgPSBbXSxcbiAgICAgIGxhYmVscyA9IHRpbWVsaW5lLmxhYmVscyxcbiAgICAgIGR1cmF0aW9uID0gdGltZWxpbmUuZHVyYXRpb24oKSxcbiAgICAgIHA7XG5cbiAgZm9yIChwIGluIGxhYmVscykge1xuICAgIGEucHVzaChsYWJlbHNbcF0gLyBkdXJhdGlvbik7XG4gIH1cblxuICByZXR1cm4gYTtcbn0sXG4gICAgX2dldENsb3Nlc3RMYWJlbCA9IGZ1bmN0aW9uIF9nZXRDbG9zZXN0TGFiZWwoYW5pbWF0aW9uKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gZ3NhcC51dGlscy5zbmFwKF9nZXRMYWJlbFJhdGlvQXJyYXkoYW5pbWF0aW9uKSwgdmFsdWUpO1xuICB9O1xufSxcbiAgICBfc25hcERpcmVjdGlvbmFsID0gZnVuY3Rpb24gX3NuYXBEaXJlY3Rpb25hbChzbmFwSW5jcmVtZW50T3JBcnJheSkge1xuICB2YXIgc25hcCA9IGdzYXAudXRpbHMuc25hcChzbmFwSW5jcmVtZW50T3JBcnJheSksXG4gICAgICBhID0gQXJyYXkuaXNBcnJheShzbmFwSW5jcmVtZW50T3JBcnJheSkgJiYgc25hcEluY3JlbWVudE9yQXJyYXkuc2xpY2UoMCkuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBhIC0gYjtcbiAgfSk7XG4gIHJldHVybiBhID8gZnVuY3Rpb24gKHZhbHVlLCBkaXJlY3Rpb24sIHRocmVzaG9sZCkge1xuICAgIGlmICh0aHJlc2hvbGQgPT09IHZvaWQgMCkge1xuICAgICAgdGhyZXNob2xkID0gMWUtMztcbiAgICB9XG5cbiAgICB2YXIgaTtcblxuICAgIGlmICghZGlyZWN0aW9uKSB7XG4gICAgICByZXR1cm4gc25hcCh2YWx1ZSk7XG4gICAgfVxuXG4gICAgaWYgKGRpcmVjdGlvbiA+IDApIHtcbiAgICAgIHZhbHVlIC09IHRocmVzaG9sZDsgLy8gdG8gYXZvaWQgcm91bmRpbmcgZXJyb3JzLiBJZiB3ZSdyZSB0b28gc3RyaWN0LCBpdCBtaWdodCBzbmFwIGZvcndhcmQsIHRoZW4gaW1tZWRpYXRlbHkgYWdhaW4sIGFuZCBhZ2Fpbi5cblxuICAgICAgZm9yIChpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGFbaV0gPj0gdmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gYVtpXTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gYVtpIC0gMV07XG4gICAgfSBlbHNlIHtcbiAgICAgIGkgPSBhLmxlbmd0aDtcbiAgICAgIHZhbHVlICs9IHRocmVzaG9sZDtcblxuICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICBpZiAoYVtpXSA8PSB2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBhW2ldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGFbMF07XG4gIH0gOiBmdW5jdGlvbiAodmFsdWUsIGRpcmVjdGlvbiwgdGhyZXNob2xkKSB7XG4gICAgaWYgKHRocmVzaG9sZCA9PT0gdm9pZCAwKSB7XG4gICAgICB0aHJlc2hvbGQgPSAxZS0zO1xuICAgIH1cblxuICAgIHZhciBzbmFwcGVkID0gc25hcCh2YWx1ZSk7XG4gICAgcmV0dXJuICFkaXJlY3Rpb24gfHwgTWF0aC5hYnMoc25hcHBlZCAtIHZhbHVlKSA8IHRocmVzaG9sZCB8fCBzbmFwcGVkIC0gdmFsdWUgPCAwID09PSBkaXJlY3Rpb24gPCAwID8gc25hcHBlZCA6IHNuYXAoZGlyZWN0aW9uIDwgMCA/IHZhbHVlIC0gc25hcEluY3JlbWVudE9yQXJyYXkgOiB2YWx1ZSArIHNuYXBJbmNyZW1lbnRPckFycmF5KTtcbiAgfTtcbn0sXG4gICAgX2dldExhYmVsQXREaXJlY3Rpb24gPSBmdW5jdGlvbiBfZ2V0TGFiZWxBdERpcmVjdGlvbih0aW1lbGluZSkge1xuICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlLCBzdCkge1xuICAgIHJldHVybiBfc25hcERpcmVjdGlvbmFsKF9nZXRMYWJlbFJhdGlvQXJyYXkodGltZWxpbmUpKSh2YWx1ZSwgc3QuZGlyZWN0aW9uKTtcbiAgfTtcbn0sXG4gICAgX211bHRpTGlzdGVuZXIgPSBmdW5jdGlvbiBfbXVsdGlMaXN0ZW5lcihmdW5jLCBlbGVtZW50LCB0eXBlcywgY2FsbGJhY2spIHtcbiAgcmV0dXJuIHR5cGVzLnNwbGl0KFwiLFwiKS5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgcmV0dXJuIGZ1bmMoZWxlbWVudCwgdHlwZSwgY2FsbGJhY2spO1xuICB9KTtcbn0sXG4gICAgX2FkZExpc3RlbmVyID0gZnVuY3Rpb24gX2FkZExpc3RlbmVyKGVsZW1lbnQsIHR5cGUsIGZ1bmMsIG5vblBhc3NpdmUsIGNhcHR1cmUpIHtcbiAgcmV0dXJuIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBmdW5jLCB7XG4gICAgcGFzc2l2ZTogIW5vblBhc3NpdmUsXG4gICAgY2FwdHVyZTogISFjYXB0dXJlXG4gIH0pO1xufSxcbiAgICBfcmVtb3ZlTGlzdGVuZXIgPSBmdW5jdGlvbiBfcmVtb3ZlTGlzdGVuZXIoZWxlbWVudCwgdHlwZSwgZnVuYywgY2FwdHVyZSkge1xuICByZXR1cm4gZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGZ1bmMsICEhY2FwdHVyZSk7XG59LFxuICAgIF93aGVlbExpc3RlbmVyID0gZnVuY3Rpb24gX3doZWVsTGlzdGVuZXIoZnVuYywgZWwsIHNjcm9sbEZ1bmMpIHtcbiAgcmV0dXJuIHNjcm9sbEZ1bmMgJiYgc2Nyb2xsRnVuYy53aGVlbEhhbmRsZXIgJiYgZnVuYyhlbCwgXCJ3aGVlbFwiLCBzY3JvbGxGdW5jKTtcbn0sXG4gICAgX21hcmtlckRlZmF1bHRzID0ge1xuICBzdGFydENvbG9yOiBcImdyZWVuXCIsXG4gIGVuZENvbG9yOiBcInJlZFwiLFxuICBpbmRlbnQ6IDAsXG4gIGZvbnRTaXplOiBcIjE2cHhcIixcbiAgZm9udFdlaWdodDogXCJub3JtYWxcIlxufSxcbiAgICBfZGVmYXVsdHMgPSB7XG4gIHRvZ2dsZUFjdGlvbnM6IFwicGxheVwiLFxuICBhbnRpY2lwYXRlUGluOiAwXG59LFxuICAgIF9rZXl3b3JkcyA9IHtcbiAgdG9wOiAwLFxuICBsZWZ0OiAwLFxuICBjZW50ZXI6IDAuNSxcbiAgYm90dG9tOiAxLFxuICByaWdodDogMVxufSxcbiAgICBfb2Zmc2V0VG9QeCA9IGZ1bmN0aW9uIF9vZmZzZXRUb1B4KHZhbHVlLCBzaXplKSB7XG4gIGlmIChfaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgdmFyIGVxSW5kZXggPSB2YWx1ZS5pbmRleE9mKFwiPVwiKSxcbiAgICAgICAgcmVsYXRpdmUgPSB+ZXFJbmRleCA/ICsodmFsdWUuY2hhckF0KGVxSW5kZXggLSAxKSArIDEpICogcGFyc2VGbG9hdCh2YWx1ZS5zdWJzdHIoZXFJbmRleCArIDEpKSA6IDA7XG5cbiAgICBpZiAofmVxSW5kZXgpIHtcbiAgICAgIHZhbHVlLmluZGV4T2YoXCIlXCIpID4gZXFJbmRleCAmJiAocmVsYXRpdmUgKj0gc2l6ZSAvIDEwMCk7XG4gICAgICB2YWx1ZSA9IHZhbHVlLnN1YnN0cigwLCBlcUluZGV4IC0gMSk7XG4gICAgfVxuXG4gICAgdmFsdWUgPSByZWxhdGl2ZSArICh2YWx1ZSBpbiBfa2V5d29yZHMgPyBfa2V5d29yZHNbdmFsdWVdICogc2l6ZSA6IH52YWx1ZS5pbmRleE9mKFwiJVwiKSA/IHBhcnNlRmxvYXQodmFsdWUpICogc2l6ZSAvIDEwMCA6IHBhcnNlRmxvYXQodmFsdWUpIHx8IDApO1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlO1xufSxcbiAgICBfY3JlYXRlTWFya2VyID0gZnVuY3Rpb24gX2NyZWF0ZU1hcmtlcih0eXBlLCBuYW1lLCBjb250YWluZXIsIGRpcmVjdGlvbiwgX3JlZjQsIG9mZnNldCwgbWF0Y2hXaWR0aEVsLCBjb250YWluZXJBbmltYXRpb24pIHtcbiAgdmFyIHN0YXJ0Q29sb3IgPSBfcmVmNC5zdGFydENvbG9yLFxuICAgICAgZW5kQ29sb3IgPSBfcmVmNC5lbmRDb2xvcixcbiAgICAgIGZvbnRTaXplID0gX3JlZjQuZm9udFNpemUsXG4gICAgICBpbmRlbnQgPSBfcmVmNC5pbmRlbnQsXG4gICAgICBmb250V2VpZ2h0ID0gX3JlZjQuZm9udFdlaWdodDtcblxuICB2YXIgZSA9IF9kb2MuY3JlYXRlRWxlbWVudChcImRpdlwiKSxcbiAgICAgIHVzZUZpeGVkUG9zaXRpb24gPSBfaXNWaWV3cG9ydChjb250YWluZXIpIHx8IF9nZXRQcm94eVByb3AoY29udGFpbmVyLCBcInBpblR5cGVcIikgPT09IFwiZml4ZWRcIixcbiAgICAgIGlzU2Nyb2xsZXIgPSB0eXBlLmluZGV4T2YoXCJzY3JvbGxlclwiKSAhPT0gLTEsXG4gICAgICBwYXJlbnQgPSB1c2VGaXhlZFBvc2l0aW9uID8gX2JvZHkgOiBjb250YWluZXIsXG4gICAgICBpc1N0YXJ0ID0gdHlwZS5pbmRleE9mKFwic3RhcnRcIikgIT09IC0xLFxuICAgICAgY29sb3IgPSBpc1N0YXJ0ID8gc3RhcnRDb2xvciA6IGVuZENvbG9yLFxuICAgICAgY3NzID0gXCJib3JkZXItY29sb3I6XCIgKyBjb2xvciArIFwiO2ZvbnQtc2l6ZTpcIiArIGZvbnRTaXplICsgXCI7Y29sb3I6XCIgKyBjb2xvciArIFwiO2ZvbnQtd2VpZ2h0OlwiICsgZm9udFdlaWdodCArIFwiO3BvaW50ZXItZXZlbnRzOm5vbmU7d2hpdGUtc3BhY2U6bm93cmFwO2ZvbnQtZmFtaWx5OnNhbnMtc2VyaWYsQXJpYWw7ei1pbmRleDoxMDAwO3BhZGRpbmc6NHB4IDhweDtib3JkZXItd2lkdGg6MDtib3JkZXItc3R5bGU6c29saWQ7XCI7XG5cbiAgY3NzICs9IFwicG9zaXRpb246XCIgKyAoKGlzU2Nyb2xsZXIgfHwgY29udGFpbmVyQW5pbWF0aW9uKSAmJiB1c2VGaXhlZFBvc2l0aW9uID8gXCJmaXhlZDtcIiA6IFwiYWJzb2x1dGU7XCIpO1xuICAoaXNTY3JvbGxlciB8fCBjb250YWluZXJBbmltYXRpb24gfHwgIXVzZUZpeGVkUG9zaXRpb24pICYmIChjc3MgKz0gKGRpcmVjdGlvbiA9PT0gX3ZlcnRpY2FsID8gX3JpZ2h0IDogX2JvdHRvbSkgKyBcIjpcIiArIChvZmZzZXQgKyBwYXJzZUZsb2F0KGluZGVudCkpICsgXCJweDtcIik7XG4gIG1hdGNoV2lkdGhFbCAmJiAoY3NzICs9IFwiYm94LXNpemluZzpib3JkZXItYm94O3RleHQtYWxpZ246bGVmdDt3aWR0aDpcIiArIG1hdGNoV2lkdGhFbC5vZmZzZXRXaWR0aCArIFwicHg7XCIpO1xuICBlLl9pc1N0YXJ0ID0gaXNTdGFydDtcbiAgZS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcImdzYXAtbWFya2VyLVwiICsgdHlwZSArIChuYW1lID8gXCIgbWFya2VyLVwiICsgbmFtZSA6IFwiXCIpKTtcbiAgZS5zdHlsZS5jc3NUZXh0ID0gY3NzO1xuICBlLmlubmVyVGV4dCA9IG5hbWUgfHwgbmFtZSA9PT0gMCA/IHR5cGUgKyBcIi1cIiArIG5hbWUgOiB0eXBlO1xuICBwYXJlbnQuY2hpbGRyZW5bMF0gPyBwYXJlbnQuaW5zZXJ0QmVmb3JlKGUsIHBhcmVudC5jaGlsZHJlblswXSkgOiBwYXJlbnQuYXBwZW5kQ2hpbGQoZSk7XG4gIGUuX29mZnNldCA9IGVbXCJvZmZzZXRcIiArIGRpcmVjdGlvbi5vcC5kMl07XG5cbiAgX3Bvc2l0aW9uTWFya2VyKGUsIDAsIGRpcmVjdGlvbiwgaXNTdGFydCk7XG5cbiAgcmV0dXJuIGU7XG59LFxuICAgIF9wb3NpdGlvbk1hcmtlciA9IGZ1bmN0aW9uIF9wb3NpdGlvbk1hcmtlcihtYXJrZXIsIHN0YXJ0LCBkaXJlY3Rpb24sIGZsaXBwZWQpIHtcbiAgdmFyIHZhcnMgPSB7XG4gICAgZGlzcGxheTogXCJibG9ja1wiXG4gIH0sXG4gICAgICBzaWRlID0gZGlyZWN0aW9uW2ZsaXBwZWQgPyBcIm9zMlwiIDogXCJwMlwiXSxcbiAgICAgIG9wcG9zaXRlU2lkZSA9IGRpcmVjdGlvbltmbGlwcGVkID8gXCJwMlwiIDogXCJvczJcIl07XG4gIG1hcmtlci5faXNGbGlwcGVkID0gZmxpcHBlZDtcbiAgdmFyc1tkaXJlY3Rpb24uYSArIFwiUGVyY2VudFwiXSA9IGZsaXBwZWQgPyAtMTAwIDogMDtcbiAgdmFyc1tkaXJlY3Rpb24uYV0gPSBmbGlwcGVkID8gXCIxcHhcIiA6IDA7XG4gIHZhcnNbXCJib3JkZXJcIiArIHNpZGUgKyBfV2lkdGhdID0gMTtcbiAgdmFyc1tcImJvcmRlclwiICsgb3Bwb3NpdGVTaWRlICsgX1dpZHRoXSA9IDA7XG4gIHZhcnNbZGlyZWN0aW9uLnBdID0gc3RhcnQgKyBcInB4XCI7XG4gIGdzYXAuc2V0KG1hcmtlciwgdmFycyk7XG59LFxuICAgIF90cmlnZ2VycyA9IFtdLFxuICAgIF9pZHMgPSB7fSxcbiAgICBfcmFmSUQsXG4gICAgX3N5bmMgPSBmdW5jdGlvbiBfc3luYygpIHtcbiAgcmV0dXJuIF9nZXRUaW1lKCkgLSBfbGFzdFNjcm9sbFRpbWUgPiAzNCAmJiBfdXBkYXRlQWxsKCk7XG59LFxuICAgIF9vblNjcm9sbCA9IGZ1bmN0aW9uIF9vblNjcm9sbCgpIHtcbiAgLy8gcHJldmlvdXNseSwgd2UgdHJpZWQgdG8gb3B0aW1pemUgcGVyZm9ybWFuY2UgYnkgYmF0Y2hpbmcvZGVmZXJyaW5nIHRvIHRoZSBuZXh0IHJlcXVlc3RBbmltYXRpb25GcmFtZSgpLCBidXQgZGlzY292ZXJlZCB0aGF0IFNhZmFyaSBoYXMgYSBmZXcgYnVncyB0aGF0IG1ha2UgdGhpcyB1bndvcmthYmxlIChlc3BlY2lhbGx5IG9uIGlPUykuIFNlZSBodHRwczovL2NvZGVwZW4uaW8vR3JlZW5Tb2NrL3Blbi8xNmM0MzViMTJlZjA5YzM4MTI1MjA0ODE4ZTdiNDVmYz9lZGl0b3JzPTAwMTAgYW5kIGh0dHBzOi8vY29kZXBlbi5pby9HcmVlblNvY2svcGVuL0pqT3hZcFEvM2RkNjVjY2VjNWE2MGYxZDg2MmMzNTVkODRkMTQ1NjI/ZWRpdG9ycz0wMDEwIGFuZCBodHRwczovL2NvZGVwZW4uaW8vR3JlZW5Tb2NrL3Blbi9FeGJyUE5hLzA4N2NlZjE5N2RjMzU0NDVhMDk1MWU4OTM1YzQxNTAzP2VkaXRvcnM9MDAxMFxuICBpZiAoIV9ub3JtYWxpemVyIHx8ICFfbm9ybWFsaXplci5pc1ByZXNzZWQgfHwgX25vcm1hbGl6ZXIuc3RhcnRYID4gX2JvZHkuY2xpZW50V2lkdGgpIHtcbiAgICAvLyBpZiB0aGUgdXNlciBpcyBkcmFnZ2luZyB0aGUgc2Nyb2xsYmFyLCBhbGxvdyBpdC5cbiAgICBfc2Nyb2xsZXJzLmNhY2hlKys7XG4gICAgX3JhZklEIHx8IChfcmFmSUQgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoX3VwZGF0ZUFsbCkpO1xuICAgIF9sYXN0U2Nyb2xsVGltZSB8fCBfZGlzcGF0Y2goXCJzY3JvbGxTdGFydFwiKTtcbiAgICBfbGFzdFNjcm9sbFRpbWUgPSBfZ2V0VGltZSgpO1xuICB9XG59LFxuICAgIF9zZXRCYXNlRGltZW5zaW9ucyA9IGZ1bmN0aW9uIF9zZXRCYXNlRGltZW5zaW9ucygpIHtcbiAgX2Jhc2VTY3JlZW5XaWR0aCA9IF93aW4uaW5uZXJXaWR0aDtcbiAgX2Jhc2VTY3JlZW5IZWlnaHQgPSBfd2luLmlubmVySGVpZ2h0O1xufSxcbiAgICBfb25SZXNpemUgPSBmdW5jdGlvbiBfb25SZXNpemUoKSB7XG4gIF9zY3JvbGxlcnMuY2FjaGUrKztcbiAgIV9yZWZyZXNoaW5nICYmICFfaWdub3JlUmVzaXplICYmICFfZG9jLmZ1bGxzY3JlZW5FbGVtZW50ICYmICFfZG9jLndlYmtpdEZ1bGxzY3JlZW5FbGVtZW50ICYmICghX2lnbm9yZU1vYmlsZVJlc2l6ZSB8fCBfYmFzZVNjcmVlbldpZHRoICE9PSBfd2luLmlubmVyV2lkdGggfHwgTWF0aC5hYnMoX3dpbi5pbm5lckhlaWdodCAtIF9iYXNlU2NyZWVuSGVpZ2h0KSA+IF93aW4uaW5uZXJIZWlnaHQgKiAwLjI1KSAmJiBfcmVzaXplRGVsYXkucmVzdGFydCh0cnVlKTtcbn0sXG4gICAgLy8gaWdub3JlIHJlc2l6ZXMgdHJpZ2dlcmVkIGJ5IHJlZnJlc2goKVxuX2xpc3RlbmVycyA9IHt9LFxuICAgIF9lbXB0eUFycmF5ID0gW10sXG4gICAgX3NvZnRSZWZyZXNoID0gZnVuY3Rpb24gX3NvZnRSZWZyZXNoKCkge1xuICByZXR1cm4gX3JlbW92ZUxpc3RlbmVyKFNjcm9sbFRyaWdnZXIsIFwic2Nyb2xsRW5kXCIsIF9zb2Z0UmVmcmVzaCkgfHwgX3JlZnJlc2hBbGwodHJ1ZSk7XG59LFxuICAgIF9kaXNwYXRjaCA9IGZ1bmN0aW9uIF9kaXNwYXRjaCh0eXBlKSB7XG4gIHJldHVybiBfbGlzdGVuZXJzW3R5cGVdICYmIF9saXN0ZW5lcnNbdHlwZV0ubWFwKGZ1bmN0aW9uIChmKSB7XG4gICAgcmV0dXJuIGYoKTtcbiAgfSkgfHwgX2VtcHR5QXJyYXk7XG59LFxuICAgIF9zYXZlZFN0eWxlcyA9IFtdLFxuICAgIC8vIHdoZW4gU2Nyb2xsVHJpZ2dlci5zYXZlU3R5bGVzKCkgaXMgY2FsbGVkLCB0aGUgaW5saW5lIHN0eWxlcyBhcmUgcmVjb3JkZWQgaW4gdGhpcyBBcnJheSBpbiBhIHNlcXVlbnRpYWwgZm9ybWF0IGxpa2UgW2VsZW1lbnQsIGNzc1RleHQsIGdzQ2FjaGUsIG1lZGlhXS4gVGhpcyBrZWVwcyBpdCB2ZXJ5IG1lbW9yeS1lZmZpY2llbnQgYW5kIGZhc3QgdG8gaXRlcmF0ZSB0aHJvdWdoLlxuX3JldmVydFJlY29yZGVkID0gZnVuY3Rpb24gX3JldmVydFJlY29yZGVkKG1lZGlhKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgX3NhdmVkU3R5bGVzLmxlbmd0aDsgaSArPSA1KSB7XG4gICAgaWYgKCFtZWRpYSB8fCBfc2F2ZWRTdHlsZXNbaSArIDRdICYmIF9zYXZlZFN0eWxlc1tpICsgNF0ucXVlcnkgPT09IG1lZGlhKSB7XG4gICAgICBfc2F2ZWRTdHlsZXNbaV0uc3R5bGUuY3NzVGV4dCA9IF9zYXZlZFN0eWxlc1tpICsgMV07XG4gICAgICBfc2F2ZWRTdHlsZXNbaV0uZ2V0QkJveCAmJiBfc2F2ZWRTdHlsZXNbaV0uc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsIF9zYXZlZFN0eWxlc1tpICsgMl0gfHwgXCJcIik7XG4gICAgICBfc2F2ZWRTdHlsZXNbaSArIDNdLnVuY2FjaGUgPSAxO1xuICAgIH1cbiAgfVxufSxcbiAgICBfcmV2ZXJ0QWxsID0gZnVuY3Rpb24gX3JldmVydEFsbChraWxsLCBtZWRpYSkge1xuICB2YXIgdHJpZ2dlcjtcblxuICBmb3IgKF9pID0gMDsgX2kgPCBfdHJpZ2dlcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgdHJpZ2dlciA9IF90cmlnZ2Vyc1tfaV07XG5cbiAgICBpZiAodHJpZ2dlciAmJiAoIW1lZGlhIHx8IHRyaWdnZXIuX2N0eCA9PT0gbWVkaWEpKSB7XG4gICAgICBpZiAoa2lsbCkge1xuICAgICAgICB0cmlnZ2VyLmtpbGwoMSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0cmlnZ2VyLnJldmVydCh0cnVlLCB0cnVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBtZWRpYSAmJiBfcmV2ZXJ0UmVjb3JkZWQobWVkaWEpO1xuICBtZWRpYSB8fCBfZGlzcGF0Y2goXCJyZXZlcnRcIik7XG59LFxuICAgIF9jbGVhclNjcm9sbE1lbW9yeSA9IGZ1bmN0aW9uIF9jbGVhclNjcm9sbE1lbW9yeSgpIHtcbiAgcmV0dXJuIF9zY3JvbGxlcnMuY2FjaGUrKyAmJiBfc2Nyb2xsZXJzLmZvckVhY2goZnVuY3Rpb24gKG9iaikge1xuICAgIHJldHVybiB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgJiYgKG9iai5yZWMgPSAwKTtcbiAgfSk7XG59LFxuICAgIC8vIHplcm8tb3V0IGFsbCB0aGUgcmVjb3JkZWQgc2Nyb2xsIHBvc2l0aW9ucy4gRG9uJ3QgdXNlIF90cmlnZ2VycyBiZWNhdXNlIGlmLCBmb3IgZXhhbXBsZSwgLm1hdGNoTWVkaWEoKSBpcyB1c2VkIHRvIGNyZWF0ZSBzb21lIFNjcm9sbFRyaWdnZXJzIGFuZCB0aGVuIHRoZSB1c2VyIHJlc2l6ZXMgYW5kIGl0IHJlbW92ZXMgQUxMIFNjcm9sbFRyaWdnZXJzLCBhbmQgdGhlbiBnbyBiYWNrIHRvIGEgc2l6ZSB3aGVyZSB0aGVyZSBhcmUgU2Nyb2xsVHJpZ2dlcnMsIGl0IHdvdWxkIGhhdmUga2VwdCB0aGUgcG9zaXRpb24ocykgc2F2ZWQgZnJvbSB0aGUgaW5pdGlhbCBzdGF0ZS5cbl9yZWZyZXNoaW5nQWxsLFxuICAgIF9yZWZyZXNoSUQgPSAwLFxuICAgIF9yZWZyZXNoQWxsID0gZnVuY3Rpb24gX3JlZnJlc2hBbGwoZm9yY2UsIHNraXBSZXZlcnQpIHtcbiAgaWYgKF9sYXN0U2Nyb2xsVGltZSAmJiAhZm9yY2UpIHtcbiAgICBfYWRkTGlzdGVuZXIoU2Nyb2xsVHJpZ2dlciwgXCJzY3JvbGxFbmRcIiwgX3NvZnRSZWZyZXNoKTtcblxuICAgIHJldHVybjtcbiAgfVxuXG4gIF9yZWZyZXNoaW5nQWxsID0gdHJ1ZTtcblxuICB2YXIgcmVmcmVzaEluaXRzID0gX2Rpc3BhdGNoKFwicmVmcmVzaEluaXRcIik7XG5cbiAgX3NvcnQgJiYgU2Nyb2xsVHJpZ2dlci5zb3J0KCk7XG4gIHNraXBSZXZlcnQgfHwgX3JldmVydEFsbCgpO1xuXG4gIF90cmlnZ2Vycy5zbGljZSgwKS5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7XG4gICAgcmV0dXJuIHQucmVmcmVzaCgpO1xuICB9KTsgLy8gZG9uJ3QgbG9vcCB3aXRoIF9pIGJlY2F1c2UgZHVyaW5nIGEgcmVmcmVzaCgpIHNvbWVvbmUgY291bGQgY2FsbCBTY3JvbGxUcmlnZ2VyLnVwZGF0ZSgpIHdoaWNoIHdvdWxkIGl0ZXJhdGUgdGhyb3VnaCBfaSByZXN1bHRpbmcgaW4gYSBza2lwLlxuXG5cbiAgX3RyaWdnZXJzLmZvckVhY2goZnVuY3Rpb24gKHQpIHtcbiAgICByZXR1cm4gdC52YXJzLmVuZCA9PT0gXCJtYXhcIiAmJiB0LnNldFBvc2l0aW9ucyh0LnN0YXJ0LCBNYXRoLm1heCh0LnN0YXJ0ICsgMSwgX21heFNjcm9sbCh0LnNjcm9sbGVyLCB0Ll9kaXIpKSk7XG4gIH0pOyAvLyB0aGUgc2Nyb2xsZXIncyBtYXggc2Nyb2xsIHBvc2l0aW9uIG1heSBjaGFuZ2UgYWZ0ZXIgYWxsIHRoZSBTY3JvbGxUcmlnZ2VycyByZWZyZXNoZWQgKGxpa2UgcGlubmluZyBjb3VsZCBwdXNoIGl0IGRvd24pLCBzbyB3ZSBuZWVkIHRvIGxvb3AgYmFjayBhbmQgY29ycmVjdCBhbnkgd2l0aCBlbmQ6IFwibWF4XCIuXG5cblxuICByZWZyZXNoSW5pdHMuZm9yRWFjaChmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgcmV0dXJuIHJlc3VsdCAmJiByZXN1bHQucmVuZGVyICYmIHJlc3VsdC5yZW5kZXIoLTEpO1xuICB9KTsgLy8gaWYgdGhlIG9uUmVmcmVzaEluaXQoKSByZXR1cm5zIGFuIGFuaW1hdGlvbiAodHlwaWNhbGx5IGEgZ3NhcC5zZXQoKSksIHJldmVydCBpdC4gVGhpcyBtYWtlcyBpdCBlYXN5IHRvIHB1dCB0aGluZ3MgaW4gYSBjZXJ0YWluIHNwb3QgYmVmb3JlIHJlZnJlc2hpbmcgZm9yIG1lYXN1cmVtZW50IHB1cnBvc2VzLCBhbmQgdGhlbiBwdXQgdGhpbmdzIGJhY2suXG5cbiAgX3Njcm9sbGVycy5mb3JFYWNoKGZ1bmN0aW9uIChvYmopIHtcbiAgICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJmdW5jdGlvblwiICYmIG9iaihvYmoucmVjKTtcbiAgfSk7XG5cbiAgX2NsZWFyU2Nyb2xsTWVtb3J5KCk7XG5cbiAgX3Jlc2l6ZURlbGF5LnBhdXNlKCk7XG5cbiAgX3JlZnJlc2hJRCsrO1xuICBfcmVmcmVzaGluZ0FsbCA9IGZhbHNlO1xuXG4gIF9kaXNwYXRjaChcInJlZnJlc2hcIik7XG59LFxuICAgIF9sYXN0U2Nyb2xsID0gMCxcbiAgICBfZGlyZWN0aW9uID0gMSxcbiAgICBfcHJpbWFyeSxcbiAgICBfdXBkYXRlQWxsID0gZnVuY3Rpb24gX3VwZGF0ZUFsbCgpIHtcbiAgaWYgKCFfcmVmcmVzaGluZ0FsbCkge1xuICAgIFNjcm9sbFRyaWdnZXIuaXNVcGRhdGluZyA9IHRydWU7XG4gICAgX3ByaW1hcnkgJiYgX3ByaW1hcnkudXBkYXRlKDApOyAvLyBTY3JvbGxTbW9vdGhlciB1c2VycyByZWZyZXNoUHJpb3JpdHkgLTk5OTkgdG8gYmVjb21lIHRoZSBwcmltYXJ5IHRoYXQgZ2V0cyB1cGRhdGVkIGJlZm9yZSBhbGwgb3RoZXJzIGJlY2F1c2UgaXQgYWZmZWN0cyB0aGUgc2Nyb2xsIHBvc2l0aW9uLlxuXG4gICAgdmFyIGwgPSBfdHJpZ2dlcnMubGVuZ3RoLFxuICAgICAgICB0aW1lID0gX2dldFRpbWUoKSxcbiAgICAgICAgcmVjb3JkVmVsb2NpdHkgPSB0aW1lIC0gX3RpbWUxID49IDUwLFxuICAgICAgICBzY3JvbGwgPSBsICYmIF90cmlnZ2Vyc1swXS5zY3JvbGwoKTtcblxuICAgIF9kaXJlY3Rpb24gPSBfbGFzdFNjcm9sbCA+IHNjcm9sbCA/IC0xIDogMTtcbiAgICBfbGFzdFNjcm9sbCA9IHNjcm9sbDtcblxuICAgIGlmIChyZWNvcmRWZWxvY2l0eSkge1xuICAgICAgaWYgKF9sYXN0U2Nyb2xsVGltZSAmJiAhX3BvaW50ZXJJc0Rvd24gJiYgdGltZSAtIF9sYXN0U2Nyb2xsVGltZSA+IDIwMCkge1xuICAgICAgICBfbGFzdFNjcm9sbFRpbWUgPSAwO1xuXG4gICAgICAgIF9kaXNwYXRjaChcInNjcm9sbEVuZFwiKTtcbiAgICAgIH1cblxuICAgICAgX3RpbWUyID0gX3RpbWUxO1xuICAgICAgX3RpbWUxID0gdGltZTtcbiAgICB9XG5cbiAgICBpZiAoX2RpcmVjdGlvbiA8IDApIHtcbiAgICAgIF9pID0gbDtcblxuICAgICAgd2hpbGUgKF9pLS0gPiAwKSB7XG4gICAgICAgIF90cmlnZ2Vyc1tfaV0gJiYgX3RyaWdnZXJzW19pXS51cGRhdGUoMCwgcmVjb3JkVmVsb2NpdHkpO1xuICAgICAgfVxuXG4gICAgICBfZGlyZWN0aW9uID0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChfaSA9IDA7IF9pIDwgbDsgX2krKykge1xuICAgICAgICBfdHJpZ2dlcnNbX2ldICYmIF90cmlnZ2Vyc1tfaV0udXBkYXRlKDAsIHJlY29yZFZlbG9jaXR5KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBTY3JvbGxUcmlnZ2VyLmlzVXBkYXRpbmcgPSBmYWxzZTtcbiAgfVxuXG4gIF9yYWZJRCA9IDA7XG59LFxuICAgIF9wcm9wTmFtZXNUb0NvcHkgPSBbX2xlZnQsIF90b3AsIF9ib3R0b20sIF9yaWdodCwgX21hcmdpbiArIF9Cb3R0b20sIF9tYXJnaW4gKyBfUmlnaHQsIF9tYXJnaW4gKyBfVG9wLCBfbWFyZ2luICsgX0xlZnQsIFwiZGlzcGxheVwiLCBcImZsZXhTaHJpbmtcIiwgXCJmbG9hdFwiLCBcInpJbmRleFwiLCBcImdyaWRDb2x1bW5TdGFydFwiLCBcImdyaWRDb2x1bW5FbmRcIiwgXCJncmlkUm93U3RhcnRcIiwgXCJncmlkUm93RW5kXCIsIFwiZ3JpZEFyZWFcIiwgXCJqdXN0aWZ5U2VsZlwiLCBcImFsaWduU2VsZlwiLCBcInBsYWNlU2VsZlwiLCBcIm9yZGVyXCJdLFxuICAgIF9zdGF0ZVByb3BzID0gX3Byb3BOYW1lc1RvQ29weS5jb25jYXQoW193aWR0aCwgX2hlaWdodCwgXCJib3hTaXppbmdcIiwgXCJtYXhcIiArIF9XaWR0aCwgXCJtYXhcIiArIF9IZWlnaHQsIFwicG9zaXRpb25cIiwgX21hcmdpbiwgX3BhZGRpbmcsIF9wYWRkaW5nICsgX1RvcCwgX3BhZGRpbmcgKyBfUmlnaHQsIF9wYWRkaW5nICsgX0JvdHRvbSwgX3BhZGRpbmcgKyBfTGVmdF0pLFxuICAgIF9zd2FwUGluT3V0ID0gZnVuY3Rpb24gX3N3YXBQaW5PdXQocGluLCBzcGFjZXIsIHN0YXRlKSB7XG4gIF9zZXRTdGF0ZShzdGF0ZSk7XG5cbiAgdmFyIGNhY2hlID0gcGluLl9nc2FwO1xuXG4gIGlmIChjYWNoZS5zcGFjZXJJc05hdGl2ZSkge1xuICAgIF9zZXRTdGF0ZShjYWNoZS5zcGFjZXJTdGF0ZSk7XG4gIH0gZWxzZSBpZiAocGluLl9nc2FwLnN3YXBwZWRJbikge1xuICAgIHZhciBwYXJlbnQgPSBzcGFjZXIucGFyZW50Tm9kZTtcblxuICAgIGlmIChwYXJlbnQpIHtcbiAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUocGluLCBzcGFjZXIpO1xuICAgICAgcGFyZW50LnJlbW92ZUNoaWxkKHNwYWNlcik7XG4gICAgfVxuICB9XG5cbiAgcGluLl9nc2FwLnN3YXBwZWRJbiA9IGZhbHNlO1xufSxcbiAgICBfc3dhcFBpbkluID0gZnVuY3Rpb24gX3N3YXBQaW5JbihwaW4sIHNwYWNlciwgY3MsIHNwYWNlclN0YXRlKSB7XG4gIGlmICghcGluLl9nc2FwLnN3YXBwZWRJbikge1xuICAgIHZhciBpID0gX3Byb3BOYW1lc1RvQ29weS5sZW5ndGgsXG4gICAgICAgIHNwYWNlclN0eWxlID0gc3BhY2VyLnN0eWxlLFxuICAgICAgICBwaW5TdHlsZSA9IHBpbi5zdHlsZSxcbiAgICAgICAgcDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHAgPSBfcHJvcE5hbWVzVG9Db3B5W2ldO1xuICAgICAgc3BhY2VyU3R5bGVbcF0gPSBjc1twXTtcbiAgICB9XG5cbiAgICBzcGFjZXJTdHlsZS5wb3NpdGlvbiA9IGNzLnBvc2l0aW9uID09PSBcImFic29sdXRlXCIgPyBcImFic29sdXRlXCIgOiBcInJlbGF0aXZlXCI7XG4gICAgY3MuZGlzcGxheSA9PT0gXCJpbmxpbmVcIiAmJiAoc3BhY2VyU3R5bGUuZGlzcGxheSA9IFwiaW5saW5lLWJsb2NrXCIpO1xuICAgIHBpblN0eWxlW19ib3R0b21dID0gcGluU3R5bGVbX3JpZ2h0XSA9IFwiYXV0b1wiO1xuICAgIHNwYWNlclN0eWxlLmZsZXhCYXNpcyA9IGNzLmZsZXhCYXNpcyB8fCBcImF1dG9cIjtcbiAgICBzcGFjZXJTdHlsZS5vdmVyZmxvdyA9IFwidmlzaWJsZVwiO1xuICAgIHNwYWNlclN0eWxlLmJveFNpemluZyA9IFwiYm9yZGVyLWJveFwiO1xuICAgIHNwYWNlclN0eWxlW193aWR0aF0gPSBfZ2V0U2l6ZShwaW4sIF9ob3Jpem9udGFsKSArIF9weDtcbiAgICBzcGFjZXJTdHlsZVtfaGVpZ2h0XSA9IF9nZXRTaXplKHBpbiwgX3ZlcnRpY2FsKSArIF9weDtcbiAgICBzcGFjZXJTdHlsZVtfcGFkZGluZ10gPSBwaW5TdHlsZVtfbWFyZ2luXSA9IHBpblN0eWxlW190b3BdID0gcGluU3R5bGVbX2xlZnRdID0gXCIwXCI7XG5cbiAgICBfc2V0U3RhdGUoc3BhY2VyU3RhdGUpO1xuXG4gICAgcGluU3R5bGVbX3dpZHRoXSA9IHBpblN0eWxlW1wibWF4XCIgKyBfV2lkdGhdID0gY3NbX3dpZHRoXTtcbiAgICBwaW5TdHlsZVtfaGVpZ2h0XSA9IHBpblN0eWxlW1wibWF4XCIgKyBfSGVpZ2h0XSA9IGNzW19oZWlnaHRdO1xuICAgIHBpblN0eWxlW19wYWRkaW5nXSA9IGNzW19wYWRkaW5nXTtcblxuICAgIGlmIChwaW4ucGFyZW50Tm9kZSAhPT0gc3BhY2VyKSB7XG4gICAgICBwaW4ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoc3BhY2VyLCBwaW4pO1xuICAgICAgc3BhY2VyLmFwcGVuZENoaWxkKHBpbik7XG4gICAgfVxuXG4gICAgcGluLl9nc2FwLnN3YXBwZWRJbiA9IHRydWU7XG4gIH1cbn0sXG4gICAgX2NhcHNFeHAgPSAvKFtBLVpdKS9nLFxuICAgIF9zZXRTdGF0ZSA9IGZ1bmN0aW9uIF9zZXRTdGF0ZShzdGF0ZSkge1xuICBpZiAoc3RhdGUpIHtcbiAgICB2YXIgc3R5bGUgPSBzdGF0ZS50LnN0eWxlLFxuICAgICAgICBsID0gc3RhdGUubGVuZ3RoLFxuICAgICAgICBpID0gMCxcbiAgICAgICAgcCxcbiAgICAgICAgdmFsdWU7XG4gICAgKHN0YXRlLnQuX2dzYXAgfHwgZ3NhcC5jb3JlLmdldENhY2hlKHN0YXRlLnQpKS51bmNhY2hlID0gMTsgLy8gb3RoZXJ3aXNlIHRyYW5zZm9ybXMgbWF5IGJlIG9mZlxuXG4gICAgZm9yICg7IGkgPCBsOyBpICs9IDIpIHtcbiAgICAgIHZhbHVlID0gc3RhdGVbaSArIDFdO1xuICAgICAgcCA9IHN0YXRlW2ldO1xuXG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgc3R5bGVbcF0gPSB2YWx1ZTtcbiAgICAgIH0gZWxzZSBpZiAoc3R5bGVbcF0pIHtcbiAgICAgICAgc3R5bGUucmVtb3ZlUHJvcGVydHkocC5yZXBsYWNlKF9jYXBzRXhwLCBcIi0kMVwiKS50b0xvd2VyQ2FzZSgpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0sXG4gICAgX2dldFN0YXRlID0gZnVuY3Rpb24gX2dldFN0YXRlKGVsZW1lbnQpIHtcbiAgLy8gcmV0dXJucyBhbiBBcnJheSB3aXRoIGFsdGVybmF0aW5nIHZhbHVlcyBsaWtlIFtwcm9wZXJ0eSwgdmFsdWUsIHByb3BlcnR5LCB2YWx1ZV0gYW5kIGEgXCJ0XCIgcHJvcGVydHkgcG9pbnRpbmcgdG8gdGhlIHRhcmdldCAoZWxlbWVudCkuIE1ha2VzIGl0IGZhc3QgYW5kIGNoZWFwLlxuICB2YXIgbCA9IF9zdGF0ZVByb3BzLmxlbmd0aCxcbiAgICAgIHN0eWxlID0gZWxlbWVudC5zdHlsZSxcbiAgICAgIHN0YXRlID0gW10sXG4gICAgICBpID0gMDtcblxuICBmb3IgKDsgaSA8IGw7IGkrKykge1xuICAgIHN0YXRlLnB1c2goX3N0YXRlUHJvcHNbaV0sIHN0eWxlW19zdGF0ZVByb3BzW2ldXSk7XG4gIH1cblxuICBzdGF0ZS50ID0gZWxlbWVudDtcbiAgcmV0dXJuIHN0YXRlO1xufSxcbiAgICBfY29weVN0YXRlID0gZnVuY3Rpb24gX2NvcHlTdGF0ZShzdGF0ZSwgb3ZlcnJpZGUsIG9taXRPZmZzZXRzKSB7XG4gIHZhciByZXN1bHQgPSBbXSxcbiAgICAgIGwgPSBzdGF0ZS5sZW5ndGgsXG4gICAgICBpID0gb21pdE9mZnNldHMgPyA4IDogMCxcbiAgICAgIC8vIHNraXAgdG9wLCBsZWZ0LCByaWdodCwgYm90dG9tIGlmIG9taXRPZmZzZXRzIGlzIHRydWVcbiAgcDtcblxuICBmb3IgKDsgaSA8IGw7IGkgKz0gMikge1xuICAgIHAgPSBzdGF0ZVtpXTtcbiAgICByZXN1bHQucHVzaChwLCBwIGluIG92ZXJyaWRlID8gb3ZlcnJpZGVbcF0gOiBzdGF0ZVtpICsgMV0pO1xuICB9XG5cbiAgcmVzdWx0LnQgPSBzdGF0ZS50O1xuICByZXR1cm4gcmVzdWx0O1xufSxcbiAgICBfd2luT2Zmc2V0cyA9IHtcbiAgbGVmdDogMCxcbiAgdG9wOiAwXG59LFxuICAgIC8vIC8vIHBvdGVudGlhbCBmdXR1cmUgZmVhdHVyZSAoPykgQWxsb3cgdXNlcnMgdG8gY2FsY3VsYXRlIHdoZXJlIGEgdHJpZ2dlciBoaXRzIChzY3JvbGwgcG9zaXRpb24pIGxpa2UgZ2V0U2Nyb2xsUG9zaXRpb24oXCIjaWRcIiwgXCJ0b3AgYm90dG9tXCIpXG4vLyBfZ2V0U2Nyb2xsUG9zaXRpb24gPSAodHJpZ2dlciwgcG9zaXRpb24sIHtzY3JvbGxlciwgY29udGFpbmVyQW5pbWF0aW9uLCBob3Jpem9udGFsfSkgPT4ge1xuLy8gXHRzY3JvbGxlciA9IF9nZXRUYXJnZXQoc2Nyb2xsZXIgfHwgX3dpbik7XG4vLyBcdGxldCBkaXJlY3Rpb24gPSBob3Jpem9udGFsID8gX2hvcml6b250YWwgOiBfdmVydGljYWwsXG4vLyBcdFx0aXNWaWV3cG9ydCA9IF9pc1ZpZXdwb3J0KHNjcm9sbGVyKTtcbi8vIFx0X2dldFNpemVGdW5jKHNjcm9sbGVyLCBpc1ZpZXdwb3J0LCBkaXJlY3Rpb24pO1xuLy8gXHRyZXR1cm4gX3BhcnNlUG9zaXRpb24ocG9zaXRpb24sIF9nZXRUYXJnZXQodHJpZ2dlciksIF9nZXRTaXplRnVuYyhzY3JvbGxlciwgaXNWaWV3cG9ydCwgZGlyZWN0aW9uKSgpLCBkaXJlY3Rpb24sIF9nZXRTY3JvbGxGdW5jKHNjcm9sbGVyLCBkaXJlY3Rpb24pKCksIDAsIDAsIDAsIF9nZXRPZmZzZXRzRnVuYyhzY3JvbGxlciwgaXNWaWV3cG9ydCkoKSwgaXNWaWV3cG9ydCA/IDAgOiBwYXJzZUZsb2F0KF9nZXRDb21wdXRlZFN0eWxlKHNjcm9sbGVyKVtcImJvcmRlclwiICsgZGlyZWN0aW9uLnAyICsgX1dpZHRoXSkgfHwgMCwgMCwgY29udGFpbmVyQW5pbWF0aW9uID8gY29udGFpbmVyQW5pbWF0aW9uLmR1cmF0aW9uKCkgOiBfbWF4U2Nyb2xsKHNjcm9sbGVyKSwgY29udGFpbmVyQW5pbWF0aW9uKTtcbi8vIH0sXG5fcGFyc2VQb3NpdGlvbiA9IGZ1bmN0aW9uIF9wYXJzZVBvc2l0aW9uKHZhbHVlLCB0cmlnZ2VyLCBzY3JvbGxlclNpemUsIGRpcmVjdGlvbiwgc2Nyb2xsLCBtYXJrZXIsIG1hcmtlclNjcm9sbGVyLCBzZWxmLCBzY3JvbGxlckJvdW5kcywgYm9yZGVyV2lkdGgsIHVzZUZpeGVkUG9zaXRpb24sIHNjcm9sbGVyTWF4LCBjb250YWluZXJBbmltYXRpb24pIHtcbiAgX2lzRnVuY3Rpb24odmFsdWUpICYmICh2YWx1ZSA9IHZhbHVlKHNlbGYpKTtcblxuICBpZiAoX2lzU3RyaW5nKHZhbHVlKSAmJiB2YWx1ZS5zdWJzdHIoMCwgMykgPT09IFwibWF4XCIpIHtcbiAgICB2YWx1ZSA9IHNjcm9sbGVyTWF4ICsgKHZhbHVlLmNoYXJBdCg0KSA9PT0gXCI9XCIgPyBfb2Zmc2V0VG9QeChcIjBcIiArIHZhbHVlLnN1YnN0cigzKSwgc2Nyb2xsZXJTaXplKSA6IDApO1xuICB9XG5cbiAgdmFyIHRpbWUgPSBjb250YWluZXJBbmltYXRpb24gPyBjb250YWluZXJBbmltYXRpb24udGltZSgpIDogMCxcbiAgICAgIHAxLFxuICAgICAgcDIsXG4gICAgICBlbGVtZW50O1xuICBjb250YWluZXJBbmltYXRpb24gJiYgY29udGFpbmVyQW5pbWF0aW9uLnNlZWsoMCk7XG5cbiAgaWYgKCFfaXNOdW1iZXIodmFsdWUpKSB7XG4gICAgX2lzRnVuY3Rpb24odHJpZ2dlcikgJiYgKHRyaWdnZXIgPSB0cmlnZ2VyKHNlbGYpKTtcbiAgICB2YXIgb2Zmc2V0cyA9ICh2YWx1ZSB8fCBcIjBcIikuc3BsaXQoXCIgXCIpLFxuICAgICAgICBib3VuZHMsXG4gICAgICAgIGxvY2FsT2Zmc2V0LFxuICAgICAgICBnbG9iYWxPZmZzZXQsXG4gICAgICAgIGRpc3BsYXk7XG4gICAgZWxlbWVudCA9IF9nZXRUYXJnZXQodHJpZ2dlcikgfHwgX2JvZHk7XG4gICAgYm91bmRzID0gX2dldEJvdW5kcyhlbGVtZW50KSB8fCB7fTtcblxuICAgIGlmICgoIWJvdW5kcyB8fCAhYm91bmRzLmxlZnQgJiYgIWJvdW5kcy50b3ApICYmIF9nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpLmRpc3BsYXkgPT09IFwibm9uZVwiKSB7XG4gICAgICAvLyBpZiBkaXNwbGF5IGlzIFwibm9uZVwiLCBpdCB3b24ndCByZXBvcnQgZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkgcHJvcGVybHlcbiAgICAgIGRpc3BsYXkgPSBlbGVtZW50LnN0eWxlLmRpc3BsYXk7XG4gICAgICBlbGVtZW50LnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgICBib3VuZHMgPSBfZ2V0Qm91bmRzKGVsZW1lbnQpO1xuICAgICAgZGlzcGxheSA/IGVsZW1lbnQuc3R5bGUuZGlzcGxheSA9IGRpc3BsYXkgOiBlbGVtZW50LnN0eWxlLnJlbW92ZVByb3BlcnR5KFwiZGlzcGxheVwiKTtcbiAgICB9XG5cbiAgICBsb2NhbE9mZnNldCA9IF9vZmZzZXRUb1B4KG9mZnNldHNbMF0sIGJvdW5kc1tkaXJlY3Rpb24uZF0pO1xuICAgIGdsb2JhbE9mZnNldCA9IF9vZmZzZXRUb1B4KG9mZnNldHNbMV0gfHwgXCIwXCIsIHNjcm9sbGVyU2l6ZSk7XG4gICAgdmFsdWUgPSBib3VuZHNbZGlyZWN0aW9uLnBdIC0gc2Nyb2xsZXJCb3VuZHNbZGlyZWN0aW9uLnBdIC0gYm9yZGVyV2lkdGggKyBsb2NhbE9mZnNldCArIHNjcm9sbCAtIGdsb2JhbE9mZnNldDtcbiAgICBtYXJrZXJTY3JvbGxlciAmJiBfcG9zaXRpb25NYXJrZXIobWFya2VyU2Nyb2xsZXIsIGdsb2JhbE9mZnNldCwgZGlyZWN0aW9uLCBzY3JvbGxlclNpemUgLSBnbG9iYWxPZmZzZXQgPCAyMCB8fCBtYXJrZXJTY3JvbGxlci5faXNTdGFydCAmJiBnbG9iYWxPZmZzZXQgPiAyMCk7XG4gICAgc2Nyb2xsZXJTaXplIC09IHNjcm9sbGVyU2l6ZSAtIGdsb2JhbE9mZnNldDsgLy8gYWRqdXN0IGZvciB0aGUgbWFya2VyXG4gIH0gZWxzZSBpZiAobWFya2VyU2Nyb2xsZXIpIHtcbiAgICBfcG9zaXRpb25NYXJrZXIobWFya2VyU2Nyb2xsZXIsIHNjcm9sbGVyU2l6ZSwgZGlyZWN0aW9uLCB0cnVlKTtcbiAgfVxuXG4gIGlmIChtYXJrZXIpIHtcbiAgICB2YXIgcG9zaXRpb24gPSB2YWx1ZSArIHNjcm9sbGVyU2l6ZSxcbiAgICAgICAgaXNTdGFydCA9IG1hcmtlci5faXNTdGFydDtcbiAgICBwMSA9IFwic2Nyb2xsXCIgKyBkaXJlY3Rpb24uZDI7XG5cbiAgICBfcG9zaXRpb25NYXJrZXIobWFya2VyLCBwb3NpdGlvbiwgZGlyZWN0aW9uLCBpc1N0YXJ0ICYmIHBvc2l0aW9uID4gMjAgfHwgIWlzU3RhcnQgJiYgKHVzZUZpeGVkUG9zaXRpb24gPyBNYXRoLm1heChfYm9keVtwMV0sIF9kb2NFbFtwMV0pIDogbWFya2VyLnBhcmVudE5vZGVbcDFdKSA8PSBwb3NpdGlvbiArIDEpO1xuXG4gICAgaWYgKHVzZUZpeGVkUG9zaXRpb24pIHtcbiAgICAgIHNjcm9sbGVyQm91bmRzID0gX2dldEJvdW5kcyhtYXJrZXJTY3JvbGxlcik7XG4gICAgICB1c2VGaXhlZFBvc2l0aW9uICYmIChtYXJrZXIuc3R5bGVbZGlyZWN0aW9uLm9wLnBdID0gc2Nyb2xsZXJCb3VuZHNbZGlyZWN0aW9uLm9wLnBdIC0gZGlyZWN0aW9uLm9wLm0gLSBtYXJrZXIuX29mZnNldCArIF9weCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKGNvbnRhaW5lckFuaW1hdGlvbiAmJiBlbGVtZW50KSB7XG4gICAgcDEgPSBfZ2V0Qm91bmRzKGVsZW1lbnQpO1xuICAgIGNvbnRhaW5lckFuaW1hdGlvbi5zZWVrKHNjcm9sbGVyTWF4KTtcbiAgICBwMiA9IF9nZXRCb3VuZHMoZWxlbWVudCk7XG4gICAgY29udGFpbmVyQW5pbWF0aW9uLl9jYVNjcm9sbERpc3QgPSBwMVtkaXJlY3Rpb24ucF0gLSBwMltkaXJlY3Rpb24ucF07XG4gICAgdmFsdWUgPSB2YWx1ZSAvIGNvbnRhaW5lckFuaW1hdGlvbi5fY2FTY3JvbGxEaXN0ICogc2Nyb2xsZXJNYXg7XG4gIH1cblxuICBjb250YWluZXJBbmltYXRpb24gJiYgY29udGFpbmVyQW5pbWF0aW9uLnNlZWsodGltZSk7XG4gIHJldHVybiBjb250YWluZXJBbmltYXRpb24gPyB2YWx1ZSA6IE1hdGgucm91bmQodmFsdWUpO1xufSxcbiAgICBfcHJlZml4RXhwID0gLyh3ZWJraXR8bW96fGxlbmd0aHxjc3NUZXh0fGluc2V0KS9pLFxuICAgIF9yZXBhcmVudCA9IGZ1bmN0aW9uIF9yZXBhcmVudChlbGVtZW50LCBwYXJlbnQsIHRvcCwgbGVmdCkge1xuICBpZiAoZWxlbWVudC5wYXJlbnROb2RlICE9PSBwYXJlbnQpIHtcbiAgICB2YXIgc3R5bGUgPSBlbGVtZW50LnN0eWxlLFxuICAgICAgICBwLFxuICAgICAgICBjcztcblxuICAgIGlmIChwYXJlbnQgPT09IF9ib2R5KSB7XG4gICAgICBlbGVtZW50Ll9zdE9yaWcgPSBzdHlsZS5jc3NUZXh0OyAvLyByZWNvcmQgb3JpZ2luYWwgaW5saW5lIHN0eWxlcyBzbyB3ZSBjYW4gcmV2ZXJ0IHRoZW0gbGF0ZXJcblxuICAgICAgY3MgPSBfZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcblxuICAgICAgZm9yIChwIGluIGNzKSB7XG4gICAgICAgIC8vIG11c3QgY29weSBhbGwgcmVsZXZhbnQgc3R5bGVzIHRvIGVuc3VyZSB0aGF0IG5vdGhpbmcgY2hhbmdlcyB2aXN1YWxseSB3aGVuIHdlIHJlcGFyZW50IHRvIHRoZSA8Ym9keT4uIFNraXAgdGhlIHZlbmRvciBwcmVmaXhlZCBvbmVzLlxuICAgICAgICBpZiAoIStwICYmICFfcHJlZml4RXhwLnRlc3QocCkgJiYgY3NbcF0gJiYgdHlwZW9mIHN0eWxlW3BdID09PSBcInN0cmluZ1wiICYmIHAgIT09IFwiMFwiKSB7XG4gICAgICAgICAgc3R5bGVbcF0gPSBjc1twXTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzdHlsZS50b3AgPSB0b3A7XG4gICAgICBzdHlsZS5sZWZ0ID0gbGVmdDtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGUuY3NzVGV4dCA9IGVsZW1lbnQuX3N0T3JpZztcbiAgICB9XG5cbiAgICBnc2FwLmNvcmUuZ2V0Q2FjaGUoZWxlbWVudCkudW5jYWNoZSA9IDE7XG4gICAgcGFyZW50LmFwcGVuZENoaWxkKGVsZW1lbnQpO1xuICB9XG59LFxuICAgIC8vIF9tZXJnZUFuaW1hdGlvbnMgPSBhbmltYXRpb25zID0+IHtcbi8vIFx0bGV0IHRsID0gZ3NhcC50aW1lbGluZSh7c21vb3RoQ2hpbGRUaW1pbmc6IHRydWV9KS5zdGFydFRpbWUoTWF0aC5taW4oLi4uYW5pbWF0aW9ucy5tYXAoYSA9PiBhLmdsb2JhbFRpbWUoMCkpKSk7XG4vLyBcdGFuaW1hdGlvbnMuZm9yRWFjaChhID0+IHtsZXQgdGltZSA9IGEudG90YWxUaW1lKCk7IHRsLmFkZChhKTsgYS50b3RhbFRpbWUodGltZSk7IH0pO1xuLy8gXHR0bC5zbW9vdGhDaGlsZFRpbWluZyA9IGZhbHNlO1xuLy8gXHRyZXR1cm4gdGw7XG4vLyB9LFxuLy8gcmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgY2FuIGJlIHVzZWQgdG8gdHdlZW4gdGhlIHNjcm9sbCBwb3NpdGlvbiBpbiB0aGUgZGlyZWN0aW9uIHByb3ZpZGVkLCBhbmQgd2hlbiBkb2luZyBzbyBpdCdsbCBhZGQgYSAudHdlZW4gcHJvcGVydHkgdG8gdGhlIEZVTkNUSU9OIGl0c2VsZiwgYW5kIHJlbW92ZSBpdCB3aGVuIHRoZSB0d2VlbiBjb21wbGV0ZXMgb3IgZ2V0cyBraWxsZWQuIFRoaXMgZ2l2ZXMgdXMgYSB3YXkgdG8gaGF2ZSBtdWx0aXBsZSBTY3JvbGxUcmlnZ2VycyB1c2UgYSBjZW50cmFsIGZ1bmN0aW9uIGZvciBhbnkgZ2l2ZW4gc2Nyb2xsZXIgYW5kIHNlZSBpZiB0aGVyZSdzIGEgc2Nyb2xsIHR3ZWVuIHJ1bm5pbmcgKHdoaWNoIHdvdWxkIGFmZmVjdCBpZi9ob3cgdGhpbmdzIGdldCB1cGRhdGVkKVxuX2dldFR3ZWVuQ3JlYXRvciA9IGZ1bmN0aW9uIF9nZXRUd2VlbkNyZWF0b3Ioc2Nyb2xsZXIsIGRpcmVjdGlvbikge1xuICB2YXIgZ2V0U2Nyb2xsID0gX2dldFNjcm9sbEZ1bmMoc2Nyb2xsZXIsIGRpcmVjdGlvbiksXG4gICAgICBwcm9wID0gXCJfc2Nyb2xsXCIgKyBkaXJlY3Rpb24ucDIsXG4gICAgICAvLyBhZGQgYSB0d2VlbmFibGUgcHJvcGVydHkgdG8gdGhlIHNjcm9sbGVyIHRoYXQncyBhIGdldHRlci9zZXR0ZXIgZnVuY3Rpb24sIGxpa2UgX3Njcm9sbFRvcCBvciBfc2Nyb2xsTGVmdC4gVGhpcyB3YXksIGlmIHNvbWVvbmUgZG9lcyBnc2FwLmtpbGxUd2VlbnNPZihzY3JvbGxlcikgaXQnbGwga2lsbCB0aGUgc2Nyb2xsIHR3ZWVuLlxuICBsYXN0U2Nyb2xsMSxcbiAgICAgIGxhc3RTY3JvbGwyLFxuICAgICAgZ2V0VHdlZW4gPSBmdW5jdGlvbiBnZXRUd2VlbihzY3JvbGxUbywgdmFycywgaW5pdGlhbFZhbHVlLCBjaGFuZ2UxLCBjaGFuZ2UyKSB7XG4gICAgdmFyIHR3ZWVuID0gZ2V0VHdlZW4udHdlZW4sXG4gICAgICAgIG9uQ29tcGxldGUgPSB2YXJzLm9uQ29tcGxldGUsXG4gICAgICAgIG1vZGlmaWVycyA9IHt9O1xuICAgIGluaXRpYWxWYWx1ZSA9IGluaXRpYWxWYWx1ZSB8fCBnZXRTY3JvbGwoKTtcbiAgICBjaGFuZ2UyID0gY2hhbmdlMSAmJiBjaGFuZ2UyIHx8IDA7IC8vIGlmIGNoYW5nZTEgaXMgMCwgd2Ugc2V0IHRoYXQgdG8gdGhlIGRpZmZlcmVuY2UgYW5kIGlnbm9yZSBjaGFuZ2UyLiBPdGhlcndpc2UsIHRoZXJlIHdvdWxkIGJlIGEgY29tcG91bmQgZWZmZWN0LlxuXG4gICAgY2hhbmdlMSA9IGNoYW5nZTEgfHwgc2Nyb2xsVG8gLSBpbml0aWFsVmFsdWU7XG4gICAgdHdlZW4gJiYgdHdlZW4ua2lsbCgpO1xuICAgIGxhc3RTY3JvbGwxID0gTWF0aC5yb3VuZChpbml0aWFsVmFsdWUpO1xuICAgIHZhcnNbcHJvcF0gPSBzY3JvbGxUbztcbiAgICB2YXJzLm1vZGlmaWVycyA9IG1vZGlmaWVycztcblxuICAgIG1vZGlmaWVyc1twcm9wXSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgdmFsdWUgPSBNYXRoLnJvdW5kKGdldFNjcm9sbCgpKTsgLy8gcm91bmQgYmVjYXVzZSBpbiBzb21lIFt2ZXJ5IHVuY29tbW9uXSBXaW5kb3dzIGVudmlyb25tZW50cywgaXQgY2FuIGdldCByZXBvcnRlZCB3aXRoIGRlY2ltYWxzIGV2ZW4gdGhvdWdoIGl0IHdhcyBzZXQgd2l0aG91dC5cblxuICAgICAgaWYgKHZhbHVlICE9PSBsYXN0U2Nyb2xsMSAmJiB2YWx1ZSAhPT0gbGFzdFNjcm9sbDIgJiYgTWF0aC5hYnModmFsdWUgLSBsYXN0U2Nyb2xsMSkgPiAzICYmIE1hdGguYWJzKHZhbHVlIC0gbGFzdFNjcm9sbDIpID4gMykge1xuICAgICAgICAvLyBpZiB0aGUgdXNlciBzY3JvbGxzLCBraWxsIHRoZSB0d2Vlbi4gaU9TIFNhZmFyaSBpbnRlcm1pdHRlbnRseSBtaXNyZXBvcnRzIHRoZSBzY3JvbGwgcG9zaXRpb24sIGl0IG1heSBiZSB0aGUgbW9zdCByZWNlbnRseS1zZXQgb25lIG9yIHRoZSBvbmUgYmVmb3JlIHRoYXQhIFdoZW4gU2FmYXJpIGlzIHpvb21lZCAoQ01ELSspLCBpdCBvZnRlbiBtaXNyZXBvcnRzIGFzIDEgcGl4ZWwgb2ZmIHRvbyEgU28gaWYgd2Ugc2V0IHRoZSBzY3JvbGwgcG9zaXRpb24gdG8gMTI1LCBmb3IgZXhhbXBsZSwgaXQnbGwgYWN0dWFsbHkgcmVwb3J0IGl0IGFzIDEyNC5cbiAgICAgICAgdHdlZW4ua2lsbCgpO1xuICAgICAgICBnZXRUd2Vlbi50d2VlbiA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZSA9IGluaXRpYWxWYWx1ZSArIGNoYW5nZTEgKiB0d2Vlbi5yYXRpbyArIGNoYW5nZTIgKiB0d2Vlbi5yYXRpbyAqIHR3ZWVuLnJhdGlvO1xuICAgICAgfVxuXG4gICAgICBsYXN0U2Nyb2xsMiA9IGxhc3RTY3JvbGwxO1xuICAgICAgcmV0dXJuIGxhc3RTY3JvbGwxID0gTWF0aC5yb3VuZCh2YWx1ZSk7XG4gICAgfTtcblxuICAgIHZhcnMub25Db21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGdldFR3ZWVuLnR3ZWVuID0gMDtcbiAgICAgIG9uQ29tcGxldGUgJiYgb25Db21wbGV0ZS5jYWxsKHR3ZWVuKTtcbiAgICB9O1xuXG4gICAgdHdlZW4gPSBnZXRUd2Vlbi50d2VlbiA9IGdzYXAudG8oc2Nyb2xsZXIsIHZhcnMpO1xuICAgIHJldHVybiB0d2VlbjtcbiAgfTtcblxuICBzY3JvbGxlcltwcm9wXSA9IGdldFNjcm9sbDtcblxuICBnZXRTY3JvbGwud2hlZWxIYW5kbGVyID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBnZXRUd2Vlbi50d2VlbiAmJiBnZXRUd2Vlbi50d2Vlbi5raWxsKCkgJiYgKGdldFR3ZWVuLnR3ZWVuID0gMCk7XG4gIH07XG5cbiAgX2FkZExpc3RlbmVyKHNjcm9sbGVyLCBcIndoZWVsXCIsIGdldFNjcm9sbC53aGVlbEhhbmRsZXIpOyAvLyBXaW5kb3dzIG1hY2hpbmVzIGhhbmRsZSBtb3VzZXdoZWVsIHNjcm9sbGluZyBpbiBjaHVua3MgKGxpa2UgXCIzIGxpbmVzIHBlciBzY3JvbGxcIikgbWVhbmluZyB0aGUgdHlwaWNhbCBzdHJhdGVneSBmb3IgY2FuY2VsbGluZyB0aGUgc2Nyb2xsIGlzbid0IGFzIHNlbnNpdGl2ZS4gSXQncyBtdWNoIG1vcmUgbGlrZWx5IHRvIG1hdGNoIG9uZSBvZiB0aGUgcHJldmlvdXMgMiBzY3JvbGwgZXZlbnQgcG9zaXRpb25zLiBTbyB3ZSBraWxsIGFueSBzbmFwcGluZyBhcyBzb29uIGFzIHRoZXJlJ3MgYSB3aGVlbCBldmVudC5cblxuXG4gIHJldHVybiBnZXRUd2Vlbjtcbn07XG5cbmV4cG9ydCB2YXIgU2Nyb2xsVHJpZ2dlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFNjcm9sbFRyaWdnZXIodmFycywgYW5pbWF0aW9uKSB7XG4gICAgX2NvcmVJbml0dGVkIHx8IFNjcm9sbFRyaWdnZXIucmVnaXN0ZXIoZ3NhcCkgfHwgY29uc29sZS53YXJuKFwiUGxlYXNlIGdzYXAucmVnaXN0ZXJQbHVnaW4oU2Nyb2xsVHJpZ2dlcilcIik7XG4gICAgdGhpcy5pbml0KHZhcnMsIGFuaW1hdGlvbik7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gU2Nyb2xsVHJpZ2dlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmluaXQgPSBmdW5jdGlvbiBpbml0KHZhcnMsIGFuaW1hdGlvbikge1xuICAgIHRoaXMucHJvZ3Jlc3MgPSB0aGlzLnN0YXJ0ID0gMDtcbiAgICB0aGlzLnZhcnMgJiYgdGhpcy5raWxsKHRydWUsIHRydWUpOyAvLyBpbiBjYXNlIGl0J3MgYmVpbmcgaW5pdHRlZCBhZ2FpblxuXG4gICAgaWYgKCFfZW5hYmxlZCkge1xuICAgICAgdGhpcy51cGRhdGUgPSB0aGlzLnJlZnJlc2ggPSB0aGlzLmtpbGwgPSBfcGFzc1Rocm91Z2g7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFycyA9IF9zZXREZWZhdWx0cyhfaXNTdHJpbmcodmFycykgfHwgX2lzTnVtYmVyKHZhcnMpIHx8IHZhcnMubm9kZVR5cGUgPyB7XG4gICAgICB0cmlnZ2VyOiB2YXJzXG4gICAgfSA6IHZhcnMsIF9kZWZhdWx0cyk7XG5cbiAgICB2YXIgX3ZhcnMgPSB2YXJzLFxuICAgICAgICBvblVwZGF0ZSA9IF92YXJzLm9uVXBkYXRlLFxuICAgICAgICB0b2dnbGVDbGFzcyA9IF92YXJzLnRvZ2dsZUNsYXNzLFxuICAgICAgICBpZCA9IF92YXJzLmlkLFxuICAgICAgICBvblRvZ2dsZSA9IF92YXJzLm9uVG9nZ2xlLFxuICAgICAgICBvblJlZnJlc2ggPSBfdmFycy5vblJlZnJlc2gsXG4gICAgICAgIHNjcnViID0gX3ZhcnMuc2NydWIsXG4gICAgICAgIHRyaWdnZXIgPSBfdmFycy50cmlnZ2VyLFxuICAgICAgICBwaW4gPSBfdmFycy5waW4sXG4gICAgICAgIHBpblNwYWNpbmcgPSBfdmFycy5waW5TcGFjaW5nLFxuICAgICAgICBpbnZhbGlkYXRlT25SZWZyZXNoID0gX3ZhcnMuaW52YWxpZGF0ZU9uUmVmcmVzaCxcbiAgICAgICAgYW50aWNpcGF0ZVBpbiA9IF92YXJzLmFudGljaXBhdGVQaW4sXG4gICAgICAgIG9uU2NydWJDb21wbGV0ZSA9IF92YXJzLm9uU2NydWJDb21wbGV0ZSxcbiAgICAgICAgb25TbmFwQ29tcGxldGUgPSBfdmFycy5vblNuYXBDb21wbGV0ZSxcbiAgICAgICAgb25jZSA9IF92YXJzLm9uY2UsXG4gICAgICAgIHNuYXAgPSBfdmFycy5zbmFwLFxuICAgICAgICBwaW5SZXBhcmVudCA9IF92YXJzLnBpblJlcGFyZW50LFxuICAgICAgICBwaW5TcGFjZXIgPSBfdmFycy5waW5TcGFjZXIsXG4gICAgICAgIGNvbnRhaW5lckFuaW1hdGlvbiA9IF92YXJzLmNvbnRhaW5lckFuaW1hdGlvbixcbiAgICAgICAgZmFzdFNjcm9sbEVuZCA9IF92YXJzLmZhc3RTY3JvbGxFbmQsXG4gICAgICAgIHByZXZlbnRPdmVybGFwcyA9IF92YXJzLnByZXZlbnRPdmVybGFwcyxcbiAgICAgICAgZGlyZWN0aW9uID0gdmFycy5ob3Jpem9udGFsIHx8IHZhcnMuY29udGFpbmVyQW5pbWF0aW9uICYmIHZhcnMuaG9yaXpvbnRhbCAhPT0gZmFsc2UgPyBfaG9yaXpvbnRhbCA6IF92ZXJ0aWNhbCxcbiAgICAgICAgaXNUb2dnbGUgPSAhc2NydWIgJiYgc2NydWIgIT09IDAsXG4gICAgICAgIHNjcm9sbGVyID0gX2dldFRhcmdldCh2YXJzLnNjcm9sbGVyIHx8IF93aW4pLFxuICAgICAgICBzY3JvbGxlckNhY2hlID0gZ3NhcC5jb3JlLmdldENhY2hlKHNjcm9sbGVyKSxcbiAgICAgICAgaXNWaWV3cG9ydCA9IF9pc1ZpZXdwb3J0KHNjcm9sbGVyKSxcbiAgICAgICAgdXNlRml4ZWRQb3NpdGlvbiA9IChcInBpblR5cGVcIiBpbiB2YXJzID8gdmFycy5waW5UeXBlIDogX2dldFByb3h5UHJvcChzY3JvbGxlciwgXCJwaW5UeXBlXCIpIHx8IGlzVmlld3BvcnQgJiYgXCJmaXhlZFwiKSA9PT0gXCJmaXhlZFwiLFxuICAgICAgICBjYWxsYmFja3MgPSBbdmFycy5vbkVudGVyLCB2YXJzLm9uTGVhdmUsIHZhcnMub25FbnRlckJhY2ssIHZhcnMub25MZWF2ZUJhY2tdLFxuICAgICAgICB0b2dnbGVBY3Rpb25zID0gaXNUb2dnbGUgJiYgdmFycy50b2dnbGVBY3Rpb25zLnNwbGl0KFwiIFwiKSxcbiAgICAgICAgbWFya2VycyA9IFwibWFya2Vyc1wiIGluIHZhcnMgPyB2YXJzLm1hcmtlcnMgOiBfZGVmYXVsdHMubWFya2VycyxcbiAgICAgICAgYm9yZGVyV2lkdGggPSBpc1ZpZXdwb3J0ID8gMCA6IHBhcnNlRmxvYXQoX2dldENvbXB1dGVkU3R5bGUoc2Nyb2xsZXIpW1wiYm9yZGVyXCIgKyBkaXJlY3Rpb24ucDIgKyBfV2lkdGhdKSB8fCAwLFxuICAgICAgICBzZWxmID0gdGhpcyxcbiAgICAgICAgb25SZWZyZXNoSW5pdCA9IHZhcnMub25SZWZyZXNoSW5pdCAmJiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdmFycy5vblJlZnJlc2hJbml0KHNlbGYpO1xuICAgIH0sXG4gICAgICAgIGdldFNjcm9sbGVyU2l6ZSA9IF9nZXRTaXplRnVuYyhzY3JvbGxlciwgaXNWaWV3cG9ydCwgZGlyZWN0aW9uKSxcbiAgICAgICAgZ2V0U2Nyb2xsZXJPZmZzZXRzID0gX2dldE9mZnNldHNGdW5jKHNjcm9sbGVyLCBpc1ZpZXdwb3J0KSxcbiAgICAgICAgbGFzdFNuYXAgPSAwLFxuICAgICAgICBsYXN0UmVmcmVzaCA9IDAsXG4gICAgICAgIHNjcm9sbEZ1bmMgPSBfZ2V0U2Nyb2xsRnVuYyhzY3JvbGxlciwgZGlyZWN0aW9uKSxcbiAgICAgICAgdHdlZW5UbyxcbiAgICAgICAgcGluQ2FjaGUsXG4gICAgICAgIHNuYXBGdW5jLFxuICAgICAgICBzY3JvbGwxLFxuICAgICAgICBzY3JvbGwyLFxuICAgICAgICBzdGFydCxcbiAgICAgICAgZW5kLFxuICAgICAgICBtYXJrZXJTdGFydCxcbiAgICAgICAgbWFya2VyRW5kLFxuICAgICAgICBtYXJrZXJTdGFydFRyaWdnZXIsXG4gICAgICAgIG1hcmtlckVuZFRyaWdnZXIsXG4gICAgICAgIG1hcmtlclZhcnMsXG4gICAgICAgIGNoYW5nZSxcbiAgICAgICAgcGluT3JpZ2luYWxTdGF0ZSxcbiAgICAgICAgcGluQWN0aXZlU3RhdGUsXG4gICAgICAgIHBpblN0YXRlLFxuICAgICAgICBzcGFjZXIsXG4gICAgICAgIG9mZnNldCxcbiAgICAgICAgcGluR2V0dGVyLFxuICAgICAgICBwaW5TZXR0ZXIsXG4gICAgICAgIHBpblN0YXJ0LFxuICAgICAgICBwaW5DaGFuZ2UsXG4gICAgICAgIHNwYWNpbmdTdGFydCxcbiAgICAgICAgc3BhY2VyU3RhdGUsXG4gICAgICAgIG1hcmtlclN0YXJ0U2V0dGVyLFxuICAgICAgICBtYXJrZXJFbmRTZXR0ZXIsXG4gICAgICAgIGNzLFxuICAgICAgICBzbmFwMSxcbiAgICAgICAgc25hcDIsXG4gICAgICAgIHNjcnViVHdlZW4sXG4gICAgICAgIHNjcnViU21vb3RoLFxuICAgICAgICBzbmFwRHVyQ2xhbXAsXG4gICAgICAgIHNuYXBEZWxheWVkQ2FsbCxcbiAgICAgICAgcHJldlByb2dyZXNzLFxuICAgICAgICBwcmV2U2Nyb2xsLFxuICAgICAgICBwcmV2QW5pbVByb2dyZXNzLFxuICAgICAgICBjYU1hcmtlclNldHRlcixcbiAgICAgICAgY3VzdG9tUmV2ZXJ0UmV0dXJuO1xuXG4gICAgX2NvbnRleHQoc2VsZik7XG5cbiAgICBzZWxmLl9kaXIgPSBkaXJlY3Rpb247XG4gICAgYW50aWNpcGF0ZVBpbiAqPSA0NTtcbiAgICBzZWxmLnNjcm9sbGVyID0gc2Nyb2xsZXI7XG4gICAgc2VsZi5zY3JvbGwgPSBjb250YWluZXJBbmltYXRpb24gPyBjb250YWluZXJBbmltYXRpb24udGltZS5iaW5kKGNvbnRhaW5lckFuaW1hdGlvbikgOiBzY3JvbGxGdW5jO1xuICAgIHNjcm9sbDEgPSBzY3JvbGxGdW5jKCk7XG4gICAgc2VsZi52YXJzID0gdmFycztcbiAgICBhbmltYXRpb24gPSBhbmltYXRpb24gfHwgdmFycy5hbmltYXRpb247XG5cbiAgICBpZiAoXCJyZWZyZXNoUHJpb3JpdHlcIiBpbiB2YXJzKSB7XG4gICAgICBfc29ydCA9IDE7XG4gICAgICB2YXJzLnJlZnJlc2hQcmlvcml0eSA9PT0gLTk5OTkgJiYgKF9wcmltYXJ5ID0gc2VsZik7IC8vIHVzZWQgYnkgU2Nyb2xsU21vb3RoZXJcbiAgICB9XG5cbiAgICBzY3JvbGxlckNhY2hlLnR3ZWVuU2Nyb2xsID0gc2Nyb2xsZXJDYWNoZS50d2VlblNjcm9sbCB8fCB7XG4gICAgICB0b3A6IF9nZXRUd2VlbkNyZWF0b3Ioc2Nyb2xsZXIsIF92ZXJ0aWNhbCksXG4gICAgICBsZWZ0OiBfZ2V0VHdlZW5DcmVhdG9yKHNjcm9sbGVyLCBfaG9yaXpvbnRhbClcbiAgICB9O1xuICAgIHNlbGYudHdlZW5UbyA9IHR3ZWVuVG8gPSBzY3JvbGxlckNhY2hlLnR3ZWVuU2Nyb2xsW2RpcmVjdGlvbi5wXTtcblxuICAgIHNlbGYuc2NydWJEdXJhdGlvbiA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgc2NydWJTbW9vdGggPSBfaXNOdW1iZXIodmFsdWUpICYmIHZhbHVlO1xuXG4gICAgICBpZiAoIXNjcnViU21vb3RoKSB7XG4gICAgICAgIHNjcnViVHdlZW4gJiYgc2NydWJUd2Vlbi5wcm9ncmVzcygxKS5raWxsKCk7XG4gICAgICAgIHNjcnViVHdlZW4gPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2NydWJUd2VlbiA/IHNjcnViVHdlZW4uZHVyYXRpb24odmFsdWUpIDogc2NydWJUd2VlbiA9IGdzYXAudG8oYW5pbWF0aW9uLCB7XG4gICAgICAgICAgZWFzZTogXCJleHBvXCIsXG4gICAgICAgICAgdG90YWxQcm9ncmVzczogXCIrPTAuMDAxXCIsXG4gICAgICAgICAgZHVyYXRpb246IHNjcnViU21vb3RoLFxuICAgICAgICAgIHBhdXNlZDogdHJ1ZSxcbiAgICAgICAgICBvbkNvbXBsZXRlOiBmdW5jdGlvbiBvbkNvbXBsZXRlKCkge1xuICAgICAgICAgICAgcmV0dXJuIG9uU2NydWJDb21wbGV0ZSAmJiBvblNjcnViQ29tcGxldGUoc2VsZik7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgaWYgKGFuaW1hdGlvbikge1xuICAgICAgYW5pbWF0aW9uLnZhcnMubGF6eSA9IGZhbHNlO1xuICAgICAgYW5pbWF0aW9uLl9pbml0dGVkIHx8IGFuaW1hdGlvbi52YXJzLmltbWVkaWF0ZVJlbmRlciAhPT0gZmFsc2UgJiYgdmFycy5pbW1lZGlhdGVSZW5kZXIgIT09IGZhbHNlICYmIGFuaW1hdGlvbi5yZW5kZXIoMCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICBzZWxmLmFuaW1hdGlvbiA9IGFuaW1hdGlvbi5wYXVzZSgpO1xuICAgICAgYW5pbWF0aW9uLnNjcm9sbFRyaWdnZXIgPSBzZWxmO1xuICAgICAgc2VsZi5zY3J1YkR1cmF0aW9uKHNjcnViKTtcbiAgICAgIHNuYXAxID0gMDtcbiAgICAgIGlkIHx8IChpZCA9IGFuaW1hdGlvbi52YXJzLmlkKTtcbiAgICB9XG5cbiAgICBfdHJpZ2dlcnMucHVzaChzZWxmKTtcblxuICAgIGlmIChzbmFwKSB7XG4gICAgICAvLyBUT0RPOiBwb3RlbnRpYWwgaWRlYTogdXNlIGxlZ2l0aW1hdGUgQ1NTIHNjcm9sbCBzbmFwcGluZyBieSBwdXNoaW5nIGludmlzaWJsZSBlbGVtZW50cyBpbnRvIHRoZSBET00gdGhhdCBzZXJ2ZSBhcyBzbmFwIHBvc2l0aW9ucywgYW5kIHRvZ2dsZSB0aGUgZG9jdW1lbnQuc2Nyb2xsaW5nRWxlbWVudC5zdHlsZS5zY3JvbGxTbmFwVHlwZSBvblRvZ2dsZS4gU2VlIGh0dHBzOi8vY29kZXBlbi5pby9HcmVlblNvY2svcGVuL0pqTHJnV00gZm9yIGEgcXVpY2sgcHJvb2Ygb2YgY29uY2VwdC5cbiAgICAgIGlmICghX2lzT2JqZWN0KHNuYXApIHx8IHNuYXAucHVzaCkge1xuICAgICAgICBzbmFwID0ge1xuICAgICAgICAgIHNuYXBUbzogc25hcFxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBcInNjcm9sbEJlaGF2aW9yXCIgaW4gX2JvZHkuc3R5bGUgJiYgZ3NhcC5zZXQoaXNWaWV3cG9ydCA/IFtfYm9keSwgX2RvY0VsXSA6IHNjcm9sbGVyLCB7XG4gICAgICAgIHNjcm9sbEJlaGF2aW9yOiBcImF1dG9cIlxuICAgICAgfSk7IC8vIHNtb290aCBzY3JvbGxpbmcgZG9lc24ndCB3b3JrIHdpdGggc25hcC5cblxuICAgICAgc25hcEZ1bmMgPSBfaXNGdW5jdGlvbihzbmFwLnNuYXBUbykgPyBzbmFwLnNuYXBUbyA6IHNuYXAuc25hcFRvID09PSBcImxhYmVsc1wiID8gX2dldENsb3Nlc3RMYWJlbChhbmltYXRpb24pIDogc25hcC5zbmFwVG8gPT09IFwibGFiZWxzRGlyZWN0aW9uYWxcIiA/IF9nZXRMYWJlbEF0RGlyZWN0aW9uKGFuaW1hdGlvbikgOiBzbmFwLmRpcmVjdGlvbmFsICE9PSBmYWxzZSA/IGZ1bmN0aW9uICh2YWx1ZSwgc3QpIHtcbiAgICAgICAgcmV0dXJuIF9zbmFwRGlyZWN0aW9uYWwoc25hcC5zbmFwVG8pKHZhbHVlLCBfZ2V0VGltZSgpIC0gbGFzdFJlZnJlc2ggPCA1MDAgPyAwIDogc3QuZGlyZWN0aW9uKTtcbiAgICAgIH0gOiBnc2FwLnV0aWxzLnNuYXAoc25hcC5zbmFwVG8pO1xuICAgICAgc25hcER1ckNsYW1wID0gc25hcC5kdXJhdGlvbiB8fCB7XG4gICAgICAgIG1pbjogMC4xLFxuICAgICAgICBtYXg6IDJcbiAgICAgIH07XG4gICAgICBzbmFwRHVyQ2xhbXAgPSBfaXNPYmplY3Qoc25hcER1ckNsYW1wKSA/IF9jbGFtcChzbmFwRHVyQ2xhbXAubWluLCBzbmFwRHVyQ2xhbXAubWF4KSA6IF9jbGFtcChzbmFwRHVyQ2xhbXAsIHNuYXBEdXJDbGFtcCk7XG4gICAgICBzbmFwRGVsYXllZENhbGwgPSBnc2FwLmRlbGF5ZWRDYWxsKHNuYXAuZGVsYXkgfHwgc2NydWJTbW9vdGggLyAyIHx8IDAuMSwgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc2Nyb2xsID0gc2Nyb2xsRnVuYygpLFxuICAgICAgICAgICAgcmVmcmVzaGVkUmVjZW50bHkgPSBfZ2V0VGltZSgpIC0gbGFzdFJlZnJlc2ggPCA1MDAsXG4gICAgICAgICAgICB0d2VlbiA9IHR3ZWVuVG8udHdlZW47XG5cbiAgICAgICAgaWYgKChyZWZyZXNoZWRSZWNlbnRseSB8fCBNYXRoLmFicyhzZWxmLmdldFZlbG9jaXR5KCkpIDwgMTApICYmICF0d2VlbiAmJiAhX3BvaW50ZXJJc0Rvd24gJiYgbGFzdFNuYXAgIT09IHNjcm9sbCkge1xuICAgICAgICAgIHZhciBwcm9ncmVzcyA9IChzY3JvbGwgLSBzdGFydCkgLyBjaGFuZ2UsXG4gICAgICAgICAgICAgIHRvdGFsUHJvZ3Jlc3MgPSBhbmltYXRpb24gJiYgIWlzVG9nZ2xlID8gYW5pbWF0aW9uLnRvdGFsUHJvZ3Jlc3MoKSA6IHByb2dyZXNzLFxuICAgICAgICAgICAgICB2ZWxvY2l0eSA9IHJlZnJlc2hlZFJlY2VudGx5ID8gMCA6ICh0b3RhbFByb2dyZXNzIC0gc25hcDIpIC8gKF9nZXRUaW1lKCkgLSBfdGltZTIpICogMTAwMCB8fCAwLFxuICAgICAgICAgICAgICBjaGFuZ2UxID0gZ3NhcC51dGlscy5jbGFtcCgtcHJvZ3Jlc3MsIDEgLSBwcm9ncmVzcywgX2Ficyh2ZWxvY2l0eSAvIDIpICogdmVsb2NpdHkgLyAwLjE4NSksXG4gICAgICAgICAgICAgIG5hdHVyYWxFbmQgPSBwcm9ncmVzcyArIChzbmFwLmluZXJ0aWEgPT09IGZhbHNlID8gMCA6IGNoYW5nZTEpLFxuICAgICAgICAgICAgICBlbmRWYWx1ZSA9IF9jbGFtcCgwLCAxLCBzbmFwRnVuYyhuYXR1cmFsRW5kLCBzZWxmKSksXG4gICAgICAgICAgICAgIGVuZFNjcm9sbCA9IE1hdGgucm91bmQoc3RhcnQgKyBlbmRWYWx1ZSAqIGNoYW5nZSksXG4gICAgICAgICAgICAgIF9zbmFwID0gc25hcCxcbiAgICAgICAgICAgICAgb25TdGFydCA9IF9zbmFwLm9uU3RhcnQsXG4gICAgICAgICAgICAgIF9vbkludGVycnVwdCA9IF9zbmFwLm9uSW50ZXJydXB0LFxuICAgICAgICAgICAgICBfb25Db21wbGV0ZSA9IF9zbmFwLm9uQ29tcGxldGU7XG5cbiAgICAgICAgICBpZiAoc2Nyb2xsIDw9IGVuZCAmJiBzY3JvbGwgPj0gc3RhcnQgJiYgZW5kU2Nyb2xsICE9PSBzY3JvbGwpIHtcbiAgICAgICAgICAgIGlmICh0d2VlbiAmJiAhdHdlZW4uX2luaXR0ZWQgJiYgdHdlZW4uZGF0YSA8PSBfYWJzKGVuZFNjcm9sbCAtIHNjcm9sbCkpIHtcbiAgICAgICAgICAgICAgLy8gdGhlcmUncyBhbiBvdmVybGFwcGluZyBzbmFwISBTbyB3ZSBtdXN0IGZpZ3VyZSBvdXQgd2hpY2ggb25lIGlzIGNsb3NlciBhbmQgbGV0IHRoYXQgdHdlZW4gbGl2ZS5cbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoc25hcC5pbmVydGlhID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICBjaGFuZ2UxID0gZW5kVmFsdWUgLSBwcm9ncmVzcztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdHdlZW5UbyhlbmRTY3JvbGwsIHtcbiAgICAgICAgICAgICAgZHVyYXRpb246IHNuYXBEdXJDbGFtcChfYWJzKE1hdGgubWF4KF9hYnMobmF0dXJhbEVuZCAtIHRvdGFsUHJvZ3Jlc3MpLCBfYWJzKGVuZFZhbHVlIC0gdG90YWxQcm9ncmVzcykpICogMC4xODUgLyB2ZWxvY2l0eSAvIDAuMDUgfHwgMCkpLFxuICAgICAgICAgICAgICBlYXNlOiBzbmFwLmVhc2UgfHwgXCJwb3dlcjNcIixcbiAgICAgICAgICAgICAgZGF0YTogX2FicyhlbmRTY3JvbGwgLSBzY3JvbGwpLFxuICAgICAgICAgICAgICAvLyByZWNvcmQgdGhlIGRpc3RhbmNlIHNvIHRoYXQgaWYgYW5vdGhlciBzbmFwIHR3ZWVuIG9jY3VycyAoY29uZmxpY3QpIHdlIGNhbiBwcmlvcml0aXplIHRoZSBjbG9zZXN0IHNuYXAuXG4gICAgICAgICAgICAgIG9uSW50ZXJydXB0OiBmdW5jdGlvbiBvbkludGVycnVwdCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc25hcERlbGF5ZWRDYWxsLnJlc3RhcnQodHJ1ZSkgJiYgX29uSW50ZXJydXB0ICYmIF9vbkludGVycnVwdChzZWxmKTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgb25Db21wbGV0ZTogZnVuY3Rpb24gb25Db21wbGV0ZSgpIHtcbiAgICAgICAgICAgICAgICBzZWxmLnVwZGF0ZSgpO1xuICAgICAgICAgICAgICAgIGxhc3RTbmFwID0gc2Nyb2xsRnVuYygpO1xuICAgICAgICAgICAgICAgIHNuYXAxID0gc25hcDIgPSBhbmltYXRpb24gJiYgIWlzVG9nZ2xlID8gYW5pbWF0aW9uLnRvdGFsUHJvZ3Jlc3MoKSA6IHNlbGYucHJvZ3Jlc3M7XG4gICAgICAgICAgICAgICAgb25TbmFwQ29tcGxldGUgJiYgb25TbmFwQ29tcGxldGUoc2VsZik7XG4gICAgICAgICAgICAgICAgX29uQ29tcGxldGUgJiYgX29uQ29tcGxldGUoc2VsZik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHNjcm9sbCwgY2hhbmdlMSAqIGNoYW5nZSwgZW5kU2Nyb2xsIC0gc2Nyb2xsIC0gY2hhbmdlMSAqIGNoYW5nZSk7XG4gICAgICAgICAgICBvblN0YXJ0ICYmIG9uU3RhcnQoc2VsZiwgdHdlZW5Uby50d2Vlbik7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHNlbGYuaXNBY3RpdmUgJiYgbGFzdFNuYXAgIT09IHNjcm9sbCkge1xuICAgICAgICAgIHNuYXBEZWxheWVkQ2FsbC5yZXN0YXJ0KHRydWUpO1xuICAgICAgICB9XG4gICAgICB9KS5wYXVzZSgpO1xuICAgIH1cblxuICAgIGlkICYmIChfaWRzW2lkXSA9IHNlbGYpO1xuICAgIHRyaWdnZXIgPSBzZWxmLnRyaWdnZXIgPSBfZ2V0VGFyZ2V0KHRyaWdnZXIgfHwgcGluKTsgLy8gaWYgYSB0cmlnZ2VyIGhhcyBzb21lIGtpbmQgb2Ygc2Nyb2xsLXJlbGF0ZWQgZWZmZWN0IGFwcGxpZWQgdGhhdCBjb3VsZCBjb250YW1pbmF0ZSB0aGUgXCJ5XCIgb3IgXCJ4XCIgcG9zaXRpb24gKGxpa2UgYSBTY3JvbGxTbW9vdGhlciBlZmZlY3QpLCB3ZSBuZWVkZWQgYSB3YXkgdG8gdGVtcG9yYXJpbHkgcmV2ZXJ0IGl0LCBzbyB3ZSB1c2UgdGhlIHN0UmV2ZXJ0IHByb3BlcnR5IG9mIHRoZSBnc0NhY2hlLiBJdCBjYW4gcmV0dXJuIGFub3RoZXIgZnVuY3Rpb24gdGhhdCB3ZSdsbCBjYWxsIGF0IHRoZSBlbmQgc28gaXQgY2FuIHJldHVybiB0byBpdHMgbm9ybWFsIHN0YXRlLlxuXG4gICAgY3VzdG9tUmV2ZXJ0UmV0dXJuID0gdHJpZ2dlciAmJiB0cmlnZ2VyLl9nc2FwICYmIHRyaWdnZXIuX2dzYXAuc3RSZXZlcnQ7XG4gICAgY3VzdG9tUmV2ZXJ0UmV0dXJuICYmIChjdXN0b21SZXZlcnRSZXR1cm4gPSBjdXN0b21SZXZlcnRSZXR1cm4oc2VsZikpO1xuICAgIHBpbiA9IHBpbiA9PT0gdHJ1ZSA/IHRyaWdnZXIgOiBfZ2V0VGFyZ2V0KHBpbik7XG4gICAgX2lzU3RyaW5nKHRvZ2dsZUNsYXNzKSAmJiAodG9nZ2xlQ2xhc3MgPSB7XG4gICAgICB0YXJnZXRzOiB0cmlnZ2VyLFxuICAgICAgY2xhc3NOYW1lOiB0b2dnbGVDbGFzc1xuICAgIH0pO1xuXG4gICAgaWYgKHBpbikge1xuICAgICAgcGluU3BhY2luZyA9PT0gZmFsc2UgfHwgcGluU3BhY2luZyA9PT0gX21hcmdpbiB8fCAocGluU3BhY2luZyA9ICFwaW5TcGFjaW5nICYmIF9nZXRDb21wdXRlZFN0eWxlKHBpbi5wYXJlbnROb2RlKS5kaXNwbGF5ID09PSBcImZsZXhcIiA/IGZhbHNlIDogX3BhZGRpbmcpOyAvLyBpZiB0aGUgcGFyZW50IGlzIGRpc3BsYXk6IGZsZXgsIGRvbid0IGFwcGx5IHBpblNwYWNpbmcgYnkgZGVmYXVsdC5cblxuICAgICAgc2VsZi5waW4gPSBwaW47XG4gICAgICB2YXJzLmZvcmNlM0QgIT09IGZhbHNlICYmIGdzYXAuc2V0KHBpbiwge1xuICAgICAgICBmb3JjZTNEOiB0cnVlXG4gICAgICB9KTtcbiAgICAgIHBpbkNhY2hlID0gZ3NhcC5jb3JlLmdldENhY2hlKHBpbik7XG5cbiAgICAgIGlmICghcGluQ2FjaGUuc3BhY2VyKSB7XG4gICAgICAgIC8vIHJlY29yZCB0aGUgc3BhY2VyIGFuZCBwaW5PcmlnaW5hbFN0YXRlIG9uIHRoZSBjYWNoZSBpbiBjYXNlIHNvbWVvbmUgdHJpZXMgcGlubmluZyB0aGUgc2FtZSBlbGVtZW50IHdpdGggTVVMVElQTEUgU2Nyb2xsVHJpZ2dlcnMgLSB3ZSBkb24ndCB3YW50IHRvIGhhdmUgbXVsdGlwbGUgc3BhY2VycyBvciByZWNvcmQgdGhlIFwib3JpZ2luYWxcIiBwaW4gc3RhdGUgYWZ0ZXIgaXQgaGFzIGFscmVhZHkgYmVlbiBhZmZlY3RlZCBieSBhbm90aGVyIFNjcm9sbFRyaWdnZXIuXG4gICAgICAgIGlmIChwaW5TcGFjZXIpIHtcbiAgICAgICAgICBwaW5TcGFjZXIgPSBfZ2V0VGFyZ2V0KHBpblNwYWNlcik7XG4gICAgICAgICAgcGluU3BhY2VyICYmICFwaW5TcGFjZXIubm9kZVR5cGUgJiYgKHBpblNwYWNlciA9IHBpblNwYWNlci5jdXJyZW50IHx8IHBpblNwYWNlci5uYXRpdmVFbGVtZW50KTsgLy8gZm9yIFJlYWN0ICYgQW5ndWxhclxuXG4gICAgICAgICAgcGluQ2FjaGUuc3BhY2VySXNOYXRpdmUgPSAhIXBpblNwYWNlcjtcbiAgICAgICAgICBwaW5TcGFjZXIgJiYgKHBpbkNhY2hlLnNwYWNlclN0YXRlID0gX2dldFN0YXRlKHBpblNwYWNlcikpO1xuICAgICAgICB9XG5cbiAgICAgICAgcGluQ2FjaGUuc3BhY2VyID0gc3BhY2VyID0gcGluU3BhY2VyIHx8IF9kb2MuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgc3BhY2VyLmNsYXNzTGlzdC5hZGQoXCJwaW4tc3BhY2VyXCIpO1xuICAgICAgICBpZCAmJiBzcGFjZXIuY2xhc3NMaXN0LmFkZChcInBpbi1zcGFjZXItXCIgKyBpZCk7XG4gICAgICAgIHBpbkNhY2hlLnBpblN0YXRlID0gcGluT3JpZ2luYWxTdGF0ZSA9IF9nZXRTdGF0ZShwaW4pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGluT3JpZ2luYWxTdGF0ZSA9IHBpbkNhY2hlLnBpblN0YXRlO1xuICAgICAgfVxuXG4gICAgICBzZWxmLnNwYWNlciA9IHNwYWNlciA9IHBpbkNhY2hlLnNwYWNlcjtcbiAgICAgIGNzID0gX2dldENvbXB1dGVkU3R5bGUocGluKTtcbiAgICAgIHNwYWNpbmdTdGFydCA9IGNzW3BpblNwYWNpbmcgKyBkaXJlY3Rpb24ub3MyXTtcbiAgICAgIHBpbkdldHRlciA9IGdzYXAuZ2V0UHJvcGVydHkocGluKTtcbiAgICAgIHBpblNldHRlciA9IGdzYXAucXVpY2tTZXR0ZXIocGluLCBkaXJlY3Rpb24uYSwgX3B4KTsgLy8gcGluLmZpcnN0Q2hpbGQgJiYgIV9tYXhTY3JvbGwocGluLCBkaXJlY3Rpb24pICYmIChwaW4uc3R5bGUub3ZlcmZsb3cgPSBcImhpZGRlblwiKTsgLy8gcHJvdGVjdHMgZnJvbSBjb2xsYXBzaW5nIG1hcmdpbnMsIGJ1dCBjYW4gaGF2ZSB1bmludGVuZGVkIGNvbnNlcXVlbmNlcyBhcyBkZW1vbnN0cmF0ZWQgaGVyZTogaHR0cHM6Ly9jb2RlcGVuLmlvL0dyZWVuU29jay9wZW4vMWU0MmM3YTczYmZhNDA5ZDJjZjFlMTg0ZTdhNDI0OGQgc28gaXQgd2FzIHJlbW92ZWQgaW4gZmF2b3Igb2YganVzdCB0ZWxsaW5nIHBlb3BsZSB0byBzZXQgdXAgdGhlaXIgQ1NTIHRvIGF2b2lkIHRoZSBjb2xsYXBzaW5nIG1hcmdpbnMgKG92ZXJmbG93OiBoaWRkZW4gfCBhdXRvIGlzIGp1c3Qgb25lIG9wdGlvbi4gQW5vdGhlciBpcyBib3JkZXItdG9wOiAxcHggc29saWQgdHJhbnNwYXJlbnQpLlxuXG4gICAgICBfc3dhcFBpbkluKHBpbiwgc3BhY2VyLCBjcyk7XG5cbiAgICAgIHBpblN0YXRlID0gX2dldFN0YXRlKHBpbik7XG4gICAgfVxuXG4gICAgaWYgKG1hcmtlcnMpIHtcbiAgICAgIG1hcmtlclZhcnMgPSBfaXNPYmplY3QobWFya2VycykgPyBfc2V0RGVmYXVsdHMobWFya2VycywgX21hcmtlckRlZmF1bHRzKSA6IF9tYXJrZXJEZWZhdWx0cztcbiAgICAgIG1hcmtlclN0YXJ0VHJpZ2dlciA9IF9jcmVhdGVNYXJrZXIoXCJzY3JvbGxlci1zdGFydFwiLCBpZCwgc2Nyb2xsZXIsIGRpcmVjdGlvbiwgbWFya2VyVmFycywgMCk7XG4gICAgICBtYXJrZXJFbmRUcmlnZ2VyID0gX2NyZWF0ZU1hcmtlcihcInNjcm9sbGVyLWVuZFwiLCBpZCwgc2Nyb2xsZXIsIGRpcmVjdGlvbiwgbWFya2VyVmFycywgMCwgbWFya2VyU3RhcnRUcmlnZ2VyKTtcbiAgICAgIG9mZnNldCA9IG1hcmtlclN0YXJ0VHJpZ2dlcltcIm9mZnNldFwiICsgZGlyZWN0aW9uLm9wLmQyXTtcblxuICAgICAgdmFyIGNvbnRlbnQgPSBfZ2V0VGFyZ2V0KF9nZXRQcm94eVByb3Aoc2Nyb2xsZXIsIFwiY29udGVudFwiKSB8fCBzY3JvbGxlcik7XG5cbiAgICAgIG1hcmtlclN0YXJ0ID0gdGhpcy5tYXJrZXJTdGFydCA9IF9jcmVhdGVNYXJrZXIoXCJzdGFydFwiLCBpZCwgY29udGVudCwgZGlyZWN0aW9uLCBtYXJrZXJWYXJzLCBvZmZzZXQsIDAsIGNvbnRhaW5lckFuaW1hdGlvbik7XG4gICAgICBtYXJrZXJFbmQgPSB0aGlzLm1hcmtlckVuZCA9IF9jcmVhdGVNYXJrZXIoXCJlbmRcIiwgaWQsIGNvbnRlbnQsIGRpcmVjdGlvbiwgbWFya2VyVmFycywgb2Zmc2V0LCAwLCBjb250YWluZXJBbmltYXRpb24pO1xuICAgICAgY29udGFpbmVyQW5pbWF0aW9uICYmIChjYU1hcmtlclNldHRlciA9IGdzYXAucXVpY2tTZXR0ZXIoW21hcmtlclN0YXJ0LCBtYXJrZXJFbmRdLCBkaXJlY3Rpb24uYSwgX3B4KSk7XG5cbiAgICAgIGlmICghdXNlRml4ZWRQb3NpdGlvbiAmJiAhKF9wcm94aWVzLmxlbmd0aCAmJiBfZ2V0UHJveHlQcm9wKHNjcm9sbGVyLCBcImZpeGVkTWFya2Vyc1wiKSA9PT0gdHJ1ZSkpIHtcbiAgICAgICAgX21ha2VQb3NpdGlvbmFibGUoaXNWaWV3cG9ydCA/IF9ib2R5IDogc2Nyb2xsZXIpO1xuXG4gICAgICAgIGdzYXAuc2V0KFttYXJrZXJTdGFydFRyaWdnZXIsIG1hcmtlckVuZFRyaWdnZXJdLCB7XG4gICAgICAgICAgZm9yY2UzRDogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgbWFya2VyU3RhcnRTZXR0ZXIgPSBnc2FwLnF1aWNrU2V0dGVyKG1hcmtlclN0YXJ0VHJpZ2dlciwgZGlyZWN0aW9uLmEsIF9weCk7XG4gICAgICAgIG1hcmtlckVuZFNldHRlciA9IGdzYXAucXVpY2tTZXR0ZXIobWFya2VyRW5kVHJpZ2dlciwgZGlyZWN0aW9uLmEsIF9weCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNvbnRhaW5lckFuaW1hdGlvbikge1xuICAgICAgdmFyIG9sZE9uVXBkYXRlID0gY29udGFpbmVyQW5pbWF0aW9uLnZhcnMub25VcGRhdGUsXG4gICAgICAgICAgb2xkUGFyYW1zID0gY29udGFpbmVyQW5pbWF0aW9uLnZhcnMub25VcGRhdGVQYXJhbXM7XG4gICAgICBjb250YWluZXJBbmltYXRpb24uZXZlbnRDYWxsYmFjayhcIm9uVXBkYXRlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2VsZi51cGRhdGUoMCwgMCwgMSk7XG4gICAgICAgIG9sZE9uVXBkYXRlICYmIG9sZE9uVXBkYXRlLmFwcGx5KG9sZFBhcmFtcyB8fCBbXSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBzZWxmLnByZXZpb3VzID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90cmlnZ2Vyc1tfdHJpZ2dlcnMuaW5kZXhPZihzZWxmKSAtIDFdO1xuICAgIH07XG5cbiAgICBzZWxmLm5leHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RyaWdnZXJzW190cmlnZ2Vycy5pbmRleE9mKHNlbGYpICsgMV07XG4gICAgfTtcblxuICAgIHNlbGYucmV2ZXJ0ID0gZnVuY3Rpb24gKHJldmVydCwgdGVtcCkge1xuICAgICAgaWYgKCF0ZW1wKSB7XG4gICAgICAgIHJldHVybiBzZWxmLmtpbGwodHJ1ZSk7XG4gICAgICB9IC8vIGZvciBjb21wYXRpYmlsaXR5IHdpdGggZ3NhcC5jb250ZXh0KCkgYW5kIGdzYXAubWF0Y2hNZWRpYSgpIHdoaWNoIGNhbGwgcmV2ZXJ0KClcblxuXG4gICAgICB2YXIgciA9IHJldmVydCAhPT0gZmFsc2UgfHwgIXNlbGYuZW5hYmxlZCxcbiAgICAgICAgICBwcmV2UmVmcmVzaGluZyA9IF9yZWZyZXNoaW5nO1xuXG4gICAgICBpZiAociAhPT0gc2VsZi5pc1JldmVydGVkKSB7XG4gICAgICAgIGlmIChyKSB7XG4gICAgICAgICAgaWYgKCFzZWxmLnNjcm9sbC5yZWMgJiYgKF9yZWZyZXNoaW5nIHx8IF9yZWZyZXNoaW5nQWxsKSkge1xuICAgICAgICAgICAgc2VsZi5zY3JvbGwucmVjID0gc2Nyb2xsRnVuYygpO1xuICAgICAgICAgICAgX3JlZnJlc2hpbmdBbGwgJiYgc2Nyb2xsRnVuYygwKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBwcmV2U2Nyb2xsID0gTWF0aC5tYXgoc2Nyb2xsRnVuYygpLCBzZWxmLnNjcm9sbC5yZWMgfHwgMCk7IC8vIHJlY29yZCB0aGUgc2Nyb2xsIHNvIHdlIGNhbiByZXZlcnQgbGF0ZXIgKHJlcG9zaXRpb25pbmcvcGlubmluZyB0aGluZ3MgY2FuIGFmZmVjdCBzY3JvbGwgcG9zaXRpb24pLiBJbiB0aGUgc3RhdGljIHJlZnJlc2goKSBtZXRob2QsIHdlIGZpcnN0IHJlY29yZCBhbGwgdGhlIHNjcm9sbCBwb3NpdGlvbnMgYXMgYSByZWZlcmVuY2UuXG5cbiAgICAgICAgICBwcmV2UHJvZ3Jlc3MgPSBzZWxmLnByb2dyZXNzO1xuICAgICAgICAgIHByZXZBbmltUHJvZ3Jlc3MgPSBhbmltYXRpb24gJiYgYW5pbWF0aW9uLnByb2dyZXNzKCk7XG4gICAgICAgIH1cblxuICAgICAgICBtYXJrZXJTdGFydCAmJiBbbWFya2VyU3RhcnQsIG1hcmtlckVuZCwgbWFya2VyU3RhcnRUcmlnZ2VyLCBtYXJrZXJFbmRUcmlnZ2VyXS5mb3JFYWNoKGZ1bmN0aW9uIChtKSB7XG4gICAgICAgICAgcmV0dXJuIG0uc3R5bGUuZGlzcGxheSA9IHIgPyBcIm5vbmVcIiA6IFwiYmxvY2tcIjtcbiAgICAgICAgfSk7XG4gICAgICAgIHIgJiYgKF9yZWZyZXNoaW5nID0gMSk7XG4gICAgICAgIHNlbGYudXBkYXRlKHIpOyAvLyBtYWtlIHN1cmUgdGhlIHBpbiBpcyBiYWNrIGluIGl0cyBvcmlnaW5hbCBwb3NpdGlvbiBzbyB0aGF0IGFsbCB0aGUgbWVhc3VyZW1lbnRzIGFyZSBjb3JyZWN0LlxuXG4gICAgICAgIF9yZWZyZXNoaW5nID0gcHJldlJlZnJlc2hpbmc7XG4gICAgICAgIHBpbiAmJiAociA/IF9zd2FwUGluT3V0KHBpbiwgc3BhY2VyLCBwaW5PcmlnaW5hbFN0YXRlKSA6ICghcGluUmVwYXJlbnQgfHwgIXNlbGYuaXNBY3RpdmUpICYmIF9zd2FwUGluSW4ocGluLCBzcGFjZXIsIF9nZXRDb21wdXRlZFN0eWxlKHBpbiksIHNwYWNlclN0YXRlKSk7XG4gICAgICAgIHNlbGYuaXNSZXZlcnRlZCA9IHI7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHNlbGYucmVmcmVzaCA9IGZ1bmN0aW9uIChzb2Z0LCBmb3JjZSkge1xuICAgICAgaWYgKChfcmVmcmVzaGluZyB8fCAhc2VsZi5lbmFibGVkKSAmJiAhZm9yY2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAocGluICYmIHNvZnQgJiYgX2xhc3RTY3JvbGxUaW1lKSB7XG4gICAgICAgIF9hZGRMaXN0ZW5lcihTY3JvbGxUcmlnZ2VyLCBcInNjcm9sbEVuZFwiLCBfc29mdFJlZnJlc2gpO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgIV9yZWZyZXNoaW5nQWxsICYmIG9uUmVmcmVzaEluaXQgJiYgb25SZWZyZXNoSW5pdChzZWxmKTtcbiAgICAgIF9yZWZyZXNoaW5nID0gMTtcbiAgICAgIGxhc3RSZWZyZXNoID0gX2dldFRpbWUoKTtcblxuICAgICAgaWYgKHR3ZWVuVG8udHdlZW4pIHtcbiAgICAgICAgdHdlZW5Uby50d2Vlbi5raWxsKCk7XG4gICAgICAgIHR3ZWVuVG8udHdlZW4gPSAwO1xuICAgICAgfVxuXG4gICAgICBzY3J1YlR3ZWVuICYmIHNjcnViVHdlZW4ucGF1c2UoKTtcbiAgICAgIGludmFsaWRhdGVPblJlZnJlc2ggJiYgYW5pbWF0aW9uICYmIGFuaW1hdGlvbi5yZXZlcnQoKS5pbnZhbGlkYXRlKCk7XG4gICAgICBzZWxmLmlzUmV2ZXJ0ZWQgfHwgc2VsZi5yZXZlcnQodHJ1ZSwgdHJ1ZSk7XG5cbiAgICAgIHZhciBzaXplID0gZ2V0U2Nyb2xsZXJTaXplKCksXG4gICAgICAgICAgc2Nyb2xsZXJCb3VuZHMgPSBnZXRTY3JvbGxlck9mZnNldHMoKSxcbiAgICAgICAgICBtYXggPSBjb250YWluZXJBbmltYXRpb24gPyBjb250YWluZXJBbmltYXRpb24uZHVyYXRpb24oKSA6IF9tYXhTY3JvbGwoc2Nyb2xsZXIsIGRpcmVjdGlvbiksXG4gICAgICAgICAgb2Zmc2V0ID0gMCxcbiAgICAgICAgICBvdGhlclBpbk9mZnNldCA9IDAsXG4gICAgICAgICAgcGFyc2VkRW5kID0gdmFycy5lbmQsXG4gICAgICAgICAgcGFyc2VkRW5kVHJpZ2dlciA9IHZhcnMuZW5kVHJpZ2dlciB8fCB0cmlnZ2VyLFxuICAgICAgICAgIHBhcnNlZFN0YXJ0ID0gdmFycy5zdGFydCB8fCAodmFycy5zdGFydCA9PT0gMCB8fCAhdHJpZ2dlciA/IDAgOiBwaW4gPyBcIjAgMFwiIDogXCIwIDEwMCVcIiksXG4gICAgICAgICAgcGlubmVkQ29udGFpbmVyID0gc2VsZi5waW5uZWRDb250YWluZXIgPSB2YXJzLnBpbm5lZENvbnRhaW5lciAmJiBfZ2V0VGFyZ2V0KHZhcnMucGlubmVkQ29udGFpbmVyKSxcbiAgICAgICAgICB0cmlnZ2VySW5kZXggPSB0cmlnZ2VyICYmIE1hdGgubWF4KDAsIF90cmlnZ2Vycy5pbmRleE9mKHNlbGYpKSB8fCAwLFxuICAgICAgICAgIGkgPSB0cmlnZ2VySW5kZXgsXG4gICAgICAgICAgY3MsXG4gICAgICAgICAgYm91bmRzLFxuICAgICAgICAgIHNjcm9sbCxcbiAgICAgICAgICBpc1ZlcnRpY2FsLFxuICAgICAgICAgIG92ZXJyaWRlLFxuICAgICAgICAgIGN1clRyaWdnZXIsXG4gICAgICAgICAgY3VyUGluLFxuICAgICAgICAgIG9wcG9zaXRlU2Nyb2xsLFxuICAgICAgICAgIGluaXR0ZWQsXG4gICAgICAgICAgcmV2ZXJ0ZWRQaW5zO1xuXG4gICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIC8vIHVzZXIgbWlnaHQgdHJ5IHRvIHBpbiB0aGUgc2FtZSBlbGVtZW50IG1vcmUgdGhhbiBvbmNlLCBzbyB3ZSBtdXN0IGZpbmQgYW55IHByaW9yIHRyaWdnZXJzIHdpdGggdGhlIHNhbWUgcGluLCByZXZlcnQgdGhlbSwgYW5kIGRldGVybWluZSBob3cgbG9uZyB0aGV5J3JlIHBpbm5pbmcgc28gdGhhdCB3ZSBjYW4gb2Zmc2V0IHRoaW5ncyBhcHByb3ByaWF0ZWx5LiBNYWtlIHN1cmUgd2UgcmV2ZXJ0IGZyb20gbGFzdCB0byBmaXJzdCBzbyB0aGF0IHRoaW5ncyBcInJld2luZFwiIHByb3Blcmx5LlxuICAgICAgICBjdXJUcmlnZ2VyID0gX3RyaWdnZXJzW2ldO1xuICAgICAgICBjdXJUcmlnZ2VyLmVuZCB8fCBjdXJUcmlnZ2VyLnJlZnJlc2goMCwgMSkgfHwgKF9yZWZyZXNoaW5nID0gMSk7IC8vIGlmIGl0J3MgYSB0aW1lbGluZS1iYXNlZCB0cmlnZ2VyIHRoYXQgaGFzbid0IGJlZW4gZnVsbHkgaW5pdGlhbGl6ZWQgeWV0IGJlY2F1c2UgaXQncyB3YWl0aW5nIGZvciAxIHRpY2ssIGp1c3QgZm9yY2UgdGhlIHJlZnJlc2goKSBoZXJlLCBvdGhlcndpc2UgaWYgaXQgY29udGFpbnMgYSBwaW4gdGhhdCdzIHN1cHBvc2VkIHRvIGFmZmVjdCBvdGhlciBTY3JvbGxUcmlnZ2VycyBmdXJ0aGVyIGRvd24gdGhlIHBhZ2UsIHRoZXkgd29uJ3QgYmUgYWRqdXN0ZWQgcHJvcGVybHkuXG5cbiAgICAgICAgY3VyUGluID0gY3VyVHJpZ2dlci5waW47XG5cbiAgICAgICAgaWYgKGN1clBpbiAmJiAoY3VyUGluID09PSB0cmlnZ2VyIHx8IGN1clBpbiA9PT0gcGluKSAmJiAhY3VyVHJpZ2dlci5pc1JldmVydGVkKSB7XG4gICAgICAgICAgcmV2ZXJ0ZWRQaW5zIHx8IChyZXZlcnRlZFBpbnMgPSBbXSk7XG4gICAgICAgICAgcmV2ZXJ0ZWRQaW5zLnVuc2hpZnQoY3VyVHJpZ2dlcik7IC8vIHdlJ2xsIHJldmVydCBmcm9tIGZpcnN0IHRvIGxhc3QgdG8gbWFrZSBzdXJlIHRoaW5ncyByZWFjaCB0aGVpciBlbmQgc3RhdGUgcHJvcGVybHlcblxuICAgICAgICAgIGN1clRyaWdnZXIucmV2ZXJ0KHRydWUsIHRydWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGN1clRyaWdnZXIgIT09IF90cmlnZ2Vyc1tpXSkge1xuICAgICAgICAgIC8vIGluIGNhc2UgaXQgZ290IHJlbW92ZWQuXG4gICAgICAgICAgdHJpZ2dlckluZGV4LS07XG4gICAgICAgICAgaS0tO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIF9pc0Z1bmN0aW9uKHBhcnNlZFN0YXJ0KSAmJiAocGFyc2VkU3RhcnQgPSBwYXJzZWRTdGFydChzZWxmKSk7XG4gICAgICBzdGFydCA9IF9wYXJzZVBvc2l0aW9uKHBhcnNlZFN0YXJ0LCB0cmlnZ2VyLCBzaXplLCBkaXJlY3Rpb24sIHNjcm9sbEZ1bmMoKSwgbWFya2VyU3RhcnQsIG1hcmtlclN0YXJ0VHJpZ2dlciwgc2VsZiwgc2Nyb2xsZXJCb3VuZHMsIGJvcmRlcldpZHRoLCB1c2VGaXhlZFBvc2l0aW9uLCBtYXgsIGNvbnRhaW5lckFuaW1hdGlvbikgfHwgKHBpbiA/IC0wLjAwMSA6IDApO1xuICAgICAgX2lzRnVuY3Rpb24ocGFyc2VkRW5kKSAmJiAocGFyc2VkRW5kID0gcGFyc2VkRW5kKHNlbGYpKTtcblxuICAgICAgaWYgKF9pc1N0cmluZyhwYXJzZWRFbmQpICYmICFwYXJzZWRFbmQuaW5kZXhPZihcIis9XCIpKSB7XG4gICAgICAgIGlmICh+cGFyc2VkRW5kLmluZGV4T2YoXCIgXCIpKSB7XG4gICAgICAgICAgcGFyc2VkRW5kID0gKF9pc1N0cmluZyhwYXJzZWRTdGFydCkgPyBwYXJzZWRTdGFydC5zcGxpdChcIiBcIilbMF0gOiBcIlwiKSArIHBhcnNlZEVuZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvZmZzZXQgPSBfb2Zmc2V0VG9QeChwYXJzZWRFbmQuc3Vic3RyKDIpLCBzaXplKTtcbiAgICAgICAgICBwYXJzZWRFbmQgPSBfaXNTdHJpbmcocGFyc2VkU3RhcnQpID8gcGFyc2VkU3RhcnQgOiBzdGFydCArIG9mZnNldDsgLy8gX3BhcnNlUG9zaXRpb24gd29uJ3QgZmFjdG9yIGluIHRoZSBvZmZzZXQgaWYgdGhlIHN0YXJ0IGlzIGEgbnVtYmVyLCBzbyBkbyBpdCBoZXJlLlxuXG4gICAgICAgICAgcGFyc2VkRW5kVHJpZ2dlciA9IHRyaWdnZXI7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZW5kID0gTWF0aC5tYXgoc3RhcnQsIF9wYXJzZVBvc2l0aW9uKHBhcnNlZEVuZCB8fCAocGFyc2VkRW5kVHJpZ2dlciA/IFwiMTAwJSAwXCIgOiBtYXgpLCBwYXJzZWRFbmRUcmlnZ2VyLCBzaXplLCBkaXJlY3Rpb24sIHNjcm9sbEZ1bmMoKSArIG9mZnNldCwgbWFya2VyRW5kLCBtYXJrZXJFbmRUcmlnZ2VyLCBzZWxmLCBzY3JvbGxlckJvdW5kcywgYm9yZGVyV2lkdGgsIHVzZUZpeGVkUG9zaXRpb24sIG1heCwgY29udGFpbmVyQW5pbWF0aW9uKSkgfHwgLTAuMDAxO1xuICAgICAgY2hhbmdlID0gZW5kIC0gc3RhcnQgfHwgKHN0YXJ0IC09IDAuMDEpICYmIDAuMDAxO1xuICAgICAgb2Zmc2V0ID0gMDtcbiAgICAgIGkgPSB0cmlnZ2VySW5kZXg7XG5cbiAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgY3VyVHJpZ2dlciA9IF90cmlnZ2Vyc1tpXTtcbiAgICAgICAgY3VyUGluID0gY3VyVHJpZ2dlci5waW47XG5cbiAgICAgICAgaWYgKGN1clBpbiAmJiBjdXJUcmlnZ2VyLnN0YXJ0IC0gY3VyVHJpZ2dlci5fcGluUHVzaCA8IHN0YXJ0ICYmICFjb250YWluZXJBbmltYXRpb24gJiYgY3VyVHJpZ2dlci5lbmQgPiAwKSB7XG4gICAgICAgICAgY3MgPSBjdXJUcmlnZ2VyLmVuZCAtIGN1clRyaWdnZXIuc3RhcnQ7XG5cbiAgICAgICAgICBpZiAoKGN1clBpbiA9PT0gdHJpZ2dlciB8fCBjdXJQaW4gPT09IHBpbm5lZENvbnRhaW5lcikgJiYgIV9pc051bWJlcihwYXJzZWRTdGFydCkpIHtcbiAgICAgICAgICAgIC8vIG51bWVyaWMgc3RhcnQgdmFsdWVzIHNob3VsZG4ndCBiZSBvZmZzZXQgYXQgYWxsIC0gdHJlYXQgdGhlbSBhcyBhYnNvbHV0ZVxuICAgICAgICAgICAgb2Zmc2V0ICs9IGNzICogKDEgLSBjdXJUcmlnZ2VyLnByb2dyZXNzKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjdXJQaW4gPT09IHBpbiAmJiAob3RoZXJQaW5PZmZzZXQgKz0gY3MpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHN0YXJ0ICs9IG9mZnNldDtcbiAgICAgIGVuZCArPSBvZmZzZXQ7XG4gICAgICBzZWxmLl9waW5QdXNoID0gb3RoZXJQaW5PZmZzZXQ7XG5cbiAgICAgIGlmIChtYXJrZXJTdGFydCAmJiBvZmZzZXQpIHtcbiAgICAgICAgLy8gb2Zmc2V0IHRoZSBtYXJrZXJzIGlmIG5lY2Vzc2FyeVxuICAgICAgICBjcyA9IHt9O1xuICAgICAgICBjc1tkaXJlY3Rpb24uYV0gPSBcIis9XCIgKyBvZmZzZXQ7XG4gICAgICAgIHBpbm5lZENvbnRhaW5lciAmJiAoY3NbZGlyZWN0aW9uLnBdID0gXCItPVwiICsgc2Nyb2xsRnVuYygpKTtcbiAgICAgICAgZ3NhcC5zZXQoW21hcmtlclN0YXJ0LCBtYXJrZXJFbmRdLCBjcyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChwaW4pIHtcbiAgICAgICAgY3MgPSBfZ2V0Q29tcHV0ZWRTdHlsZShwaW4pO1xuICAgICAgICBpc1ZlcnRpY2FsID0gZGlyZWN0aW9uID09PSBfdmVydGljYWw7XG4gICAgICAgIHNjcm9sbCA9IHNjcm9sbEZ1bmMoKTsgLy8gcmVjYWxjdWxhdGUgYmVjYXVzZSB0aGUgdHJpZ2dlcnMgY2FuIGFmZmVjdCB0aGUgc2Nyb2xsXG5cbiAgICAgICAgcGluU3RhcnQgPSBwYXJzZUZsb2F0KHBpbkdldHRlcihkaXJlY3Rpb24uYSkpICsgb3RoZXJQaW5PZmZzZXQ7XG4gICAgICAgICFtYXggJiYgZW5kID4gMSAmJiAoKGlzVmlld3BvcnQgPyBfYm9keSA6IHNjcm9sbGVyKS5zdHlsZVtcIm92ZXJmbG93LVwiICsgZGlyZWN0aW9uLmFdID0gXCJzY3JvbGxcIik7IC8vIG1ha2VzIHN1cmUgdGhlIHNjcm9sbGVyIGhhcyBhIHNjcm9sbGJhciwgb3RoZXJ3aXNlIGlmIHNvbWV0aGluZyBoYXMgd2lkdGg6IDEwMCUsIGZvciBleGFtcGxlLCBpdCB3b3VsZCBiZSB0b28gYmlnIChleGNsdWRlIHRoZSBzY3JvbGxiYXIpLiBTZWUgaHR0cHM6Ly9ncmVlbnNvY2suY29tL2ZvcnVtcy90b3BpYy8yNTE4Mi1zY3JvbGx0cmlnZ2VyLXdpZHRoLW9mLXBhZ2UtaW5jcmVhc2Utd2hlcmUtbWFya2Vycy1hcmUtc2V0LXRvLWZhbHNlL1xuXG4gICAgICAgIF9zd2FwUGluSW4ocGluLCBzcGFjZXIsIGNzKTtcblxuICAgICAgICBwaW5TdGF0ZSA9IF9nZXRTdGF0ZShwaW4pOyAvLyB0cmFuc2Zvcm1zIHdpbGwgaW50ZXJmZXJlIHdpdGggdGhlIHRvcC9sZWZ0L3JpZ2h0L2JvdHRvbSBwbGFjZW1lbnQsIHNvIHJlbW92ZSB0aGVtIHRlbXBvcmFyaWx5LiBnZXRCb3VuZGluZ0NsaWVudFJlY3QoKSBmYWN0b3JzIGluIHRyYW5zZm9ybXMuXG5cbiAgICAgICAgYm91bmRzID0gX2dldEJvdW5kcyhwaW4sIHRydWUpO1xuICAgICAgICBvcHBvc2l0ZVNjcm9sbCA9IHVzZUZpeGVkUG9zaXRpb24gJiYgX2dldFNjcm9sbEZ1bmMoc2Nyb2xsZXIsIGlzVmVydGljYWwgPyBfaG9yaXpvbnRhbCA6IF92ZXJ0aWNhbCkoKTtcblxuICAgICAgICBpZiAocGluU3BhY2luZykge1xuICAgICAgICAgIHNwYWNlclN0YXRlID0gW3BpblNwYWNpbmcgKyBkaXJlY3Rpb24ub3MyLCBjaGFuZ2UgKyBvdGhlclBpbk9mZnNldCArIF9weF07XG4gICAgICAgICAgc3BhY2VyU3RhdGUudCA9IHNwYWNlcjtcbiAgICAgICAgICBpID0gcGluU3BhY2luZyA9PT0gX3BhZGRpbmcgPyBfZ2V0U2l6ZShwaW4sIGRpcmVjdGlvbikgKyBjaGFuZ2UgKyBvdGhlclBpbk9mZnNldCA6IDA7XG4gICAgICAgICAgaSAmJiBzcGFjZXJTdGF0ZS5wdXNoKGRpcmVjdGlvbi5kLCBpICsgX3B4KTsgLy8gZm9yIGJveC1zaXppbmc6IGJvcmRlci1ib3ggKG11c3QgaW5jbHVkZSBwYWRkaW5nKS5cblxuICAgICAgICAgIF9zZXRTdGF0ZShzcGFjZXJTdGF0ZSk7XG5cbiAgICAgICAgICB1c2VGaXhlZFBvc2l0aW9uICYmIHNjcm9sbEZ1bmMocHJldlNjcm9sbCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXNlRml4ZWRQb3NpdGlvbikge1xuICAgICAgICAgIG92ZXJyaWRlID0ge1xuICAgICAgICAgICAgdG9wOiBib3VuZHMudG9wICsgKGlzVmVydGljYWwgPyBzY3JvbGwgLSBzdGFydCA6IG9wcG9zaXRlU2Nyb2xsKSArIF9weCxcbiAgICAgICAgICAgIGxlZnQ6IGJvdW5kcy5sZWZ0ICsgKGlzVmVydGljYWwgPyBvcHBvc2l0ZVNjcm9sbCA6IHNjcm9sbCAtIHN0YXJ0KSArIF9weCxcbiAgICAgICAgICAgIGJveFNpemluZzogXCJib3JkZXItYm94XCIsXG4gICAgICAgICAgICBwb3NpdGlvbjogXCJmaXhlZFwiXG4gICAgICAgICAgfTtcbiAgICAgICAgICBvdmVycmlkZVtfd2lkdGhdID0gb3ZlcnJpZGVbXCJtYXhcIiArIF9XaWR0aF0gPSBNYXRoLmNlaWwoYm91bmRzLndpZHRoKSArIF9weDtcbiAgICAgICAgICBvdmVycmlkZVtfaGVpZ2h0XSA9IG92ZXJyaWRlW1wibWF4XCIgKyBfSGVpZ2h0XSA9IE1hdGguY2VpbChib3VuZHMuaGVpZ2h0KSArIF9weDtcbiAgICAgICAgICBvdmVycmlkZVtfbWFyZ2luXSA9IG92ZXJyaWRlW19tYXJnaW4gKyBfVG9wXSA9IG92ZXJyaWRlW19tYXJnaW4gKyBfUmlnaHRdID0gb3ZlcnJpZGVbX21hcmdpbiArIF9Cb3R0b21dID0gb3ZlcnJpZGVbX21hcmdpbiArIF9MZWZ0XSA9IFwiMFwiO1xuICAgICAgICAgIG92ZXJyaWRlW19wYWRkaW5nXSA9IGNzW19wYWRkaW5nXTtcbiAgICAgICAgICBvdmVycmlkZVtfcGFkZGluZyArIF9Ub3BdID0gY3NbX3BhZGRpbmcgKyBfVG9wXTtcbiAgICAgICAgICBvdmVycmlkZVtfcGFkZGluZyArIF9SaWdodF0gPSBjc1tfcGFkZGluZyArIF9SaWdodF07XG4gICAgICAgICAgb3ZlcnJpZGVbX3BhZGRpbmcgKyBfQm90dG9tXSA9IGNzW19wYWRkaW5nICsgX0JvdHRvbV07XG4gICAgICAgICAgb3ZlcnJpZGVbX3BhZGRpbmcgKyBfTGVmdF0gPSBjc1tfcGFkZGluZyArIF9MZWZ0XTtcbiAgICAgICAgICBwaW5BY3RpdmVTdGF0ZSA9IF9jb3B5U3RhdGUocGluT3JpZ2luYWxTdGF0ZSwgb3ZlcnJpZGUsIHBpblJlcGFyZW50KTtcbiAgICAgICAgICBfcmVmcmVzaGluZ0FsbCAmJiBzY3JvbGxGdW5jKDApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGFuaW1hdGlvbikge1xuICAgICAgICAgIC8vIHRoZSBhbmltYXRpb24gbWlnaHQgYmUgYWZmZWN0aW5nIHRoZSB0cmFuc2Zvcm0sIHNvIHdlIG11c3QganVtcCB0byB0aGUgZW5kLCBjaGVjayB0aGUgdmFsdWUsIGFuZCBjb21wZW5zYXRlIGFjY29yZGluZ2x5LiBPdGhlcndpc2UsIHdoZW4gaXQgYmVjb21lcyB1bnBpbm5lZCwgdGhlIHBpblNldHRlcigpIHdpbGwgZ2V0IHNldCB0byBhIHZhbHVlIHRoYXQgZG9lc24ndCBpbmNsdWRlIHdoYXRldmVyIHRoZSBhbmltYXRpb24gZGlkLlxuICAgICAgICAgIGluaXR0ZWQgPSBhbmltYXRpb24uX2luaXR0ZWQ7IC8vIGlmIG5vdCwgd2UgbXVzdCBpbnZhbGlkYXRlKCkgYWZ0ZXIgdGhpcyBzdGVwLCBvdGhlcndpc2UgaXQgY291bGQgbG9jayBpbiBzdGFydGluZyB2YWx1ZXMgcHJlbWF0dXJlbHkuXG5cbiAgICAgICAgICBfc3VwcHJlc3NPdmVyd3JpdGVzKDEpO1xuXG4gICAgICAgICAgYW5pbWF0aW9uLnJlbmRlcihhbmltYXRpb24uZHVyYXRpb24oKSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgcGluQ2hhbmdlID0gcGluR2V0dGVyKGRpcmVjdGlvbi5hKSAtIHBpblN0YXJ0ICsgY2hhbmdlICsgb3RoZXJQaW5PZmZzZXQ7XG4gICAgICAgICAgY2hhbmdlICE9PSBwaW5DaGFuZ2UgJiYgdXNlRml4ZWRQb3NpdGlvbiAmJiBwaW5BY3RpdmVTdGF0ZS5zcGxpY2UocGluQWN0aXZlU3RhdGUubGVuZ3RoIC0gMiwgMik7IC8vIHRyYW5zZm9ybSBpcyB0aGUgbGFzdCBwcm9wZXJ0eS92YWx1ZSBzZXQgaW4gdGhlIHN0YXRlIEFycmF5LiBTaW5jZSB0aGUgYW5pbWF0aW9uIGlzIGNvbnRyb2xsaW5nIHRoYXQsIHdlIHNob3VsZCBvbWl0IGl0LlxuXG4gICAgICAgICAgYW5pbWF0aW9uLnJlbmRlcigwLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgICBpbml0dGVkIHx8IGFuaW1hdGlvbi5pbnZhbGlkYXRlKCk7XG5cbiAgICAgICAgICBfc3VwcHJlc3NPdmVyd3JpdGVzKDApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBpbkNoYW5nZSA9IGNoYW5nZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0cmlnZ2VyICYmIHNjcm9sbEZ1bmMoKSAmJiAhY29udGFpbmVyQW5pbWF0aW9uKSB7XG4gICAgICAgIC8vIGl0IG1heSBiZSBJTlNJREUgYSBwaW5uZWQgZWxlbWVudCwgc28gd2FsayB1cCB0aGUgdHJlZSBhbmQgbG9vayBmb3IgYW55IGVsZW1lbnRzIHdpdGggX3Bpbk9mZnNldCB0byBjb21wZW5zYXRlIGJlY2F1c2UgYW55dGhpbmcgd2l0aCBwaW5TcGFjaW5nIHRoYXQncyBhbHJlYWR5IHNjcm9sbGVkIHdvdWxkIHRocm93IG9mZiB0aGUgbWVhc3VyZW1lbnRzIGluIGdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gICAgICAgIGJvdW5kcyA9IHRyaWdnZXIucGFyZW50Tm9kZTtcblxuICAgICAgICB3aGlsZSAoYm91bmRzICYmIGJvdW5kcyAhPT0gX2JvZHkpIHtcbiAgICAgICAgICBpZiAoYm91bmRzLl9waW5PZmZzZXQpIHtcbiAgICAgICAgICAgIHN0YXJ0IC09IGJvdW5kcy5fcGluT2Zmc2V0O1xuICAgICAgICAgICAgZW5kIC09IGJvdW5kcy5fcGluT2Zmc2V0O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJvdW5kcyA9IGJvdW5kcy5wYXJlbnROb2RlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldmVydGVkUGlucyAmJiByZXZlcnRlZFBpbnMuZm9yRWFjaChmdW5jdGlvbiAodCkge1xuICAgICAgICByZXR1cm4gdC5yZXZlcnQoZmFsc2UsIHRydWUpO1xuICAgICAgfSk7XG4gICAgICBzZWxmLnN0YXJ0ID0gc3RhcnQ7XG4gICAgICBzZWxmLmVuZCA9IGVuZDtcbiAgICAgIHNjcm9sbDEgPSBzY3JvbGwyID0gc2Nyb2xsRnVuYygpOyAvLyByZXNldCB2ZWxvY2l0eVxuXG4gICAgICBpZiAoIWNvbnRhaW5lckFuaW1hdGlvbiAmJiAhX3JlZnJlc2hpbmdBbGwpIHtcbiAgICAgICAgc2Nyb2xsMSA8IHByZXZTY3JvbGwgJiYgc2Nyb2xsRnVuYyhwcmV2U2Nyb2xsKTtcbiAgICAgICAgc2VsZi5zY3JvbGwucmVjID0gMDtcbiAgICAgIH1cblxuICAgICAgc2VsZi5yZXZlcnQoZmFsc2UsIHRydWUpO1xuXG4gICAgICBpZiAoc25hcERlbGF5ZWRDYWxsKSB7XG4gICAgICAgIGxhc3RTbmFwID0gLTE7XG4gICAgICAgIHNlbGYuaXNBY3RpdmUgJiYgc2Nyb2xsRnVuYyhzdGFydCArIGNoYW5nZSAqIHByZXZQcm9ncmVzcyk7IC8vIGp1c3Qgc28gc25hcHBpbmcgZ2V0cyByZS1lbmFibGVkLCBjbGVhciBvdXQgYW55IHJlY29yZGVkIGxhc3QgdmFsdWVcblxuICAgICAgICBzbmFwRGVsYXllZENhbGwucmVzdGFydCh0cnVlKTtcbiAgICAgIH1cblxuICAgICAgX3JlZnJlc2hpbmcgPSAwO1xuICAgICAgYW5pbWF0aW9uICYmIGlzVG9nZ2xlICYmIChhbmltYXRpb24uX2luaXR0ZWQgfHwgcHJldkFuaW1Qcm9ncmVzcykgJiYgYW5pbWF0aW9uLnByb2dyZXNzKCkgIT09IHByZXZBbmltUHJvZ3Jlc3MgJiYgYW5pbWF0aW9uLnByb2dyZXNzKHByZXZBbmltUHJvZ3Jlc3MsIHRydWUpLnJlbmRlcihhbmltYXRpb24udGltZSgpLCB0cnVlLCB0cnVlKTsgLy8gbXVzdCBmb3JjZSBhIHJlLXJlbmRlciBiZWNhdXNlIGlmIHNhdmVTdHlsZXMoKSB3YXMgdXNlZCBvbiB0aGUgdGFyZ2V0KHMpLCB0aGUgc3R5bGVzIGNvdWxkIGhhdmUgYmVlbiB3aXBlZCBvdXQgZHVyaW5nIHRoZSByZWZyZXNoKCkuXG5cbiAgICAgIGlmIChwcmV2UHJvZ3Jlc3MgIT09IHNlbGYucHJvZ3Jlc3MgfHwgY29udGFpbmVyQW5pbWF0aW9uKSB7XG4gICAgICAgIC8vIGVuc3VyZXMgdGhhdCB0aGUgZGlyZWN0aW9uIGlzIHNldCBwcm9wZXJseSAod2hlbiByZWZyZXNoaW5nLCBwcm9ncmVzcyBpcyBzZXQgYmFjayB0byAwIGluaXRpYWxseSwgdGhlbiBiYWNrIGFnYWluIHRvIHdoZXJldmVyIGl0IG5lZWRzIHRvIGJlKSBhbmQgdGhhdCBjYWxsYmFja3MgYXJlIHRyaWdnZXJlZC5cbiAgICAgICAgYW5pbWF0aW9uICYmICFpc1RvZ2dsZSAmJiBhbmltYXRpb24udG90YWxQcm9ncmVzcyhwcmV2UHJvZ3Jlc3MsIHRydWUpOyAvLyB0byBhdm9pZCBpc3N1ZXMgd2hlcmUgYW5pbWF0aW9uIGNhbGxiYWNrcyBsaWtlIG9uU3RhcnQgYXJlbid0IHRyaWdnZXJlZC5cblxuICAgICAgICBzZWxmLnByb2dyZXNzID0gKHNjcm9sbDEgLSBzdGFydCkgLyBjaGFuZ2UgPT09IHByZXZQcm9ncmVzcyA/IDAgOiBwcmV2UHJvZ3Jlc3M7XG4gICAgICAgIHNlbGYudXBkYXRlKDAsIDAsIDEpO1xuICAgICAgfVxuXG4gICAgICBwaW4gJiYgcGluU3BhY2luZyAmJiAoc3BhY2VyLl9waW5PZmZzZXQgPSBNYXRoLnJvdW5kKHNlbGYucHJvZ3Jlc3MgKiBwaW5DaGFuZ2UpKTsgLy9cdFx0XHRzY3J1YlR3ZWVuICYmIHNjcnViVHdlZW4uaW52YWxpZGF0ZSgpO1xuXG4gICAgICBvblJlZnJlc2ggJiYgb25SZWZyZXNoKHNlbGYpO1xuICAgIH07XG5cbiAgICBzZWxmLmdldFZlbG9jaXR5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIChzY3JvbGxGdW5jKCkgLSBzY3JvbGwyKSAvIChfZ2V0VGltZSgpIC0gX3RpbWUyKSAqIDEwMDAgfHwgMDtcbiAgICB9O1xuXG4gICAgc2VsZi5lbmRBbmltYXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfZW5kQW5pbWF0aW9uKHNlbGYuY2FsbGJhY2tBbmltYXRpb24pO1xuXG4gICAgICBpZiAoYW5pbWF0aW9uKSB7XG4gICAgICAgIHNjcnViVHdlZW4gPyBzY3J1YlR3ZWVuLnByb2dyZXNzKDEpIDogIWFuaW1hdGlvbi5wYXVzZWQoKSA/IF9lbmRBbmltYXRpb24oYW5pbWF0aW9uLCBhbmltYXRpb24ucmV2ZXJzZWQoKSkgOiBpc1RvZ2dsZSB8fCBfZW5kQW5pbWF0aW9uKGFuaW1hdGlvbiwgc2VsZi5kaXJlY3Rpb24gPCAwLCAxKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgc2VsZi5sYWJlbFRvU2Nyb2xsID0gZnVuY3Rpb24gKGxhYmVsKSB7XG4gICAgICByZXR1cm4gYW5pbWF0aW9uICYmIGFuaW1hdGlvbi5sYWJlbHMgJiYgKHN0YXJ0IHx8IHNlbGYucmVmcmVzaCgpIHx8IHN0YXJ0KSArIGFuaW1hdGlvbi5sYWJlbHNbbGFiZWxdIC8gYW5pbWF0aW9uLmR1cmF0aW9uKCkgKiBjaGFuZ2UgfHwgMDtcbiAgICB9O1xuXG4gICAgc2VsZi5nZXRUcmFpbGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICB2YXIgaSA9IF90cmlnZ2Vycy5pbmRleE9mKHNlbGYpLFxuICAgICAgICAgIGEgPSBzZWxmLmRpcmVjdGlvbiA+IDAgPyBfdHJpZ2dlcnMuc2xpY2UoMCwgaSkucmV2ZXJzZSgpIDogX3RyaWdnZXJzLnNsaWNlKGkgKyAxKTtcblxuICAgICAgcmV0dXJuIChfaXNTdHJpbmcobmFtZSkgPyBhLmZpbHRlcihmdW5jdGlvbiAodCkge1xuICAgICAgICByZXR1cm4gdC52YXJzLnByZXZlbnRPdmVybGFwcyA9PT0gbmFtZTtcbiAgICAgIH0pIDogYSkuZmlsdGVyKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHJldHVybiBzZWxmLmRpcmVjdGlvbiA+IDAgPyB0LmVuZCA8PSBzdGFydCA6IHQuc3RhcnQgPj0gZW5kO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIHNlbGYudXBkYXRlID0gZnVuY3Rpb24gKHJlc2V0LCByZWNvcmRWZWxvY2l0eSwgZm9yY2VGYWtlKSB7XG4gICAgICBpZiAoY29udGFpbmVyQW5pbWF0aW9uICYmICFmb3JjZUZha2UgJiYgIXJlc2V0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHNjcm9sbCA9IHNlbGYuc2Nyb2xsKCksXG4gICAgICAgICAgcCA9IHJlc2V0ID8gMCA6IChzY3JvbGwgLSBzdGFydCkgLyBjaGFuZ2UsXG4gICAgICAgICAgY2xpcHBlZCA9IHAgPCAwID8gMCA6IHAgPiAxID8gMSA6IHAgfHwgMCxcbiAgICAgICAgICBwcmV2UHJvZ3Jlc3MgPSBzZWxmLnByb2dyZXNzLFxuICAgICAgICAgIGlzQWN0aXZlLFxuICAgICAgICAgIHdhc0FjdGl2ZSxcbiAgICAgICAgICB0b2dnbGVTdGF0ZSxcbiAgICAgICAgICBhY3Rpb24sXG4gICAgICAgICAgc3RhdGVDaGFuZ2VkLFxuICAgICAgICAgIHRvZ2dsZWQsXG4gICAgICAgICAgaXNBdE1heCxcbiAgICAgICAgICBpc1Rha2luZ0FjdGlvbjtcblxuICAgICAgaWYgKHJlY29yZFZlbG9jaXR5KSB7XG4gICAgICAgIHNjcm9sbDIgPSBzY3JvbGwxO1xuICAgICAgICBzY3JvbGwxID0gY29udGFpbmVyQW5pbWF0aW9uID8gc2Nyb2xsRnVuYygpIDogc2Nyb2xsO1xuXG4gICAgICAgIGlmIChzbmFwKSB7XG4gICAgICAgICAgc25hcDIgPSBzbmFwMTtcbiAgICAgICAgICBzbmFwMSA9IGFuaW1hdGlvbiAmJiAhaXNUb2dnbGUgPyBhbmltYXRpb24udG90YWxQcm9ncmVzcygpIDogY2xpcHBlZDtcbiAgICAgICAgfVxuICAgICAgfSAvLyBhbnRpY2lwYXRlIHRoZSBwaW5uaW5nIGEgZmV3IHRpY2tzIGFoZWFkIG9mIHRpbWUgYmFzZWQgb24gdmVsb2NpdHkgdG8gYXZvaWQgYSB2aXN1YWwgZ2xpdGNoIGR1ZSB0byB0aGUgZmFjdCB0aGF0IG1vc3QgYnJvd3NlcnMgZG8gc2Nyb2xsaW5nIG9uIGEgc2VwYXJhdGUgdGhyZWFkIChub3Qgc3luY2VkIHdpdGggcmVxdWVzdEFuaW1hdGlvbkZyYW1lKS5cblxuXG4gICAgICBhbnRpY2lwYXRlUGluICYmICFjbGlwcGVkICYmIHBpbiAmJiAhX3JlZnJlc2hpbmcgJiYgIV9zdGFydHVwICYmIF9sYXN0U2Nyb2xsVGltZSAmJiBzdGFydCA8IHNjcm9sbCArIChzY3JvbGwgLSBzY3JvbGwyKSAvIChfZ2V0VGltZSgpIC0gX3RpbWUyKSAqIGFudGljaXBhdGVQaW4gJiYgKGNsaXBwZWQgPSAwLjAwMDEpO1xuXG4gICAgICBpZiAoY2xpcHBlZCAhPT0gcHJldlByb2dyZXNzICYmIHNlbGYuZW5hYmxlZCkge1xuICAgICAgICBpc0FjdGl2ZSA9IHNlbGYuaXNBY3RpdmUgPSAhIWNsaXBwZWQgJiYgY2xpcHBlZCA8IDE7XG4gICAgICAgIHdhc0FjdGl2ZSA9ICEhcHJldlByb2dyZXNzICYmIHByZXZQcm9ncmVzcyA8IDE7XG4gICAgICAgIHRvZ2dsZWQgPSBpc0FjdGl2ZSAhPT0gd2FzQWN0aXZlO1xuICAgICAgICBzdGF0ZUNoYW5nZWQgPSB0b2dnbGVkIHx8ICEhY2xpcHBlZCAhPT0gISFwcmV2UHJvZ3Jlc3M7IC8vIGNvdWxkIGdvIGZyb20gc3RhcnQgYWxsIHRoZSB3YXkgdG8gZW5kLCB0aHVzIGl0IGRpZG4ndCB0b2dnbGUgYnV0IGl0IGRpZCBjaGFuZ2Ugc3RhdGUgaW4gYSBzZW5zZSAobWF5IG5lZWQgdG8gZmlyZSBhIGNhbGxiYWNrKVxuXG4gICAgICAgIHNlbGYuZGlyZWN0aW9uID0gY2xpcHBlZCA+IHByZXZQcm9ncmVzcyA/IDEgOiAtMTtcbiAgICAgICAgc2VsZi5wcm9ncmVzcyA9IGNsaXBwZWQ7XG5cbiAgICAgICAgaWYgKHN0YXRlQ2hhbmdlZCAmJiAhX3JlZnJlc2hpbmcpIHtcbiAgICAgICAgICB0b2dnbGVTdGF0ZSA9IGNsaXBwZWQgJiYgIXByZXZQcm9ncmVzcyA/IDAgOiBjbGlwcGVkID09PSAxID8gMSA6IHByZXZQcm9ncmVzcyA9PT0gMSA/IDIgOiAzOyAvLyAwID0gZW50ZXIsIDEgPSBsZWF2ZSwgMiA9IGVudGVyQmFjaywgMyA9IGxlYXZlQmFjayAod2UgcHJpb3JpdGl6ZSB0aGUgRklSU1QgZW5jb3VudGVyLCB0aHVzIGlmIHlvdSBzY3JvbGwgcmVhbGx5IGZhc3QgcGFzdCB0aGUgb25FbnRlciBhbmQgb25MZWF2ZSBpbiBvbmUgdGljaywgaXQnZCBwcmlvcml0aXplIG9uRW50ZXIuXG5cbiAgICAgICAgICBpZiAoaXNUb2dnbGUpIHtcbiAgICAgICAgICAgIGFjdGlvbiA9ICF0b2dnbGVkICYmIHRvZ2dsZUFjdGlvbnNbdG9nZ2xlU3RhdGUgKyAxXSAhPT0gXCJub25lXCIgJiYgdG9nZ2xlQWN0aW9uc1t0b2dnbGVTdGF0ZSArIDFdIHx8IHRvZ2dsZUFjdGlvbnNbdG9nZ2xlU3RhdGVdOyAvLyBpZiBpdCBkaWRuJ3QgdG9nZ2xlLCB0aGF0IG1lYW5zIGl0IHNob3QgcmlnaHQgcGFzdCBhbmQgc2luY2Ugd2UgcHJpb3JpdGl6ZSB0aGUgXCJlbnRlclwiIGFjdGlvbiwgd2Ugc2hvdWxkIHN3aXRjaCB0byB0aGUgXCJsZWF2ZVwiIGluIHRoaXMgY2FzZSAoYnV0IG9ubHkgaWYgb25lIGlzIGRlZmluZWQpXG5cbiAgICAgICAgICAgIGlzVGFraW5nQWN0aW9uID0gYW5pbWF0aW9uICYmIChhY3Rpb24gPT09IFwiY29tcGxldGVcIiB8fCBhY3Rpb24gPT09IFwicmVzZXRcIiB8fCBhY3Rpb24gaW4gYW5pbWF0aW9uKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBwcmV2ZW50T3ZlcmxhcHMgJiYgKHRvZ2dsZWQgfHwgaXNUYWtpbmdBY3Rpb24pICYmIChpc1Rha2luZ0FjdGlvbiB8fCBzY3J1YiB8fCAhYW5pbWF0aW9uKSAmJiAoX2lzRnVuY3Rpb24ocHJldmVudE92ZXJsYXBzKSA/IHByZXZlbnRPdmVybGFwcyhzZWxmKSA6IHNlbGYuZ2V0VHJhaWxpbmcocHJldmVudE92ZXJsYXBzKS5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgcmV0dXJuIHQuZW5kQW5pbWF0aW9uKCk7XG4gICAgICAgIH0pKTtcblxuICAgICAgICBpZiAoIWlzVG9nZ2xlKSB7XG4gICAgICAgICAgaWYgKHNjcnViVHdlZW4gJiYgIV9yZWZyZXNoaW5nICYmICFfc3RhcnR1cCkge1xuICAgICAgICAgICAgKGNvbnRhaW5lckFuaW1hdGlvbiB8fCBfcHJpbWFyeSAmJiBfcHJpbWFyeSAhPT0gc2VsZikgJiYgc2NydWJUd2Vlbi5yZW5kZXIoc2NydWJUd2Vlbi5fZHAuX3RpbWUgLSBzY3J1YlR3ZWVuLl9zdGFydCk7IC8vIGlmIHRoZXJlJ3MgYSBzY3J1YiBvbiBib3RoIHRoZSBjb250YWluZXIgYW5pbWF0aW9uIGFuZCB0aGlzIG9uZSAob3IgYSBTY3JvbGxTbW9vdGhlciksIHRoZSB1cGRhdGUgb3JkZXIgd291bGQgY2F1c2UgdGhpcyBvbmUgbm90IHRvIGhhdmUgcmVuZGVyZWQgeWV0LCBzbyBpdCB3b3VsZG4ndCBtYWtlIGFueSBwcm9ncmVzcyBiZWZvcmUgd2UgLnJlc3RhcnQoKSBpdCBoZWFkaW5nIHRvd2FyZCB0aGUgbmV3IHByb2dyZXNzIHNvIGl0J2QgYXBwZWFyIHN0dWNrIHRodXMgd2UgZm9yY2UgYSByZW5kZXIgaGVyZS5cblxuICAgICAgICAgICAgaWYgKHNjcnViVHdlZW4ucmVzZXRUbykge1xuICAgICAgICAgICAgICBzY3J1YlR3ZWVuLnJlc2V0VG8oXCJ0b3RhbFByb2dyZXNzXCIsIGNsaXBwZWQsIGFuaW1hdGlvbi5fdFRpbWUgLyBhbmltYXRpb24uX3REdXIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gbGVnYWN5IHN1cHBvcnQgKGNvdXJ0ZXN5KSwgYmVmb3JlIDMuMTAuMFxuICAgICAgICAgICAgICBzY3J1YlR3ZWVuLnZhcnMudG90YWxQcm9ncmVzcyA9IGNsaXBwZWQ7XG4gICAgICAgICAgICAgIHNjcnViVHdlZW4uaW52YWxpZGF0ZSgpLnJlc3RhcnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKGFuaW1hdGlvbikge1xuICAgICAgICAgICAgYW5pbWF0aW9uLnRvdGFsUHJvZ3Jlc3MoY2xpcHBlZCwgISFfcmVmcmVzaGluZyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBpbikge1xuICAgICAgICAgIHJlc2V0ICYmIHBpblNwYWNpbmcgJiYgKHNwYWNlci5zdHlsZVtwaW5TcGFjaW5nICsgZGlyZWN0aW9uLm9zMl0gPSBzcGFjaW5nU3RhcnQpO1xuXG4gICAgICAgICAgaWYgKCF1c2VGaXhlZFBvc2l0aW9uKSB7XG4gICAgICAgICAgICBwaW5TZXR0ZXIoX3JvdW5kKHBpblN0YXJ0ICsgcGluQ2hhbmdlICogY2xpcHBlZCkpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoc3RhdGVDaGFuZ2VkKSB7XG4gICAgICAgICAgICBpc0F0TWF4ID0gIXJlc2V0ICYmIGNsaXBwZWQgPiBwcmV2UHJvZ3Jlc3MgJiYgZW5kICsgMSA+IHNjcm9sbCAmJiBzY3JvbGwgKyAxID49IF9tYXhTY3JvbGwoc2Nyb2xsZXIsIGRpcmVjdGlvbik7IC8vIGlmIGl0J3MgYXQgdGhlIFZFUlkgZW5kIG9mIHRoZSBwYWdlLCBkb24ndCBzd2l0Y2ggYXdheSBmcm9tIHBvc2l0aW9uOiBmaXhlZCBiZWNhdXNlIGl0J3MgcG9pbnRsZXNzIGFuZCBpdCBjb3VsZCBjYXVzZSBhIGJyaWVmIGZsYXNoIHdoZW4gdGhlIHVzZXIgc2Nyb2xscyBiYWNrIHVwICh3aGVuIGl0IGdldHMgcGlubmVkIGFnYWluKVxuXG4gICAgICAgICAgICBpZiAocGluUmVwYXJlbnQpIHtcbiAgICAgICAgICAgICAgaWYgKCFyZXNldCAmJiAoaXNBY3RpdmUgfHwgaXNBdE1heCkpIHtcbiAgICAgICAgICAgICAgICB2YXIgYm91bmRzID0gX2dldEJvdW5kcyhwaW4sIHRydWUpLFxuICAgICAgICAgICAgICAgICAgICBfb2Zmc2V0ID0gc2Nyb2xsIC0gc3RhcnQ7XG5cbiAgICAgICAgICAgICAgICBfcmVwYXJlbnQocGluLCBfYm9keSwgYm91bmRzLnRvcCArIChkaXJlY3Rpb24gPT09IF92ZXJ0aWNhbCA/IF9vZmZzZXQgOiAwKSArIF9weCwgYm91bmRzLmxlZnQgKyAoZGlyZWN0aW9uID09PSBfdmVydGljYWwgPyAwIDogX29mZnNldCkgKyBfcHgpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIF9yZXBhcmVudChwaW4sIHNwYWNlcik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgX3NldFN0YXRlKGlzQWN0aXZlIHx8IGlzQXRNYXggPyBwaW5BY3RpdmVTdGF0ZSA6IHBpblN0YXRlKTtcblxuICAgICAgICAgICAgcGluQ2hhbmdlICE9PSBjaGFuZ2UgJiYgY2xpcHBlZCA8IDEgJiYgaXNBY3RpdmUgfHwgcGluU2V0dGVyKHBpblN0YXJ0ICsgKGNsaXBwZWQgPT09IDEgJiYgIWlzQXRNYXggPyBwaW5DaGFuZ2UgOiAwKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgc25hcCAmJiAhdHdlZW5Uby50d2VlbiAmJiAhX3JlZnJlc2hpbmcgJiYgIV9zdGFydHVwICYmIHNuYXBEZWxheWVkQ2FsbC5yZXN0YXJ0KHRydWUpO1xuICAgICAgICB0b2dnbGVDbGFzcyAmJiAodG9nZ2xlZCB8fCBvbmNlICYmIGNsaXBwZWQgJiYgKGNsaXBwZWQgPCAxIHx8ICFfbGltaXRDYWxsYmFja3MpKSAmJiBfdG9BcnJheSh0b2dnbGVDbGFzcy50YXJnZXRzKS5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgICAgICAgIHJldHVybiBlbC5jbGFzc0xpc3RbaXNBY3RpdmUgfHwgb25jZSA/IFwiYWRkXCIgOiBcInJlbW92ZVwiXSh0b2dnbGVDbGFzcy5jbGFzc05hbWUpO1xuICAgICAgICB9KTsgLy8gY2xhc3NlcyBjb3VsZCBhZmZlY3QgcG9zaXRpb25pbmcsIHNvIGRvIGl0IGV2ZW4gaWYgcmVzZXQgb3IgcmVmcmVzaGluZyBpcyB0cnVlLlxuXG4gICAgICAgIG9uVXBkYXRlICYmICFpc1RvZ2dsZSAmJiAhcmVzZXQgJiYgb25VcGRhdGUoc2VsZik7XG5cbiAgICAgICAgaWYgKHN0YXRlQ2hhbmdlZCAmJiAhX3JlZnJlc2hpbmcpIHtcbiAgICAgICAgICBpZiAoaXNUb2dnbGUpIHtcbiAgICAgICAgICAgIGlmIChpc1Rha2luZ0FjdGlvbikge1xuICAgICAgICAgICAgICBpZiAoYWN0aW9uID09PSBcImNvbXBsZXRlXCIpIHtcbiAgICAgICAgICAgICAgICBhbmltYXRpb24ucGF1c2UoKS50b3RhbFByb2dyZXNzKDEpO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGFjdGlvbiA9PT0gXCJyZXNldFwiKSB7XG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uLnJlc3RhcnQodHJ1ZSkucGF1c2UoKTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChhY3Rpb24gPT09IFwicmVzdGFydFwiKSB7XG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uLnJlc3RhcnQodHJ1ZSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uW2FjdGlvbl0oKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBvblVwZGF0ZSAmJiBvblVwZGF0ZShzZWxmKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodG9nZ2xlZCB8fCAhX2xpbWl0Q2FsbGJhY2tzKSB7XG4gICAgICAgICAgICAvLyBvbiBzdGFydHVwLCB0aGUgcGFnZSBjb3VsZCBiZSBzY3JvbGxlZCBhbmQgd2UgZG9uJ3Qgd2FudCB0byBmaXJlIGNhbGxiYWNrcyB0aGF0IGRpZG4ndCB0b2dnbGUuIEZvciBleGFtcGxlIG9uRW50ZXIgc2hvdWxkbid0IGZpcmUgaWYgdGhlIFNjcm9sbFRyaWdnZXIgaXNuJ3QgYWN0dWFsbHkgZW50ZXJlZC5cbiAgICAgICAgICAgIG9uVG9nZ2xlICYmIHRvZ2dsZWQgJiYgX2NhbGxiYWNrKHNlbGYsIG9uVG9nZ2xlKTtcbiAgICAgICAgICAgIGNhbGxiYWNrc1t0b2dnbGVTdGF0ZV0gJiYgX2NhbGxiYWNrKHNlbGYsIGNhbGxiYWNrc1t0b2dnbGVTdGF0ZV0pO1xuICAgICAgICAgICAgb25jZSAmJiAoY2xpcHBlZCA9PT0gMSA/IHNlbGYua2lsbChmYWxzZSwgMSkgOiBjYWxsYmFja3NbdG9nZ2xlU3RhdGVdID0gMCk7IC8vIGEgY2FsbGJhY2sgc2hvdWxkbid0IGJlIGNhbGxlZCBhZ2FpbiBpZiBvbmNlIGlzIHRydWUuXG5cbiAgICAgICAgICAgIGlmICghdG9nZ2xlZCkge1xuICAgICAgICAgICAgICAvLyBpdCdzIHBvc3NpYmxlIHRvIGdvIGNvbXBsZXRlbHkgcGFzdCwgbGlrZSBmcm9tIGJlZm9yZSB0aGUgc3RhcnQgdG8gYWZ0ZXIgdGhlIGVuZCAob3IgdmljZS12ZXJzYSkgaW4gd2hpY2ggY2FzZSBCT1RIIGNhbGxiYWNrcyBzaG91bGQgYmUgZmlyZWQgaW4gdGhhdCBvcmRlclxuICAgICAgICAgICAgICB0b2dnbGVTdGF0ZSA9IGNsaXBwZWQgPT09IDEgPyAxIDogMztcbiAgICAgICAgICAgICAgY2FsbGJhY2tzW3RvZ2dsZVN0YXRlXSAmJiBfY2FsbGJhY2soc2VsZiwgY2FsbGJhY2tzW3RvZ2dsZVN0YXRlXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGZhc3RTY3JvbGxFbmQgJiYgIWlzQWN0aXZlICYmIE1hdGguYWJzKHNlbGYuZ2V0VmVsb2NpdHkoKSkgPiAoX2lzTnVtYmVyKGZhc3RTY3JvbGxFbmQpID8gZmFzdFNjcm9sbEVuZCA6IDI1MDApKSB7XG4gICAgICAgICAgICBfZW5kQW5pbWF0aW9uKHNlbGYuY2FsbGJhY2tBbmltYXRpb24pO1xuXG4gICAgICAgICAgICBzY3J1YlR3ZWVuID8gc2NydWJUd2Vlbi5wcm9ncmVzcygxKSA6IF9lbmRBbmltYXRpb24oYW5pbWF0aW9uLCBhY3Rpb24gPT09IFwicmV2ZXJzZVwiID8gMSA6ICFjbGlwcGVkLCAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoaXNUb2dnbGUgJiYgb25VcGRhdGUgJiYgIV9yZWZyZXNoaW5nKSB7XG4gICAgICAgICAgb25VcGRhdGUoc2VsZik7XG4gICAgICAgIH1cbiAgICAgIH0gLy8gdXBkYXRlIGFic29sdXRlbHktcG9zaXRpb25lZCBtYXJrZXJzIChvbmx5IGlmIHRoZSBzY3JvbGxlciBpc24ndCB0aGUgdmlld3BvcnQpXG5cblxuICAgICAgaWYgKG1hcmtlckVuZFNldHRlcikge1xuICAgICAgICB2YXIgbiA9IGNvbnRhaW5lckFuaW1hdGlvbiA/IHNjcm9sbCAvIGNvbnRhaW5lckFuaW1hdGlvbi5kdXJhdGlvbigpICogKGNvbnRhaW5lckFuaW1hdGlvbi5fY2FTY3JvbGxEaXN0IHx8IDApIDogc2Nyb2xsO1xuICAgICAgICBtYXJrZXJTdGFydFNldHRlcihuICsgKG1hcmtlclN0YXJ0VHJpZ2dlci5faXNGbGlwcGVkID8gMSA6IDApKTtcbiAgICAgICAgbWFya2VyRW5kU2V0dGVyKG4pO1xuICAgICAgfVxuXG4gICAgICBjYU1hcmtlclNldHRlciAmJiBjYU1hcmtlclNldHRlcigtc2Nyb2xsIC8gY29udGFpbmVyQW5pbWF0aW9uLmR1cmF0aW9uKCkgKiAoY29udGFpbmVyQW5pbWF0aW9uLl9jYVNjcm9sbERpc3QgfHwgMCkpO1xuICAgIH07XG5cbiAgICBzZWxmLmVuYWJsZSA9IGZ1bmN0aW9uIChyZXNldCwgcmVmcmVzaCkge1xuICAgICAgaWYgKCFzZWxmLmVuYWJsZWQpIHtcbiAgICAgICAgc2VsZi5lbmFibGVkID0gdHJ1ZTtcblxuICAgICAgICBfYWRkTGlzdGVuZXIoc2Nyb2xsZXIsIFwicmVzaXplXCIsIF9vblJlc2l6ZSk7XG5cbiAgICAgICAgX2FkZExpc3RlbmVyKGlzVmlld3BvcnQgPyBfZG9jIDogc2Nyb2xsZXIsIFwic2Nyb2xsXCIsIF9vblNjcm9sbCk7XG5cbiAgICAgICAgb25SZWZyZXNoSW5pdCAmJiBfYWRkTGlzdGVuZXIoU2Nyb2xsVHJpZ2dlciwgXCJyZWZyZXNoSW5pdFwiLCBvblJlZnJlc2hJbml0KTtcblxuICAgICAgICBpZiAocmVzZXQgIT09IGZhbHNlKSB7XG4gICAgICAgICAgc2VsZi5wcm9ncmVzcyA9IHByZXZQcm9ncmVzcyA9IDA7XG4gICAgICAgICAgc2Nyb2xsMSA9IHNjcm9sbDIgPSBsYXN0U25hcCA9IHNjcm9sbEZ1bmMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlZnJlc2ggIT09IGZhbHNlICYmIHNlbGYucmVmcmVzaCgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBzZWxmLmdldFR3ZWVuID0gZnVuY3Rpb24gKHNuYXApIHtcbiAgICAgIHJldHVybiBzbmFwICYmIHR3ZWVuVG8gPyB0d2VlblRvLnR3ZWVuIDogc2NydWJUd2VlbjtcbiAgICB9O1xuXG4gICAgc2VsZi5zZXRQb3NpdGlvbnMgPSBmdW5jdGlvbiAobmV3U3RhcnQsIG5ld0VuZCkge1xuICAgICAgLy8gZG9lc24ndCBwZXJzaXN0IGFmdGVyIHJlZnJlc2goKSEgSW50ZW5kZWQgdG8gYmUgYSB3YXkgdG8gb3ZlcnJpZGUgdmFsdWVzIHRoYXQgd2VyZSBzZXQgZHVyaW5nIHJlZnJlc2goKSwgbGlrZSB5b3UgY291bGQgc2V0IGl0IGluIG9uUmVmcmVzaCgpXG4gICAgICBpZiAocGluKSB7XG4gICAgICAgIHBpblN0YXJ0ICs9IG5ld1N0YXJ0IC0gc3RhcnQ7XG4gICAgICAgIHBpbkNoYW5nZSArPSBuZXdFbmQgLSBuZXdTdGFydCAtIGNoYW5nZTtcbiAgICAgIH1cblxuICAgICAgc2VsZi5zdGFydCA9IHN0YXJ0ID0gbmV3U3RhcnQ7XG4gICAgICBzZWxmLmVuZCA9IGVuZCA9IG5ld0VuZDtcbiAgICAgIGNoYW5nZSA9IG5ld0VuZCAtIG5ld1N0YXJ0O1xuICAgICAgc2VsZi51cGRhdGUoKTtcbiAgICB9O1xuXG4gICAgc2VsZi5kaXNhYmxlID0gZnVuY3Rpb24gKHJlc2V0LCBhbGxvd0FuaW1hdGlvbikge1xuICAgICAgaWYgKHNlbGYuZW5hYmxlZCkge1xuICAgICAgICByZXNldCAhPT0gZmFsc2UgJiYgc2VsZi5yZXZlcnQodHJ1ZSwgdHJ1ZSk7XG4gICAgICAgIHNlbGYuZW5hYmxlZCA9IHNlbGYuaXNBY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgYWxsb3dBbmltYXRpb24gfHwgc2NydWJUd2VlbiAmJiBzY3J1YlR3ZWVuLnBhdXNlKCk7XG4gICAgICAgIHByZXZTY3JvbGwgPSAwO1xuICAgICAgICBwaW5DYWNoZSAmJiAocGluQ2FjaGUudW5jYWNoZSA9IDEpO1xuICAgICAgICBvblJlZnJlc2hJbml0ICYmIF9yZW1vdmVMaXN0ZW5lcihTY3JvbGxUcmlnZ2VyLCBcInJlZnJlc2hJbml0XCIsIG9uUmVmcmVzaEluaXQpO1xuXG4gICAgICAgIGlmIChzbmFwRGVsYXllZENhbGwpIHtcbiAgICAgICAgICBzbmFwRGVsYXllZENhbGwucGF1c2UoKTtcbiAgICAgICAgICB0d2VlblRvLnR3ZWVuICYmIHR3ZWVuVG8udHdlZW4ua2lsbCgpICYmICh0d2VlblRvLnR3ZWVuID0gMCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWlzVmlld3BvcnQpIHtcbiAgICAgICAgICB2YXIgaSA9IF90cmlnZ2Vycy5sZW5ndGg7XG5cbiAgICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgICBpZiAoX3RyaWdnZXJzW2ldLnNjcm9sbGVyID09PSBzY3JvbGxlciAmJiBfdHJpZ2dlcnNbaV0gIT09IHNlbGYpIHtcbiAgICAgICAgICAgICAgcmV0dXJuOyAvL2Rvbid0IHJlbW92ZSB0aGUgbGlzdGVuZXJzIGlmIHRoZXJlIGFyZSBzdGlsbCBvdGhlciB0cmlnZ2VycyByZWZlcmVuY2luZyBpdC5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBfcmVtb3ZlTGlzdGVuZXIoc2Nyb2xsZXIsIFwicmVzaXplXCIsIF9vblJlc2l6ZSk7XG5cbiAgICAgICAgICBfcmVtb3ZlTGlzdGVuZXIoc2Nyb2xsZXIsIFwic2Nyb2xsXCIsIF9vblNjcm9sbCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgc2VsZi5raWxsID0gZnVuY3Rpb24gKHJldmVydCwgYWxsb3dBbmltYXRpb24pIHtcbiAgICAgIHNlbGYuZGlzYWJsZShyZXZlcnQsIGFsbG93QW5pbWF0aW9uKTtcbiAgICAgIHNjcnViVHdlZW4gJiYgIWFsbG93QW5pbWF0aW9uICYmIHNjcnViVHdlZW4ua2lsbCgpO1xuICAgICAgaWQgJiYgZGVsZXRlIF9pZHNbaWRdO1xuXG4gICAgICB2YXIgaSA9IF90cmlnZ2Vycy5pbmRleE9mKHNlbGYpO1xuXG4gICAgICBpID49IDAgJiYgX3RyaWdnZXJzLnNwbGljZShpLCAxKTtcbiAgICAgIGkgPT09IF9pICYmIF9kaXJlY3Rpb24gPiAwICYmIF9pLS07IC8vIGlmIHdlJ3JlIGluIHRoZSBtaWRkbGUgb2YgYSByZWZyZXNoKCkgb3IgdXBkYXRlKCksIHNwbGljaW5nIHdvdWxkIGNhdXNlIHNraXBzIGluIHRoZSBpbmRleCwgc28gYWRqdXN0Li4uXG4gICAgICAvLyBpZiBubyBvdGhlciBTY3JvbGxUcmlnZ2VyIGluc3RhbmNlcyBvZiB0aGUgc2FtZSBzY3JvbGxlciBhcmUgZm91bmQsIHdpcGUgb3V0IGFueSByZWNvcmRlZCBzY3JvbGwgcG9zaXRpb24uIE90aGVyd2lzZSwgaW4gYSBzaW5nbGUgcGFnZSBhcHBsaWNhdGlvbiwgZm9yIGV4YW1wbGUsIGl0IGNvdWxkIG1haW50YWluIHNjcm9sbCBwb3NpdGlvbiB3aGVuIGl0IHJlYWxseSBzaG91bGRuJ3QuXG5cbiAgICAgIGkgPSAwO1xuXG4gICAgICBfdHJpZ2dlcnMuZm9yRWFjaChmdW5jdGlvbiAodCkge1xuICAgICAgICByZXR1cm4gdC5zY3JvbGxlciA9PT0gc2VsZi5zY3JvbGxlciAmJiAoaSA9IDEpO1xuICAgICAgfSk7XG5cbiAgICAgIGkgfHwgX3JlZnJlc2hpbmdBbGwgfHwgKHNlbGYuc2Nyb2xsLnJlYyA9IDApO1xuXG4gICAgICBpZiAoYW5pbWF0aW9uKSB7XG4gICAgICAgIGFuaW1hdGlvbi5zY3JvbGxUcmlnZ2VyID0gbnVsbDtcbiAgICAgICAgcmV2ZXJ0ICYmIGFuaW1hdGlvbi5yZW5kZXIoLTEpO1xuICAgICAgICBhbGxvd0FuaW1hdGlvbiB8fCBhbmltYXRpb24ua2lsbCgpO1xuICAgICAgfVxuXG4gICAgICBtYXJrZXJTdGFydCAmJiBbbWFya2VyU3RhcnQsIG1hcmtlckVuZCwgbWFya2VyU3RhcnRUcmlnZ2VyLCBtYXJrZXJFbmRUcmlnZ2VyXS5mb3JFYWNoKGZ1bmN0aW9uIChtKSB7XG4gICAgICAgIHJldHVybiBtLnBhcmVudE5vZGUgJiYgbS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG0pO1xuICAgICAgfSk7XG4gICAgICBfcHJpbWFyeSA9PT0gc2VsZiAmJiAoX3ByaW1hcnkgPSAwKTtcblxuICAgICAgaWYgKHBpbikge1xuICAgICAgICBwaW5DYWNoZSAmJiAocGluQ2FjaGUudW5jYWNoZSA9IDEpO1xuICAgICAgICBpID0gMDtcblxuICAgICAgICBfdHJpZ2dlcnMuZm9yRWFjaChmdW5jdGlvbiAodCkge1xuICAgICAgICAgIHJldHVybiB0LnBpbiA9PT0gcGluICYmIGkrKztcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaSB8fCAocGluQ2FjaGUuc3BhY2VyID0gMCk7IC8vIGlmIHRoZXJlIGFyZW4ndCBhbnkgbW9yZSBTY3JvbGxUcmlnZ2VycyB3aXRoIHRoZSBzYW1lIHBpbiwgcmVtb3ZlIHRoZSBzcGFjZXIsIG90aGVyd2lzZSBpdCBjb3VsZCBiZSBjb250YW1pbmF0ZWQgd2l0aCBvbGQvc3RhbGUgdmFsdWVzIGlmIHRoZSB1c2VyIHJlLWNyZWF0ZXMgYSBTY3JvbGxUcmlnZ2VyIGZvciB0aGUgc2FtZSBlbGVtZW50LlxuICAgICAgfVxuXG4gICAgICB2YXJzLm9uS2lsbCAmJiB2YXJzLm9uS2lsbChzZWxmKTtcbiAgICB9O1xuXG4gICAgc2VsZi5lbmFibGUoZmFsc2UsIGZhbHNlKTtcbiAgICBjdXN0b21SZXZlcnRSZXR1cm4gJiYgY3VzdG9tUmV2ZXJ0UmV0dXJuKHNlbGYpO1xuICAgICFhbmltYXRpb24gfHwgIWFuaW1hdGlvbi5hZGQgfHwgY2hhbmdlID8gc2VsZi5yZWZyZXNoKCkgOiBnc2FwLmRlbGF5ZWRDYWxsKDAuMDEsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBzdGFydCB8fCBlbmQgfHwgc2VsZi5yZWZyZXNoKCk7XG4gICAgfSkgJiYgKGNoYW5nZSA9IDAuMDEpICYmIChzdGFydCA9IGVuZCA9IDApOyAvLyBpZiB0aGUgYW5pbWF0aW9uIGlzIGEgdGltZWxpbmUsIGl0IG1heSBub3QgaGF2ZSBiZWVuIHBvcHVsYXRlZCB5ZXQsIHNvIGl0IHdvdWxkbid0IHJlbmRlciBhdCB0aGUgcHJvcGVyIHBsYWNlIG9uIHRoZSBmaXJzdCByZWZyZXNoKCksIHRodXMgd2Ugc2hvdWxkIHNjaGVkdWxlIG9uZSBmb3IgdGhlIG5leHQgdGljay4gSWYgXCJjaGFuZ2VcIiBpcyBkZWZpbmVkLCB3ZSBrbm93IGl0IG11c3QgYmUgcmUtZW5hYmxpbmcsIHRodXMgd2UgY2FuIHJlZnJlc2goKSByaWdodCBhd2F5LlxuICB9O1xuXG4gIFNjcm9sbFRyaWdnZXIucmVnaXN0ZXIgPSBmdW5jdGlvbiByZWdpc3Rlcihjb3JlKSB7XG4gICAgaWYgKCFfY29yZUluaXR0ZWQpIHtcbiAgICAgIGdzYXAgPSBjb3JlIHx8IF9nZXRHU0FQKCk7XG4gICAgICBfd2luZG93RXhpc3RzKCkgJiYgd2luZG93LmRvY3VtZW50ICYmIFNjcm9sbFRyaWdnZXIuZW5hYmxlKCk7XG4gICAgICBfY29yZUluaXR0ZWQgPSBfZW5hYmxlZDtcbiAgICB9XG5cbiAgICByZXR1cm4gX2NvcmVJbml0dGVkO1xuICB9O1xuXG4gIFNjcm9sbFRyaWdnZXIuZGVmYXVsdHMgPSBmdW5jdGlvbiBkZWZhdWx0cyhjb25maWcpIHtcbiAgICBpZiAoY29uZmlnKSB7XG4gICAgICBmb3IgKHZhciBwIGluIGNvbmZpZykge1xuICAgICAgICBfZGVmYXVsdHNbcF0gPSBjb25maWdbcF07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIF9kZWZhdWx0cztcbiAgfTtcblxuICBTY3JvbGxUcmlnZ2VyLmRpc2FibGUgPSBmdW5jdGlvbiBkaXNhYmxlKHJlc2V0LCBraWxsKSB7XG4gICAgX2VuYWJsZWQgPSAwO1xuXG4gICAgX3RyaWdnZXJzLmZvckVhY2goZnVuY3Rpb24gKHRyaWdnZXIpIHtcbiAgICAgIHJldHVybiB0cmlnZ2VyW2tpbGwgPyBcImtpbGxcIiA6IFwiZGlzYWJsZVwiXShyZXNldCk7XG4gICAgfSk7XG5cbiAgICBfcmVtb3ZlTGlzdGVuZXIoX3dpbiwgXCJ3aGVlbFwiLCBfb25TY3JvbGwpO1xuXG4gICAgX3JlbW92ZUxpc3RlbmVyKF9kb2MsIFwic2Nyb2xsXCIsIF9vblNjcm9sbCk7XG5cbiAgICBjbGVhckludGVydmFsKF9zeW5jSW50ZXJ2YWwpO1xuXG4gICAgX3JlbW92ZUxpc3RlbmVyKF9kb2MsIFwidG91Y2hjYW5jZWxcIiwgX3Bhc3NUaHJvdWdoKTtcblxuICAgIF9yZW1vdmVMaXN0ZW5lcihfYm9keSwgXCJ0b3VjaHN0YXJ0XCIsIF9wYXNzVGhyb3VnaCk7XG5cbiAgICBfbXVsdGlMaXN0ZW5lcihfcmVtb3ZlTGlzdGVuZXIsIF9kb2MsIFwicG9pbnRlcmRvd24sdG91Y2hzdGFydCxtb3VzZWRvd25cIiwgX3BvaW50ZXJEb3duSGFuZGxlcik7XG5cbiAgICBfbXVsdGlMaXN0ZW5lcihfcmVtb3ZlTGlzdGVuZXIsIF9kb2MsIFwicG9pbnRlcnVwLHRvdWNoZW5kLG1vdXNldXBcIiwgX3BvaW50ZXJVcEhhbmRsZXIpO1xuXG4gICAgX3Jlc2l6ZURlbGF5LmtpbGwoKTtcblxuICAgIF9pdGVyYXRlQXV0b1JlZnJlc2goX3JlbW92ZUxpc3RlbmVyKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgX3Njcm9sbGVycy5sZW5ndGg7IGkgKz0gMykge1xuICAgICAgX3doZWVsTGlzdGVuZXIoX3JlbW92ZUxpc3RlbmVyLCBfc2Nyb2xsZXJzW2ldLCBfc2Nyb2xsZXJzW2kgKyAxXSk7XG5cbiAgICAgIF93aGVlbExpc3RlbmVyKF9yZW1vdmVMaXN0ZW5lciwgX3Njcm9sbGVyc1tpXSwgX3Njcm9sbGVyc1tpICsgMl0pO1xuICAgIH1cbiAgfTtcblxuICBTY3JvbGxUcmlnZ2VyLmVuYWJsZSA9IGZ1bmN0aW9uIGVuYWJsZSgpIHtcbiAgICBfd2luID0gd2luZG93O1xuICAgIF9kb2MgPSBkb2N1bWVudDtcbiAgICBfZG9jRWwgPSBfZG9jLmRvY3VtZW50RWxlbWVudDtcbiAgICBfYm9keSA9IF9kb2MuYm9keTtcblxuICAgIGlmIChnc2FwKSB7XG4gICAgICBfdG9BcnJheSA9IGdzYXAudXRpbHMudG9BcnJheTtcbiAgICAgIF9jbGFtcCA9IGdzYXAudXRpbHMuY2xhbXA7XG4gICAgICBfY29udGV4dCA9IGdzYXAuY29yZS5jb250ZXh0IHx8IF9wYXNzVGhyb3VnaDtcbiAgICAgIF9zdXBwcmVzc092ZXJ3cml0ZXMgPSBnc2FwLmNvcmUuc3VwcHJlc3NPdmVyd3JpdGVzIHx8IF9wYXNzVGhyb3VnaDtcbiAgICAgIGdzYXAuY29yZS5nbG9iYWxzKFwiU2Nyb2xsVHJpZ2dlclwiLCBTY3JvbGxUcmlnZ2VyKTsgLy8gbXVzdCByZWdpc3RlciB0aGUgZ2xvYmFsIG1hbnVhbGx5IGJlY2F1c2UgaW4gSW50ZXJuZXQgRXhwbG9yZXIsIGZ1bmN0aW9ucyAoY2xhc3NlcykgZG9uJ3QgaGF2ZSBhIFwibmFtZVwiIHByb3BlcnR5LlxuXG4gICAgICBpZiAoX2JvZHkpIHtcbiAgICAgICAgX2VuYWJsZWQgPSAxO1xuICAgICAgICBPYnNlcnZlci5yZWdpc3Rlcihnc2FwKTsgLy8gaXNUb3VjaCBpcyAwIGlmIG5vIHRvdWNoLCAxIGlmIE9OTFkgdG91Y2gsIGFuZCAyIGlmIGl0IGNhbiBhY2NvbW1vZGF0ZSB0b3VjaCBidXQgYWxzbyBvdGhlciB0eXBlcyBsaWtlIG1vdXNlL3BvaW50ZXIuXG5cbiAgICAgICAgU2Nyb2xsVHJpZ2dlci5pc1RvdWNoID0gT2JzZXJ2ZXIuaXNUb3VjaDtcbiAgICAgICAgX2ZpeElPU0J1ZyA9IE9ic2VydmVyLmlzVG91Y2ggJiYgLyhpUGFkfGlQaG9uZXxpUG9kfE1hYykvZy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpOyAvLyBzaW5jZSAyMDE3LCBpT1MgaGFzIGhhZCBhIGJ1ZyB0aGF0IGNhdXNlcyBldmVudC5jbGllbnRYL1kgdG8gYmUgaW5hY2N1cmF0ZSB3aGVuIGEgc2Nyb2xsIG9jY3VycywgdGh1cyB3ZSBtdXN0IGFsdGVybmF0ZSBpZ25vcmluZyBldmVyeSBvdGhlciB0b3VjaG1vdmUgZXZlbnQgdG8gd29yayBhcm91bmQgaXQuIFNlZSBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTgxOTU0IGFuZCBodHRwczovL2NvZGVwZW4uaW8vR3JlZW5Tb2NrL3Blbi9FeGJyUE5hLzA4N2NlZjE5N2RjMzU0NDVhMDk1MWU4OTM1YzQxNTAzXG5cbiAgICAgICAgX2FkZExpc3RlbmVyKF93aW4sIFwid2hlZWxcIiwgX29uU2Nyb2xsKTsgLy8gbW9zdGx5IGZvciAzcmQgcGFydHkgc21vb3RoIHNjcm9sbGluZyBsaWJyYXJpZXMuXG5cblxuICAgICAgICBfcm9vdCA9IFtfd2luLCBfZG9jLCBfZG9jRWwsIF9ib2R5XTtcblxuICAgICAgICBpZiAoZ3NhcC5tYXRjaE1lZGlhKSB7XG4gICAgICAgICAgU2Nyb2xsVHJpZ2dlci5tYXRjaE1lZGlhID0gZnVuY3Rpb24gKHZhcnMpIHtcbiAgICAgICAgICAgIHZhciBtbSA9IGdzYXAubWF0Y2hNZWRpYSgpLFxuICAgICAgICAgICAgICAgIHA7XG5cbiAgICAgICAgICAgIGZvciAocCBpbiB2YXJzKSB7XG4gICAgICAgICAgICAgIG1tLmFkZChwLCB2YXJzW3BdKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIG1tO1xuICAgICAgICAgIH07XG5cbiAgICAgICAgICBnc2FwLmFkZEV2ZW50TGlzdGVuZXIoXCJtYXRjaE1lZGlhSW5pdFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gX3JldmVydEFsbCgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGdzYXAuYWRkRXZlbnRMaXN0ZW5lcihcIm1hdGNoTWVkaWFSZXZlcnRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9yZXZlcnRSZWNvcmRlZCgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGdzYXAuYWRkRXZlbnRMaXN0ZW5lcihcIm1hdGNoTWVkaWFcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3JlZnJlc2hBbGwoMCwgMSk7XG5cbiAgICAgICAgICAgIF9kaXNwYXRjaChcIm1hdGNoTWVkaWFcIik7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZ3NhcC5tYXRjaE1lZGlhKFwiKG9yaWVudGF0aW9uOiBwb3J0cmFpdClcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gd2hlbiBvcmllbnRhdGlvbiBjaGFuZ2VzLCB3ZSBzaG91bGQgdGFrZSBuZXcgYmFzZSBtZWFzdXJlbWVudHMgZm9yIHRoZSBpZ25vcmVNb2JpbGVSZXNpemUgZmVhdHVyZS5cbiAgICAgICAgICAgIF9zZXRCYXNlRGltZW5zaW9ucygpO1xuXG4gICAgICAgICAgICByZXR1cm4gX3NldEJhc2VEaW1lbnNpb25zO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUud2FybihcIlJlcXVpcmVzIEdTQVAgMy4xMS4wIG9yIGxhdGVyXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgX2FkZExpc3RlbmVyKF9kb2MsIFwic2Nyb2xsXCIsIF9vblNjcm9sbCk7IC8vIHNvbWUgYnJvd3NlcnMgKGxpa2UgQ2hyb21lKSwgdGhlIHdpbmRvdyBzdG9wcyBkaXNwYXRjaGluZyBzY3JvbGwgZXZlbnRzIG9uIHRoZSB3aW5kb3cgaWYgeW91IHNjcm9sbCByZWFsbHkgZmFzdCwgYnV0IGl0J3MgY29uc2lzdGVudCBvbiB0aGUgZG9jdW1lbnQhXG5cblxuICAgICAgICB2YXIgYm9keVN0eWxlID0gX2JvZHkuc3R5bGUsXG4gICAgICAgICAgICBib3JkZXIgPSBib2R5U3R5bGUuYm9yZGVyVG9wU3R5bGUsXG4gICAgICAgICAgICBBbmltYXRpb25Qcm90byA9IGdzYXAuY29yZS5BbmltYXRpb24ucHJvdG90eXBlLFxuICAgICAgICAgICAgYm91bmRzLFxuICAgICAgICAgICAgaTtcbiAgICAgICAgQW5pbWF0aW9uUHJvdG8ucmV2ZXJ0IHx8IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBbmltYXRpb25Qcm90bywgXCJyZXZlcnRcIiwge1xuICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZSgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRpbWUoLTAuMDEsIHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7IC8vIG9ubHkgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IChBbmltYXRpb24ucmV2ZXJ0KCkgd2FzIGFkZGVkIGFmdGVyIDMuMTAuNClcblxuICAgICAgICBib2R5U3R5bGUuYm9yZGVyVG9wU3R5bGUgPSBcInNvbGlkXCI7IC8vIHdvcmtzIGFyb3VuZCBhbiBpc3N1ZSB3aGVyZSBhIG1hcmdpbiBvZiBhIGNoaWxkIGVsZW1lbnQgY291bGQgdGhyb3cgb2ZmIHRoZSBib3VuZHMgb2YgdGhlIF9ib2R5LCBtYWtpbmcgaXQgc2VlbSBsaWtlIHRoZXJlJ3MgYSBtYXJnaW4gd2hlbiB0aGVyZSBhY3R1YWxseSBpc24ndC4gVGhlIGJvcmRlciBlbnN1cmVzIHRoYXQgdGhlIGJvdW5kcyBhcmUgYWNjdXJhdGUuXG5cbiAgICAgICAgYm91bmRzID0gX2dldEJvdW5kcyhfYm9keSk7XG4gICAgICAgIF92ZXJ0aWNhbC5tID0gTWF0aC5yb3VuZChib3VuZHMudG9wICsgX3ZlcnRpY2FsLnNjKCkpIHx8IDA7IC8vIGFjY29tbW9kYXRlIHRoZSBvZmZzZXQgb2YgdGhlIDxib2R5PiBjYXVzZWQgYnkgbWFyZ2lucyBhbmQvb3IgcGFkZGluZ1xuXG4gICAgICAgIF9ob3Jpem9udGFsLm0gPSBNYXRoLnJvdW5kKGJvdW5kcy5sZWZ0ICsgX2hvcml6b250YWwuc2MoKSkgfHwgMDtcbiAgICAgICAgYm9yZGVyID8gYm9keVN0eWxlLmJvcmRlclRvcFN0eWxlID0gYm9yZGVyIDogYm9keVN0eWxlLnJlbW92ZVByb3BlcnR5KFwiYm9yZGVyLXRvcC1zdHlsZVwiKTsgLy8gVE9ETzogKD8pIG1heWJlIG1vdmUgdG8gbGV2ZXJhZ2luZyB0aGUgdmVsb2NpdHkgbWVjaGFuaXNtIGluIE9ic2VydmVyIGFuZCBza2lwIGludGVydmFscy5cblxuICAgICAgICBfc3luY0ludGVydmFsID0gc2V0SW50ZXJ2YWwoX3N5bmMsIDI1MCk7XG4gICAgICAgIGdzYXAuZGVsYXllZENhbGwoMC41LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIF9zdGFydHVwID0gMDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgX2FkZExpc3RlbmVyKF9kb2MsIFwidG91Y2hjYW5jZWxcIiwgX3Bhc3NUaHJvdWdoKTsgLy8gc29tZSBvbGRlciBBbmRyb2lkIGRldmljZXMgaW50ZXJtaXR0ZW50bHkgc3RvcCBkaXNwYXRjaGluZyBcInRvdWNobW92ZVwiIGV2ZW50cyBpZiB3ZSBkb24ndCBsaXN0ZW4gZm9yIFwidG91Y2hjYW5jZWxcIiBvbiB0aGUgZG9jdW1lbnQuXG5cblxuICAgICAgICBfYWRkTGlzdGVuZXIoX2JvZHksIFwidG91Y2hzdGFydFwiLCBfcGFzc1Rocm91Z2gpOyAvL3dvcmtzIGFyb3VuZCBTYWZhcmkgYnVnOiBodHRwczovL2dyZWVuc29jay5jb20vZm9ydW1zL3RvcGljLzIxNDUwLWRyYWdnYWJsZS1pbi1pZnJhbWUtb24tbW9iaWxlLWlzLWJ1Z2d5L1xuXG5cbiAgICAgICAgX211bHRpTGlzdGVuZXIoX2FkZExpc3RlbmVyLCBfZG9jLCBcInBvaW50ZXJkb3duLHRvdWNoc3RhcnQsbW91c2Vkb3duXCIsIF9wb2ludGVyRG93bkhhbmRsZXIpO1xuXG4gICAgICAgIF9tdWx0aUxpc3RlbmVyKF9hZGRMaXN0ZW5lciwgX2RvYywgXCJwb2ludGVydXAsdG91Y2hlbmQsbW91c2V1cFwiLCBfcG9pbnRlclVwSGFuZGxlcik7XG5cbiAgICAgICAgX3RyYW5zZm9ybVByb3AgPSBnc2FwLnV0aWxzLmNoZWNrUHJlZml4KFwidHJhbnNmb3JtXCIpO1xuXG4gICAgICAgIF9zdGF0ZVByb3BzLnB1c2goX3RyYW5zZm9ybVByb3ApO1xuXG4gICAgICAgIF9jb3JlSW5pdHRlZCA9IF9nZXRUaW1lKCk7XG4gICAgICAgIF9yZXNpemVEZWxheSA9IGdzYXAuZGVsYXllZENhbGwoMC4yLCBfcmVmcmVzaEFsbCkucGF1c2UoKTtcbiAgICAgICAgX2F1dG9SZWZyZXNoID0gW19kb2MsIFwidmlzaWJpbGl0eWNoYW5nZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIHcgPSBfd2luLmlubmVyV2lkdGgsXG4gICAgICAgICAgICAgIGggPSBfd2luLmlubmVySGVpZ2h0O1xuXG4gICAgICAgICAgaWYgKF9kb2MuaGlkZGVuKSB7XG4gICAgICAgICAgICBfcHJldldpZHRoID0gdztcbiAgICAgICAgICAgIF9wcmV2SGVpZ2h0ID0gaDtcbiAgICAgICAgICB9IGVsc2UgaWYgKF9wcmV2V2lkdGggIT09IHcgfHwgX3ByZXZIZWlnaHQgIT09IGgpIHtcbiAgICAgICAgICAgIF9vblJlc2l6ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgX2RvYywgXCJET01Db250ZW50TG9hZGVkXCIsIF9yZWZyZXNoQWxsLCBfd2luLCBcImxvYWRcIiwgX3JlZnJlc2hBbGwsIF93aW4sIFwicmVzaXplXCIsIF9vblJlc2l6ZV07XG5cbiAgICAgICAgX2l0ZXJhdGVBdXRvUmVmcmVzaChfYWRkTGlzdGVuZXIpO1xuXG4gICAgICAgIF90cmlnZ2Vycy5mb3JFYWNoKGZ1bmN0aW9uICh0cmlnZ2VyKSB7XG4gICAgICAgICAgcmV0dXJuIHRyaWdnZXIuZW5hYmxlKDAsIDEpO1xuICAgICAgICB9KTtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgX3Njcm9sbGVycy5sZW5ndGg7IGkgKz0gMykge1xuICAgICAgICAgIF93aGVlbExpc3RlbmVyKF9yZW1vdmVMaXN0ZW5lciwgX3Njcm9sbGVyc1tpXSwgX3Njcm9sbGVyc1tpICsgMV0pO1xuXG4gICAgICAgICAgX3doZWVsTGlzdGVuZXIoX3JlbW92ZUxpc3RlbmVyLCBfc2Nyb2xsZXJzW2ldLCBfc2Nyb2xsZXJzW2kgKyAyXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgU2Nyb2xsVHJpZ2dlci5jb25maWcgPSBmdW5jdGlvbiBjb25maWcodmFycykge1xuICAgIFwibGltaXRDYWxsYmFja3NcIiBpbiB2YXJzICYmIChfbGltaXRDYWxsYmFja3MgPSAhIXZhcnMubGltaXRDYWxsYmFja3MpO1xuICAgIHZhciBtcyA9IHZhcnMuc3luY0ludGVydmFsO1xuICAgIG1zICYmIGNsZWFySW50ZXJ2YWwoX3N5bmNJbnRlcnZhbCkgfHwgKF9zeW5jSW50ZXJ2YWwgPSBtcykgJiYgc2V0SW50ZXJ2YWwoX3N5bmMsIG1zKTtcbiAgICBcImlnbm9yZU1vYmlsZVJlc2l6ZVwiIGluIHZhcnMgJiYgKF9pZ25vcmVNb2JpbGVSZXNpemUgPSBTY3JvbGxUcmlnZ2VyLmlzVG91Y2ggPT09IDEgJiYgdmFycy5pZ25vcmVNb2JpbGVSZXNpemUpO1xuXG4gICAgaWYgKFwiYXV0b1JlZnJlc2hFdmVudHNcIiBpbiB2YXJzKSB7XG4gICAgICBfaXRlcmF0ZUF1dG9SZWZyZXNoKF9yZW1vdmVMaXN0ZW5lcikgfHwgX2l0ZXJhdGVBdXRvUmVmcmVzaChfYWRkTGlzdGVuZXIsIHZhcnMuYXV0b1JlZnJlc2hFdmVudHMgfHwgXCJub25lXCIpO1xuICAgICAgX2lnbm9yZVJlc2l6ZSA9ICh2YXJzLmF1dG9SZWZyZXNoRXZlbnRzICsgXCJcIikuaW5kZXhPZihcInJlc2l6ZVwiKSA9PT0gLTE7XG4gICAgfVxuICB9O1xuXG4gIFNjcm9sbFRyaWdnZXIuc2Nyb2xsZXJQcm94eSA9IGZ1bmN0aW9uIHNjcm9sbGVyUHJveHkodGFyZ2V0LCB2YXJzKSB7XG4gICAgdmFyIHQgPSBfZ2V0VGFyZ2V0KHRhcmdldCksXG4gICAgICAgIGkgPSBfc2Nyb2xsZXJzLmluZGV4T2YodCksXG4gICAgICAgIGlzVmlld3BvcnQgPSBfaXNWaWV3cG9ydCh0KTtcblxuICAgIGlmICh+aSkge1xuICAgICAgX3Njcm9sbGVycy5zcGxpY2UoaSwgaXNWaWV3cG9ydCA/IDYgOiAyKTtcbiAgICB9XG5cbiAgICBpZiAodmFycykge1xuICAgICAgaXNWaWV3cG9ydCA/IF9wcm94aWVzLnVuc2hpZnQoX3dpbiwgdmFycywgX2JvZHksIHZhcnMsIF9kb2NFbCwgdmFycykgOiBfcHJveGllcy51bnNoaWZ0KHQsIHZhcnMpO1xuICAgIH1cbiAgfTtcblxuICBTY3JvbGxUcmlnZ2VyLmNsZWFyTWF0Y2hNZWRpYSA9IGZ1bmN0aW9uIGNsZWFyTWF0Y2hNZWRpYShxdWVyeSkge1xuICAgIF90cmlnZ2Vycy5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7XG4gICAgICByZXR1cm4gdC5fY3R4ICYmIHQuX2N0eC5xdWVyeSA9PT0gcXVlcnkgJiYgdC5fY3R4LmtpbGwodHJ1ZSwgdHJ1ZSk7XG4gICAgfSk7XG4gIH07XG5cbiAgU2Nyb2xsVHJpZ2dlci5pc0luVmlld3BvcnQgPSBmdW5jdGlvbiBpc0luVmlld3BvcnQoZWxlbWVudCwgcmF0aW8sIGhvcml6b250YWwpIHtcbiAgICB2YXIgYm91bmRzID0gKF9pc1N0cmluZyhlbGVtZW50KSA/IF9nZXRUYXJnZXQoZWxlbWVudCkgOiBlbGVtZW50KS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgICAgb2Zmc2V0ID0gYm91bmRzW2hvcml6b250YWwgPyBfd2lkdGggOiBfaGVpZ2h0XSAqIHJhdGlvIHx8IDA7XG4gICAgcmV0dXJuIGhvcml6b250YWwgPyBib3VuZHMucmlnaHQgLSBvZmZzZXQgPiAwICYmIGJvdW5kcy5sZWZ0ICsgb2Zmc2V0IDwgX3dpbi5pbm5lcldpZHRoIDogYm91bmRzLmJvdHRvbSAtIG9mZnNldCA+IDAgJiYgYm91bmRzLnRvcCArIG9mZnNldCA8IF93aW4uaW5uZXJIZWlnaHQ7XG4gIH07XG5cbiAgU2Nyb2xsVHJpZ2dlci5wb3NpdGlvbkluVmlld3BvcnQgPSBmdW5jdGlvbiBwb3NpdGlvbkluVmlld3BvcnQoZWxlbWVudCwgcmVmZXJlbmNlUG9pbnQsIGhvcml6b250YWwpIHtcbiAgICBfaXNTdHJpbmcoZWxlbWVudCkgJiYgKGVsZW1lbnQgPSBfZ2V0VGFyZ2V0KGVsZW1lbnQpKTtcbiAgICB2YXIgYm91bmRzID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgICAgc2l6ZSA9IGJvdW5kc1tob3Jpem9udGFsID8gX3dpZHRoIDogX2hlaWdodF0sXG4gICAgICAgIG9mZnNldCA9IHJlZmVyZW5jZVBvaW50ID09IG51bGwgPyBzaXplIC8gMiA6IHJlZmVyZW5jZVBvaW50IGluIF9rZXl3b3JkcyA/IF9rZXl3b3Jkc1tyZWZlcmVuY2VQb2ludF0gKiBzaXplIDogfnJlZmVyZW5jZVBvaW50LmluZGV4T2YoXCIlXCIpID8gcGFyc2VGbG9hdChyZWZlcmVuY2VQb2ludCkgKiBzaXplIC8gMTAwIDogcGFyc2VGbG9hdChyZWZlcmVuY2VQb2ludCkgfHwgMDtcbiAgICByZXR1cm4gaG9yaXpvbnRhbCA/IChib3VuZHMubGVmdCArIG9mZnNldCkgLyBfd2luLmlubmVyV2lkdGggOiAoYm91bmRzLnRvcCArIG9mZnNldCkgLyBfd2luLmlubmVySGVpZ2h0O1xuICB9O1xuXG4gIFNjcm9sbFRyaWdnZXIua2lsbEFsbCA9IGZ1bmN0aW9uIGtpbGxBbGwoYWxsb3dMaXN0ZW5lcnMpIHtcbiAgICBfdHJpZ2dlcnMuZm9yRWFjaChmdW5jdGlvbiAodCkge1xuICAgICAgcmV0dXJuIHQudmFycy5pZCAhPT0gXCJTY3JvbGxTbW9vdGhlclwiICYmIHQua2lsbCgpO1xuICAgIH0pO1xuXG4gICAgaWYgKGFsbG93TGlzdGVuZXJzICE9PSB0cnVlKSB7XG4gICAgICB2YXIgbGlzdGVuZXJzID0gX2xpc3RlbmVycy5raWxsQWxsIHx8IFtdO1xuICAgICAgX2xpc3RlbmVycyA9IHt9O1xuICAgICAgbGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGYpIHtcbiAgICAgICAgcmV0dXJuIGYoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gU2Nyb2xsVHJpZ2dlcjtcbn0oKTtcblNjcm9sbFRyaWdnZXIudmVyc2lvbiA9IFwiMy4xMS4xXCI7XG5cblNjcm9sbFRyaWdnZXIuc2F2ZVN0eWxlcyA9IGZ1bmN0aW9uICh0YXJnZXRzKSB7XG4gIHJldHVybiB0YXJnZXRzID8gX3RvQXJyYXkodGFyZ2V0cykuZm9yRWFjaChmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgLy8gc2F2ZWQgc3R5bGVzIGFyZSByZWNvcmRlZCBpbiBhIGNvbnNlY3V0aXZlIGFsdGVybmF0aW5nIEFycmF5LCBsaWtlIFtlbGVtZW50LCBjc3NUZXh0LCB0cmFuc2Zvcm0gYXR0cmlidXRlLCBjYWNoZSwgbWF0Y2hNZWRpYSwgLi4uXVxuICAgIGlmICh0YXJnZXQgJiYgdGFyZ2V0LnN0eWxlKSB7XG4gICAgICB2YXIgaSA9IF9zYXZlZFN0eWxlcy5pbmRleE9mKHRhcmdldCk7XG5cbiAgICAgIGkgPj0gMCAmJiBfc2F2ZWRTdHlsZXMuc3BsaWNlKGksIDUpO1xuXG4gICAgICBfc2F2ZWRTdHlsZXMucHVzaCh0YXJnZXQsIHRhcmdldC5zdHlsZS5jc3NUZXh0LCB0YXJnZXQuZ2V0QkJveCAmJiB0YXJnZXQuZ2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIpLCBnc2FwLmNvcmUuZ2V0Q2FjaGUodGFyZ2V0KSwgX2NvbnRleHQoKSk7XG4gICAgfVxuICB9KSA6IF9zYXZlZFN0eWxlcztcbn07XG5cblNjcm9sbFRyaWdnZXIucmV2ZXJ0ID0gZnVuY3Rpb24gKHNvZnQsIG1lZGlhKSB7XG4gIHJldHVybiBfcmV2ZXJ0QWxsKCFzb2Z0LCBtZWRpYSk7XG59O1xuXG5TY3JvbGxUcmlnZ2VyLmNyZWF0ZSA9IGZ1bmN0aW9uICh2YXJzLCBhbmltYXRpb24pIHtcbiAgcmV0dXJuIG5ldyBTY3JvbGxUcmlnZ2VyKHZhcnMsIGFuaW1hdGlvbik7XG59O1xuXG5TY3JvbGxUcmlnZ2VyLnJlZnJlc2ggPSBmdW5jdGlvbiAoc2FmZSkge1xuICByZXR1cm4gc2FmZSA/IF9vblJlc2l6ZSgpIDogKF9jb3JlSW5pdHRlZCB8fCBTY3JvbGxUcmlnZ2VyLnJlZ2lzdGVyKCkpICYmIF9yZWZyZXNoQWxsKHRydWUpO1xufTtcblxuU2Nyb2xsVHJpZ2dlci51cGRhdGUgPSBfdXBkYXRlQWxsO1xuU2Nyb2xsVHJpZ2dlci5jbGVhclNjcm9sbE1lbW9yeSA9IF9jbGVhclNjcm9sbE1lbW9yeTtcblxuU2Nyb2xsVHJpZ2dlci5tYXhTY3JvbGwgPSBmdW5jdGlvbiAoZWxlbWVudCwgaG9yaXpvbnRhbCkge1xuICByZXR1cm4gX21heFNjcm9sbChlbGVtZW50LCBob3Jpem9udGFsID8gX2hvcml6b250YWwgOiBfdmVydGljYWwpO1xufTtcblxuU2Nyb2xsVHJpZ2dlci5nZXRTY3JvbGxGdW5jID0gZnVuY3Rpb24gKGVsZW1lbnQsIGhvcml6b250YWwpIHtcbiAgcmV0dXJuIF9nZXRTY3JvbGxGdW5jKF9nZXRUYXJnZXQoZWxlbWVudCksIGhvcml6b250YWwgPyBfaG9yaXpvbnRhbCA6IF92ZXJ0aWNhbCk7XG59O1xuXG5TY3JvbGxUcmlnZ2VyLmdldEJ5SWQgPSBmdW5jdGlvbiAoaWQpIHtcbiAgcmV0dXJuIF9pZHNbaWRdO1xufTtcblxuU2Nyb2xsVHJpZ2dlci5nZXRBbGwgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBfdHJpZ2dlcnMuZmlsdGVyKGZ1bmN0aW9uICh0KSB7XG4gICAgcmV0dXJuIHQudmFycy5pZCAhPT0gXCJTY3JvbGxTbW9vdGhlclwiO1xuICB9KTtcbn07IC8vIGl0J3MgY29tbW9uIGZvciBwZW9wbGUgdG8gU2Nyb2xsVHJpZ2dlci5nZXRBbGwodCA9PiB0LmtpbGwoKSkgb24gcGFnZSByb3V0ZXMsIGZvciBleGFtcGxlLCBhbmQgd2UgZG9uJ3Qgd2FudCBpdCB0byBydWluIHNtb290aCBzY3JvbGxpbmcgYnkga2lsbGluZyB0aGUgbWFpbiBTY3JvbGxTbW9vdGhlciBvbmUuXG5cblxuU2Nyb2xsVHJpZ2dlci5pc1Njcm9sbGluZyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICEhX2xhc3RTY3JvbGxUaW1lO1xufTtcblxuU2Nyb2xsVHJpZ2dlci5zbmFwRGlyZWN0aW9uYWwgPSBfc25hcERpcmVjdGlvbmFsO1xuXG5TY3JvbGxUcmlnZ2VyLmFkZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiAodHlwZSwgY2FsbGJhY2spIHtcbiAgdmFyIGEgPSBfbGlzdGVuZXJzW3R5cGVdIHx8IChfbGlzdGVuZXJzW3R5cGVdID0gW10pO1xuICB+YS5pbmRleE9mKGNhbGxiYWNrKSB8fCBhLnB1c2goY2FsbGJhY2spO1xufTtcblxuU2Nyb2xsVHJpZ2dlci5yZW1vdmVFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gKHR5cGUsIGNhbGxiYWNrKSB7XG4gIHZhciBhID0gX2xpc3RlbmVyc1t0eXBlXSxcbiAgICAgIGkgPSBhICYmIGEuaW5kZXhPZihjYWxsYmFjayk7XG4gIGkgPj0gMCAmJiBhLnNwbGljZShpLCAxKTtcbn07XG5cblNjcm9sbFRyaWdnZXIuYmF0Y2ggPSBmdW5jdGlvbiAodGFyZ2V0cywgdmFycykge1xuICB2YXIgcmVzdWx0ID0gW10sXG4gICAgICB2YXJzQ29weSA9IHt9LFxuICAgICAgaW50ZXJ2YWwgPSB2YXJzLmludGVydmFsIHx8IDAuMDE2LFxuICAgICAgYmF0Y2hNYXggPSB2YXJzLmJhdGNoTWF4IHx8IDFlOSxcbiAgICAgIHByb3h5Q2FsbGJhY2sgPSBmdW5jdGlvbiBwcm94eUNhbGxiYWNrKHR5cGUsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGVsZW1lbnRzID0gW10sXG4gICAgICAgIHRyaWdnZXJzID0gW10sXG4gICAgICAgIGRlbGF5ID0gZ3NhcC5kZWxheWVkQ2FsbChpbnRlcnZhbCwgZnVuY3Rpb24gKCkge1xuICAgICAgY2FsbGJhY2soZWxlbWVudHMsIHRyaWdnZXJzKTtcbiAgICAgIGVsZW1lbnRzID0gW107XG4gICAgICB0cmlnZ2VycyA9IFtdO1xuICAgIH0pLnBhdXNlKCk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzZWxmKSB7XG4gICAgICBlbGVtZW50cy5sZW5ndGggfHwgZGVsYXkucmVzdGFydCh0cnVlKTtcbiAgICAgIGVsZW1lbnRzLnB1c2goc2VsZi50cmlnZ2VyKTtcbiAgICAgIHRyaWdnZXJzLnB1c2goc2VsZik7XG4gICAgICBiYXRjaE1heCA8PSBlbGVtZW50cy5sZW5ndGggJiYgZGVsYXkucHJvZ3Jlc3MoMSk7XG4gICAgfTtcbiAgfSxcbiAgICAgIHA7XG5cbiAgZm9yIChwIGluIHZhcnMpIHtcbiAgICB2YXJzQ29weVtwXSA9IHAuc3Vic3RyKDAsIDIpID09PSBcIm9uXCIgJiYgX2lzRnVuY3Rpb24odmFyc1twXSkgJiYgcCAhPT0gXCJvblJlZnJlc2hJbml0XCIgPyBwcm94eUNhbGxiYWNrKHAsIHZhcnNbcF0pIDogdmFyc1twXTtcbiAgfVxuXG4gIGlmIChfaXNGdW5jdGlvbihiYXRjaE1heCkpIHtcbiAgICBiYXRjaE1heCA9IGJhdGNoTWF4KCk7XG5cbiAgICBfYWRkTGlzdGVuZXIoU2Nyb2xsVHJpZ2dlciwgXCJyZWZyZXNoXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBiYXRjaE1heCA9IHZhcnMuYmF0Y2hNYXgoKTtcbiAgICB9KTtcbiAgfVxuXG4gIF90b0FycmF5KHRhcmdldHMpLmZvckVhY2goZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIHZhciBjb25maWcgPSB7fTtcblxuICAgIGZvciAocCBpbiB2YXJzQ29weSkge1xuICAgICAgY29uZmlnW3BdID0gdmFyc0NvcHlbcF07XG4gICAgfVxuXG4gICAgY29uZmlnLnRyaWdnZXIgPSB0YXJnZXQ7XG4gICAgcmVzdWx0LnB1c2goU2Nyb2xsVHJpZ2dlci5jcmVhdGUoY29uZmlnKSk7XG4gIH0pO1xuXG4gIHJldHVybiByZXN1bHQ7XG59OyAvLyB0byByZWR1Y2UgZmlsZSBzaXplLiBjbGFtcHMgdGhlIHNjcm9sbCBhbmQgYWxzbyByZXR1cm5zIGEgZHVyYXRpb24gbXVsdGlwbGllciBzbyB0aGF0IGlmIHRoZSBzY3JvbGwgZ2V0cyBjaG9wcGVkIHNob3J0ZXIsIHRoZSBkdXJhdGlvbiBnZXRzIGN1cnRhaWxlZCBhcyB3ZWxsIChvdGhlcndpc2UgaWYgeW91J3JlIHZlcnkgY2xvc2UgdG8gdGhlIHRvcCBvZiB0aGUgcGFnZSwgZm9yIGV4YW1wbGUsIGFuZCBzd2lwZSB1cCByZWFsbHkgZmFzdCwgaXQnbGwgc3VkZGVubHkgc2xvdyBkb3duIGFuZCB0YWtlIGEgbG9uZyB0aW1lIHRvIHJlYWNoIHRoZSB0b3ApLlxuXG5cbnZhciBfY2xhbXBTY3JvbGxBbmRHZXREdXJhdGlvbk11bHRpcGxpZXIgPSBmdW5jdGlvbiBfY2xhbXBTY3JvbGxBbmRHZXREdXJhdGlvbk11bHRpcGxpZXIoc2Nyb2xsRnVuYywgY3VycmVudCwgZW5kLCBtYXgpIHtcbiAgY3VycmVudCA+IG1heCA/IHNjcm9sbEZ1bmMobWF4KSA6IGN1cnJlbnQgPCAwICYmIHNjcm9sbEZ1bmMoMCk7XG4gIHJldHVybiBlbmQgPiBtYXggPyAobWF4IC0gY3VycmVudCkgLyAoZW5kIC0gY3VycmVudCkgOiBlbmQgPCAwID8gY3VycmVudCAvIChjdXJyZW50IC0gZW5kKSA6IDE7XG59LFxuICAgIF9hbGxvd05hdGl2ZVBhbm5pbmcgPSBmdW5jdGlvbiBfYWxsb3dOYXRpdmVQYW5uaW5nKHRhcmdldCwgZGlyZWN0aW9uKSB7XG4gIGlmIChkaXJlY3Rpb24gPT09IHRydWUpIHtcbiAgICB0YXJnZXQuc3R5bGUucmVtb3ZlUHJvcGVydHkoXCJ0b3VjaC1hY3Rpb25cIik7XG4gIH0gZWxzZSB7XG4gICAgdGFyZ2V0LnN0eWxlLnRvdWNoQWN0aW9uID0gZGlyZWN0aW9uID09PSB0cnVlID8gXCJhdXRvXCIgOiBkaXJlY3Rpb24gPyBcInBhbi1cIiArIGRpcmVjdGlvbiArIChPYnNlcnZlci5pc1RvdWNoID8gXCIgcGluY2gtem9vbVwiIDogXCJcIikgOiBcIm5vbmVcIjsgLy8gbm90ZTogRmlyZWZveCBkb2Vzbid0IHN1cHBvcnQgaXQgcGluY2gtem9vbSBwcm9wZXJseSwgYXQgbGVhc3QgaW4gYWRkaXRpb24gdG8gYSBwYW4teCBvciBwYW4teS5cbiAgfVxuXG4gIHRhcmdldCA9PT0gX2RvY0VsICYmIF9hbGxvd05hdGl2ZVBhbm5pbmcoX2JvZHksIGRpcmVjdGlvbik7XG59LFxuICAgIF9vdmVyZmxvdyA9IHtcbiAgYXV0bzogMSxcbiAgc2Nyb2xsOiAxXG59LFxuICAgIF9uZXN0ZWRTY3JvbGwgPSBmdW5jdGlvbiBfbmVzdGVkU2Nyb2xsKF9yZWY1KSB7XG4gIHZhciBldmVudCA9IF9yZWY1LmV2ZW50LFxuICAgICAgdGFyZ2V0ID0gX3JlZjUudGFyZ2V0LFxuICAgICAgYXhpcyA9IF9yZWY1LmF4aXM7XG5cbiAgdmFyIG5vZGUgPSAoZXZlbnQuY2hhbmdlZFRvdWNoZXMgPyBldmVudC5jaGFuZ2VkVG91Y2hlc1swXSA6IGV2ZW50KS50YXJnZXQsXG4gICAgICBjYWNoZSA9IG5vZGUuX2dzYXAgfHwgZ3NhcC5jb3JlLmdldENhY2hlKG5vZGUpLFxuICAgICAgdGltZSA9IF9nZXRUaW1lKCksXG4gICAgICBjcztcblxuICBpZiAoIWNhY2hlLl9pc1Njcm9sbFQgfHwgdGltZSAtIGNhY2hlLl9pc1Njcm9sbFQgPiAyMDAwKSB7XG4gICAgLy8gY2FjaGUgZm9yIDIgc2Vjb25kcyB0byBpbXByb3ZlIHBlcmZvcm1hbmNlLlxuICAgIHdoaWxlIChub2RlICYmIG5vZGUuc2Nyb2xsSGVpZ2h0IDw9IG5vZGUuY2xpZW50SGVpZ2h0KSB7XG4gICAgICBub2RlID0gbm9kZS5wYXJlbnROb2RlO1xuICAgIH1cblxuICAgIGNhY2hlLl9pc1Njcm9sbCA9IG5vZGUgJiYgIV9pc1ZpZXdwb3J0KG5vZGUpICYmIG5vZGUgIT09IHRhcmdldCAmJiAoX292ZXJmbG93WyhjcyA9IF9nZXRDb21wdXRlZFN0eWxlKG5vZGUpKS5vdmVyZmxvd1ldIHx8IF9vdmVyZmxvd1tjcy5vdmVyZmxvd1hdKTtcbiAgICBjYWNoZS5faXNTY3JvbGxUID0gdGltZTtcbiAgfVxuXG4gIGlmIChjYWNoZS5faXNTY3JvbGwgfHwgYXhpcyA9PT0gXCJ4XCIpIHtcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBldmVudC5fZ3NhcEFsbG93ID0gdHJ1ZTtcbiAgfVxufSxcbiAgICAvLyBjYXB0dXJlIGV2ZW50cyBvbiBzY3JvbGxhYmxlIGVsZW1lbnRzIElOU0lERSB0aGUgPGJvZHk+IGFuZCBhbGxvdyB0aG9zZSBieSBjYWxsaW5nIHN0b3BQcm9wYWdhdGlvbigpIHdoZW4gd2UgZmluZCBhIHNjcm9sbGFibGUgYW5jZXN0b3Jcbl9pbnB1dE9ic2VydmVyID0gZnVuY3Rpb24gX2lucHV0T2JzZXJ2ZXIodGFyZ2V0LCB0eXBlLCBpbnB1dHMsIG5lc3RlZCkge1xuICByZXR1cm4gT2JzZXJ2ZXIuY3JlYXRlKHtcbiAgICB0YXJnZXQ6IHRhcmdldCxcbiAgICBjYXB0dXJlOiB0cnVlLFxuICAgIGRlYm91bmNlOiBmYWxzZSxcbiAgICBsb2NrQXhpczogdHJ1ZSxcbiAgICB0eXBlOiB0eXBlLFxuICAgIG9uV2hlZWw6IG5lc3RlZCA9IG5lc3RlZCAmJiBfbmVzdGVkU2Nyb2xsLFxuICAgIG9uUHJlc3M6IG5lc3RlZCxcbiAgICBvbkRyYWc6IG5lc3RlZCxcbiAgICBvblNjcm9sbDogbmVzdGVkLFxuICAgIG9uRW5hYmxlOiBmdW5jdGlvbiBvbkVuYWJsZSgpIHtcbiAgICAgIHJldHVybiBpbnB1dHMgJiYgX2FkZExpc3RlbmVyKF9kb2MsIE9ic2VydmVyLmV2ZW50VHlwZXNbMF0sIF9jYXB0dXJlSW5wdXRzLCBmYWxzZSwgdHJ1ZSk7XG4gICAgfSxcbiAgICBvbkRpc2FibGU6IGZ1bmN0aW9uIG9uRGlzYWJsZSgpIHtcbiAgICAgIHJldHVybiBfcmVtb3ZlTGlzdGVuZXIoX2RvYywgT2JzZXJ2ZXIuZXZlbnRUeXBlc1swXSwgX2NhcHR1cmVJbnB1dHMsIHRydWUpO1xuICAgIH1cbiAgfSk7XG59LFxuICAgIF9pbnB1dEV4cCA9IC8oaW5wdXR8bGFiZWx8c2VsZWN0fHRleHRhcmVhKS9pLFxuICAgIF9pbnB1dElzRm9jdXNlZCxcbiAgICBfY2FwdHVyZUlucHV0cyA9IGZ1bmN0aW9uIF9jYXB0dXJlSW5wdXRzKGUpIHtcbiAgdmFyIGlzSW5wdXQgPSBfaW5wdXRFeHAudGVzdChlLnRhcmdldC50YWdOYW1lKTtcblxuICBpZiAoaXNJbnB1dCB8fCBfaW5wdXRJc0ZvY3VzZWQpIHtcbiAgICBlLl9nc2FwQWxsb3cgPSB0cnVlO1xuICAgIF9pbnB1dElzRm9jdXNlZCA9IGlzSW5wdXQ7XG4gIH1cbn0sXG4gICAgX2dldFNjcm9sbE5vcm1hbGl6ZXIgPSBmdW5jdGlvbiBfZ2V0U2Nyb2xsTm9ybWFsaXplcih2YXJzKSB7XG4gIF9pc09iamVjdCh2YXJzKSB8fCAodmFycyA9IHt9KTtcbiAgdmFycy5wcmV2ZW50RGVmYXVsdCA9IHZhcnMuaXNOb3JtYWxpemVyID0gdmFycy5hbGxvd0NsaWNrcyA9IHRydWU7XG4gIHZhcnMudHlwZSB8fCAodmFycy50eXBlID0gXCJ3aGVlbCx0b3VjaFwiKTtcbiAgdmFycy5kZWJvdW5jZSA9ICEhdmFycy5kZWJvdW5jZTtcbiAgdmFycy5pZCA9IHZhcnMuaWQgfHwgXCJub3JtYWxpemVyXCI7XG5cbiAgdmFyIF92YXJzMiA9IHZhcnMsXG4gICAgICBub3JtYWxpemVTY3JvbGxYID0gX3ZhcnMyLm5vcm1hbGl6ZVNjcm9sbFgsXG4gICAgICBtb21lbnR1bSA9IF92YXJzMi5tb21lbnR1bSxcbiAgICAgIGFsbG93TmVzdGVkU2Nyb2xsID0gX3ZhcnMyLmFsbG93TmVzdGVkU2Nyb2xsLFxuICAgICAgc2VsZixcbiAgICAgIG1heFksXG4gICAgICB0YXJnZXQgPSBfZ2V0VGFyZ2V0KHZhcnMudGFyZ2V0KSB8fCBfZG9jRWwsXG4gICAgICBzbW9vdGhlciA9IGdzYXAuY29yZS5nbG9iYWxzKCkuU2Nyb2xsU21vb3RoZXIsXG4gICAgICBzbW9vdGhlckluc3RhbmNlID0gc21vb3RoZXIgJiYgc21vb3RoZXIuZ2V0KCksXG4gICAgICBjb250ZW50ID0gX2ZpeElPU0J1ZyAmJiAodmFycy5jb250ZW50ICYmIF9nZXRUYXJnZXQodmFycy5jb250ZW50KSB8fCBzbW9vdGhlckluc3RhbmNlICYmIHZhcnMuY29udGVudCAhPT0gZmFsc2UgJiYgIXNtb290aGVySW5zdGFuY2Uuc21vb3RoKCkgJiYgc21vb3RoZXJJbnN0YW5jZS5jb250ZW50KCkpLFxuICAgICAgc2Nyb2xsRnVuY1kgPSBfZ2V0U2Nyb2xsRnVuYyh0YXJnZXQsIF92ZXJ0aWNhbCksXG4gICAgICBzY3JvbGxGdW5jWCA9IF9nZXRTY3JvbGxGdW5jKHRhcmdldCwgX2hvcml6b250YWwpLFxuICAgICAgc2NhbGUgPSAxLFxuICAgICAgaW5pdGlhbFNjYWxlID0gKE9ic2VydmVyLmlzVG91Y2ggJiYgX3dpbi52aXN1YWxWaWV3cG9ydCA/IF93aW4udmlzdWFsVmlld3BvcnQuc2NhbGUgKiBfd2luLnZpc3VhbFZpZXdwb3J0LndpZHRoIDogX3dpbi5vdXRlcldpZHRoKSAvIF93aW4uaW5uZXJXaWR0aCxcbiAgICAgIHdoZWVsUmVmcmVzaCA9IDAsXG4gICAgICByZXNvbHZlTW9tZW50dW1EdXJhdGlvbiA9IF9pc0Z1bmN0aW9uKG1vbWVudHVtKSA/IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbW9tZW50dW0oc2VsZik7XG4gIH0gOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIG1vbWVudHVtIHx8IDIuODtcbiAgfSxcbiAgICAgIGxhc3RSZWZyZXNoSUQsXG4gICAgICBza2lwVG91Y2hNb3ZlLFxuICAgICAgaW5wdXRPYnNlcnZlciA9IF9pbnB1dE9ic2VydmVyKHRhcmdldCwgdmFycy50eXBlLCB0cnVlLCBhbGxvd05lc3RlZFNjcm9sbCksXG4gICAgICByZXN1bWVUb3VjaE1vdmUgPSBmdW5jdGlvbiByZXN1bWVUb3VjaE1vdmUoKSB7XG4gICAgcmV0dXJuIHNraXBUb3VjaE1vdmUgPSBmYWxzZTtcbiAgfSxcbiAgICAgIHNjcm9sbENsYW1wWCA9IF9wYXNzVGhyb3VnaCxcbiAgICAgIHNjcm9sbENsYW1wWSA9IF9wYXNzVGhyb3VnaCxcbiAgICAgIHVwZGF0ZUNsYW1wcyA9IGZ1bmN0aW9uIHVwZGF0ZUNsYW1wcygpIHtcbiAgICBtYXhZID0gX21heFNjcm9sbCh0YXJnZXQsIF92ZXJ0aWNhbCk7XG4gICAgc2Nyb2xsQ2xhbXBZID0gX2NsYW1wKF9maXhJT1NCdWcgPyAxIDogMCwgbWF4WSk7XG4gICAgbm9ybWFsaXplU2Nyb2xsWCAmJiAoc2Nyb2xsQ2xhbXBYID0gX2NsYW1wKDAsIF9tYXhTY3JvbGwodGFyZ2V0LCBfaG9yaXpvbnRhbCkpKTtcbiAgICBsYXN0UmVmcmVzaElEID0gX3JlZnJlc2hJRDtcbiAgfSxcbiAgICAgIHJlbW92ZUNvbnRlbnRPZmZzZXQgPSBmdW5jdGlvbiByZW1vdmVDb250ZW50T2Zmc2V0KCkge1xuICAgIGNvbnRlbnQuX2dzYXAueSA9IF9yb3VuZChwYXJzZUZsb2F0KGNvbnRlbnQuX2dzYXAueSkgKyBzY3JvbGxGdW5jWS5vZmZzZXQpICsgXCJweFwiO1xuICAgIGNvbnRlbnQuc3R5bGUudHJhbnNmb3JtID0gXCJtYXRyaXgzZCgxLCAwLCAwLCAwLCAwLCAxLCAwLCAwLCAwLCAwLCAxLCAwLCAwLCBcIiArIHBhcnNlRmxvYXQoY29udGVudC5fZ3NhcC55KSArIFwiLCAwLCAxKVwiO1xuICAgIHNjcm9sbEZ1bmNZLm9mZnNldCA9IHNjcm9sbEZ1bmNZLmNhY2hlSUQgPSAwO1xuICB9LFxuICAgICAgaWdub3JlRHJhZyA9IGZ1bmN0aW9uIGlnbm9yZURyYWcoKSB7XG4gICAgaWYgKHNraXBUb3VjaE1vdmUpIHtcbiAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShyZXN1bWVUb3VjaE1vdmUpO1xuXG4gICAgICB2YXIgb2Zmc2V0ID0gX3JvdW5kKHNlbGYuZGVsdGFZIC8gMiksXG4gICAgICAgICAgc2Nyb2xsID0gc2Nyb2xsQ2xhbXBZKHNjcm9sbEZ1bmNZLnYgLSBvZmZzZXQpO1xuXG4gICAgICBpZiAoY29udGVudCAmJiBzY3JvbGwgIT09IHNjcm9sbEZ1bmNZLnYgKyBzY3JvbGxGdW5jWS5vZmZzZXQpIHtcbiAgICAgICAgc2Nyb2xsRnVuY1kub2Zmc2V0ID0gc2Nyb2xsIC0gc2Nyb2xsRnVuY1kudjtcblxuICAgICAgICB2YXIgeSA9IF9yb3VuZCgocGFyc2VGbG9hdChjb250ZW50ICYmIGNvbnRlbnQuX2dzYXAueSkgfHwgMCkgLSBzY3JvbGxGdW5jWS5vZmZzZXQpO1xuXG4gICAgICAgIGNvbnRlbnQuc3R5bGUudHJhbnNmb3JtID0gXCJtYXRyaXgzZCgxLCAwLCAwLCAwLCAwLCAxLCAwLCAwLCAwLCAwLCAxLCAwLCAwLCBcIiArIHkgKyBcIiwgMCwgMSlcIjtcbiAgICAgICAgY29udGVudC5fZ3NhcC55ID0geSArIFwicHhcIjtcbiAgICAgICAgc2Nyb2xsRnVuY1kuY2FjaGVJRCA9IF9zY3JvbGxlcnMuY2FjaGU7XG5cbiAgICAgICAgX3VwZGF0ZUFsbCgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBzY3JvbGxGdW5jWS5vZmZzZXQgJiYgcmVtb3ZlQ29udGVudE9mZnNldCgpO1xuICAgIHNraXBUb3VjaE1vdmUgPSB0cnVlO1xuICB9LFxuICAgICAgdHdlZW4sXG4gICAgICBzdGFydFNjcm9sbFgsXG4gICAgICBzdGFydFNjcm9sbFksXG4gICAgICBvblN0b3BEZWxheWVkQ2FsbCxcbiAgICAgIG9uUmVzaXplID0gZnVuY3Rpb24gb25SZXNpemUoKSB7XG4gICAgLy8gaWYgdGhlIHdpbmRvdyByZXNpemVzLCBsaWtlIG9uIGFuIGlQaG9uZSB3aGljaCBBcHBsZSBGT1JDRVMgdGhlIGFkZHJlc3MgYmFyIHRvIHNob3cvaGlkZSBldmVuIGlmIHdlIGV2ZW50LnByZXZlbnREZWZhdWx0KCksIGl0IG1heSBiZSBzY3JvbGxpbmcgdG9vIGZhciBub3cgdGhhdCB0aGUgYWRkcmVzcyBiYXIgaXMgc2hvd2luZywgc28gd2UgbXVzdCBkeW5hbWljYWxseSBhZGp1c3QgdGhlIG1vbWVudHVtIHR3ZWVuLlxuICAgIHVwZGF0ZUNsYW1wcygpO1xuXG4gICAgaWYgKHR3ZWVuLmlzQWN0aXZlKCkgJiYgdHdlZW4udmFycy5zY3JvbGxZID4gbWF4WSkge1xuICAgICAgc2Nyb2xsRnVuY1koKSA+IG1heFkgPyB0d2Vlbi5wcm9ncmVzcygxKSAmJiBzY3JvbGxGdW5jWShtYXhZKSA6IHR3ZWVuLnJlc2V0VG8oXCJzY3JvbGxZXCIsIG1heFkpO1xuICAgIH1cbiAgfTtcblxuICBjb250ZW50ICYmIGdzYXAuc2V0KGNvbnRlbnQsIHtcbiAgICB5OiBcIis9MFwiXG4gIH0pOyAvLyB0byBlbnN1cmUgdGhlcmUncyBhIGNhY2hlIChlbGVtZW50Ll9nc2FwKVxuXG4gIHZhcnMuaWdub3JlQ2hlY2sgPSBmdW5jdGlvbiAoZSkge1xuICAgIHJldHVybiBfZml4SU9TQnVnICYmIGUudHlwZSA9PT0gXCJ0b3VjaG1vdmVcIiAmJiBpZ25vcmVEcmFnKGUpIHx8IHNjYWxlID4gMS4wNSAmJiBlLnR5cGUgIT09IFwidG91Y2hzdGFydFwiIHx8IHNlbGYuaXNHZXN0dXJpbmcgfHwgZS50b3VjaGVzICYmIGUudG91Y2hlcy5sZW5ndGggPiAxO1xuICB9O1xuXG4gIHZhcnMub25QcmVzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHJldlNjYWxlID0gc2NhbGU7XG4gICAgc2NhbGUgPSBfcm91bmQoKF93aW4udmlzdWFsVmlld3BvcnQgJiYgX3dpbi52aXN1YWxWaWV3cG9ydC5zY2FsZSB8fCAxKSAvIGluaXRpYWxTY2FsZSk7XG4gICAgdHdlZW4ucGF1c2UoKTtcbiAgICBwcmV2U2NhbGUgIT09IHNjYWxlICYmIF9hbGxvd05hdGl2ZVBhbm5pbmcodGFyZ2V0LCBzY2FsZSA+IDEuMDEgPyB0cnVlIDogbm9ybWFsaXplU2Nyb2xsWCA/IGZhbHNlIDogXCJ4XCIpO1xuICAgIHN0YXJ0U2Nyb2xsWCA9IHNjcm9sbEZ1bmNYKCk7XG4gICAgc3RhcnRTY3JvbGxZID0gc2Nyb2xsRnVuY1koKTtcbiAgICB1cGRhdGVDbGFtcHMoKTtcbiAgICBsYXN0UmVmcmVzaElEID0gX3JlZnJlc2hJRDtcbiAgfTtcblxuICB2YXJzLm9uUmVsZWFzZSA9IHZhcnMub25HZXN0dXJlU3RhcnQgPSBmdW5jdGlvbiAoc2VsZiwgd2FzRHJhZ2dpbmcpIHtcbiAgICBzY3JvbGxGdW5jWS5vZmZzZXQgJiYgcmVtb3ZlQ29udGVudE9mZnNldCgpO1xuXG4gICAgaWYgKCF3YXNEcmFnZ2luZykge1xuICAgICAgb25TdG9wRGVsYXllZENhbGwucmVzdGFydCh0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgX3Njcm9sbGVycy5jYWNoZSsrOyAvLyBtYWtlIHN1cmUgd2UncmUgcHVsbGluZyB0aGUgbm9uLWNhY2hlZCB2YWx1ZVxuICAgICAgLy8gYWx0ZXJuYXRlIGFsZ29yaXRobTogZHVyWCA9IE1hdGgubWluKDYsIE1hdGguYWJzKHNlbGYudmVsb2NpdHlYIC8gODAwKSksXHRkdXIgPSBNYXRoLm1heChkdXJYLCBNYXRoLm1pbig2LCBNYXRoLmFicyhzZWxmLnZlbG9jaXR5WSAvIDgwMCkpKTsgZHVyID0gZHVyICogKDAuNCArICgxIC0gX3Bvd2VyNEluKGR1ciAvIDYpKSAqIDAuNikpICogKG1vbWVudHVtU3BlZWQgfHwgMSlcblxuICAgICAgdmFyIGR1ciA9IHJlc29sdmVNb21lbnR1bUR1cmF0aW9uKCksXG4gICAgICAgICAgY3VycmVudFNjcm9sbCxcbiAgICAgICAgICBlbmRTY3JvbGw7XG5cbiAgICAgIGlmIChub3JtYWxpemVTY3JvbGxYKSB7XG4gICAgICAgIGN1cnJlbnRTY3JvbGwgPSBzY3JvbGxGdW5jWCgpO1xuICAgICAgICBlbmRTY3JvbGwgPSBjdXJyZW50U2Nyb2xsICsgZHVyICogMC4wNSAqIC1zZWxmLnZlbG9jaXR5WCAvIDAuMjI3OyAvLyB0aGUgY29uc3RhbnQgLjIyNyBpcyBmcm9tIHBvd2VyNCgwLjA1KS4gdmVsb2NpdHkgaXMgaW52ZXJ0ZWQgYmVjYXVzZSBzY3JvbGxpbmcgZ29lcyBpbiB0aGUgb3Bwb3NpdGUgZGlyZWN0aW9uLlxuXG4gICAgICAgIGR1ciAqPSBfY2xhbXBTY3JvbGxBbmRHZXREdXJhdGlvbk11bHRpcGxpZXIoc2Nyb2xsRnVuY1gsIGN1cnJlbnRTY3JvbGwsIGVuZFNjcm9sbCwgX21heFNjcm9sbCh0YXJnZXQsIF9ob3Jpem9udGFsKSk7XG4gICAgICAgIHR3ZWVuLnZhcnMuc2Nyb2xsWCA9IHNjcm9sbENsYW1wWChlbmRTY3JvbGwpO1xuICAgICAgfVxuXG4gICAgICBjdXJyZW50U2Nyb2xsID0gc2Nyb2xsRnVuY1koKTtcbiAgICAgIGVuZFNjcm9sbCA9IGN1cnJlbnRTY3JvbGwgKyBkdXIgKiAwLjA1ICogLXNlbGYudmVsb2NpdHlZIC8gMC4yMjc7IC8vIHRoZSBjb25zdGFudCAuMjI3IGlzIGZyb20gcG93ZXI0KDAuMDUpXG5cbiAgICAgIGR1ciAqPSBfY2xhbXBTY3JvbGxBbmRHZXREdXJhdGlvbk11bHRpcGxpZXIoc2Nyb2xsRnVuY1ksIGN1cnJlbnRTY3JvbGwsIGVuZFNjcm9sbCwgX21heFNjcm9sbCh0YXJnZXQsIF92ZXJ0aWNhbCkpO1xuICAgICAgdHdlZW4udmFycy5zY3JvbGxZID0gc2Nyb2xsQ2xhbXBZKGVuZFNjcm9sbCk7XG4gICAgICB0d2Vlbi5pbnZhbGlkYXRlKCkuZHVyYXRpb24oZHVyKS5wbGF5KDAuMDEpO1xuXG4gICAgICBpZiAoX2ZpeElPU0J1ZyAmJiB0d2Vlbi52YXJzLnNjcm9sbFkgPj0gbWF4WSB8fCBjdXJyZW50U2Nyb2xsID49IG1heFkgLSAxKSB7XG4gICAgICAgIC8vIGlPUyBidWc6IGl0J2xsIHNob3cgdGhlIGFkZHJlc3MgYmFyIGJ1dCBOT1QgZmlyZSB0aGUgd2luZG93IFwicmVzaXplXCIgZXZlbnQgdW50aWwgdGhlIGFuaW1hdGlvbiBpcyBkb25lIGJ1dCB3ZSBtdXN0IHByb3RlY3QgYWdhaW5zdCBvdmVyc2hvb3Qgc28gd2UgbGV2ZXJhZ2UgYW4gb25VcGRhdGUgdG8gZG8gc28uXG4gICAgICAgIGdzYXAudG8oe30sIHtcbiAgICAgICAgICBvblVwZGF0ZTogb25SZXNpemUsXG4gICAgICAgICAgZHVyYXRpb246IGR1clxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdmFycy5vbldoZWVsID0gZnVuY3Rpb24gKCkge1xuICAgIHR3ZWVuLl90cyAmJiB0d2Vlbi5wYXVzZSgpO1xuXG4gICAgaWYgKF9nZXRUaW1lKCkgLSB3aGVlbFJlZnJlc2ggPiAxMDAwKSB7XG4gICAgICAvLyBhZnRlciAxIHNlY29uZCwgcmVmcmVzaCB0aGUgY2xhbXBzIG90aGVyd2lzZSB0aGF0J2xsIG9ubHkgaGFwcGVuIHdoZW4gU2Nyb2xsVHJpZ2dlci5yZWZyZXNoKCkgaXMgY2FsbGVkIG9yIGZvciB0b3VjaC1zY3JvbGxpbmcuXG4gICAgICBsYXN0UmVmcmVzaElEID0gMDtcbiAgICAgIHdoZWVsUmVmcmVzaCA9IF9nZXRUaW1lKCk7XG4gICAgfVxuICB9O1xuXG4gIHZhcnMub25DaGFuZ2UgPSBmdW5jdGlvbiAoc2VsZiwgZHgsIGR5LCB4QXJyYXksIHlBcnJheSkge1xuICAgIF9yZWZyZXNoSUQgIT09IGxhc3RSZWZyZXNoSUQgJiYgdXBkYXRlQ2xhbXBzKCk7XG4gICAgZHggJiYgbm9ybWFsaXplU2Nyb2xsWCAmJiBzY3JvbGxGdW5jWChzY3JvbGxDbGFtcFgoeEFycmF5WzJdID09PSBkeCA/IHN0YXJ0U2Nyb2xsWCArIChzZWxmLnN0YXJ0WCAtIHNlbGYueCkgOiBzY3JvbGxGdW5jWCgpICsgZHggLSB4QXJyYXlbMV0pKTsgLy8gZm9yIG1vcmUgcHJlY2lzaW9uLCB3ZSB0cmFjayBwb2ludGVyL3RvdWNoIG1vdmVtZW50IGZyb20gdGhlIHN0YXJ0LCBvdGhlcndpc2UgaXQnbGwgZHJpZnQuXG5cbiAgICBpZiAoZHkpIHtcbiAgICAgIHNjcm9sbEZ1bmNZLm9mZnNldCAmJiByZW1vdmVDb250ZW50T2Zmc2V0KCk7XG4gICAgICB2YXIgaXNUb3VjaCA9IHlBcnJheVsyXSA9PT0gZHksXG4gICAgICAgICAgeSA9IGlzVG91Y2ggPyBzdGFydFNjcm9sbFkgKyBzZWxmLnN0YXJ0WSAtIHNlbGYueSA6IHNjcm9sbEZ1bmNZKCkgKyBkeSAtIHlBcnJheVsxXSxcbiAgICAgICAgICB5Q2xhbXBlZCA9IHNjcm9sbENsYW1wWSh5KTtcbiAgICAgIGlzVG91Y2ggJiYgeSAhPT0geUNsYW1wZWQgJiYgKHN0YXJ0U2Nyb2xsWSArPSB5Q2xhbXBlZCAtIHkpO1xuICAgICAgc2Nyb2xsRnVuY1koeUNsYW1wZWQpO1xuICAgIH1cblxuICAgIChkeSB8fCBkeCkgJiYgX3VwZGF0ZUFsbCgpO1xuICB9O1xuXG4gIHZhcnMub25FbmFibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgX2FsbG93TmF0aXZlUGFubmluZyh0YXJnZXQsIG5vcm1hbGl6ZVNjcm9sbFggPyBmYWxzZSA6IFwieFwiKTtcblxuICAgIF9hZGRMaXN0ZW5lcihfd2luLCBcInJlc2l6ZVwiLCBvblJlc2l6ZSk7XG5cbiAgICBpbnB1dE9ic2VydmVyLmVuYWJsZSgpO1xuICB9O1xuXG4gIHZhcnMub25EaXNhYmxlID0gZnVuY3Rpb24gKCkge1xuICAgIF9hbGxvd05hdGl2ZVBhbm5pbmcodGFyZ2V0LCB0cnVlKTtcblxuICAgIF9yZW1vdmVMaXN0ZW5lcihfd2luLCBcInJlc2l6ZVwiLCBvblJlc2l6ZSk7XG5cbiAgICBpbnB1dE9ic2VydmVyLmtpbGwoKTtcbiAgfTtcblxuICB2YXJzLmxvY2tBeGlzID0gdmFycy5sb2NrQXhpcyAhPT0gZmFsc2U7XG4gIHNlbGYgPSBuZXcgT2JzZXJ2ZXIodmFycyk7XG4gIHNlbGYuaU9TID0gX2ZpeElPU0J1ZzsgLy8gdXNlZCBpbiB0aGUgT2JzZXJ2ZXIgZ2V0Q2FjaGVkU2Nyb2xsKCkgZnVuY3Rpb24gdG8gd29yayBhcm91bmQgYW4gaU9TIGJ1ZyB0aGF0IHdyZWFrcyBoYXZvYyB3aXRoIFRvdWNoRXZlbnQuY2xpZW50WSBpZiB3ZSBhbGxvdyBzY3JvbGwgdG8gZ28gYWxsIHRoZSB3YXkgYmFjayB0byAwLlxuXG4gIF9maXhJT1NCdWcgJiYgIXNjcm9sbEZ1bmNZKCkgJiYgc2Nyb2xsRnVuY1koMSk7IC8vIGlPUyBidWcgY2F1c2VzIGV2ZW50LmNsaWVudFkgdmFsdWVzIHRvIGZyZWFrIG91dCAod2lsZGx5IGluYWNjdXJhdGUpIGlmIHRoZSBzY3JvbGwgcG9zaXRpb24gaXMgZXhhY3RseSAwLlxuXG4gIF9maXhJT1NCdWcgJiYgZ3NhcC50aWNrZXIuYWRkKF9wYXNzVGhyb3VnaCk7IC8vIHByZXZlbnQgdGhlIHRpY2tlciBmcm9tIHNsZWVwaW5nXG5cbiAgb25TdG9wRGVsYXllZENhbGwgPSBzZWxmLl9kYztcbiAgdHdlZW4gPSBnc2FwLnRvKHNlbGYsIHtcbiAgICBlYXNlOiBcInBvd2VyNFwiLFxuICAgIHBhdXNlZDogdHJ1ZSxcbiAgICBzY3JvbGxYOiBub3JtYWxpemVTY3JvbGxYID8gXCIrPTAuMVwiIDogXCIrPTBcIixcbiAgICBzY3JvbGxZOiBcIis9MC4xXCIsXG4gICAgb25Db21wbGV0ZTogb25TdG9wRGVsYXllZENhbGwudmFycy5vbkNvbXBsZXRlXG4gIH0pO1xuICByZXR1cm4gc2VsZjtcbn07XG5cblNjcm9sbFRyaWdnZXIuc29ydCA9IGZ1bmN0aW9uIChmdW5jKSB7XG4gIHJldHVybiBfdHJpZ2dlcnMuc29ydChmdW5jIHx8IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIChhLnZhcnMucmVmcmVzaFByaW9yaXR5IHx8IDApICogLTFlNiArIGEuc3RhcnQgLSAoYi5zdGFydCArIChiLnZhcnMucmVmcmVzaFByaW9yaXR5IHx8IDApICogLTFlNik7XG4gIH0pO1xufTtcblxuU2Nyb2xsVHJpZ2dlci5vYnNlcnZlID0gZnVuY3Rpb24gKHZhcnMpIHtcbiAgcmV0dXJuIG5ldyBPYnNlcnZlcih2YXJzKTtcbn07XG5cblNjcm9sbFRyaWdnZXIubm9ybWFsaXplU2Nyb2xsID0gZnVuY3Rpb24gKHZhcnMpIHtcbiAgaWYgKHR5cGVvZiB2YXJzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuIF9ub3JtYWxpemVyO1xuICB9XG5cbiAgaWYgKHZhcnMgPT09IHRydWUgJiYgX25vcm1hbGl6ZXIpIHtcbiAgICByZXR1cm4gX25vcm1hbGl6ZXIuZW5hYmxlKCk7XG4gIH1cblxuICBpZiAodmFycyA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm4gX25vcm1hbGl6ZXIgJiYgX25vcm1hbGl6ZXIua2lsbCgpO1xuICB9XG5cbiAgdmFyIG5vcm1hbGl6ZXIgPSB2YXJzIGluc3RhbmNlb2YgT2JzZXJ2ZXIgPyB2YXJzIDogX2dldFNjcm9sbE5vcm1hbGl6ZXIodmFycyk7XG4gIF9ub3JtYWxpemVyICYmIF9ub3JtYWxpemVyLnRhcmdldCA9PT0gbm9ybWFsaXplci50YXJnZXQgJiYgX25vcm1hbGl6ZXIua2lsbCgpO1xuICBfaXNWaWV3cG9ydChub3JtYWxpemVyLnRhcmdldCkgJiYgKF9ub3JtYWxpemVyID0gbm9ybWFsaXplcik7XG4gIHJldHVybiBub3JtYWxpemVyO1xufTtcblxuU2Nyb2xsVHJpZ2dlci5jb3JlID0ge1xuICAvLyBzbWFsbGVyIGZpbGUgc2l6ZSB3YXkgdG8gbGV2ZXJhZ2UgaW4gU2Nyb2xsU21vb3RoZXIgYW5kIE9ic2VydmVyXG4gIF9nZXRWZWxvY2l0eVByb3A6IF9nZXRWZWxvY2l0eVByb3AsXG4gIF9pbnB1dE9ic2VydmVyOiBfaW5wdXRPYnNlcnZlcixcbiAgX3Njcm9sbGVyczogX3Njcm9sbGVycyxcbiAgX3Byb3hpZXM6IF9wcm94aWVzLFxuICBicmlkZ2U6IHtcbiAgICAvLyB3aGVuIG5vcm1hbGl6ZVNjcm9sbCBzZXRzIHRoZSBzY3JvbGwgcG9zaXRpb24gKHNzID0gc2V0U2Nyb2xsKVxuICAgIHNzOiBmdW5jdGlvbiBzcygpIHtcbiAgICAgIF9sYXN0U2Nyb2xsVGltZSB8fCBfZGlzcGF0Y2goXCJzY3JvbGxTdGFydFwiKTtcbiAgICAgIF9sYXN0U2Nyb2xsVGltZSA9IF9nZXRUaW1lKCk7XG4gICAgfSxcbiAgICAvLyBhIHdheSB0byBnZXQgdGhlIF9yZWZyZXNoaW5nIHZhbHVlIGluIE9ic2VydmVyXG4gICAgcmVmOiBmdW5jdGlvbiByZWYoKSB7XG4gICAgICByZXR1cm4gX3JlZnJlc2hpbmc7XG4gICAgfVxuICB9XG59O1xuX2dldEdTQVAoKSAmJiBnc2FwLnJlZ2lzdGVyUGx1Z2luKFNjcm9sbFRyaWdnZXIpO1xuZXhwb3J0IHsgU2Nyb2xsVHJpZ2dlciBhcyBkZWZhdWx0IH07IiwiaW1wb3J0ICcuLi9zdHlsZXMvaW5kZXguc2NzcydcbmltcG9ydCBFbWJsYUNhcm91c2VsIGZyb20gJ2VtYmxhLWNhcm91c2VsJ1xuaW1wb3J0IEFuaW1hdGlvbiBmcm9tICcuL0FuaW1hdGlvbidcblxubmV3IEFuaW1hdGlvbigpXG5cbmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2FbaHJlZl49XCIjXCJdJykuZm9yRWFjaChhbmNob3IgPT4ge1xuXHRhbmNob3IuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xuXHRcdGUucHJldmVudERlZmF1bHQoKTtcblxuXHRcdGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5nZXRBdHRyaWJ1dGUoJ2hyZWYnKSkuc2Nyb2xsSW50b1ZpZXcoe1xuXHRcdFx0YmVoYXZpb3I6ICdzbW9vdGgnXG5cdFx0fSk7XG5cdH0pO1xufSk7XG5cbmlmIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZW1ibGEnKSkge1xuXHRjb25zdCByb290Tm9kZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5lbWJsYScpXG5cdGNvbnN0IHZpZXdwb3J0Tm9kZSA9IHJvb3ROb2RlLnF1ZXJ5U2VsZWN0b3IoJy5lbWJsYV9fdmlld3BvcnQnKVxuXG5cdGNvbnN0IHByZXZCdXR0b25Ob2RlID0gcm9vdE5vZGUucXVlcnlTZWxlY3RvcignLmVtYmxhX19wcmV2Jylcblx0Y29uc3QgbmV4dEJ1dHRvbk5vZGUgPSByb290Tm9kZS5xdWVyeVNlbGVjdG9yKCcuZW1ibGFfX25leHQnKVxuXG5cdGNvbnN0IG9wdGlvbnMgPSB7XG5cdFx0YWxpZ246ICdjZW50ZXInLFxuXHRcdHNraXBTbmFwczogZmFsc2Vcblx0fVxuXG5cdGNvbnN0IGVtYmxhID0gRW1ibGFDYXJvdXNlbCh2aWV3cG9ydE5vZGUsIG9wdGlvbnMpXG5cblx0cHJldkJ1dHRvbk5vZGUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlbWJsYS5zY3JvbGxQcmV2LCBmYWxzZSlcblx0bmV4dEJ1dHRvbk5vZGUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlbWJsYS5zY3JvbGxOZXh0LCBmYWxzZSlcbn1cblxuLyoqXG4gKiBWYXJpYWJsZXNcbiAqL1xuY29uc3Rcblx0Ym9keSA9IGRvY3VtZW50LmJvZHksXG5cdG5hdiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5uYXYnKSxcblx0bmF2SWNvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5uYXZfaWNvbicpLFxuXHRoZXJvRnVsbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5oZXJvLWZ1bGwnKSxcblx0aGVyb0ltZyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5oZXJvX2ltZycpLFxuXHRoZXJvT3ZlcmxheSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5oZXJvX292ZXJsYXknKSxcblx0Z2FsbGVyeSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5nYW1tZXNfc2xpZGVyJyksXG5cdGdhbGxlcnlJbm5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5nYW1tZXNfc2xpZGVyX2lubmVyJyksXG5cdG1vZGlmaWVycyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy10YWJzJylcblxuLyoqXG4gKiB0YWJzXG4gKi9cbmlmIChtb2RpZmllcnMpIHtcblx0Y29uc3QgbW9kaWZpZXJzID0ge1xuXHRcdGJ1dHRvbkFjdGl2ZTogJ3RhYnNfX2J1dHRvbi0tYWN0aXZlJyxcblx0XHRjb250ZW50QWN0aXZlOiAndGFic19fY29udGVudC0tYWN0aXZlJ1xuXHR9O1xuXG5cdGNvbnN0IGF0dHJpYnV0ZXMgPSB7XG5cdFx0dGFiSW5kZXg6ICdkYXRhLXRhYi1pbmRleCdcblx0fTtcblxuXHRjb25zdCBlbFJvb3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtdGFicycpO1xuXHRjb25zdCBlbHNCdXR0b24gPSBlbFJvb3QucXVlcnlTZWxlY3RvckFsbCgnLmpzLXRhYnNfX2J1dHRvbicpO1xuXHRjb25zdCBlbHNDb250ZW50ID0gZWxSb290LnF1ZXJ5U2VsZWN0b3JBbGwoJy5qcy10YWJzX19jb250ZW50Jyk7XG5cblx0Y29uc3QgY2hhbmdlVGFiID0gaW5kZXggPT4ge1xuXHRcdGVsc0J1dHRvbi5mb3JFYWNoKGVsID0+IHtcblx0XHRcdGVsLmNsYXNzTGlzdC5yZW1vdmUobW9kaWZpZXJzLmJ1dHRvbkFjdGl2ZSk7XG5cdFx0XHRpZiAoZWwuZ2V0QXR0cmlidXRlKGF0dHJpYnV0ZXMudGFiSW5kZXgpID09PSBpbmRleCkge1xuXHRcdFx0XHRlbC5jbGFzc0xpc3QuYWRkKG1vZGlmaWVycy5idXR0b25BY3RpdmUpO1xuXHRcdFx0XHRjb25zb2xlLmxvZyhlbCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRlbHNDb250ZW50LmZvckVhY2goZWwgPT4ge1xuXHRcdFx0ZWwuY2xhc3NMaXN0LnJlbW92ZShtb2RpZmllcnMuY29udGVudEFjdGl2ZSk7XG5cdFx0XHRpZiAoZWwuZ2V0QXR0cmlidXRlKGF0dHJpYnV0ZXMudGFiSW5kZXgpID09PSBpbmRleCkge1xuXHRcdFx0XHRlbC5jbGFzc0xpc3QuYWRkKG1vZGlmaWVycy5jb250ZW50QWN0aXZlKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fTtcblxuXHRlbHNCdXR0b24uZm9yRWFjaChlbCA9PiB7XG5cdFx0ZWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlID0+IHtcblx0XHRcdGNvbnN0IHRhYkluZGV4ID0gZWwuZ2V0QXR0cmlidXRlKGF0dHJpYnV0ZXMudGFiSW5kZXgpO1xuXG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRjaGFuZ2VUYWIodGFiSW5kZXgpO1xuXHRcdH0pO1xuXHR9KTtcbn1cblxuXG4vKipcbiAqIE5hdiBtb2JpbGUgbWVudSBidXJnZXJcbiAqL1xuY29uc3Qgc2V0QWN0aXZlQ2xhc3NPbk5hdiA9ICgpID0+IHtcblx0Ym9keS5jbGFzc0xpc3QuY29udGFpbnMoJ2FjdGl2ZScpXG5cdFx0PyBib2R5LmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpXG5cdFx0OiBib2R5LmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpXG59XG5cbmlmIChuYXZJY29uKSB7XG5cdG5hdkljb24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiBzZXRBY3RpdmVDbGFzc09uTmF2KCkpXG59XG5cbi8qKlxuICogSGVpZ2h0IG9mIGhlcm8gZGVwZW5kcyBvZiBuYXYgaGVpZ2h0LlxuICovXG5pZiAoaGVyb0Z1bGwpIHtcblx0Y29uc3Qgc2V0SGVpZ2h0T2ZIZXJvID0gKCkgPT4ge1xuXHRcdGNvbnN0IG5hdkhlaWdodCA9IG5hdi5vZmZzZXRIZWlnaHRcblx0XHRoZXJvRnVsbC5zdHlsZS5oZWlnaHQgPSBgY2FsYygxMDB2aCAtICR7bmF2SGVpZ2h0fXB4KWBcblx0fVxuXG5cdGlmICh3aW5kb3cubWF0Y2hNZWRpYSgnKG1pbi13aWR0aDogMTAwMHB4KScpLm1hdGNoZXMpIHNldEhlaWdodE9mSGVybygpXG5cblx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsICgpID0+IHtcblx0XHRpZiAod2luZG93Lm1hdGNoTWVkaWEoJyhtaW4td2lkdGg6IDEwMDBweCknKS5tYXRjaGVzKSBzZXRIZWlnaHRPZkhlcm8oKVxuXHRcdGVsc2UgaGVyb0Z1bGwuc3R5bGUuaGVpZ2h0ID0gJ2F1dG8nXG5cdH0pXG59XG5cbi8qKlxuICogSGVpZ2h0IG9mIHRoZSB3aGl0ZSBwYXJ0IG9uIGFydGljbGUgaGVyb1xuICovXG5pZiAoaGVyb092ZXJsYXkpIHtcblx0Y29uc3Qgc2V0SGVpZ2h0T2ZPdmVybGF5ID0gKCkgPT4ge1xuXHRcdGNvbnN0IG92ZXJsYXlIZWlnaHQgPSBoZXJvSW1nLm9mZnNldEhlaWdodFxuXHRcdGhlcm9PdmVybGF5LnN0eWxlLmhlaWdodCA9IGBjYWxjKCR7b3ZlcmxheUhlaWdodCAvIDJ9cHgpYFxuXHR9XG5cdHNldEhlaWdodE9mT3ZlcmxheSgpXG5cdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCAoKSA9PiBzZXRIZWlnaHRPZk92ZXJsYXkoKSlcbn1cblxuLyoqXG4gKiBHYW1tZXMgZHJhZ2dhYmxlXG4gKi9cbmxldFxuXHRwcmVzc2VkID0gZmFsc2UsXG5cdHN0YXJ0WCA9IG51bGwsXG5cdHggPSBudWxsXG5cbmlmIChnYWxsZXJ5KSB7XG5cdGlmICgvQW5kcm9pZHx3ZWJPU3xpUGhvbmV8aVBhZHxpUG9kfEJsYWNrQmVycnl8SUVNb2JpbGV8T3BlcmEgTWluaS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkpIHtcblx0XHRnYWxsZXJ5LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBlID0+IHtcblx0XHRcdHByZXNzZWQgPSB0cnVlXG5cdFx0XHRzdGFydFggPSBlLnRvdWNoZXNbMF0uc2NyZWVuWCAtIGdhbGxlcnlJbm5lci5vZmZzZXRMZWZ0XG5cdFx0XHRnYWxsZXJ5LnN0eWxlLmN1cnNvciA9ICdncmFiYmluZydcblx0XHR9LCB7IHBhc3NpdmU6IHRydWUgfSlcblxuXHRcdGdhbGxlcnkuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbnRlcicsICgpID0+IGdhbGxlcnkuc3R5bGUuY3Vyc29yID0gJ2dyYWInLCB7IHBhc3NpdmU6IHRydWUgfSlcblxuXHRcdGdhbGxlcnkuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCAoKSA9PiBnYWxsZXJ5LnN0eWxlLmN1cnNvciA9ICdncmFiJywgeyBwYXNzaXZlOiB0cnVlIH0pXG5cblx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCAoKSA9PiBwcmVzc2VkID0gZmFsc2UsIHsgcGFzc2l2ZTogdHJ1ZSB9KVxuXG5cdFx0Z2FsbGVyeS5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCBlID0+IHtcblx0XHRcdGlmICghcHJlc3NlZCkgcmV0dXJuXG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KClcblxuXHRcdFx0eCA9IGUudG91Y2hlc1swXS5zY3JlZW5YXG5cblx0XHRcdGdhbGxlcnlJbm5lci5zdHlsZS5sZWZ0ID0gYCR7KHggLSBzdGFydFgpfXB4YFxuXG5cdFx0XHRjaGVja0JvdW5kYXJ5KClcblx0XHR9LCB7IHBhc3NpdmU6IHRydWUgfSlcblx0fSBlbHNlIHtcblx0XHRnYWxsZXJ5LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGUgPT4ge1xuXHRcdFx0cHJlc3NlZCA9IHRydWVcblx0XHRcdHN0YXJ0WCA9IGUub2Zmc2V0WCAtIGdhbGxlcnlJbm5lci5vZmZzZXRMZWZ0XG5cdFx0XHRnYWxsZXJ5LnN0eWxlLmN1cnNvciA9ICdncmFiYmluZydcblx0XHR9KVxuXG5cdFx0Z2FsbGVyeS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgKCkgPT4gZ2FsbGVyeS5zdHlsZS5jdXJzb3IgPSAnZ3JhYicpXG5cblx0XHRnYWxsZXJ5LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCAoKSA9PiBnYWxsZXJ5LnN0eWxlLmN1cnNvciA9ICdncmFiJylcblxuXHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgKCkgPT4gcHJlc3NlZCA9IGZhbHNlKVxuXG5cdFx0Z2FsbGVyeS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBlID0+IHtcblx0XHRcdGlmICghcHJlc3NlZCkgcmV0dXJuXG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KClcblxuXHRcdFx0eCA9IGUub2Zmc2V0WFxuXHRcdFx0Z2FsbGVyeUlubmVyLnN0eWxlLmxlZnQgPSBgJHsoeCAtIHN0YXJ0WCl9cHhgXG5cblx0XHRcdGNoZWNrQm91bmRhcnkoKVxuXHRcdH0pXG5cdH1cbn1cblxuZnVuY3Rpb24gY2hlY2tCb3VuZGFyeSgpIHtcblx0Y29uc3Rcblx0XHRvdXRlciA9IGdhbGxlcnkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG5cdFx0aW5uZXIgPSBnYWxsZXJ5SW5uZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcblxuXHRpZiAocGFyc2VJbnQoZ2FsbGVyeUlubmVyLnN0eWxlLmxlZnQpID4gMCkge1xuXHRcdGdhbGxlcnlJbm5lci5zdHlsZS5sZWZ0ID0gJzBweCdcblx0fSBlbHNlIGlmIChpbm5lci5yaWdodCA8IG91dGVyLnJpZ2h0KSB7XG5cdFx0Z2FsbGVyeUlubmVyLnN0eWxlLmxlZnQgPSBgLSR7aW5uZXIud2lkdGggLSBvdXRlci53aWR0aH1weGBcblx0fVxufVxuXG4vKipcbiAqIFRlc3RpbW9uaWFscyBzbGlkZXJcbiAqL1xuZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmdhbGxlcnknKS5mb3JFYWNoKGdhbGxlcnkgPT4ge1xuXG5cdGNvbnN0XG5cdFx0c2xpZGVyID0gZ2FsbGVyeS5xdWVyeVNlbGVjdG9yKCcuc2xpZGVyX2lubmVyJyksXG5cdFx0c2xpZGVzID0gZ2FsbGVyeS5xdWVyeVNlbGVjdG9yQWxsKCcuc2xpZGUnKSxcblx0XHRwcmV2QnRuID0gZ2FsbGVyeS5xdWVyeVNlbGVjdG9yKCcucHJldicpLFxuXHRcdG5leHRCdG4gPSBnYWxsZXJ5LnF1ZXJ5U2VsZWN0b3IoJy5uZXh0JyksXG5cdFx0bnVtU2xpZGVzID0gc2xpZGVzLmxlbmd0aFxuXG5cdGxldFxuXHRcdHNsaWRlV2lkdGggPSBzbGlkZXNbMF0ub2Zmc2V0V2lkdGgsXG5cdFx0c2xpZGVNYXJnaW5SaWdodCA9IHBhcnNlSW50KGdldENvbXB1dGVkU3R5bGUoc2xpZGVzWzBdKS5tYXJnaW5SaWdodCksXG5cdFx0bW92ZVggPSBzbGlkZVdpZHRoICsgc2xpZGVNYXJnaW5SaWdodFxuXG5cdGNvbnN0XG5cdFx0Zmlyc3RDbG9uZSA9IHNsaWRlc1swXS5jbG9uZU5vZGUodHJ1ZSksXG5cdFx0bGFzdENsb25lID0gc2xpZGVzW251bVNsaWRlcyAtIDFdLmNsb25lTm9kZSh0cnVlKVxuXG5cdGZpcnN0Q2xvbmUuc2V0QXR0cmlidXRlKCdpZCcsICdmaXJzdC1jbG9uZScpXG5cdGxhc3RDbG9uZS5zZXRBdHRyaWJ1dGUoJ2lkJywgJ2xhc3QtY2xvbmUnKVxuXG5cdHNsaWRlci5hcHBlbmRDaGlsZChmaXJzdENsb25lKVxuXHRzbGlkZXIucHJlcGVuZChsYXN0Q2xvbmUpXG5cblx0Y29uc3QgYWxsU2xpZGVzID0gZ2FsbGVyeS5xdWVyeVNlbGVjdG9yQWxsKCcuc2xpZGUnKVxuXG5cdHNsaWRlci5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlWCgkey1tb3ZlWH1weClgXG5cblx0bGV0IGNvdW50ZXIgPSAxXG5cblx0bmV4dEJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcblx0XHRjb3VudGVyKytcblx0XHRzbGlkZXIuc3R5bGUudHJhbnNpdGlvbiA9ICd0cmFuc2Zvcm0gMC41cyBlYXNlLWluLW91dCwgb3BhY2l0eSAwLjJzJ1xuXHRcdHNsaWRlci5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlWCgkey0obW92ZVggKiBjb3VudGVyKX1weClgXG5cdFx0aWYgKGNvdW50ZXIgPj0gYWxsU2xpZGVzLmxlbmd0aCkgY291bnRlciA9IG51bVNsaWRlc1xuXHR9KVxuXG5cdHByZXZCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG5cdFx0Y291bnRlci0tXG5cdFx0c2xpZGVyLnN0eWxlLnRyYW5zaXRpb24gPSAndHJhbnNmb3JtIDAuNXMgZWFzZS1pbi1vdXQsIG9wYWNpdHkgMC4ycydcblx0XHRzbGlkZXIuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZVgoJHstKG1vdmVYICogY291bnRlcil9cHgpYFxuXHRcdGlmIChjb3VudGVyIDwgMCkgY291bnRlciA9IDBcblx0fSlcblxuXHRzbGlkZXIuYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsICgpID0+IHtcblx0XHRpZiAoYWxsU2xpZGVzW2NvdW50ZXJdLmlkID09PSAnZmlyc3QtY2xvbmUnKSB7XG5cdFx0XHRzbGlkZXIuc3R5bGUudHJhbnNpdGlvbiA9ICdub25lJ1xuXHRcdFx0Y291bnRlciA9IDFcblx0XHRcdHNsaWRlci5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlWCgkey0obW92ZVggKiBjb3VudGVyKX1weClgXG5cdFx0fVxuXG5cdFx0aWYgKGFsbFNsaWRlc1tjb3VudGVyXS5pZCA9PT0gJ2xhc3QtY2xvbmUnKSB7XG5cdFx0XHRzbGlkZXIuc3R5bGUudHJhbnNpdGlvbiA9ICdub25lJ1xuXHRcdFx0Y291bnRlciA9IG51bVNsaWRlc1xuXHRcdFx0c2xpZGVyLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGVYKCR7LShtb3ZlWCAqIGNvdW50ZXIpfXB4KWBcblx0XHR9XG5cdH0pXG5cblx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsICgpID0+IHtcblx0XHRzbGlkZVdpZHRoID0gc2xpZGVzWzBdLm9mZnNldFdpZHRoXG5cdFx0c2xpZGVNYXJnaW5SaWdodCA9IHBhcnNlSW50KGdldENvbXB1dGVkU3R5bGUoc2xpZGVzWzBdKS5tYXJnaW5SaWdodClcblx0XHRtb3ZlWCA9IHNsaWRlV2lkdGggKyBzbGlkZU1hcmdpblJpZ2h0XG5cdFx0c2xpZGVyLnN0eWxlLnRyYW5zaXRpb24gPSAnbm9uZSdcblx0XHRzbGlkZXIuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZVgoJHstKG1vdmVYICogY291bnRlcil9cHgpYFxuXHR9KVxufSlcblxuLyoqXG4gKiBCYXJyZSBkZSByZWNoZXJjaGVcbiAqL1xuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGZ1bmN0aW9uICgpIHtcblxuXHR2YXIgbXloaWRkZW50aGluZyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5teWhpZGRlbnRoaW5nJyk7XG5cblx0dmFyIG15dG9nZ2xlYnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm15dG9nZ2xlYnV0dG9uJyk7XG5cdG15dG9nZ2xlYnV0dG9uLm9uY2xpY2sgPSBmdW5jdGlvbiAoKSB7XG5cdFx0bXloaWRkZW50aGluZy5jbGFzc0xpc3QudG9nZ2xlKCdhY3RpdmUnKTtcblx0fTtcblxuXHR2YXIgbXljbG9zZWJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5teWNsb3NlYnV0dG9uJyk7XG5cdG15Y2xvc2VidXR0b24ub25jbGljayA9IGZ1bmN0aW9uICgpIHtcblx0XHRteWhpZGRlbnRoaW5nLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpO1xuXHR9O1xufSk7IiwiaW1wb3J0IHsgZ3NhcCB9IGZyb20gJ2dzYXAnXG5pbXBvcnQgeyBTY3JvbGxUcmlnZ2VyIH0gZnJvbSAnZ3NhcC9TY3JvbGxUcmlnZ2VyJ1xuXG5nc2FwLnJlZ2lzdGVyUGx1Z2luKFNjcm9sbFRyaWdnZXIpXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFuaW1hdGlvbiB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuaGVhZGVySG9tZSgpXG4gICAgICAgIHRoaXMubWVzc2FnZUZvcnQoKVxuICAgICAgICB0aGlzLmxpc3Rlc0ljb25lcygpXG4gICAgICAgIHRoaXMubW9kdWxhaXJlKClcbiAgICAgICAgdGhpcy5nYW1tZXMoKVxuICAgICAgICB0aGlzLnByb2R1aXRzKClcbiAgICAgICAgdGhpcy5hY3R1YWxpdGVzKClcbiAgICAgICAgdGhpcy50ZW1vaWduYWdlcygpXG4gICAgICAgIHRoaXMuY29vcmRvbm5lZXMoKVxuICAgICAgICB0aGlzLmNvbnRhY3QoKVxuICAgICAgICB0aGlzLmhlYWRlclRpdHJlSW1hZ2VDbG91ZCgpXG4gICAgICAgIHRoaXMudGV4dCgpXG4gICAgICAgIHRoaXMuaGVhZGVyUHJvZHVjdCgpXG4gICAgICAgIHRoaXMudGV4dGVDZW50cmUoKVxuICAgICAgICB0aGlzLmRldXhDb2xvbm5lcygpXG4gICAgICAgIHRoaXMuaW1hZ2UoKVxuICAgICAgICB0aGlzLmxheW91dFRleHRlSW1hZ2UoKVxuICAgICAgICB0aGlzLnRhYnMoKVxuICAgICAgICB0aGlzLnJlYXNzdXJhbmNlKClcbiAgICAgICAgdGhpcy5kZXV4Q29sb25uZXNJbWFnZSgpXG4gICAgICAgIHRoaXMuZ2FsZXJpZSgpXG4gICAgICAgIHRoaXMuZGV1eFBhcmFncmFwaGVzQm91dG9uKClcbiAgICAgICAgdGhpcy5oZWFkZXJHYW1tZSgpXG4gICAgICAgIHRoaXMuZGV1eENvbG9ubmVzTGF5b3V0Qm91dG9uSW1hZ2UoKVxuICAgICAgICB0aGlzLnRhaWxsZXMoKVxuICAgICAgICB0aGlzLnRhaWxsZXNEZXV4Q29sb25uZXMoKVxuICAgICAgICB0aGlzLmxheW91dFRpdHJlVGV4dGVCb3V0b25JbWFnZSgpXG4gICAgICAgIHRoaXMucGFyYWdyYXBoZUdhdWNoZSgpXG4gICAgICAgIHRoaXMubGF5b3V0VmlkZW9UZXh0ZSgpXG4gICAgICAgIHRoaXMucGFyYWdyYXBoZUNlbnRyZSgpXG4gICAgICAgIHRoaXMudmlkZW8oKVxuICAgICAgICB0aGlzLnRpdHJlUGFyYWdyYXBoZUdhdWNoZSgpXG4gICAgICAgIHRoaXMuaGVhZGVyVGl0cmVEZXNjcmlwdGlvbigpXG4gICAgICAgIHRoaXMuYXBwZWwoKVxuICAgICAgICB0aGlzLmJhbm5pZXJlSW1hZ2UoKVxuICAgICAgICB0aGlzLnRpdHJlTG9uZ1RleHRJbWFnZSgpXG4gICAgICAgIHRoaXMudmFsZXVycygpXG4gICAgICAgIHRoaXMuZXF1aXBlKClcbiAgICAgICAgdGhpcy5ib3V0b24oKVxuICAgICAgICB0aGlzLmhlYWRlckJsb2coKVxuICAgICAgICB0aGlzLmhlYWRlclBvc3QoKVxuICAgIH1cblxuICAgIGhlYWRlckhvbWUoKSB7XG4gICAgICAgIGNvbnN0IGJsb2NrID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLndwLWJsb2NrLWxhenlibG9jay1oZWFkZXItaG9tZScpXG5cbiAgICAgICAgaWYgKGJsb2NrKSB7XG4gICAgICAgICAgICBjb25zdCBibG9ja0J0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy53cC1ibG9jay1sYXp5YmxvY2staGVhZGVyLWhvbWUgLmFuaW1fc2NhbGUnKVxuXG4gICAgICAgICAgICBjb25zdCB0aW1lbGluZSA9IGdzYXAudGltZWxpbmUoe1xuICAgICAgICAgICAgICAgIGRlZmF1bHRzOiB7IGR1cmF0aW9uOiAxLCBlYXNlOiAnZXhwby5vdXQnIH0sXG4gICAgICAgICAgICAgICAgc2Nyb2xsVHJpZ2dlcjogeyB0cmlnZ2VyOiBibG9jayB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgY29uc3QgdGltZWxpbmVCdG4gPSBnc2FwLnRpbWVsaW5lKHtcbiAgICAgICAgICAgICAgICBkZWZhdWx0czogeyBkdXJhdGlvbjogMC40LCBlYXNlOiAnZXhwby5vdXQnIH0sXG4gICAgICAgICAgICAgICAgc2Nyb2xsVHJpZ2dlcjogeyB0cmlnZ2VyOiBibG9ja0J0biB9XG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICB0aW1lbGluZVxuICAgICAgICAgICAgICAgIC50byhibG9jay5xdWVyeVNlbGVjdG9yKCcuYW5pbV9jbG91ZCcpLCB7IG9wYWNpdHk6IDEgfSwgMC4yKVxuICAgICAgICAgICAgICAgIC50byhibG9jay5xdWVyeVNlbGVjdG9yKCcuYW5pbV9jbG91ZCcpLCB7IHk6IDAsIHNjYWxlOiAxLCBkdXJhdGlvbjogMywgZWFzZTogJ2V4cG8ub3V0JyB9LCAwLjIpXG4gICAgICAgICAgICAgICAgLnRvKGJsb2NrLnF1ZXJ5U2VsZWN0b3IoJy5hbmltX3RpdGxlJyksIHsgeTogMCwgb3BhY2l0eTogMSwgcm90YXRlOiAwIH0sIDAuNClcbiAgICAgICAgICAgICAgICAudG8oYmxvY2sucXVlcnlTZWxlY3RvcignLmFuaW1fcGFuZWwtYm90dG9tJyksIHsgc2NhbGVZOiAxLCBvcGFjaXR5OiAxIH0sIDAuNilcblxuICAgICAgICAgICAgdGltZWxpbmVCdG4udG8oYmxvY2tCdG4sIHsgc2NhbGU6IDEsIG9wYWNpdHk6IDEgfSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG1lc3NhZ2VGb3J0KCkge1xuICAgICAgICBjb25zdCBibG9jayA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy53cC1ibG9jay1sYXp5YmxvY2stc2VjdGlvbi1tZXNzYWdlLWZvcnQnKVxuXG4gICAgICAgIGlmIChibG9jaykge1xuICAgICAgICAgICAgY29uc3QgdGltZWxpbmUgPSBnc2FwLnRpbWVsaW5lKHtcbiAgICAgICAgICAgICAgICBkZWZhdWx0czogeyBkdXJhdGlvbjogMSwgZWFzZTogJ2V4cG8ub3V0JyB9LFxuICAgICAgICAgICAgICAgIHNjcm9sbFRyaWdnZXI6IHsgdHJpZ2dlcjogYmxvY2ssIHN0YXJ0OiAndG9wIGNlbnRlcicgfVxuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgdGltZWxpbmVcbiAgICAgICAgICAgICAgICAudG8oYmxvY2sucXVlcnlTZWxlY3RvcignLmFuaW1fb3BhY2l0eScpLCB7IG9wYWNpdHk6IDEgfSwgMClcbiAgICAgICAgICAgICAgICAudG8oYmxvY2sucXVlcnlTZWxlY3RvcignLmFuaW1fdGl0bGUnKSwgeyB5OiAwLCBvcGFjaXR5OiAxLCByb3RhdGU6IDAgfSwgMC4xKVxuICAgICAgICAgICAgICAgIC50byhibG9jay5xdWVyeVNlbGVjdG9yQWxsKCcuYW5pbV9zY2FsZScpLCB7IHNjYWxlOiAxLCBvcGFjaXR5OiAxLCByb3RhdGU6IDAgfSwgMC4yKVxuICAgICAgICAgICAgICAgIC50byhibG9jay5xdWVyeVNlbGVjdG9yKCcuYW5pbV9vdmVybGF5JyksIHsgc2NhbGVZOiAwIH0sIDAuNClcbiAgICAgICAgICAgICAgICAudG8oYmxvY2sucXVlcnlTZWxlY3RvcignLmFuaW1fem9vbScpLCB7IHNjYWxlOiAxLCBkdXJhdGlvbjogNCB9LCAwLjQpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBsaXN0ZXNJY29uZXMoKSB7XG4gICAgICAgIGNvbnN0IGJsb2NrID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLndwLWJsb2NrLWxhenlibG9jay1zZWN0aW9ucy1saXN0ZXMtYW5kLWljb25lcycpXG5cbiAgICAgICAgaWYgKGJsb2NrKSB7XG4gICAgICAgICAgICBjb25zdCB0aW1lbGluZSA9IGdzYXAudGltZWxpbmUoe1xuICAgICAgICAgICAgICAgIGRlZmF1bHRzOiB7IGR1cmF0aW9uOiAxLCBlYXNlOiAnZXhwby5vdXQnIH0sXG4gICAgICAgICAgICAgICAgc2Nyb2xsVHJpZ2dlcjogeyB0cmlnZ2VyOiBibG9jaywgc3RhcnQ6ICd0b3AgY2VudGVyJyB9XG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICB0aW1lbGluZVxuICAgICAgICAgICAgICAgIC50byhibG9jay5xdWVyeVNlbGVjdG9yKCcuYW5pbV9vcGFjaXR5JyksIHsgb3BhY2l0eTogMSB9LCAwKVxuICAgICAgICAgICAgICAgIC50byhibG9jay5xdWVyeVNlbGVjdG9yKCcuYW5pbV90aXRsZScpLCB7IHk6IDAsIG9wYWNpdHk6IDEsIHJvdGF0ZTogMCB9LCAwLjEpXG4gICAgICAgICAgICAgICAgLnRvKGJsb2NrLnF1ZXJ5U2VsZWN0b3JBbGwoJy5hbmltX3NjYWxlJyksIHsgc2NhbGU6IDEsIG9wYWNpdHk6IDEgfSwgMC4yKVxuICAgICAgICAgICAgICAgIC50byhibG9jay5xdWVyeVNlbGVjdG9yKCcuYW5pbV9vcGFjaXR5MicpLCB7IG9wYWNpdHk6IDEgfSwgMC40KVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgbW9kdWxhaXJlKCkge1xuICAgICAgICBjb25zdCBibG9jayA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy53cC1ibG9jay1sYXp5YmxvY2stc2VjdGlvbi1tb2R1bGFpcmUnKVxuXG4gICAgICAgIGlmIChibG9jaykge1xuICAgICAgICAgICAgY29uc3QgdGltZWxpbmUgPSBnc2FwLnRpbWVsaW5lKHtcbiAgICAgICAgICAgICAgICBkZWZhdWx0czogeyBkdXJhdGlvbjogMSwgZWFzZTogJ2V4cG8ub3V0JyB9LFxuICAgICAgICAgICAgICAgIHNjcm9sbFRyaWdnZXI6IHsgdHJpZ2dlcjogYmxvY2ssIHN0YXJ0OiAndG9wIGNlbnRlcicgfVxuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgdGltZWxpbmVcbiAgICAgICAgICAgICAgICAudG8oYmxvY2sucXVlcnlTZWxlY3RvcignLmFuaW1fb3BhY2l0eScpLCB7IG9wYWNpdHk6IDEgfSwgMClcbiAgICAgICAgICAgICAgICAudG8oYmxvY2sucXVlcnlTZWxlY3RvcignLmFuaW1fdGl0bGUnKSwgeyB5OiAwLCBvcGFjaXR5OiAxLCByb3RhdGU6IDAgfSwgMC4xKVxuICAgICAgICAgICAgICAgIC50byhibG9jay5xdWVyeVNlbGVjdG9yQWxsKCcuYW5pbV9vdmVybGF5JyksIHsgc2NhbGVZOiAwLCBzdGFnZ2VyOiAwLjE1IH0sIDAuMylcbiAgICAgICAgICAgICAgICAudG8oYmxvY2sucXVlcnlTZWxlY3RvcignLmFuaW1fb3BhY2l0eTInKSwgeyBvcGFjaXR5OiAxIH0sIDAuNClcbiAgICAgICAgICAgICAgICAudG8oYmxvY2sucXVlcnlTZWxlY3RvckFsbCgnLmFuaW1fc2NhbGUnKSwgeyBzY2FsZTogMSwgb3BhY2l0eTogMSwgcm90YXRlOiAwLCBzdGFnZ2VyOiAwLjE1IH0sIDAuNSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdhbW1lcygpIHtcbiAgICAgICAgY29uc3QgYmxvY2sgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcud3AtYmxvY2stbGF6eWJsb2NrLXNlY3Rpb24tZ2FtbWVzJylcblxuICAgICAgICBpZiAoYmxvY2spIHtcbiAgICAgICAgICAgIGNvbnN0IHRpbWVsaW5lID0gZ3NhcC50aW1lbGluZSh7XG4gICAgICAgICAgICAgICAgZGVmYXVsdHM6IHsgZHVyYXRpb246IDEsIGVhc2U6ICdleHBvLm91dCcgfSxcbiAgICAgICAgICAgICAgICBzY3JvbGxUcmlnZ2VyOiB7IHRyaWdnZXI6IGJsb2NrLCBzdGFydDogJ3RvcCBjZW50ZXInIH1cbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIHRpbWVsaW5lXG4gICAgICAgICAgICAgICAgLnRvKGJsb2NrLnF1ZXJ5U2VsZWN0b3IoJy5hbmltX29wYWNpdHknKSwgeyBvcGFjaXR5OiAxIH0sIDApXG4gICAgICAgICAgICAgICAgLnRvKGJsb2NrLnF1ZXJ5U2VsZWN0b3IoJy5hbmltX3RpdGxlJyksIHsgeTogMCwgb3BhY2l0eTogMSwgcm90YXRlOiAwIH0sIDAuMSlcbiAgICAgICAgICAgICAgICAudG8oYmxvY2sucXVlcnlTZWxlY3RvckFsbCgnLmFuaW1fc2NhbGUnKSwgeyBzY2FsZTogMSwgb3BhY2l0eTogMSwgc3RhZ2dlcjogMC4xNSB9LCAwLjIpXG4gICAgICAgICAgICAgICAgLnRvKGJsb2NrLnF1ZXJ5U2VsZWN0b3JBbGwoJy5hbmltX29wYWNpdHkyJyksIHsgb3BhY2l0eTogMSwgc3RhZ2dlcjogMC40NSB9LCAwLjIpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcm9kdWl0cygpIHtcbiAgICAgICAgY29uc3QgYmxvY2sgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcud3AtYmxvY2stbGF6eWJsb2NrLXNlY3Rpb24tcHJvZHVpdHMnKVxuXG4gICAgICAgIGlmIChibG9jaykge1xuICAgICAgICAgICAgY29uc3QgYmxvY2tCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcud3AtYmxvY2stbGF6eWJsb2NrLXNlY3Rpb24tcHJvZHVpdHMgLmFuaW1fc2NhbGUyJylcblxuICAgICAgICAgICAgY29uc3QgdGltZWxpbmUgPSBnc2FwLnRpbWVsaW5lKHtcbiAgICAgICAgICAgICAgICBkZWZhdWx0czogeyBkdXJhdGlvbjogMSwgZWFzZTogJ2V4cG8ub3V0JyB9LFxuICAgICAgICAgICAgICAgIHNjcm9sbFRyaWdnZXI6IHsgdHJpZ2dlcjogYmxvY2ssIHN0YXJ0OiAndG9wIGNlbnRlcicgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGNvbnN0IHRpbWVsaW5lQnRuID0gZ3NhcC50aW1lbGluZSh7XG4gICAgICAgICAgICAgICAgZGVmYXVsdHM6IHsgZHVyYXRpb246IDAuNCwgZWFzZTogJ2V4cG8ub3V0JyB9LFxuICAgICAgICAgICAgICAgIHNjcm9sbFRyaWdnZXI6IHsgdHJpZ2dlcjogYmxvY2tCdG4gfVxuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgdGltZWxpbmVcbiAgICAgICAgICAgICAgICAudG8oYmxvY2sucXVlcnlTZWxlY3RvcignLmFuaW1fb3BhY2l0eScpLCB7IG9wYWNpdHk6IDEgfSwgMClcbiAgICAgICAgICAgICAgICAudG8oYmxvY2sucXVlcnlTZWxlY3RvcignLmFuaW1fdGl0bGUnKSwgeyB5OiAwLCBvcGFjaXR5OiAxLCByb3RhdGU6IDAgfSwgMC4xKVxuICAgICAgICAgICAgICAgIC50byhibG9jay5xdWVyeVNlbGVjdG9yQWxsKCcuYW5pbV9vcGFjaXR5MicpLCB7IG9wYWNpdHk6IDEgfSwgMC4yKVxuICAgICAgICAgICAgICAgIC50byhibG9jay5xdWVyeVNlbGVjdG9yQWxsKCcuYW5pbV9zY2FsZScpLCB7IHNjYWxlOiAxLCBvcGFjaXR5OiAxLCBzdGFnZ2VyOiAwLjE1IH0sIDAuMilcblxuICAgICAgICAgICAgdGltZWxpbmVCdG4udG8oYmxvY2tCdG4sIHsgc2NhbGU6IDEsIG9wYWNpdHk6IDEgfSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFjdHVhbGl0ZXMoKSB7XG4gICAgICAgIGNvbnN0IGJsb2NrID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLndwLWJsb2NrLWxhenlibG9jay1zZWN0aW9uLWFjdHVhbGl0ZXMnKVxuXG4gICAgICAgIGlmIChibG9jaykge1xuICAgICAgICAgICAgY29uc3QgYmxvY2tCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcud3AtYmxvY2stbGF6eWJsb2NrLXNlY3Rpb24tYWN0dWFsaXRlcyAuYW5pbV9zY2FsZTInKVxuXG4gICAgICAgICAgICBjb25zdCB0aW1lbGluZSA9IGdzYXAudGltZWxpbmUoe1xuICAgICAgICAgICAgICAgIGRlZmF1bHRzOiB7IGR1cmF0aW9uOiAxLCBlYXNlOiAnZXhwby5vdXQnIH0sXG4gICAgICAgICAgICAgICAgc2Nyb2xsVHJpZ2dlcjogeyB0cmlnZ2VyOiBibG9jaywgc3RhcnQ6ICd0b3AgY2VudGVyJyB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgY29uc3QgdGltZWxpbmVCdG4gPSBnc2FwLnRpbWVsaW5lKHtcbiAgICAgICAgICAgICAgICBkZWZhdWx0czogeyBkdXJhdGlvbjogMC40LCBlYXNlOiAnZXhwby5vdXQnIH0sXG4gICAgICAgICAgICAgICAgc2Nyb2xsVHJpZ2dlcjogeyB0cmlnZ2VyOiBibG9ja0J0biB9XG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICB0aW1lbGluZVxuICAgICAgICAgICAgICAgIC50byhibG9jay5xdWVyeVNlbGVjdG9yKCcuYW5pbV9vcGFjaXR5JyksIHsgb3BhY2l0eTogMSB9LCAwKVxuICAgICAgICAgICAgICAgIC50byhibG9jay5xdWVyeVNlbGVjdG9yKCcuYW5pbV90aXRsZScpLCB7IHk6IDAsIG9wYWNpdHk6IDEsIHJvdGF0ZTogMCB9LCAwLjEpXG4gICAgICAgICAgICAgICAgLnRvKGJsb2NrLnF1ZXJ5U2VsZWN0b3JBbGwoJy5hbmltX292ZXJsYXknKSwgeyBzY2FsZVk6IDAsIHN0YWdnZXI6IDAuMTUgfSwgMC4yKVxuICAgICAgICAgICAgICAgIC50byhibG9jay5xdWVyeVNlbGVjdG9yQWxsKCcuYW5pbV9zY2FsZScpLCB7IHNjYWxlOiAxLCBvcGFjaXR5OiAxLCBzdGFnZ2VyOiAwLjE1IH0sIDAuMilcbiAgICAgICAgICAgICAgICAudG8oYmxvY2sucXVlcnlTZWxlY3RvckFsbCgnLmFuaW1fb3BhY2l0eTInKSwgeyBvcGFjaXR5OiAxIH0sIDAuNClcblxuICAgICAgICAgICAgdGltZWxpbmVCdG4udG8oYmxvY2tCdG4sIHsgc2NhbGU6IDEsIG9wYWNpdHk6IDEgfSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHRlbW9pZ25hZ2VzKCkge1xuICAgICAgICBjb25zdCBibG9jayA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy53cC1ibG9jay1sYXp5YmxvY2stc2VjdGlvbi10ZW1vaWduYWdlcycpXG5cbiAgICAgICAgaWYgKGJsb2NrKSB7XG4gICAgICAgICAgICBjb25zdCB0aW1lbGluZSA9IGdzYXAudGltZWxpbmUoe1xuICAgICAgICAgICAgICAgIGRlZmF1bHRzOiB7IGR1cmF0aW9uOiAxLCBlYXNlOiAnZXhwby5vdXQnIH0sXG4gICAgICAgICAgICAgICAgc2Nyb2xsVHJpZ2dlcjogeyB0cmlnZ2VyOiBibG9jaywgc3RhcnQ6ICd0b3AgY2VudGVyJyB9XG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICB0aW1lbGluZVxuICAgICAgICAgICAgICAgIC50byhibG9jay5xdWVyeVNlbGVjdG9yKCcuYW5pbV9vcGFjaXR5JyksIHsgb3BhY2l0eTogMSB9LCAwKVxuICAgICAgICAgICAgICAgIC50byhibG9jay5xdWVyeVNlbGVjdG9yKCcuYW5pbV90aXRsZScpLCB7IHk6IDAsIG9wYWNpdHk6IDEsIHJvdGF0ZTogMCB9LCAwLjEpXG4gICAgICAgICAgICAgICAgLnRvKGJsb2NrLnF1ZXJ5U2VsZWN0b3IoJy5hbmltX3Blb3BsZScpLCB7IG9wYWNpdHk6IDEgfSwgMC4yKVxuICAgICAgICAgICAgICAgIC50byhibG9jay5xdWVyeVNlbGVjdG9yKCcuYW5pbV9wZW9wbGUnKSwgeyB5OiAwLCBzY2FsZTogMSwgZHVyYXRpb246IDMsIGVhc2U6ICdleHBvLm91dCcgfSwgMC4yKVxuICAgICAgICAgICAgICAgIC50byhibG9jay5xdWVyeVNlbGVjdG9yQWxsKCcuYW5pbV9zY2FsZScpLCB7IHNjYWxlOiAxLCBvcGFjaXR5OiAxLCBzdGFnZ2VyOiAwLjE1IH0sIDAuMilcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvb3Jkb25uZWVzKCkge1xuICAgICAgICBjb25zdCBibG9jayA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy53cC1ibG9jay1sYXp5YmxvY2stc2VjdGlvbi1jb29yZG9ubmVlcycpXG5cbiAgICAgICAgaWYgKGJsb2NrKSB7XG4gICAgICAgICAgICBjb25zdCB0aW1lbGluZSA9IGdzYXAudGltZWxpbmUoe1xuICAgICAgICAgICAgICAgIGRlZmF1bHRzOiB7IGR1cmF0aW9uOiAxLCBlYXNlOiAnZXhwby5vdXQnIH0sXG4gICAgICAgICAgICAgICAgc2Nyb2xsVHJpZ2dlcjogeyB0cmlnZ2VyOiBibG9jaywgc3RhcnQ6ICd0b3AgY2VudGVyJyB9XG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICB0aW1lbGluZVxuICAgICAgICAgICAgICAgIC50byhibG9jay5xdWVyeVNlbGVjdG9yKCcuYW5pbV90aXRsZScpLCB7IHk6IDAsIG9wYWNpdHk6IDEsIHJvdGF0ZTogMCB9LCAwKVxuICAgICAgICAgICAgICAgIC50byhibG9jay5xdWVyeVNlbGVjdG9yKCcuYW5pbV9vcGFjaXR5JyksIHsgb3BhY2l0eTogMSB9LCAwLjEpXG4gICAgICAgICAgICAgICAgLnRvKGJsb2NrLnF1ZXJ5U2VsZWN0b3IoJy5hbmltX3NjYWxlJyksIHsgc2NhbGU6IDEsIG9wYWNpdHk6IDEsIGR1cmF0aW9uOiAwLjQgfSwgMC4yKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29udGFjdCgpIHtcbiAgICAgICAgY29uc3QgYmxvY2sgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcud3AtYmxvY2stbGF6eWJsb2NrLXNlY3Rpb24tY29udGFjdCcpXG5cbiAgICAgICAgaWYgKGJsb2NrKSB7XG4gICAgICAgICAgICBjb25zdCB0aW1lbGluZSA9IGdzYXAudGltZWxpbmUoe1xuICAgICAgICAgICAgICAgIGRlZmF1bHRzOiB7IGR1cmF0aW9uOiAxLCBlYXNlOiAnZXhwby5vdXQnIH0sXG4gICAgICAgICAgICAgICAgc2Nyb2xsVHJpZ2dlcjogeyB0cmlnZ2VyOiBibG9jaywgc3RhcnQ6ICd0b3AgY2VudGVyJyB9XG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICB0aW1lbGluZS50byhibG9jay5xdWVyeVNlbGVjdG9yKCcuYW5pbV9vcGFjaXR5JyksIHsgeTogMCwgb3BhY2l0eTogMSwgcm90YXRlOiAwIH0sIDApXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBoZWFkZXJUaXRyZUltYWdlQ2xvdWQoKSB7XG4gICAgICAgIGNvbnN0IGJsb2NrID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLndwLWJsb2NrLWxhenlibG9jay1oZWFkZXItdGl0bGUtYW5kLWJhY2tncm91bmQnKVxuXG4gICAgICAgIGlmIChibG9jaykge1xuICAgICAgICAgICAgY29uc3QgdGltZWxpbmUgPSBnc2FwLnRpbWVsaW5lKHtcbiAgICAgICAgICAgICAgICBkZWZhdWx0czogeyBkdXJhdGlvbjogMSwgZWFzZTogJ2V4cG8ub3V0JyB9LFxuICAgICAgICAgICAgICAgIHNjcm9sbFRyaWdnZXI6IHsgdHJpZ2dlcjogYmxvY2ssIHN0YXJ0OiAndG9wIGNlbnRlcicgfVxuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgdGltZWxpbmVcbiAgICAgICAgICAgICAgICAudG8oYmxvY2sucXVlcnlTZWxlY3RvcignLmFuaW1fb3ZlcmxheScpLCB7IHNjYWxlWTogMCB9LCAwLjIpXG4gICAgICAgICAgICAgICAgLnRvKGJsb2NrLnF1ZXJ5U2VsZWN0b3IoJy5hbmltX3RpdGxlJyksIHsgeTogMCwgb3BhY2l0eTogMSwgcm90YXRlOiAwIH0sIDAuMylcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHRleHQoKSB7XG4gICAgICAgIGNvbnN0IGJsb2NrID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLndwLWJsb2NrLWxhenlibG9jay1zZWN0aW9uLXRleHQnKVxuXG4gICAgICAgIGlmIChibG9jaykge1xuICAgICAgICAgICAgY29uc3QgdGltZWxpbmUgPSBnc2FwLnRpbWVsaW5lKHtcbiAgICAgICAgICAgICAgICBkZWZhdWx0czogeyBkdXJhdGlvbjogMSwgZWFzZTogJ2V4cG8ub3V0JyB9LFxuICAgICAgICAgICAgICAgIHNjcm9sbFRyaWdnZXI6IHsgdHJpZ2dlcjogYmxvY2ssIHN0YXJ0OiAndG9wIGNlbnRlcicgfVxuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgdGltZWxpbmUudG8oYmxvY2sucXVlcnlTZWxlY3RvcignLmFuaW1fb3BhY2l0eScpLCB7IG9wYWNpdHk6IDEgfSwgMClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGhlYWRlclByb2R1Y3QoKSB7XG4gICAgICAgIGNvbnN0IGJsb2NrID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLndwLWJsb2NrLWxhenlibG9jay1oZWFkZXItcHJvZHVjdCcpXG5cbiAgICAgICAgaWYgKGJsb2NrKSB7XG4gICAgICAgICAgICBjb25zdCB0aW1lbGluZSA9IGdzYXAudGltZWxpbmUoe1xuICAgICAgICAgICAgICAgIGRlZmF1bHRzOiB7IGR1cmF0aW9uOiAxLCBlYXNlOiAnZXhwby5vdXQnIH0sXG4gICAgICAgICAgICAgICAgc2Nyb2xsVHJpZ2dlcjogeyB0cmlnZ2VyOiBibG9jayB9XG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICB0aW1lbGluZVxuICAgICAgICAgICAgICAgIC50byhibG9jay5xdWVyeVNlbGVjdG9yKCcuYW5pbV9jbG91ZCcpLCB7IG9wYWNpdHk6IDEgfSwgMC4yKVxuICAgICAgICAgICAgICAgIC50byhibG9jay5xdWVyeVNlbGVjdG9yKCcuYW5pbV9jbG91ZCcpLCB7IHk6IDAsIHNjYWxlOiAxLCBkdXJhdGlvbjogMywgZWFzZTogJ2V4cG8ub3V0JyB9LCAwLjIpXG4gICAgICAgICAgICAgICAgLnRvKGJsb2NrLnF1ZXJ5U2VsZWN0b3IoJy5hbmltX3RpdGxlJyksIHsgeTogMCwgb3BhY2l0eTogMSwgcm90YXRlOiAwIH0sIDAuNClcbiAgICAgICAgICAgICAgICAudG8oYmxvY2sucXVlcnlTZWxlY3RvcignLmFuaW1fc2NhbGUnKSwgeyBzY2FsZTogMSwgb3BhY2l0eTogMSwgZHVyYXRpb246IDAuNCB9LCAwLjgpXG5cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHRleHRlQ2VudHJlKCkge1xuICAgICAgICBjb25zdCBibG9jayA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy53cC1ibG9jay1sYXp5YmxvY2stc2VjdGlvbi10ZXh0ZS1jZW50cmUnKVxuXG4gICAgICAgIGlmIChibG9jaykge1xuICAgICAgICAgICAgY29uc3QgdGltZWxpbmUgPSBnc2FwLnRpbWVsaW5lKHtcbiAgICAgICAgICAgICAgICBkZWZhdWx0czogeyBkdXJhdGlvbjogMSwgZWFzZTogJ2V4cG8ub3V0JyB9LFxuICAgICAgICAgICAgICAgIHNjcm9sbFRyaWdnZXI6IHsgdHJpZ2dlcjogYmxvY2ssIHN0YXJ0OiAndG9wIGNlbnRlcicgfVxuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgdGltZWxpbmVcbiAgICAgICAgICAgICAgICAudG8oYmxvY2sucXVlcnlTZWxlY3RvcignLmFuaW1fdGl0bGUnKSwgeyB5OiAwLCBvcGFjaXR5OiAxLCByb3RhdGU6IDAgfSwgMClcbiAgICAgICAgICAgICAgICAudG8oYmxvY2sucXVlcnlTZWxlY3RvcignLmFuaW1fb3BhY2l0eScpLCB7IG9wYWNpdHk6IDEgfSwgMC4xKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZGV1eENvbG9ubmVzKCkge1xuICAgICAgICBjb25zdCBibG9jayA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy53cC1ibG9jay1sYXp5YmxvY2stc2VjdGlvbi1kZXV4LWNvbG9ubmVzJylcblxuICAgICAgICBpZiAoYmxvY2spIHtcbiAgICAgICAgICAgIGNvbnN0IHRpbWVsaW5lID0gZ3NhcC50aW1lbGluZSh7XG4gICAgICAgICAgICAgICAgZGVmYXVsdHM6IHsgZHVyYXRpb246IDEsIGVhc2U6ICdleHBvLm91dCcgfSxcbiAgICAgICAgICAgICAgICBzY3JvbGxUcmlnZ2VyOiB7IHRyaWdnZXI6IGJsb2NrLCBzdGFydDogJ3RvcCBjZW50ZXInIH1cbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIHRpbWVsaW5lLnRvKGJsb2NrLnF1ZXJ5U2VsZWN0b3JBbGwoJy5hbmltX3NjYWxlJyksIHsgc2NhbGU6IDEsIG9wYWNpdHk6IDEsIHN0YWdnZXI6IDAuMTUgfSwgMClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGltYWdlKCkge1xuICAgICAgICBjb25zdCBibG9jayA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy53cC1ibG9jay1sYXp5YmxvY2stc2VjdGlvbi1ibG9jLWltYWdlJylcblxuICAgICAgICBpZiAoYmxvY2spIHtcbiAgICAgICAgICAgIGNvbnN0IHRpbWVsaW5lID0gZ3NhcC50aW1lbGluZSh7XG4gICAgICAgICAgICAgICAgZGVmYXVsdHM6IHsgZHVyYXRpb246IDEsIGVhc2U6ICdleHBvLm91dCcgfSxcbiAgICAgICAgICAgICAgICBzY3JvbGxUcmlnZ2VyOiB7IHRyaWdnZXI6IGJsb2NrLCBzdGFydDogJ3RvcCBjZW50ZXInIH1cbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIHRpbWVsaW5lXG4gICAgICAgICAgICAgICAgLnRvKGJsb2NrLnF1ZXJ5U2VsZWN0b3IoJy5hbmltX292ZXJsYXknKSwgeyBzY2FsZVk6IDAgfSwgMClcbiAgICAgICAgICAgICAgICAudG8oYmxvY2sucXVlcnlTZWxlY3RvcignLmFuaW1fem9vbScpLCB7IHNjYWxlOiAxLCBkdXJhdGlvbjogNCB9LCAwKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgbGF5b3V0VGV4dGVJbWFnZSgpIHtcbiAgICAgICAgY29uc3QgYmxvY2sgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcud3AtYmxvY2stbGF6eWJsb2NrLXNlY3Rpb24tbGF5b3V0LXRleHRlLWV0LWltYWdlJylcblxuICAgICAgICBpZiAoYmxvY2spIHtcbiAgICAgICAgICAgIGNvbnN0IHRpbWVsaW5lID0gZ3NhcC50aW1lbGluZSh7XG4gICAgICAgICAgICAgICAgZGVmYXVsdHM6IHsgZHVyYXRpb246IDEsIGVhc2U6ICdleHBvLm91dCcgfSxcbiAgICAgICAgICAgICAgICBzY3JvbGxUcmlnZ2VyOiB7IHRyaWdnZXI6IGJsb2NrLCBzdGFydDogJ3RvcCBjZW50ZXInIH1cbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIHRpbWVsaW5lXG4gICAgICAgICAgICAgICAgLnRvKGJsb2NrLnF1ZXJ5U2VsZWN0b3IoJy5hbmltX3RpdGxlJyksIHsgeTogMCwgb3BhY2l0eTogMSwgcm90YXRlOiAwIH0sIDApXG4gICAgICAgICAgICAgICAgLnRvKGJsb2NrLnF1ZXJ5U2VsZWN0b3IoJy5hbmltX29wYWNpdHknKSwgeyBvcGFjaXR5OiAxIH0sIDAuMSlcbiAgICAgICAgICAgICAgICAudG8oYmxvY2sucXVlcnlTZWxlY3RvcignLmFuaW1fb3BhY2l0eScpLCB7IG9wYWNpdHk6IDEgfSwgMC4xKVxuICAgICAgICAgICAgICAgIC50byhibG9jay5xdWVyeVNlbGVjdG9yKCcuYW5pbV9zY2FsZScpLCB7IHNjYWxlOiAxLCBvcGFjaXR5OiAxIH0sIDAuMilcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHRhYnMoKSB7XG4gICAgICAgIGNvbnN0IGJsb2NrID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLndwLWJsb2NrLWxhenlibG9jay1zZWN0aW9uLXRhYnMnKVxuXG4gICAgICAgIGlmIChibG9jaykge1xuICAgICAgICAgICAgY29uc3QgYmxvY2tCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcud3AtYmxvY2stbGF6eWJsb2NrLXNlY3Rpb24tdGFicyAuYW5pbV9zY2FsZTInKVxuXG4gICAgICAgICAgICBjb25zdCB0aW1lbGluZSA9IGdzYXAudGltZWxpbmUoe1xuICAgICAgICAgICAgICAgIGRlZmF1bHRzOiB7IGR1cmF0aW9uOiAxLCBlYXNlOiAnZXhwby5vdXQnIH0sXG4gICAgICAgICAgICAgICAgc2Nyb2xsVHJpZ2dlcjogeyB0cmlnZ2VyOiBibG9jaywgc3RhcnQ6ICd0b3AgY2VudGVyJyB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgY29uc3QgdGltZWxpbmVCdG4gPSBnc2FwLnRpbWVsaW5lKHtcbiAgICAgICAgICAgICAgICBkZWZhdWx0czogeyBkdXJhdGlvbjogMC40LCBlYXNlOiAnZXhwby5vdXQnIH0sXG4gICAgICAgICAgICAgICAgc2Nyb2xsVHJpZ2dlcjogeyB0cmlnZ2VyOiBibG9ja0J0biB9XG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICB0aW1lbGluZVxuICAgICAgICAgICAgICAgIC50byhibG9jay5xdWVyeVNlbGVjdG9yKCcuYW5pbV9vcGFjaXR5JyksIHsgb3BhY2l0eTogMSB9LCAwKVxuICAgICAgICAgICAgICAgIC50byhibG9jay5xdWVyeVNlbGVjdG9yKCcuYW5pbV90aXRsZScpLCB7IHk6IDAsIG9wYWNpdHk6IDEsIHJvdGF0ZTogMCB9LCAwLjEpXG4gICAgICAgICAgICAgICAgLnRvKGJsb2NrLnF1ZXJ5U2VsZWN0b3JBbGwoJy5hbmltX29wYWNpdHkyJyksIHsgb3BhY2l0eTogMSB9LCAwLjIpXG4gICAgICAgICAgICAgICAgLnRvKGJsb2NrLnF1ZXJ5U2VsZWN0b3JBbGwoJy5hbmltX3NjYWxlJyksIHsgc2NhbGU6IDEsIG9wYWNpdHk6IDEsIHN0YWdnZXI6IDAuMTUgfSwgMC4yKVxuXG4gICAgICAgICAgICB0aW1lbGluZUJ0bi50byhibG9ja0J0biwgeyBzY2FsZTogMSwgb3BhY2l0eTogMSB9KVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVhc3N1cmFuY2UoKSB7XG4gICAgICAgIGNvbnN0IGJsb2NrID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLndwLWJsb2NrLWxhenlibG9jay1zZWN0aW9uLXJlYXNzdXJhbmNlJylcblxuICAgICAgICBpZiAoYmxvY2spIHtcbiAgICAgICAgICAgIGNvbnN0IHRpbWVsaW5lID0gZ3NhcC50aW1lbGluZSh7XG4gICAgICAgICAgICAgICAgZGVmYXVsdHM6IHsgZHVyYXRpb246IDEsIGVhc2U6ICdleHBvLm91dCcgfSxcbiAgICAgICAgICAgICAgICBzY3JvbGxUcmlnZ2VyOiB7IHRyaWdnZXI6IGJsb2NrLCBzdGFydDogJ3RvcCBjZW50ZXInIH1cbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIHRpbWVsaW5lXG4gICAgICAgICAgICAgICAgLnRvKGJsb2NrLnF1ZXJ5U2VsZWN0b3JBbGwoJy5hbmltX3NjYWxlJyksIHsgc2NhbGU6IDEsIG9wYWNpdHk6IDEgfSwgMClcbiAgICAgICAgICAgICAgICAudG8oYmxvY2sucXVlcnlTZWxlY3RvcignLmFuaW1fb3BhY2l0eScpLCB7IG9wYWNpdHk6IDEgfSwgMC42KVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZGV1eENvbG9ubmVzSW1hZ2UoKSB7XG4gICAgICAgIGNvbnN0IGJsb2NrID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLndwLWJsb2NrLWxhenlibG9jay1zZWN0aW9uLWRldXgtY29sb25uZXMtYXZlYy1pbWFnZScpXG5cbiAgICAgICAgaWYgKGJsb2NrKSB7XG4gICAgICAgICAgICBjb25zdCB0aW1lbGluZSA9IGdzYXAudGltZWxpbmUoe1xuICAgICAgICAgICAgICAgIGRlZmF1bHRzOiB7IGR1cmF0aW9uOiAxLCBlYXNlOiAnZXhwby5vdXQnIH0sXG4gICAgICAgICAgICAgICAgc2Nyb2xsVHJpZ2dlcjogeyB0cmlnZ2VyOiBibG9jaywgc3RhcnQ6ICd0b3AgY2VudGVyJyB9XG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICB0aW1lbGluZVxuICAgICAgICAgICAgICAgIC50byhibG9jay5xdWVyeVNlbGVjdG9yQWxsKCcuYW5pbV9zY2FsZScpLCB7IHNjYWxlOiAxLCBvcGFjaXR5OiAxLCBzdGFnZ2VyOiAwLjE1IH0sIDApXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnYWxlcmllKCkge1xuICAgICAgICBjb25zdCBibG9ja3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcud3AtYmxvY2stbGF6eWJsb2NrLXNlY3Rpb24tZ2FsZXJpZScpXG5cbiAgICAgICAgaWYgKGJsb2Nrcykge1xuICAgICAgICAgICAgYmxvY2tzLmZvckVhY2goYmxvY2sgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRpbWVsaW5lID0gZ3NhcC50aW1lbGluZSh7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHRzOiB7IGR1cmF0aW9uOiAxLCBlYXNlOiAnZXhwby5vdXQnIH0sXG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbFRyaWdnZXI6IHsgdHJpZ2dlcjogYmxvY2ssIHN0YXJ0OiAndG9wIGNlbnRlcicgfVxuICAgICAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgICAgICB0aW1lbGluZS50byhibG9jay5xdWVyeVNlbGVjdG9yQWxsKCcuYW5pbV9vcGFjaXR5JyksIHsgb3BhY2l0eTogMSB9LCAwKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGRldXhQYXJhZ3JhcGhlc0JvdXRvbigpIHtcbiAgICAgICAgY29uc3QgYmxvY2sgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcud3AtYmxvY2stbGF6eWJsb2NrLXNlY3Rpb24tZGV1eC1wYXJhZ3JhcGhlcy1ldC11bi1ib3V0b24nKVxuXG4gICAgICAgIGlmIChibG9jaykge1xuICAgICAgICAgICAgY29uc3QgdGltZWxpbmUgPSBnc2FwLnRpbWVsaW5lKHtcbiAgICAgICAgICAgICAgICBkZWZhdWx0czogeyBkdXJhdGlvbjogMSwgZWFzZTogJ2V4cG8ub3V0JyB9LFxuICAgICAgICAgICAgICAgIHNjcm9sbFRyaWdnZXI6IHsgdHJpZ2dlcjogYmxvY2ssIHN0YXJ0OiAndG9wIGNlbnRlcicgfVxuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgdGltZWxpbmVcbiAgICAgICAgICAgICAgICAudG8oYmxvY2sucXVlcnlTZWxlY3RvcignLmFuaW1fdGl0bGUnKSwgeyB5OiAwLCBvcGFjaXR5OiAxLCByb3RhdGU6IDAgfSwgMClcbiAgICAgICAgICAgICAgICAudG8oYmxvY2sucXVlcnlTZWxlY3RvckFsbCgnLmFuaW1fb3BhY2l0eScpLCB7IG9wYWNpdHk6IDEsIHN0YWdnZXI6IDAuMTUgfSwgMC4xKVxuICAgICAgICAgICAgICAgIC50byhibG9jay5xdWVyeVNlbGVjdG9yKCcuYW5pbV9zY2FsZScpLCB7IHNjYWxlOiAxLCBvcGFjaXR5OiAxLCBkdXJhdGlvbjogMC40IH0sIDAuMilcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGhlYWRlckdhbW1lKCkge1xuICAgICAgICBjb25zdCBibG9jayA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy53cC1ibG9jay1sYXp5YmxvY2staGVhZGVyLWdhbW1lJylcblxuICAgICAgICBpZiAoYmxvY2spIHtcbiAgICAgICAgICAgIGNvbnN0IHRpbWVsaW5lID0gZ3NhcC50aW1lbGluZSh7XG4gICAgICAgICAgICAgICAgZGVmYXVsdHM6IHsgZHVyYXRpb246IDEsIGVhc2U6ICdleHBvLm91dCcgfSxcbiAgICAgICAgICAgICAgICBzY3JvbGxUcmlnZ2VyOiB7IHRyaWdnZXI6IGJsb2NrIH1cbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIHRpbWVsaW5lXG4gICAgICAgICAgICAgICAgLnRvKGJsb2NrLnF1ZXJ5U2VsZWN0b3IoJy5hbmltX2Nsb3VkJyksIHsgb3BhY2l0eTogMSB9LCAwLjIpXG4gICAgICAgICAgICAgICAgLnRvKGJsb2NrLnF1ZXJ5U2VsZWN0b3IoJy5hbmltX2Nsb3VkJyksIHsgeTogMCwgc2NhbGU6IDEsIGR1cmF0aW9uOiAzLCBlYXNlOiAnZXhwby5vdXQnIH0sIDAuMilcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGRldXhDb2xvbm5lc0xheW91dEJvdXRvbkltYWdlKCkge1xuICAgICAgICBjb25zdCBibG9jayA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy53cC1ibG9jay1sYXp5YmxvY2stc2VjdGlvbi1kZXV4LWNvbG9ubmVzLWFuZC1sYXlvdXQtYnV0dG9uLWltYWdlJylcblxuICAgICAgICBpZiAoYmxvY2spIHtcbiAgICAgICAgICAgIGNvbnN0IHRpbWVsaW5lID0gZ3NhcC50aW1lbGluZSh7XG4gICAgICAgICAgICAgICAgZGVmYXVsdHM6IHsgZHVyYXRpb246IDEsIGVhc2U6ICdleHBvLm91dCcgfSxcbiAgICAgICAgICAgICAgICBzY3JvbGxUcmlnZ2VyOiB7IHRyaWdnZXI6IGJsb2NrLCBzdGFydDogJ3RvcCBjZW50ZXInIH1cbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIHRpbWVsaW5lXG4gICAgICAgICAgICAgICAgLnRvKGJsb2NrLnF1ZXJ5U2VsZWN0b3JBbGwoJy5hbmltX29wYWNpdHknKSwgeyBvcGFjaXR5OiAxLCBzdGFnZ2VyOiAwLjE1IH0sIDApXG4gICAgICAgICAgICAgICAgLnRvKGJsb2NrLnF1ZXJ5U2VsZWN0b3IoJy5hbmltX3RpdGxlJyksIHsgeTogMCwgb3BhY2l0eTogMSwgcm90YXRlOiAwIH0sIDAuMSlcbiAgICAgICAgICAgICAgICAudG8oYmxvY2sucXVlcnlTZWxlY3RvcignLmFuaW1fb3BhY2l0eTInKSwgeyBvcGFjaXR5OiAxLCBzdGFnZ2VyOiAwLjE1IH0sIDAuMilcbiAgICAgICAgICAgICAgICAudG8oYmxvY2sucXVlcnlTZWxlY3RvckFsbCgnLmFuaW1fc2NhbGUnKSwgeyBzY2FsZTogMSwgb3BhY2l0eTogMSwgZHVyYXRpb246IDAuNCwgc3RhZ2dlcjogMC4xNSB9LCAwLjMpXG4gICAgICAgICAgICAgICAgLnRvKGJsb2NrLnF1ZXJ5U2VsZWN0b3IoJy5hbmltX292ZXJsYXknKSwgeyBzY2FsZVk6IDAgfSwgMC40KVxuICAgICAgICAgICAgICAgIC50byhibG9jay5xdWVyeVNlbGVjdG9yKCcuYW5pbV96b29tJyksIHsgc2NhbGU6IDEsIGR1cmF0aW9uOiA0IH0sIDAuNClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHRhaWxsZXMoKSB7XG4gICAgICAgIGNvbnN0IGJsb2NrID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLndwLWJsb2NrLWxhenlibG9jay1zZWN0aW9uLXRhaWxsZXMnKVxuXG4gICAgICAgIGlmIChibG9jaykge1xuICAgICAgICAgICAgY29uc3QgdGltZWxpbmUgPSBnc2FwLnRpbWVsaW5lKHtcbiAgICAgICAgICAgICAgICBkZWZhdWx0czogeyBkdXJhdGlvbjogMSwgZWFzZTogJ2V4cG8ub3V0JyB9LFxuICAgICAgICAgICAgICAgIHNjcm9sbFRyaWdnZXI6IHsgdHJpZ2dlcjogYmxvY2ssIHN0YXJ0OiAndG9wIGNlbnRlcicgfVxuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgdGltZWxpbmVcbiAgICAgICAgICAgICAgICAudG8oYmxvY2sucXVlcnlTZWxlY3RvcignLmFuaW1fdGl0bGUnKSwgeyB5OiAwLCBvcGFjaXR5OiAxLCByb3RhdGU6IDAgfSwgMClcbiAgICAgICAgICAgICAgICAudG8oYmxvY2sucXVlcnlTZWxlY3RvckFsbCgnLmFuaW1fc2NhbGUnKSwgeyBzY2FsZTogMSwgb3BhY2l0eTogMSwgc3RhZ2dlcjogMC4xNSB9LCAwLjEpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0YWlsbGVzRGV1eENvbG9ubmVzKCkge1xuICAgICAgICBjb25zdCBibG9ja3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcud3AtYmxvY2stbGF6eWJsb2NrLXNlY3Rpb24tdGFpbGxlcy0yLWNvbG9ubmVzJylcblxuICAgICAgICBpZiAoYmxvY2tzKSB7XG4gICAgICAgICAgICBibG9ja3MuZm9yRWFjaChibG9jayA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgdGltZWxpbmUgPSBnc2FwLnRpbWVsaW5lKHtcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdHM6IHsgZHVyYXRpb246IDEsIGVhc2U6ICdleHBvLm91dCcgfSxcbiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsVHJpZ2dlcjogeyB0cmlnZ2VyOiBibG9jaywgc3RhcnQ6ICd0b3AgY2VudGVyJyB9XG4gICAgICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgICAgIHRpbWVsaW5lXG4gICAgICAgICAgICAgICAgICAgIC50byhibG9jay5xdWVyeVNlbGVjdG9yKCcuYW5pbV90aXRsZScpLCB7IHk6IDAsIG9wYWNpdHk6IDEsIHJvdGF0ZTogMCB9LCAwKVxuICAgICAgICAgICAgICAgICAgICAudG8oYmxvY2sucXVlcnlTZWxlY3RvckFsbCgnLmFuaW1fc2NhbGUnKSwgeyBzY2FsZTogMSwgb3BhY2l0eTogMSwgc3RhZ2dlcjogMC4xNSB9LCAwLjEpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgbGF5b3V0VGl0cmVUZXh0ZUJvdXRvbkltYWdlKCkge1xuICAgICAgICBjb25zdCBibG9ja3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcud3AtYmxvY2stbGF6eWJsb2NrLXNlY3Rpb24tbGF5b3V0LXRpdHJlLXRleHRlLWJvdXRvbi1ldC1pbWFnZScpXG5cbiAgICAgICAgaWYgKGJsb2Nrcykge1xuICAgICAgICAgICAgYmxvY2tzLmZvckVhY2goYmxvY2sgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRpbWVsaW5lID0gZ3NhcC50aW1lbGluZSh7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHRzOiB7IGR1cmF0aW9uOiAxLCBlYXNlOiAnZXhwby5vdXQnIH0sXG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbFRyaWdnZXI6IHsgdHJpZ2dlcjogYmxvY2ssIHN0YXJ0OiAndG9wIGNlbnRlcicgfVxuICAgICAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgICAgICB0aW1lbGluZVxuICAgICAgICAgICAgICAgICAgICAudG8oYmxvY2sucXVlcnlTZWxlY3RvcignLmFuaW1fdGl0bGUnKSwgeyB5OiAwLCBvcGFjaXR5OiAxLCByb3RhdGU6IDAgfSwgMClcbiAgICAgICAgICAgICAgICAgICAgLnRvKGJsb2NrLnF1ZXJ5U2VsZWN0b3JBbGwoJy5hbmltX29wYWNpdHknKSwgeyBvcGFjaXR5OiAxIH0sIDAuMSlcbiAgICAgICAgICAgICAgICAgICAgLnRvKGJsb2NrLnF1ZXJ5U2VsZWN0b3IoJy5hbmltX292ZXJsYXknKSwgeyBzY2FsZVk6IDAgfSwgMC4xKVxuICAgICAgICAgICAgICAgICAgICAudG8oYmxvY2sucXVlcnlTZWxlY3RvcignLmFuaW1fem9vbScpLCB7IHNjYWxlOiAxLCBkdXJhdGlvbjogNCB9LCAwLjEpXG4gICAgICAgICAgICAgICAgICAgIC50byhibG9jay5xdWVyeVNlbGVjdG9yQWxsKCcuYW5pbV9zY2FsZScpLCB7IHNjYWxlOiAxLCBvcGFjaXR5OiAxLCBkdXJhdGlvbjogMC40IH0sIDAuMilcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwYXJhZ3JhcGhlR2F1Y2hlKCkge1xuICAgICAgICBjb25zdCBibG9jayA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy53cC1ibG9jay1sYXp5YmxvY2stc2VjdGlvbi1wYXJhZ3JhcGhlLWdhdWNoZScpXG5cbiAgICAgICAgaWYgKGJsb2NrKSB7XG4gICAgICAgICAgICBjb25zdCB0aW1lbGluZSA9IGdzYXAudGltZWxpbmUoe1xuICAgICAgICAgICAgICAgIGRlZmF1bHRzOiB7IGR1cmF0aW9uOiAxLCBlYXNlOiAnZXhwby5vdXQnIH0sXG4gICAgICAgICAgICAgICAgc2Nyb2xsVHJpZ2dlcjogeyB0cmlnZ2VyOiBibG9jaywgc3RhcnQ6ICd0b3AgY2VudGVyJyB9XG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICB0aW1lbGluZVxuICAgICAgICAgICAgICAgIC50byhibG9jay5xdWVyeVNlbGVjdG9yKCcuYW5pbV90aXRsZScpLCB7IHk6IDAsIG9wYWNpdHk6IDEsIHJvdGF0ZTogMCB9LCAwKVxuICAgICAgICAgICAgICAgIC50byhibG9jay5xdWVyeVNlbGVjdG9yQWxsKCcuYW5pbV9vcGFjaXR5JyksIHsgb3BhY2l0eTogMSB9LCAwLjEpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBsYXlvdXRWaWRlb1RleHRlKCkge1xuICAgICAgICBjb25zdCBibG9jayA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy53cC1ibG9jay1sYXp5YmxvY2stc2VjdGlvbi1sYXlvdXQtdmlkZW8tYW5kLXRleHRlJylcblxuICAgICAgICBpZiAoYmxvY2spIHtcbiAgICAgICAgICAgIGNvbnN0IHRpbWVsaW5lID0gZ3NhcC50aW1lbGluZSh7XG4gICAgICAgICAgICAgICAgZGVmYXVsdHM6IHsgZHVyYXRpb246IDEsIGVhc2U6ICdleHBvLm91dCcgfSxcbiAgICAgICAgICAgICAgICBzY3JvbGxUcmlnZ2VyOiB7IHRyaWdnZXI6IGJsb2NrLCBzdGFydDogJ3RvcCBjZW50ZXInIH1cbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIHRpbWVsaW5lXG4gICAgICAgICAgICAgICAgLnRvKGJsb2NrLnF1ZXJ5U2VsZWN0b3IoJy5hbmltX3RpdGxlJyksIHsgeTogMCwgb3BhY2l0eTogMSwgcm90YXRlOiAwIH0sIDApXG4gICAgICAgICAgICAgICAgLnRvKGJsb2NrLnF1ZXJ5U2VsZWN0b3JBbGwoJy5hbmltX29wYWNpdHknKSwgeyBvcGFjaXR5OiAxIH0sIDAuMSlcbiAgICAgICAgICAgICAgICAudG8oYmxvY2sucXVlcnlTZWxlY3RvcignLmFuaW1fb3ZlcmxheScpLCB7IHNjYWxlWTogMCB9LCAwLjEpXG4gICAgICAgICAgICAgICAgLnRvKGJsb2NrLnF1ZXJ5U2VsZWN0b3IoJy5hbmltX3pvb20nKSwgeyBzY2FsZTogMSwgZHVyYXRpb246IDQgfSwgMC4xKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcGFyYWdyYXBoZUNlbnRyZSgpIHtcbiAgICAgICAgY29uc3QgYmxvY2sgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcud3AtYmxvY2stbGF6eWJsb2NrLXNlY3Rpb24tcGFyYWdyYXBoZS1jZW50cmUnKVxuXG4gICAgICAgIGlmIChibG9jaykge1xuICAgICAgICAgICAgY29uc3QgdGltZWxpbmUgPSBnc2FwLnRpbWVsaW5lKHtcbiAgICAgICAgICAgICAgICBkZWZhdWx0czogeyBkdXJhdGlvbjogMSwgZWFzZTogJ2V4cG8ub3V0JyB9LFxuICAgICAgICAgICAgICAgIHNjcm9sbFRyaWdnZXI6IHsgdHJpZ2dlcjogYmxvY2ssIHN0YXJ0OiAndG9wIGNlbnRlcicgfVxuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgdGltZWxpbmVcbiAgICAgICAgICAgICAgICAudG8oYmxvY2sucXVlcnlTZWxlY3RvcignLmFuaW1fdGl0bGUnKSwgeyB5OiAwLCBvcGFjaXR5OiAxLCByb3RhdGU6IDAgfSwgMClcbiAgICAgICAgICAgICAgICAudG8oYmxvY2sucXVlcnlTZWxlY3RvckFsbCgnLmFuaW1fb3BhY2l0eScpLCB7IG9wYWNpdHk6IDEgfSwgMC4yKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmlkZW8oKSB7XG4gICAgICAgIGNvbnN0IGJsb2NrcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy53cC1ibG9jay1sYXp5YmxvY2stc2VjdGlvbi12aWRlbycpXG5cbiAgICAgICAgaWYgKGJsb2Nrcykge1xuICAgICAgICAgICAgYmxvY2tzLmZvckVhY2goYmxvY2sgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRpbWVsaW5lID0gZ3NhcC50aW1lbGluZSh7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHRzOiB7IGR1cmF0aW9uOiAxLCBlYXNlOiAnZXhwby5vdXQnIH0sXG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbFRyaWdnZXI6IHsgdHJpZ2dlcjogYmxvY2ssIHN0YXJ0OiAndG9wIGNlbnRlcicgfVxuICAgICAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgICAgICB0aW1lbGluZVxuICAgICAgICAgICAgICAgICAgICAudG8oYmxvY2sucXVlcnlTZWxlY3RvcignLmFuaW1fb3ZlcmxheScpLCB7IHNjYWxlWTogMCB9LCAwKVxuICAgICAgICAgICAgICAgICAgICAudG8oYmxvY2sucXVlcnlTZWxlY3RvcignLmFuaW1fem9vbScpLCB7IHNjYWxlOiAxLCBkdXJhdGlvbjogNCB9LCAwKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHRpdHJlUGFyYWdyYXBoZUdhdWNoZSgpIHtcbiAgICAgICAgY29uc3QgYmxvY2tzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLndwLWJsb2NrLWxhenlibG9jay1zZWN0aW9uLXRpdHJlLWV0LXBhcmFncmFwaGUtZ2F1Y2hlJylcblxuICAgICAgICBpZiAoYmxvY2tzKSB7XG4gICAgICAgICAgICBibG9ja3MuZm9yRWFjaChibG9jayA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgdGltZWxpbmUgPSBnc2FwLnRpbWVsaW5lKHtcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdHM6IHsgZHVyYXRpb246IDEsIGVhc2U6ICdleHBvLm91dCcgfSxcbiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsVHJpZ2dlcjogeyB0cmlnZ2VyOiBibG9jaywgc3RhcnQ6ICd0b3AgY2VudGVyJyB9XG4gICAgICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgICAgIHRpbWVsaW5lXG4gICAgICAgICAgICAgICAgICAgIC50byhibG9jay5xdWVyeVNlbGVjdG9yKCcuYW5pbV90aXRsZScpLCB7IHk6IDAsIG9wYWNpdHk6IDEsIHJvdGF0ZTogMCB9LCAwKVxuICAgICAgICAgICAgICAgICAgICAudG8oYmxvY2sucXVlcnlTZWxlY3RvckFsbCgnLmFuaW1fb3BhY2l0eScpLCB7IG9wYWNpdHk6IDEgfSwgMC4yKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGhlYWRlclRpdHJlRGVzY3JpcHRpb24oKSB7XG4gICAgICAgIGNvbnN0IGJsb2NrID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLndwLWJsb2NrLWxhenlibG9jay1oZWFkZXItdGl0cmUtYW5kLWRlc2NyaXB0aW9uJylcblxuICAgICAgICBpZiAoYmxvY2spIHtcbiAgICAgICAgICAgIGNvbnN0IHRpbWVsaW5lID0gZ3NhcC50aW1lbGluZSh7XG4gICAgICAgICAgICAgICAgZGVmYXVsdHM6IHsgZHVyYXRpb246IDEsIGVhc2U6ICdleHBvLm91dCcgfSxcbiAgICAgICAgICAgICAgICBzY3JvbGxUcmlnZ2VyOiB7IHRyaWdnZXI6IGJsb2NrLCBzdGFydDogJ3RvcCBjZW50ZXInIH1cbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIHRpbWVsaW5lXG4gICAgICAgICAgICAgICAgLnRvKGJsb2NrLnF1ZXJ5U2VsZWN0b3IoJy5hbmltX29wYWNpdHknKSwgeyBvcGFjaXR5OiAxIH0sIDApXG4gICAgICAgICAgICAgICAgLnRvKGJsb2NrLnF1ZXJ5U2VsZWN0b3IoJy5hbmltX3RpdGxlJyksIHsgeTogMCwgb3BhY2l0eTogMSwgcm90YXRlOiAwIH0sIDAuMSlcbiAgICAgICAgICAgICAgICAudG8oYmxvY2sucXVlcnlTZWxlY3RvcignLmFuaW1fb3BhY2l0eTInKSwgeyBvcGFjaXR5OiAxIH0sIDAuMilcbiAgICAgICAgICAgICAgICAudG8oYmxvY2sucXVlcnlTZWxlY3RvcignLmFuaW1fb3ZlcmxheScpLCB7IHNjYWxlWTogMCB9LCAwLjMpXG4gICAgICAgICAgICAgICAgLnRvKGJsb2NrLnF1ZXJ5U2VsZWN0b3IoJy5hbmltX3pvb20nKSwgeyBzY2FsZTogMSwgZHVyYXRpb246IDQgfSwgMC4zKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXBwZWwoKSB7XG4gICAgICAgIGNvbnN0IGJsb2NrcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy53cC1ibG9jay1sYXp5YmxvY2stc2VjdGlvbi1sYXlvdXQtYXBwZWwnKVxuXG4gICAgICAgIGlmIChibG9ja3MpIHtcbiAgICAgICAgICAgIGJsb2Nrcy5mb3JFYWNoKGJsb2NrID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB0aW1lbGluZSA9IGdzYXAudGltZWxpbmUoe1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0czogeyBkdXJhdGlvbjogMSwgZWFzZTogJ2V4cG8ub3V0JyB9LFxuICAgICAgICAgICAgICAgICAgICBzY3JvbGxUcmlnZ2VyOiB7IHRyaWdnZXI6IGJsb2NrLCBzdGFydDogJ3RvcCBjZW50ZXInIH1cbiAgICAgICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAgICAgdGltZWxpbmVcbiAgICAgICAgICAgICAgICAgICAgLnRvKGJsb2NrLnF1ZXJ5U2VsZWN0b3IoJy5hbmltX3RpdGxlJyksIHsgeTogMCwgb3BhY2l0eTogMSwgcm90YXRlOiAwIH0sIDApXG4gICAgICAgICAgICAgICAgICAgIC50byhibG9jay5xdWVyeVNlbGVjdG9yQWxsKCcuYW5pbV9vcGFjaXR5JyksIHsgb3BhY2l0eTogMSwgc3RhZ2dlcjogMC4xNSB9LCAwLjEpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgYmFubmllcmVJbWFnZSgpIHtcbiAgICAgICAgY29uc3QgYmxvY2sgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcud3AtYmxvY2stbGF6eWJsb2NrLXNlY3Rpb24tYmFubmllcmUtaW1hZ2UnKVxuXG4gICAgICAgIGlmIChibG9jaykge1xuICAgICAgICAgICAgY29uc3QgdGltZWxpbmUgPSBnc2FwLnRpbWVsaW5lKHtcbiAgICAgICAgICAgICAgICBkZWZhdWx0czogeyBkdXJhdGlvbjogMSwgZWFzZTogJ2V4cG8ub3V0JyB9LFxuICAgICAgICAgICAgICAgIHNjcm9sbFRyaWdnZXI6IHsgdHJpZ2dlcjogYmxvY2ssIHN0YXJ0OiAndG9wIGNlbnRlcicgfVxuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgdGltZWxpbmVcbiAgICAgICAgICAgICAgICAudG8oYmxvY2sucXVlcnlTZWxlY3RvcignLmFuaW1fb3ZlcmxheScpLCB7IHNjYWxlWTogMCB9LCAwKVxuICAgICAgICAgICAgICAgIC50byhibG9jay5xdWVyeVNlbGVjdG9yKCcuYW5pbV96b29tJyksIHsgc2NhbGU6IDEsIGR1cmF0aW9uOiA0IH0sIDApXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0aXRyZUxvbmdUZXh0SW1hZ2UoKSB7XG4gICAgICAgIGNvbnN0IGJsb2NrID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLndwLWJsb2NrLWxhenlibG9jay1zZWN0aW9uLWxheW91dC10aXRyZS1sb25nLXRleHRlLWV0LWltYWdlJylcblxuICAgICAgICBpZiAoYmxvY2spIHtcbiAgICAgICAgICAgIGNvbnN0IHRpbWVsaW5lID0gZ3NhcC50aW1lbGluZSh7XG4gICAgICAgICAgICAgICAgZGVmYXVsdHM6IHsgZHVyYXRpb246IDEsIGVhc2U6ICdleHBvLm91dCcgfSxcbiAgICAgICAgICAgICAgICBzY3JvbGxUcmlnZ2VyOiB7IHRyaWdnZXI6IGJsb2NrLCBzdGFydDogJ3RvcCBjZW50ZXInIH1cbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIHRpbWVsaW5lXG4gICAgICAgICAgICAgICAgLnRvKGJsb2NrLnF1ZXJ5U2VsZWN0b3IoJy5hbmltX3RpdGxlJyksIHsgeTogMCwgb3BhY2l0eTogMSwgcm90YXRlOiAwIH0sIDApXG4gICAgICAgICAgICAgICAgLnRvKGJsb2NrLnF1ZXJ5U2VsZWN0b3JBbGwoJy5hbmltX29wYWNpdHknKSwgeyBvcGFjaXR5OiAxLCBzdGFnZ2VyOiAwLjE1IH0sIDAuMSlcbiAgICAgICAgICAgICAgICAudG8oYmxvY2sucXVlcnlTZWxlY3RvckFsbCgnLmFuaW1fc2NhbGUnKSwgeyBzY2FsZTogMSwgb3BhY2l0eTogMSB9LCAwLjIpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YWxldXJzKCkge1xuICAgICAgICBjb25zdCBibG9jayA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy53cC1ibG9jay1sYXp5YmxvY2stc2VjdGlvbi12YWxldXJzLWFjbG91ZCcpXG5cbiAgICAgICAgaWYgKGJsb2NrKSB7XG4gICAgICAgICAgICBjb25zdCB0aW1lbGluZSA9IGdzYXAudGltZWxpbmUoe1xuICAgICAgICAgICAgICAgIGRlZmF1bHRzOiB7IGR1cmF0aW9uOiAxLCBlYXNlOiAnZXhwby5vdXQnIH0sXG4gICAgICAgICAgICAgICAgc2Nyb2xsVHJpZ2dlcjogeyB0cmlnZ2VyOiBibG9jaywgc3RhcnQ6ICd0b3AgY2VudGVyJyB9XG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICB0aW1lbGluZVxuICAgICAgICAgICAgICAgIC50byhibG9jay5xdWVyeVNlbGVjdG9yQWxsKCcuYW5pbV90aXRsZScpLCB7IHk6IDAsIG9wYWNpdHk6IDEsIHJvdGF0ZTogMCwgc3RhZ2dlcjogMC4xNSB9LCAwKVxuICAgICAgICAgICAgICAgIC50byhibG9jay5xdWVyeVNlbGVjdG9yQWxsKCcuYW5pbV9vcGFjaXR5JyksIHsgc2NhbGU6IDEsIG9wYWNpdHk6IDEsIHN0YWdnZXI6IDAuMTUgfSwgMC4xKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZXF1aXBlKCkge1xuICAgICAgICBjb25zdCBibG9jayA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy53cC1ibG9jay1sYXp5YmxvY2stc2VjdGlvbi1lcXVpcGUnKVxuXG4gICAgICAgIGlmIChibG9jaykge1xuICAgICAgICAgICAgY29uc3QgdGltZWxpbmUgPSBnc2FwLnRpbWVsaW5lKHtcbiAgICAgICAgICAgICAgICBkZWZhdWx0czogeyBkdXJhdGlvbjogMSwgZWFzZTogJ2V4cG8ub3V0JyB9LFxuICAgICAgICAgICAgICAgIHNjcm9sbFRyaWdnZXI6IHsgdHJpZ2dlcjogYmxvY2ssIHN0YXJ0OiAndG9wIGNlbnRlcicgfVxuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgdGltZWxpbmVcbiAgICAgICAgICAgICAgICAudG8oYmxvY2sucXVlcnlTZWxlY3RvckFsbCgnLmFuaW1fdGl0bGUnKSwgeyB5OiAwLCBvcGFjaXR5OiAxLCByb3RhdGU6IDAsIHN0YWdnZXI6IDAuMTUgfSwgMClcbiAgICAgICAgICAgICAgICAudG8oYmxvY2sucXVlcnlTZWxlY3RvckFsbCgnLmFuaW1fb3BhY2l0eScpLCB7IHNjYWxlOiAxLCBvcGFjaXR5OiAxLCBzdGFnZ2VyOiAwLjE1IH0sIDAuMSlcbiAgICAgICAgICAgICAgICAudG8oYmxvY2sucXVlcnlTZWxlY3RvckFsbCgnLmFuaW1fb3ZlcmxheScpLCB7IHNjYWxlWTogMCwgc3RhZ2dlcjogMC4xNSB9LCAwLjIpXG4gICAgICAgICAgICAgICAgLnRvKGJsb2NrLnF1ZXJ5U2VsZWN0b3JBbGwoJy5hbmltX3pvb20nKSwgeyBzY2FsZTogMSwgZHVyYXRpb246IDQsIHN0YWdnZXI6IDAuMTUgfSwgMC4yKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgYm91dG9uKCkge1xuICAgICAgICBjb25zdCBibG9jayA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy53cC1ibG9jay1sYXp5YmxvY2stc2VjdGlvbi1ib3V0b24nKVxuXG4gICAgICAgIGlmIChibG9jaykge1xuICAgICAgICAgICAgY29uc3QgdGltZWxpbmUgPSBnc2FwLnRpbWVsaW5lKHtcbiAgICAgICAgICAgICAgICBkZWZhdWx0czogeyBkdXJhdGlvbjogMSwgZWFzZTogJ2V4cG8ub3V0JyB9LFxuICAgICAgICAgICAgICAgIHNjcm9sbFRyaWdnZXI6IHsgdHJpZ2dlcjogYmxvY2ssIHN0YXJ0OiAndG9wIGNlbnRlcicgfVxuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgdGltZWxpbmVcbiAgICAgICAgICAgICAgICAudG8oYmxvY2sucXVlcnlTZWxlY3RvcignLmFuaW1fdGl0bGUnKSwgeyB5OiAwLCBvcGFjaXR5OiAxLCByb3RhdGU6IDAgfSwgMClcbiAgICAgICAgICAgICAgICAudG8oYmxvY2sucXVlcnlTZWxlY3RvcignLmFuaW1fc2NhbGUnKSwgeyBzY2FsZTogMSwgb3BhY2l0eTogMSwgZHVyYXRpb246IDAuNCB9LCAwLjEpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBoZWFkZXJCbG9nKCkge1xuICAgICAgICBjb25zdCBibG9jayA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5oZXJvLWJsb2cnKVxuXG4gICAgICAgIGlmIChibG9jaykge1xuICAgICAgICAgICAgY29uc3QgdGltZWxpbmUgPSBnc2FwLnRpbWVsaW5lKHtcbiAgICAgICAgICAgICAgICBkZWZhdWx0czogeyBkdXJhdGlvbjogMSwgZWFzZTogJ2V4cG8ub3V0JyB9LFxuICAgICAgICAgICAgICAgIHNjcm9sbFRyaWdnZXI6IHsgdHJpZ2dlcjogYmxvY2ssIHN0YXJ0OiAndG9wIGNlbnRlcicgfVxuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgdGltZWxpbmVcbiAgICAgICAgICAgICAgICAudG8oYmxvY2sucXVlcnlTZWxlY3RvcignLmFuaW1fb3ZlcmxheScpLCB7IHNjYWxlWTogMCB9LCAwLjIpXG4gICAgICAgICAgICAgICAgLnRvKGJsb2NrLnF1ZXJ5U2VsZWN0b3IoJy5hbmltX3RpdGxlJyksIHsgeTogMCwgb3BhY2l0eTogMSwgcm90YXRlOiAwIH0sIDAuMylcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGhlYWRlclBvc3QoKSB7XG4gICAgICAgIGNvbnN0IGJsb2NrID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmhlcm8tYXJ0aWNsZScpXG5cbiAgICAgICAgaWYgKGJsb2NrKSB7XG4gICAgICAgICAgICBjb25zdCB0aW1lbGluZSA9IGdzYXAudGltZWxpbmUoe1xuICAgICAgICAgICAgICAgIGRlZmF1bHRzOiB7IGR1cmF0aW9uOiAxLCBlYXNlOiAnZXhwby5vdXQnIH0sXG4gICAgICAgICAgICAgICAgc2Nyb2xsVHJpZ2dlcjogeyB0cmlnZ2VyOiBibG9jaywgc3RhcnQ6ICd0b3AgY2VudGVyJyB9XG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICB0aW1lbGluZVxuICAgICAgICAgICAgICAgIC50byhibG9jay5xdWVyeVNlbGVjdG9yKCcuYW5pbV9vcGFjaXR5JyksIHsgb3BhY2l0eTogMSB9LCAwKVxuICAgICAgICAgICAgICAgIC50byhibG9jay5xdWVyeVNlbGVjdG9yKCcuYW5pbV90aXRsZScpLCB7IHk6IDAsIG9wYWNpdHk6IDEsIHJvdGF0ZTogMCB9LCAwLjEpXG4gICAgICAgICAgICAgICAgLnRvKGJsb2NrLnF1ZXJ5U2VsZWN0b3IoJy5hbmltX29wYWNpdHkyJyksIHsgb3BhY2l0eTogMSB9LCAwLjIpXG4gICAgICAgICAgICAgICAgLnRvKGJsb2NrLnF1ZXJ5U2VsZWN0b3IoJy5hbmltX292ZXJsYXknKSwgeyBzY2FsZVk6IDAgfSwgMC40KVxuICAgICAgICB9XG4gICAgfVxufSJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwibiIsInQiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNhbGwiLCJlIiwiQXJyYXkiLCJpc0FycmF5IiwiciIsIk1hdGgiLCJhYnMiLCJvIiwiaSIsInUiLCJmIiwibWFwIiwiTnVtYmVyIiwiYyIsImEiLCJtYXgiLCJsZW5ndGgiLCJrZXlzIiwicyIsInJlZHVjZSIsImZvckVhY2giLCJkIiwiZXZlcnkiLCJjb25jYXQiLCJsIiwic3RhcnQiLCJjZW50ZXIiLCJlbmQiLCJtZWFzdXJlIiwicCIsIm1pbiIsImNvbnN0cmFpbiIsInJlYWNoZWRBbnkiLCJyZWFjaGVkTWF4IiwicmVhY2hlZE1pbiIsInJlbW92ZU9mZnNldCIsImNlaWwiLCJ2IiwiYWRkIiwiY2xvbmUiLCJnZXQiLCJzZXQiLCJtIiwiYWRkRXZlbnRMaXN0ZW5lciIsInB1c2giLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicmVtb3ZlQWxsIiwiZmlsdGVyIiwiZyIsImRpdmlkZSIsIm11bHRpcGx5Iiwibm9ybWFsaXplIiwic3VidHJhY3QiLCJ4IiwiaCIsInkiLCJTIiwiYiIsImNyb3NzIiwidyIsIkUiLCJBIiwiTSIsIlQiLCJPIiwibW91c2UiLCJ0b3VjaCIsIkIiLCJQIiwiayIsIkkiLCJ6IiwiRCIsIkwiLCJOIiwiQyIsInR5cGUiLCJidXR0b24iLCJ0YXJnZXQiLCJub2RlTmFtZSIsImluZGV4T2YiLCJwb2ludGVyRG93biIsInVzZUJhc2VNYXNzIiwidXNlU3BlZWQiLCJkb2N1bWVudCIsIlYiLCJIIiwicmVhZFBvaW50IiwiZW1pdCIsInByZXZlbnREZWZhdWx0IiwiY2FuY2VsYWJsZSIsInBvaW50ZXJNb3ZlIiwiYXBwbHkiLCJieURpc3RhbmNlIiwiaW5kZXgiLCJwb2ludGVyVXAiLCJkaXN0YW5jZSIsImJ5SW5kZXgiLCJ1c2VNYXNzIiwiUiIsImFkZEFjdGl2YXRpb25FdmVudHMiLCJjbGlja0FsbG93ZWQiLCJyZW1vdmVBbGxFdmVudHMiLCJwb3ciLCJyb3VuZCIsImRpcmVjdGlvbiIsInNlZWsiLCJzZXR0bGUiLCJ1cGRhdGUiLCJ1c2VCYXNlU3BlZWQiLCJ0b2dnbGVBY3RpdmUiLCJsb29wIiwic29ydCIsImRpZmYiLCJzaG9ydGN1dCIsInNjcm9sbCIsInN0eWxlIiwiY2xlYXIiLCJ0cmFuc2Zvcm0iLCJnZXRBdHRyaWJ1dGUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJ0byIsInJldmVyc2UiLCJmaW5kU2xpZGVCb3VuZHMiLCJsb2NhdGlvbiIsInRyYW5zbGF0ZSIsImNhbkxvb3AiLCJsb29wUG9pbnRzIiwiZ3JvdXBTbGlkZXMiLCJzbGljZSIsImFsaWduIiwiYXhpcyIsInN0YXJ0SW5kZXgiLCJpblZpZXdUaHJlc2hvbGQiLCJzcGVlZCIsImRyYWdGcmVlIiwic2xpZGVzVG9TY3JvbGwiLCJza2lwU25hcHMiLCJjb250YWluU2Nyb2xsIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0Iiwic3RhcnRFZGdlIiwiZW5kRWRnZSIsIm1lYXN1cmVTaXplIiwid2lkdGgiLCJoZWlnaHQiLCJqIiwiRiIsInEiLCJVIiwiRyIsIndpbmRvdyIsImdldENvbXB1dGVkU3R5bGUiLCJwYXJzZUZsb2F0IiwiZ2V0UHJvcGVydHlWYWx1ZSIsInNsaWRlU2l6ZXMiLCJzbGlkZVNpemVzV2l0aEdhcHMiLCJKIiwiVyIsIlgiLCJZIiwic25hcHMiLCJzbmFwc0FsaWduZWQiLCJLIiwiUSIsIloiLCIkIiwic25hcHNDb250YWluZWQiLCJsYXN0SW5kZXhPZiIsIl8iLCJubiIsImxpbWl0IiwidG4iLCJlbiIsInJuIiwib24iLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJwcm9jZWVkIiwic3RvcCIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwidm4iLCJzY3JvbGxCb3VuZHMiLCJkcmFnSGFuZGxlciIsInNjcm9sbEJvZHkiLCJhbiIsImFuaW1hdGlvbiIsInNjcm9sbExvb3BlciIsInNsaWRlTG9vcGVyIiwiY24iLCJ1biIsImZuIiwic24iLCJkbiIsImxuIiwiY2hlY2siLCJwbiIsIlRvdWNoRXZlbnQiLCJ0aW1lU3RhbXAiLCJ0b3VjaGVzIiwiaXNUb3VjaEV2ZW50IiwiY29udGFpbmVyUmVjdCIsInNsaWRlUmVjdHMiLCJldmVudFN0b3JlIiwicGVyY2VudE9mVmlldyIsImluZGV4UHJldmlvdXMiLCJvcHRpb25zIiwic2Nyb2xsUHJvZ3Jlc3MiLCJzY3JvbGxTbmFwcyIsInNjcm9sbFRhcmdldCIsInNjcm9sbFRvIiwic2xpZGVzSW5WaWV3Iiwic2xpZGVJbmRleGVzIiwiYnJlYWtwb2ludHMiLCJkcmFnZ2FibGUiLCJhY3RpdmUiLCJtZXJnZSIsImFyZUVxdWFsIiwiSlNPTiIsInN0cmluZ2lmeSIsImF0TWVkaWEiLCJtYXRjaE1lZGlhIiwibWF0Y2hlcyIsImluaXQiLCJhc3NpZ24iLCJuYW1lIiwiZGVzdHJveSIsImhhdmVDaGFuZ2VkIiwic29tZSIsIm9mZiIsImdsb2JhbE9wdGlvbnMiLCJjb250YWluZXIiLCJzbGlkZXMiLCJyb290IiwiY2hpbGRyZW4iLCJvZmZzZXRQYXJlbnQiLCJjYW5TY3JvbGxOZXh0IiwiY2FuU2Nyb2xsUHJldiIsImNvbnRhaW5lck5vZGUiLCJpbnRlcm5hbEVuZ2luZSIsInBsdWdpbnMiLCJwcmV2aW91c1Njcm9sbFNuYXAiLCJyZUluaXQiLCJyb290Tm9kZSIsInNjcm9sbE5leHQiLCJzY3JvbGxQcmV2Iiwic2Nyb2xsU25hcExpc3QiLCJzZWxlY3RlZFNjcm9sbFNuYXAiLCJzbGlkZU5vZGVzIiwic2xpZGVzTm90SW5WaWV3Iiwic2V0VGltZW91dCIsIm9wdGlvbnNIYW5kbGVyIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwidW5kZWZpbmVkIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkZWZpbml0aW9uIiwia2V5IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwib2JqIiwicHJvcCIsImhhc093blByb3BlcnR5IiwiX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsInNlbGYiLCJSZWZlcmVuY2VFcnJvciIsIl9pbmhlcml0c0xvb3NlIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiY3JlYXRlIiwiY29uc3RydWN0b3IiLCJfX3Byb3RvX18iLCJfc3VwcHJlc3NPdmVyd3JpdGVzIiwiX3JldmVydGluZyIsIl9jb250ZXh0IiwiX2dsb2JhbFRpbWVsaW5lIiwiX3dpbiIsIl9jb3JlSW5pdHRlZCIsIl9kb2MiLCJfY29yZVJlYWR5IiwiX2xhc3RSZW5kZXJlZEZyYW1lIiwiX3F1aWNrVHdlZW4iLCJfdGlja2VyQWN0aXZlIiwibjEiLCJlYXNlT3V0IiwiX2NvbmZpZyIsImF1dG9TbGVlcCIsImZvcmNlM0QiLCJudWxsVGFyZ2V0V2FybiIsInVuaXRzIiwibGluZUhlaWdodCIsIl9kZWZhdWx0cyIsImR1cmF0aW9uIiwib3ZlcndyaXRlIiwiZGVsYXkiLCJfYmlnTnVtIiwiX3RpbnlOdW0iLCJfMlBJIiwiUEkiLCJfSEFMRl9QSSIsIl9nc0lEIiwiX3NxcnQiLCJzcXJ0IiwiX2NvcyIsImNvcyIsIl9zaW4iLCJzaW4iLCJfaXNTdHJpbmciLCJ2YWx1ZSIsIl9pc0Z1bmN0aW9uIiwiX2lzTnVtYmVyIiwiX2lzVW5kZWZpbmVkIiwiX2lzT2JqZWN0IiwiX2lzTm90RmFsc2UiLCJfd2luZG93RXhpc3RzIiwiX2lzRnVuY09yU3RyaW5nIiwiX2lzVHlwZWRBcnJheSIsIkFycmF5QnVmZmVyIiwiaXNWaWV3IiwiX2lzQXJyYXkiLCJfc3RyaWN0TnVtRXhwIiwiX251bUV4cCIsIl9udW1XaXRoVW5pdEV4cCIsIl9jb21wbGV4U3RyaW5nTnVtRXhwIiwiX3JlbEV4cCIsIl9kZWxpbWl0ZWRWYWx1ZUV4cCIsIl91bml0RXhwIiwiX2dsb2JhbHMiLCJfaW5zdGFsbFNjb3BlIiwiX2luc3RhbGwiLCJzY29wZSIsIl9tZXJnZSIsImdzYXAiLCJfbWlzc2luZ1BsdWdpbiIsInByb3BlcnR5IiwiY29uc29sZSIsIndhcm4iLCJfd2FybiIsIm1lc3NhZ2UiLCJzdXBwcmVzcyIsIl9hZGRHbG9iYWwiLCJfZW1wdHlGdW5jIiwiX3N0YXJ0QXRSZXZlcnRDb25maWciLCJzdXBwcmVzc0V2ZW50cyIsImlzU3RhcnQiLCJfcmV2ZXJ0Q29uZmlnIiwiX3Jlc2VydmVkUHJvcHMiLCJfbGF6eVR3ZWVucyIsIl9sYXp5TG9va3VwIiwiX3BsdWdpbnMiLCJfZWZmZWN0cyIsIl9uZXh0R0NGcmFtZSIsIl9oYXJuZXNzUGx1Z2lucyIsIl9jYWxsYmFja05hbWVzIiwiX2hhcm5lc3MiLCJ0YXJnZXRzIiwiaGFybmVzc1BsdWdpbiIsIl9nc2FwIiwiaGFybmVzcyIsInRhcmdldFRlc3QiLCJHU0NhY2hlIiwic3BsaWNlIiwiX2dldENhY2hlIiwidG9BcnJheSIsIl9nZXRQcm9wZXJ0eSIsIl9mb3JFYWNoTmFtZSIsIm5hbWVzIiwiZnVuYyIsInNwbGl0IiwiX3JvdW5kIiwiX3JvdW5kUHJlY2lzZSIsIl9wYXJzZVJlbGF0aXZlIiwib3BlcmF0b3IiLCJjaGFyQXQiLCJzdWJzdHIiLCJfYXJyYXlDb250YWluc0FueSIsInRvU2VhcmNoIiwidG9GaW5kIiwiX2xhenlSZW5kZXIiLCJ0d2VlbiIsIl9sYXp5IiwicmVuZGVyIiwiX2xhenlTYWZlUmVuZGVyIiwidGltZSIsImZvcmNlIiwiX251bWVyaWNJZlBvc3NpYmxlIiwibWF0Y2giLCJ0cmltIiwiX3Bhc3NUaHJvdWdoIiwiX3NldERlZmF1bHRzIiwiZGVmYXVsdHMiLCJiYXNlIiwidG9NZXJnZSIsIl9tZXJnZURlZXAiLCJfY29weUV4Y2x1ZGluZyIsImV4Y2x1ZGluZyIsImNvcHkiLCJfaW5oZXJpdERlZmF1bHRzIiwidmFycyIsImV4Y2x1ZGVEdXJhdGlvbiIsInBhcmVudCIsImtleWZyYW1lcyIsImluaGVyaXQiLCJfZHAiLCJfYWRkTGlua2VkTGlzdEl0ZW0iLCJjaGlsZCIsImZpcnN0UHJvcCIsImxhc3RQcm9wIiwic29ydEJ5IiwicHJldiIsIl9wcmV2IiwiX25leHQiLCJfcmVtb3ZlTGlua2VkTGlzdEl0ZW0iLCJuZXh0IiwiX3JlbW92ZUZyb21QYXJlbnQiLCJvbmx5SWZQYXJlbnRIYXNBdXRvUmVtb3ZlIiwiYXV0b1JlbW92ZUNoaWxkcmVuIiwicmVtb3ZlIiwiX2FjdCIsIl91bmNhY2hlIiwiX2VuZCIsIl9kdXIiLCJfc3RhcnQiLCJfZGlydHkiLCJfcmVjYWNoZUFuY2VzdG9ycyIsInRvdGFsRHVyYXRpb24iLCJfcmV3aW5kU3RhcnRBdCIsInRvdGFsVGltZSIsIl9zdGFydEF0IiwicmV2ZXJ0IiwiaW1tZWRpYXRlUmVuZGVyIiwiYXV0b1JldmVydCIsIl9oYXNOb1BhdXNlZEFuY2VzdG9ycyIsIl90cyIsIl9lbGFwc2VkQ3ljbGVEdXJhdGlvbiIsIl9yZXBlYXQiLCJfYW5pbWF0aW9uQ3ljbGUiLCJfdFRpbWUiLCJfckRlbGF5IiwidFRpbWUiLCJjeWNsZUR1cmF0aW9uIiwid2hvbGUiLCJmbG9vciIsIl9wYXJlbnRUb0NoaWxkVG90YWxUaW1lIiwicGFyZW50VGltZSIsIl90RHVyIiwiX3NldEVuZCIsIl9ydHMiLCJfYWxpZ25QbGF5aGVhZCIsInNtb290aENoaWxkVGltaW5nIiwiX3RpbWUiLCJfcG9zdEFkZENoZWNrcyIsInRpbWVsaW5lIiwiX2luaXR0ZWQiLCJyYXdUaW1lIiwiX2NsYW1wIiwiX3pUaW1lIiwiX2FkZFRvVGltZWxpbmUiLCJwb3NpdGlvbiIsInNraXBDaGVja3MiLCJfcGFyc2VQb3NpdGlvbiIsIl9kZWxheSIsInRpbWVTY2FsZSIsIl9zb3J0IiwiX2lzRnJvbU9yRnJvbVN0YXJ0IiwiX3JlY2VudCIsIl9zY3JvbGxUcmlnZ2VyIiwidHJpZ2dlciIsIlNjcm9sbFRyaWdnZXIiLCJfYXR0ZW1wdEluaXRUd2VlbiIsIl9pbml0VHdlZW4iLCJfcHQiLCJsYXp5IiwiX3RpY2tlciIsImZyYW1lIiwiX3BhcmVudFBsYXloZWFkSXNCZWZvcmVTdGFydCIsIl9yZWYiLCJfbG9jayIsIl9yZWYyIiwiZGF0YSIsIl9zZXREdXJhdGlvbiIsInNraXBVbmNhY2hlIiwibGVhdmVQbGF5aGVhZCIsInJlcGVhdCIsImR1ciIsInRvdGFsUHJvZ3Jlc3MiLCJfb25VcGRhdGVUb3RhbER1cmF0aW9uIiwiVGltZWxpbmUiLCJfemVyb1Bvc2l0aW9uIiwiZW5kVGltZSIsInBlcmNlbnRBbmltYXRpb24iLCJvZmZzZXQiLCJpc1BlcmNlbnQiLCJsYWJlbHMiLCJyZWNlbnQiLCJjbGlwcGVkRHVyYXRpb24iLCJpc05hTiIsInJlcGxhY2UiLCJfY3JlYXRlVHdlZW5UeXBlIiwicGFyYW1zIiwiaXJWYXJzIiwiaXNMZWdhY3kiLCJ2YXJzSW5kZXgiLCJydW5CYWNrd2FyZHMiLCJzdGFydEF0IiwiVHdlZW4iLCJfY29uZGl0aW9uYWxSZXR1cm4iLCJnZXRVbml0IiwiZXhlYyIsIl9zbGljZSIsIl9pc0FycmF5TGlrZSIsIm5vbkVtcHR5Iiwibm9kZVR5cGUiLCJsZWF2ZVN0cmluZ3MiLCJzZWxlY3RvciIsIl93YWtlIiwiYXIiLCJhY2N1bXVsYXRvciIsIl9hY2N1bXVsYXRvciIsIl9mbGF0dGVuIiwicXVlcnlTZWxlY3RvckFsbCIsImVsIiwiY3VycmVudCIsIm5hdGl2ZUVsZW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic2h1ZmZsZSIsInJhbmRvbSIsImRpc3RyaWJ1dGUiLCJlYWNoIiwiZWFzZSIsIl9wYXJzZUVhc2UiLCJmcm9tIiwiY2FjaGUiLCJpc0RlY2ltYWwiLCJyYXRpb3MiLCJyYXRpb1giLCJyYXRpb1kiLCJlZGdlcyIsIm9yaWdpblgiLCJvcmlnaW5ZIiwid3JhcEF0IiwiZGlzdGFuY2VzIiwiZ3JpZCIsImxlZnQiLCJhbW91bnQiLCJfaW52ZXJ0RWFzZSIsIl9yb3VuZE1vZGlmaWVyIiwicmF3Iiwic25hcCIsInNuYXBUbyIsInJhZGl1cyIsImlzMkQiLCJ2YWx1ZXMiLCJpbmNyZW1lbnQiLCJkeCIsImR5IiwiY2xvc2VzdCIsInJvdW5kaW5nSW5jcmVtZW50IiwicmV0dXJuRnVuY3Rpb24iLCJfd3JhcEFycmF5Iiwid3JhcHBlciIsIl9yZXBsYWNlUmFuZG9tIiwibnVtcyIsIm1hcFJhbmdlIiwiaW5NaW4iLCJpbk1heCIsIm91dE1pbiIsIm91dE1heCIsImluUmFuZ2UiLCJvdXRSYW5nZSIsIl9nZXRMYWJlbEluRGlyZWN0aW9uIiwiZnJvbVRpbWUiLCJiYWNrd2FyZCIsImxhYmVsIiwiX2NhbGxiYWNrIiwiZXhlY3V0ZUxhenlGaXJzdCIsInJlc3VsdCIsImNhbGxiYWNrIiwicHJldkNvbnRleHQiLCJjb250ZXh0IiwiX2N0eCIsImNhbGxiYWNrU2NvcGUiLCJfaW50ZXJydXB0Iiwic2Nyb2xsVHJpZ2dlciIsImtpbGwiLCJwcm9ncmVzcyIsIl9jcmVhdGVQbHVnaW4iLCJjb25maWciLCJpc0Z1bmMiLCJQbHVnaW4iLCJ0aGlzIiwiX3Byb3BzIiwiaW5zdGFuY2VEZWZhdWx0cyIsIl9yZW5kZXJQcm9wVHdlZW5zIiwiX2FkZFByb3BUd2VlbiIsIl9raWxsUHJvcFR3ZWVuc09mIiwibW9kaWZpZXIiLCJfYWRkUGx1Z2luTW9kaWZpZXIiLCJyYXdWYXJzIiwic3RhdGljcyIsImdldFNldHRlciIsIl9nZXRTZXR0ZXIiLCJhbGlhc2VzIiwicmVnaXN0ZXIiLCJ0b1VwcGVyQ2FzZSIsIlByb3BUd2VlbiIsIl8yNTUiLCJfY29sb3JMb29rdXAiLCJhcXVhIiwibGltZSIsInNpbHZlciIsImJsYWNrIiwibWFyb29uIiwidGVhbCIsImJsdWUiLCJuYXZ5Iiwid2hpdGUiLCJvbGl2ZSIsInllbGxvdyIsIm9yYW5nZSIsImdyYXkiLCJwdXJwbGUiLCJncmVlbiIsInJlZCIsInBpbmsiLCJjeWFuIiwidHJhbnNwYXJlbnQiLCJfaHVlIiwibTEiLCJtMiIsInNwbGl0Q29sb3IiLCJ0b0hTTCIsImZvcmNlQWxwaGEiLCJ3YXNIU0wiLCJwYXJzZUludCIsIl9jb2xvck9yZGVyRGF0YSIsIl9jb2xvckV4cCIsIl9mb3JtYXRDb2xvcnMiLCJvcmRlck1hdGNoRGF0YSIsInNoZWxsIiwiY29sb3JzIiwiY29sb3IiLCJqb2luIiwic2hpZnQiLCJSZWdFeHAiLCJfaHNsRXhwIiwiX2NvbG9yU3RyaW5nRmlsdGVyIiwiY29tYmluZWQiLCJsYXN0SW5kZXgiLCJ0ZXN0IiwiX2lkIiwiX3JlcSIsIl9yYWYiLCJfc2VsZiIsIl9kZWx0YSIsIl9pIiwiX2dldFRpbWUiLCJEYXRlIiwibm93IiwiX2xhZ1RocmVzaG9sZCIsIl9hZGp1c3RlZExhZyIsIl9zdGFydFRpbWUiLCJfbGFzdFVwZGF0ZSIsIl9nYXAiLCJfbmV4dFRpbWUiLCJfbGlzdGVuZXJzIiwiX3RpY2siLCJvdmVybGFwIiwiZGlzcGF0Y2giLCJlbGFwc2VkIiwibWFudWFsIiwidGljayIsImRlbHRhUmF0aW8iLCJmcHMiLCJ3YWtlIiwiZ3NhcFZlcnNpb25zIiwidmVyc2lvbiIsIkdyZWVuU29ja0dsb2JhbHMiLCJzbGVlcCIsImNsZWFyVGltZW91dCIsImxhZ1Ntb290aGluZyIsInRocmVzaG9sZCIsImFkanVzdGVkTGFnIiwiX2ZwcyIsIm9uY2UiLCJwcmlvcml0aXplIiwiX2Vhc2VNYXAiLCJfY3VzdG9tRWFzZUV4cCIsIl9xdW90ZXNFeHAiLCJfcGFyc2VPYmplY3RJblN0cmluZyIsInZhbCIsInBhcnNlZFZhbCIsIl9wcm9wYWdhdGVZb3lvRWFzZSIsImlzWW95byIsIl9maXJzdCIsInlveW9FYXNlIiwiX3lveW8iLCJfZWFzZSIsIl95RWFzZSIsImRlZmF1bHRFYXNlIiwib3BlbiIsImNsb3NlIiwibmVzdGVkIiwic3Vic3RyaW5nIiwiX0NFIiwiX2NvbmZpZ0Vhc2VGcm9tU3RyaW5nIiwiX2luc2VydEVhc2UiLCJlYXNlSW4iLCJlYXNlSW5PdXQiLCJsb3dlcmNhc2VOYW1lIiwidG9Mb3dlckNhc2UiLCJfZWFzZUluT3V0RnJvbU91dCIsIl9jb25maWdFbGFzdGljIiwiYW1wbGl0dWRlIiwicGVyaW9kIiwicDEiLCJwMiIsInAzIiwiYXNpbiIsIl9jb25maWdCYWNrIiwib3ZlcnNob290IiwicG93ZXIiLCJMaW5lYXIiLCJlYXNlTm9uZSIsIm5vbmUiLCJTdGVwcGVkRWFzZSIsInN0ZXBzIiwiaW1tZWRpYXRlU3RhcnQiLCJpZCIsIkFuaW1hdGlvbiIsIkluZmluaXR5IiwicmVwZWF0RGVsYXkiLCJ5b3lvIiwiX3Byb3RvIiwic3RhcnRUaW1lIiwiYXJndW1lbnRzIiwiX3RvdGFsVGltZSIsIl9wdExvb2t1cCIsIl9wVGltZSIsInJhdGlvIiwiaXRlcmF0aW9uIiwiX3BzIiwicGF1c2VkIiwiaW5jbHVkZVJlcGVhdHMiLCJ3cmFwUmVwZWF0cyIsInByZXZJc1JldmVydGluZyIsImdsb2JhbFRpbWUiLCJyZXN0YXJ0IiwiaW5jbHVkZURlbGF5IiwicGxheSIsInJldmVyc2VkIiwicGF1c2UiLCJhdFRpbWUiLCJyZXN1bWUiLCJpbnZhbGlkYXRlIiwiaXNBY3RpdmUiLCJldmVudENhbGxiYWNrIiwiX29uVXBkYXRlIiwidGhlbiIsIm9uRnVsZmlsbGVkIiwiUHJvbWlzZSIsInJlc29sdmUiLCJfcmVzb2x2ZSIsIl90aGVuIiwiX3Byb20iLCJfQW5pbWF0aW9uIiwiX3RoaXMiLCJzb3J0Q2hpbGRyZW4iLCJfcHJvdG8yIiwiZnJvbVRvIiwiZnJvbVZhcnMiLCJ0b1ZhcnMiLCJkZWxheWVkQ2FsbCIsInN0YWdnZXJUbyIsInN0YWdnZXIiLCJvbkNvbXBsZXRlQWxsIiwib25Db21wbGV0ZUFsbFBhcmFtcyIsIm9uQ29tcGxldGUiLCJvbkNvbXBsZXRlUGFyYW1zIiwic3RhZ2dlckZyb20iLCJzdGFnZ2VyRnJvbVRvIiwicHJldlBhdXNlZCIsInBhdXNlVHdlZW4iLCJwcmV2U3RhcnQiLCJwcmV2SXRlcmF0aW9uIiwicHJldlRpbWUiLCJ0RHVyIiwiY3Jvc3NpbmdTdGFydCIsInJld2luZGluZyIsImRvZXNXcmFwIiwicmVwZWF0UmVmcmVzaCIsIm9uUmVwZWF0IiwiX2hhc1BhdXNlIiwiX2ZvcmNpbmciLCJfbGFzdCIsIl9maW5kTmV4dFBhdXNlVHdlZW4iLCJvblVwZGF0ZSIsImFkanVzdGVkVGltZSIsIl90aGlzMiIsImFkZExhYmVsIiwiZ2V0Q2hpbGRyZW4iLCJ0d2VlbnMiLCJ0aW1lbGluZXMiLCJpZ25vcmVCZWZvcmVUaW1lIiwiZ2V0QnlJZCIsImFuaW1hdGlvbnMiLCJyZW1vdmVMYWJlbCIsImtpbGxUd2VlbnNPZiIsIl90b3RhbFRpbWUyIiwiYWRkUGF1c2UiLCJyZW1vdmVQYXVzZSIsInByb3BzIiwib25seUFjdGl2ZSIsImdldFR3ZWVuc09mIiwiX292ZXJ3cml0aW5nVHdlZW4iLCJwYXJzZWRUYXJnZXRzIiwiaXNHbG9iYWxUaW1lIiwiX3RhcmdldHMiLCJ0d2VlblRvIiwiaW5pdHRlZCIsInRsIiwiX3ZhcnMiLCJfb25TdGFydCIsIm9uU3RhcnQiLCJvblN0YXJ0UGFyYW1zIiwidHdlZW5Gcm9tVG8iLCJmcm9tUG9zaXRpb24iLCJ0b1Bvc2l0aW9uIiwibmV4dExhYmVsIiwiYWZ0ZXJUaW1lIiwicHJldmlvdXNMYWJlbCIsImJlZm9yZVRpbWUiLCJjdXJyZW50TGFiZWwiLCJzaGlmdENoaWxkcmVuIiwiYWRqdXN0TGFiZWxzIiwiaW5jbHVkZUxhYmVscyIsInVwZGF0ZVJvb3QiLCJfZm9yY2VBbGxQcm9wVHdlZW5zIiwiX2FkZENvbXBsZXhTdHJpbmdQcm9wVHdlZW4iLCJzZXR0ZXIiLCJzdHJpbmdGaWx0ZXIiLCJmdW5jUGFyYW0iLCJzdGFydE51bXMiLCJlbmROdW0iLCJjaHVuayIsInN0YXJ0TnVtIiwiaGFzUmFuZG9tIiwicHQiLCJfcmVuZGVyQ29tcGxleFN0cmluZyIsIm1hdGNoSW5kZXgiLCJmcCIsIm9wdGlvbmFsIiwiY3VycmVudFZhbHVlIiwicGFyc2VkU3RhcnQiLCJfc2V0dGVyRnVuY1dpdGhQYXJhbSIsIl9zZXR0ZXJGdW5jIiwiX3NldHRlclBsYWluIiwiX3JlbmRlckJvb2xlYW4iLCJfcmVuZGVyUGxhaW4iLCJfY2hlY2tQbHVnaW4iLCJwbHVnaW4iLCJwdExvb2t1cCIsIl9wYXJzZUZ1bmNPclN0cmluZyIsIl9wcm9jZXNzVmFycyIsInByaW9yaXR5IiwiY2xlYW5WYXJzIiwiaGFzUHJpb3JpdHkiLCJnc0RhdGEiLCJoYXJuZXNzVmFycyIsIm92ZXJ3cml0dGVuIiwib25VcGRhdGVQYXJhbXMiLCJwcmV2U3RhcnRBdCIsImZ1bGxUYXJnZXRzIiwiYXV0b092ZXJ3cml0ZSIsIl9vdmVyd3JpdGUiLCJfZnJvbSIsIl9wdENhY2hlIiwiX29wIiwiX3NvcnRQcm9wVHdlZW5zQnlQcmlvcml0eSIsIl9vbkluaXQiLCJfcGFyc2VLZXlmcmFtZSIsImFsbFByb3BzIiwiZWFzZUVhY2giLCJfc3RhZ2dlclR3ZWVuUHJvcHMiLCJfc3RhZ2dlclByb3BzVG9Ta2lwIiwiX0FuaW1hdGlvbjIiLCJza2lwSW5oZXJpdCIsIl90aGlzMyIsImN1clRhcmdldCIsInN0YWdnZXJGdW5jIiwic3RhZ2dlclZhcnNUb01lcmdlIiwiX3RoaXMzJHZhcnMiLCJrZiIsIl9wcm90bzMiLCJpc05lZ2F0aXZlIiwicHJldlJhdGlvIiwiX3JlbmRlclplcm9EdXJhdGlvblR3ZWVuIiwicmVzZXRUbyIsInN0YXJ0SXNSZWxhdGl2ZSIsInJvb3RQVCIsImxvb2t1cCIsInB0Q2FjaGUiLCJfdXBkYXRlUHJvcFR3ZWVucyIsIm92ZXJ3cml0dGVuUHJvcHMiLCJjdXJMb29rdXAiLCJjdXJPdmVyd3JpdGVQcm9wcyIsImtpbGxpbmdUYXJnZXRzIiwicHJvcFR3ZWVuTG9va3VwIiwiZmlyc3RQVCIsImExIiwiYTIiLCJfYXJyYXlzTWF0Y2giLCJwcm9wZXJ0eUFsaWFzZXMiLCJfYWRkQWxpYXNlc1RvVmFycyIsIm9uUmV2ZXJzZUNvbXBsZXRlIiwib25SZXZlcnNlQ29tcGxldGVQYXJhbXMiLCJfc2V0dGVyQXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwiaGFzTm9uRGVwZW5kZW50UmVtYWluaW5nIiwib3AiLCJkZXAiLCJfc2V0dGVyV2l0aE1vZGlmaWVyIiwibVNldCIsIm10IiwicHQyIiwiZmlyc3QiLCJsYXN0IiwicHIiLCJjaGFuZ2UiLCJyZW5kZXJlciIsIlR3ZWVuTWF4IiwiVHdlZW5MaXRlIiwiVGltZWxpbmVMaXRlIiwiVGltZWxpbmVNYXgiLCJfbWVkaWEiLCJfZW1wdHlBcnJheSIsIl9sYXN0TWVkaWFUaW1lIiwiX2Rpc3BhdGNoIiwiX29uTWVkaWFDaGFuZ2UiLCJhbnlNYXRjaCIsInRvZ2dsZWQiLCJxdWVyaWVzIiwiY29uZGl0aW9ucyIsIm9uTWF0Y2giLCJDb250ZXh0IiwiX3IiLCJpc1JldmVydGVkIiwiX3Byb3RvNSIsInByZXZTZWxlY3RvciIsImlnbm9yZSIsImdldFR3ZWVucyIsIl90aGlzNCIsIk1hdGNoTWVkaWEiLCJjb250ZXh0cyIsIl9wcm90bzYiLCJtcSIsImNvbmQiLCJhZGRMaXN0ZW5lciIsInJlZ2lzdGVyUGx1Z2luIiwiX2xlbjIiLCJhcmdzIiwiX2tleTIiLCJnZXRQcm9wZXJ0eSIsInVuaXQiLCJ1bmNhY2hlIiwiZm9ybWF0IiwicXVpY2tTZXR0ZXIiLCJzZXR0ZXJzIiwicXVpY2tUbyIsIl9tZXJnZTIiLCJpc1R3ZWVuaW5nIiwicmVnaXN0ZXJFZmZlY3QiLCJfcmVmMyIsImVmZmVjdCIsImV4dGVuZFRpbWVsaW5lIiwicGx1Z2luTmFtZSIsInJlZ2lzdGVyRWFzZSIsInBhcnNlRWFzZSIsImV4cG9ydFJvb3QiLCJpbmNsdWRlRGVsYXllZENhbGxzIiwibWF0Y2hNZWRpYVJlZnJlc2giLCJmb3VuZCIsInV0aWxzIiwid3JhcCIsInJhbmdlIiwid3JhcFlveW8iLCJ0b3RhbCIsImNsYW1wIiwicGlwZSIsIl9sZW4iLCJmdW5jdGlvbnMiLCJfa2V5IiwidW5pdGl6ZSIsImludGVycG9sYXRlIiwibXV0YXRlIiwiaW50ZXJwb2xhdG9ycyIsImlsIiwiaXNTdHJpbmciLCJtYXN0ZXIiLCJpbnN0YWxsIiwiZWZmZWN0cyIsInRpY2tlciIsImdsb2JhbFRpbWVsaW5lIiwiY29yZSIsImdsb2JhbHMiLCJnZXRDYWNoZSIsInJldmVydGluZyIsInRvQWRkIiwic3VwcHJlc3NPdmVyd3JpdGVzIiwiX2dldFBsdWdpblByb3BUd2VlbiIsIl9idWlsZE1vZGlmaWVyUGx1Z2luIiwidGVtcCIsIm1vZGlmaWVycyIsIl9hZGRNb2RpZmllcnMiLCJQb3dlcjAiLCJQb3dlcjEiLCJQb3dlcjIiLCJQb3dlcjMiLCJQb3dlcjQiLCJRdWFkIiwiQ3ViaWMiLCJRdWFydCIsIlF1aW50IiwiU3Ryb25nIiwiRWxhc3RpYyIsIkJhY2siLCJCb3VuY2UiLCJTaW5lIiwiRXhwbyIsIkNpcmMiLCJfZG9jRWxlbWVudCIsIl9wbHVnaW5Jbml0dGVkIiwiX3RlbXBEaXYiLCJfcmVjZW50U2V0dGVyUGx1Z2luIiwiX3N1cHBvcnRzM0QiLCJfdHJhbnNmb3JtUHJvcHMiLCJfUkFEMkRFRyIsIl9ERUcyUkFEIiwiX2F0YW4yIiwiYXRhbjIiLCJfY2Fwc0V4cCIsIl9ob3Jpem9udGFsRXhwIiwiX2NvbXBsZXhFeHAiLCJfcHJvcGVydHlBbGlhc2VzIiwiYXV0b0FscGhhIiwic2NhbGUiLCJhbHBoYSIsIl9yZW5kZXJDU1NQcm9wIiwiX3JlbmRlclByb3BXaXRoRW5kIiwiX3JlbmRlckNTU1Byb3BXaXRoQmVnaW5uaW5nIiwiX3JlbmRlclJvdW5kZWRDU1NQcm9wIiwiX3JlbmRlck5vblR3ZWVuaW5nVmFsdWUiLCJfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZU9ubHlBdEVuZCIsIl9zZXR0ZXJDU1NTdHlsZSIsIl9zZXR0ZXJDU1NQcm9wIiwic2V0UHJvcGVydHkiLCJfc2V0dGVyVHJhbnNmb3JtIiwiX3NldHRlclNjYWxlIiwic2NhbGVYIiwic2NhbGVZIiwiX3NldHRlclNjYWxlV2l0aFJlbmRlciIsInJlbmRlclRyYW5zZm9ybSIsIl9zZXR0ZXJUcmFuc2Zvcm1XaXRoUmVuZGVyIiwiX3RyYW5zZm9ybVByb3AiLCJfdHJhbnNmb3JtT3JpZ2luUHJvcCIsIl9zYXZlU3R5bGUiLCJ0Zm0iLCJfZ2V0Iiwic3ZnIiwic3ZnbyIsIl9yZW1vdmVJbmRlcGVuZGVudFRyYW5zZm9ybXMiLCJyZW1vdmVQcm9wZXJ0eSIsIl9yZXZlcnRTdHlsZSIsIl9nZXRTdHlsZVNhdmVyIiwicHJvcGVydGllcyIsInNhdmVyIiwic2F2ZSIsIl9jcmVhdGVFbGVtZW50IiwibnMiLCJjcmVhdGVFbGVtZW50TlMiLCJfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSIsInNraXBQcmVmaXhGYWxsYmFjayIsImNzIiwiX2NoZWNrUHJvcFByZWZpeCIsIl9wcmVmaXhlcyIsImVsZW1lbnQiLCJwcmVmZXJQcmVmaXgiLCJfaW5pdENvcmUiLCJkb2N1bWVudEVsZW1lbnQiLCJjc3NUZXh0IiwiX2dldEJCb3hIYWNrIiwic3dhcElmUG9zc2libGUiLCJiYm94Iiwib3duZXJTVkdFbGVtZW50Iiwib2xkUGFyZW50IiwicGFyZW50Tm9kZSIsIm9sZFNpYmxpbmciLCJuZXh0U2libGluZyIsIm9sZENTUyIsImFwcGVuZENoaWxkIiwiZGlzcGxheSIsImdldEJCb3giLCJfZ3NhcEJCb3giLCJpbnNlcnRCZWZvcmUiLCJyZW1vdmVDaGlsZCIsIl9nZXRBdHRyaWJ1dGVGYWxsYmFja3MiLCJhdHRyaWJ1dGVzQXJyYXkiLCJoYXNBdHRyaWJ1dGUiLCJfZ2V0QkJveCIsImJvdW5kcyIsImVycm9yIiwiX2lzU1ZHIiwiZ2V0Q1RNIiwiX3JlbW92ZVByb3BlcnR5IiwiX2FkZE5vblR3ZWVuaW5nUFQiLCJiZWdpbm5pbmciLCJvbmx5U2V0QXRFbmQiLCJfbm9uQ29udmVydGlibGVVbml0cyIsImRlZyIsInJhZCIsInR1cm4iLCJfbm9uU3RhbmRhcmRMYXlvdXRzIiwiZmxleCIsIl9jb252ZXJ0VG9Vbml0IiwicHgiLCJpc1NWRyIsImN1clZhbHVlIiwiY3VyVW5pdCIsImhvcml6b250YWwiLCJpc1Jvb3RTVkciLCJ0YWdOYW1lIiwibWVhc3VyZVByb3BlcnR5IiwidG9QaXhlbHMiLCJ0b1BlcmNlbnQiLCJib2R5IiwiX3BhcnNlVHJhbnNmb3JtIiwib3JpZ2luIiwiX2ZpcnN0VHdvT25seSIsInpPcmlnaW4iLCJfc3BlY2lhbFByb3BzIiwiX3R3ZWVuQ29tcGxleENTU1N0cmluZyIsInN0YXJ0VmFsdWVzIiwic3RhcnRWYWx1ZSIsImVuZFZhbHVlIiwiZW5kVW5pdCIsInN0YXJ0VW5pdCIsIl9rZXl3b3JkVG9QZXJjZW50IiwidG9wIiwiYm90dG9tIiwicmlnaHQiLCJfY29udmVydEtleXdvcmRzVG9QZXJjZW50YWdlcyIsIl9yZW5kZXJDbGVhclByb3BzIiwiY2xlYXJUcmFuc2Zvcm1zIiwiY2xlYXJQcm9wcyIsIl9pZGVudGl0eTJETWF0cml4IiwiX3JvdGF0aW9uYWxQcm9wZXJ0aWVzIiwiX2lzTnVsbFRyYW5zZm9ybSIsIl9nZXRDb21wdXRlZFRyYW5zZm9ybU1hdHJpeEFzQXJyYXkiLCJtYXRyaXhTdHJpbmciLCJfZ2V0TWF0cml4IiwiZm9yY2UyRCIsImFkZGVkVG9ET00iLCJtYXRyaXgiLCJiYXNlVmFsIiwiY29uc29saWRhdGUiLCJuZXh0RWxlbWVudFNpYmxpbmciLCJfYXBwbHlTVkdPcmlnaW4iLCJvcmlnaW5Jc0Fic29sdXRlIiwic21vb3RoIiwibWF0cml4QXJyYXkiLCJwbHVnaW5Ub0FkZFByb3BUd2VlbnNUbyIsImRldGVybWluYW50IiwieE9yaWdpbk9sZCIsInhPcmlnaW4iLCJ5T3JpZ2luT2xkIiwieU9yaWdpbiIsInhPZmZzZXRPbGQiLCJ4T2Zmc2V0IiwieU9mZnNldE9sZCIsInlPZmZzZXQiLCJ0eCIsInR5Iiwib3JpZ2luU3BsaXQiLCJyb3RhdGlvbiIsInJvdGF0aW9uWCIsInJvdGF0aW9uWSIsInNrZXdYIiwic2tld1kiLCJwZXJzcGVjdGl2ZSIsImFuZ2xlIiwiYTEyIiwiYTIyIiwidDEiLCJ0MiIsInQzIiwiYTEzIiwiYTIzIiwiYTMzIiwiYTQyIiwiYTQzIiwiYTMyIiwiaW52ZXJ0ZWRTY2FsZVgiLCJyb3RhdGUiLCJmb3JjZUNTUyIsInhQZXJjZW50Iiwib2Zmc2V0V2lkdGgiLCJ5UGVyY2VudCIsIm9mZnNldEhlaWdodCIsInRyYW5zZm9ybVBlcnNwZWN0aXZlIiwiX3JlbmRlclNWR1RyYW5zZm9ybXMiLCJfcmVuZGVyQ1NTVHJhbnNmb3JtcyIsIl9yZW5kZXJOb24zRFRyYW5zZm9ybXMiLCJfYWRkUHhUcmFuc2xhdGUiLCJfemVyb0RlZyIsIl96ZXJvUHgiLCJfZW5kUGFyZW50aGVzaXMiLCJ0cmFuc2Zvcm1zIiwidXNlM0QiLCJhMTEiLCJhMjEiLCJ0YW4iLCJfYWRkUm90YXRpb25hbFByb3BUd2VlbiIsImNhcCIsImZpbmFsVmFsdWUiLCJfYXNzaWduIiwic291cmNlIiwiX2FkZFJhd1RyYW5zZm9ybVBUcyIsImVuZENhY2hlIiwic3RhcnRDYWNoZSIsInNpZGUiLCJhbGwiLCJDU1NQbHVnaW4iLCJzcGVjaWFsUHJvcCIsInJlbGF0aXZlIiwiaXNUcmFuc2Zvcm1SZWxhdGVkIiwidHJhbnNmb3JtUHJvcFR3ZWVuIiwiaW5saW5lUHJvcHMiLCJzdHlsZXMiLCJ2aXNpYmlsaXR5IiwicGFyc2VUcmFuc2Zvcm0iLCJzbW9vdGhPcmlnaW4iLCJhdXRvUm91bmQiLCJjaGVja1ByZWZpeCIsImdldFN0eWxlU2F2ZXIiLCJwb3NpdGlvbkFuZFNjYWxlIiwiZ3NhcFdpdGhDU1MiLCJfZGVmaW5lUHJvcGVydGllcyIsImRlc2NyaXB0b3IiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIl9kb2NFbCIsIl9ib2R5IiwiX2lzVG91Y2giLCJfcG9pbnRlclR5cGUiLCJfcm9vdCIsIl9ub3JtYWxpemVyIiwiX2V2ZW50VHlwZXMiLCJfZ2V0R1NBUCIsIl9zdGFydHVwIiwiX29ic2VydmVycyIsIl9zY3JvbGxlcnMiLCJfcHJveGllcyIsIl9icmlkZ2UiLCJfZ2V0UHJveHlQcm9wIiwiX2lzVmlld3BvcnQiLCJfYWRkTGlzdGVuZXIiLCJub25QYXNzaXZlIiwiY2FwdHVyZSIsInBhc3NpdmUiLCJfcmVtb3ZlTGlzdGVuZXIiLCJfb25TY3JvbGwiLCJpc1ByZXNzZWQiLCJfc2Nyb2xsQ2FjaGVGdW5jIiwiZG9Ob3RDYWNoZSIsImNhY2hpbmdGdW5jIiwiaGlzdG9yeSIsInNjcm9sbFJlc3RvcmF0aW9uIiwiaXNOb3JtYWxpemluZyIsImlPUyIsImNhY2hlSUQiLCJfaG9yaXpvbnRhbCIsIm9zIiwib3MyIiwiZDIiLCJzYyIsIl92ZXJ0aWNhbCIsInBhZ2VYT2Zmc2V0IiwicGFnZVlPZmZzZXQiLCJfZ2V0VGFyZ2V0IiwiX2dldFNjcm9sbEZ1bmMiLCJfZ2V0VmVsb2NpdHlQcm9wIiwibWluVGltZVJlZnJlc2giLCJ1c2VEZWx0YSIsInYxIiwidjIiLCJkcm9wVG9aZXJvVGltZSIsInJlc2V0IiwiZ2V0VmVsb2NpdHkiLCJsYXRlc3RWYWx1ZSIsInRPbGQiLCJ2T2xkIiwiX2dldEV2ZW50IiwiX2dzYXBBbGxvdyIsImNoYW5nZWRUb3VjaGVzIiwiX2dldEFic29sdXRlTWF4IiwiX3NldFNjcm9sbFRyaWdnZXIiLCJzY3JvbGxlcnMiLCJwcm94aWVzIiwiYnJpZGdlIiwiT2JzZXJ2ZXIiLCJpc1RvdWNoIiwibmF2aWdhdG9yIiwibWF4VG91Y2hQb2ludHMiLCJtc01heFRvdWNoUG9pbnRzIiwiZXZlbnRUeXBlcyIsIkNvbnN0cnVjdG9yIiwicHJvdG9Qcm9wcyIsInRvbGVyYW5jZSIsImRyYWdNaW5pbXVtIiwiZGVib3VuY2UiLCJvblN0b3AiLCJvblN0b3BEZWxheSIsIndoZWVsU3BlZWQiLCJldmVudCIsIm9uRHJhZ1N0YXJ0Iiwib25EcmFnRW5kIiwib25EcmFnIiwib25QcmVzcyIsIm9uUmVsZWFzZSIsIm9uUmlnaHQiLCJvbkxlZnQiLCJvblVwIiwib25Eb3duIiwib25DaGFuZ2VYIiwib25DaGFuZ2VZIiwib25DaGFuZ2UiLCJvblRvZ2dsZVgiLCJvblRvZ2dsZVkiLCJvbkhvdmVyIiwib25Ib3ZlckVuZCIsIm9uTW92ZSIsImlnbm9yZUNoZWNrIiwiaXNOb3JtYWxpemVyIiwib25HZXN0dXJlU3RhcnQiLCJvbkdlc3R1cmVFbmQiLCJvbldoZWVsIiwib25FbmFibGUiLCJvbkRpc2FibGUiLCJvbkNsaWNrIiwic2Nyb2xsU3BlZWQiLCJhbGxvd0NsaWNrcyIsImxvY2tBeGlzIiwib25Mb2NrQXhpcyIsIm9uU3RvcERlbGF5ZWRDYWxsIiwiZHJhZ2dlZCIsIm1vdmVkIiwid2hlZWxlZCIsImxvY2tlZCIsInByZXZEZWx0YVgiLCJwcmV2RGVsdGFZIiwic2Nyb2xsRnVuY1giLCJzY3JvbGxGdW5jWSIsInNjcm9sbFgiLCJzY3JvbGxZIiwibGltaXRUb1RvdWNoIiwiaXNWaWV3cG9ydCIsIm93bmVyRG9jIiwib3duZXJEb2N1bWVudCIsImRlbHRhWCIsImRlbHRhWSIsIm9uQ2xpY2tUaW1lIiwiY2xpY2tDYXB0dXJlIiwiX2lnbm9yZUNoZWNrIiwiaXNQb2ludGVyT3JUb3VjaCIsInBvaW50ZXJUeXBlIiwiY2hhbmdlZFgiLCJjaGFuZ2VkWSIsIm9uRGVsdGEiLCJfdngiLCJfdnkiLCJvblRvdWNoT3JQb2ludGVyRGVsdGEiLCJfb25EcmFnIiwiY2xpZW50WCIsImNsaWVudFkiLCJpc0RyYWdnaW5nIiwic3RhcnRYIiwic3RhcnRZIiwiX29uUHJlc3MiLCJfb25SZWxlYXNlIiwid2FzRHJhZ2dpbmciLCJldmVudERhdGEiLCJkZWZhdWx0UHJldmVudGVkIiwiY2xpY2siLCJjcmVhdGVFdmVudCIsInN5bnRoZXRpY0V2ZW50IiwiaW5pdE1vdXNlRXZlbnQiLCJzY3JlZW5YIiwic2NyZWVuWSIsImRpc3BhdGNoRXZlbnQiLCJpc0dlc3R1cmluZyIsIl9vbkdlc3R1cmVTdGFydCIsIl9vbkdlc3R1cmVFbmQiLCJvblNjcm9sbCIsIl9vbldoZWVsIiwibXVsdGlwbGllciIsImRlbHRhTW9kZSIsImlubmVySGVpZ2h0IiwiX29uTW92ZSIsIl9vbkhvdmVyIiwiX29uSG92ZXJFbmQiLCJfb25DbGljayIsIl9kYyIsImVuYWJsZSIsImlzRW5hYmxlZCIsImRpc2FibGUiLCJnZXRBbGwiLCJfcmVzaXplRGVsYXkiLCJfdG9BcnJheSIsIl90aW1lMiIsIl9zeW5jSW50ZXJ2YWwiLCJfcmVmcmVzaGluZyIsIl9wb2ludGVySXNEb3duIiwiX3ByZXZXaWR0aCIsIl9wcmV2SGVpZ2h0IiwiX2F1dG9SZWZyZXNoIiwiX2lnbm9yZVJlc2l6ZSIsIl9pZ25vcmVNb2JpbGVSZXNpemUiLCJfYmFzZVNjcmVlbkhlaWdodCIsIl9iYXNlU2NyZWVuV2lkdGgiLCJfZml4SU9TQnVnIiwiX2xpbWl0Q2FsbGJhY2tzIiwiX3JhZklEIiwiX3JlZnJlc2hpbmdBbGwiLCJfcHJpbWFyeSIsIl90aW1lMSIsIl9sYXN0U2Nyb2xsVGltZSIsIl9lbmFibGVkIiwiX3BvaW50ZXJEb3duSGFuZGxlciIsIl9wb2ludGVyVXBIYW5kbGVyIiwiX2dldEJvdW5kc0Z1bmMiLCJfd2luT2Zmc2V0cyIsImlubmVyV2lkdGgiLCJfZ2V0Qm91bmRzIiwiX21heFNjcm9sbCIsIl9pdGVyYXRlQXV0b1JlZnJlc2giLCJldmVudHMiLCJfZW5kQW5pbWF0aW9uIiwiZW5hYmxlZCIsImNhbGxiYWNrQW5pbWF0aW9uIiwiX2FicyIsIl9yaWdodCIsIl9ib3R0b20iLCJfd2lkdGgiLCJfaGVpZ2h0IiwiX3BhZGRpbmciLCJfbWFyZ2luIiwiX1dpZHRoIiwiX3B4IiwiX2dldENvbXB1dGVkU3R5bGUiLCJ3aXRob3V0VHJhbnNmb3JtcyIsIl9nZXRTaXplIiwiX2dldExhYmVsUmF0aW9BcnJheSIsIl9zbmFwRGlyZWN0aW9uYWwiLCJzbmFwSW5jcmVtZW50T3JBcnJheSIsInNuYXBwZWQiLCJfbXVsdGlMaXN0ZW5lciIsInR5cGVzIiwiX3doZWVsTGlzdGVuZXIiLCJzY3JvbGxGdW5jIiwid2hlZWxIYW5kbGVyIiwiX21hcmtlckRlZmF1bHRzIiwic3RhcnRDb2xvciIsImVuZENvbG9yIiwiaW5kZW50IiwiZm9udFNpemUiLCJmb250V2VpZ2h0IiwidG9nZ2xlQWN0aW9ucyIsImFudGljaXBhdGVQaW4iLCJfa2V5d29yZHMiLCJfb2Zmc2V0VG9QeCIsInNpemUiLCJlcUluZGV4IiwiX2NyZWF0ZU1hcmtlciIsIl9yZWY0IiwibWF0Y2hXaWR0aEVsIiwiY29udGFpbmVyQW5pbWF0aW9uIiwidXNlRml4ZWRQb3NpdGlvbiIsImlzU2Nyb2xsZXIiLCJjc3MiLCJfaXNTdGFydCIsImlubmVyVGV4dCIsIl9vZmZzZXQiLCJfcG9zaXRpb25NYXJrZXIiLCJtYXJrZXIiLCJmbGlwcGVkIiwib3Bwb3NpdGVTaWRlIiwiX2lzRmxpcHBlZCIsIl90cmlnZ2VycyIsIl9pZHMiLCJfc3luYyIsIl91cGRhdGVBbGwiLCJjbGllbnRXaWR0aCIsIl9zZXRCYXNlRGltZW5zaW9ucyIsIl9vblJlc2l6ZSIsImZ1bGxzY3JlZW5FbGVtZW50Iiwid2Via2l0RnVsbHNjcmVlbkVsZW1lbnQiLCJfc29mdFJlZnJlc2giLCJfcmVmcmVzaEFsbCIsIl9zYXZlZFN0eWxlcyIsIl9yZXZlcnRSZWNvcmRlZCIsIm1lZGlhIiwicXVlcnkiLCJfcmV2ZXJ0QWxsIiwiX2NsZWFyU2Nyb2xsTWVtb3J5IiwicmVjIiwiX3JlZnJlc2hJRCIsInNraXBSZXZlcnQiLCJyZWZyZXNoSW5pdHMiLCJyZWZyZXNoIiwic2V0UG9zaXRpb25zIiwic2Nyb2xsZXIiLCJfZGlyIiwiX2xhc3RTY3JvbGwiLCJfZGlyZWN0aW9uIiwiaXNVcGRhdGluZyIsInJlY29yZFZlbG9jaXR5IiwiX3Byb3BOYW1lc1RvQ29weSIsIl9zdGF0ZVByb3BzIiwiX3N3YXBQaW5JbiIsInBpbiIsInNwYWNlciIsInNwYWNlclN0YXRlIiwic3dhcHBlZEluIiwic3BhY2VyU3R5bGUiLCJwaW5TdHlsZSIsImZsZXhCYXNpcyIsIm92ZXJmbG93IiwiYm94U2l6aW5nIiwiX3NldFN0YXRlIiwic3RhdGUiLCJfZ2V0U3RhdGUiLCJzY3JvbGxlclNpemUiLCJtYXJrZXJTY3JvbGxlciIsInNjcm9sbGVyQm91bmRzIiwiYm9yZGVyV2lkdGgiLCJzY3JvbGxlck1heCIsImxvY2FsT2Zmc2V0IiwiZ2xvYmFsT2Zmc2V0Iiwib2Zmc2V0cyIsIl9jYVNjcm9sbERpc3QiLCJfcHJlZml4RXhwIiwiX3JlcGFyZW50IiwiX3N0T3JpZyIsIl9nZXRUd2VlbkNyZWF0b3IiLCJsYXN0U2Nyb2xsMSIsImxhc3RTY3JvbGwyIiwiZ2V0U2Nyb2xsIiwiZ2V0VHdlZW4iLCJpbml0aWFsVmFsdWUiLCJjaGFuZ2UxIiwiY2hhbmdlMiIsInBpbkNhY2hlIiwic25hcEZ1bmMiLCJzY3JvbGwxIiwic2Nyb2xsMiIsIm1hcmtlclN0YXJ0IiwibWFya2VyRW5kIiwibWFya2VyU3RhcnRUcmlnZ2VyIiwibWFya2VyRW5kVHJpZ2dlciIsIm1hcmtlclZhcnMiLCJwaW5PcmlnaW5hbFN0YXRlIiwicGluQWN0aXZlU3RhdGUiLCJwaW5TdGF0ZSIsInBpbkdldHRlciIsInBpblNldHRlciIsInBpblN0YXJ0IiwicGluQ2hhbmdlIiwic3BhY2luZ1N0YXJ0IiwibWFya2VyU3RhcnRTZXR0ZXIiLCJtYXJrZXJFbmRTZXR0ZXIiLCJzbmFwMSIsInNuYXAyIiwic2NydWJUd2VlbiIsInNjcnViU21vb3RoIiwic25hcER1ckNsYW1wIiwic25hcERlbGF5ZWRDYWxsIiwicHJldlByb2dyZXNzIiwicHJldlNjcm9sbCIsInByZXZBbmltUHJvZ3Jlc3MiLCJjYU1hcmtlclNldHRlciIsImN1c3RvbVJldmVydFJldHVybiIsInRvZ2dsZUNsYXNzIiwib25Ub2dnbGUiLCJvblJlZnJlc2giLCJzY3J1YiIsInBpblNwYWNpbmciLCJpbnZhbGlkYXRlT25SZWZyZXNoIiwib25TY3J1YkNvbXBsZXRlIiwib25TbmFwQ29tcGxldGUiLCJwaW5SZXBhcmVudCIsInBpblNwYWNlciIsImZhc3RTY3JvbGxFbmQiLCJwcmV2ZW50T3ZlcmxhcHMiLCJpc1RvZ2dsZSIsInNjcm9sbGVyQ2FjaGUiLCJwaW5UeXBlIiwiY2FsbGJhY2tzIiwib25FbnRlciIsIm9uTGVhdmUiLCJvbkVudGVyQmFjayIsIm9uTGVhdmVCYWNrIiwibWFya2VycyIsIm9uUmVmcmVzaEluaXQiLCJnZXRTY3JvbGxlclNpemUiLCJfZ2V0U2l6ZUZ1bmMiLCJnZXRTY3JvbGxlck9mZnNldHMiLCJfZ2V0T2Zmc2V0c0Z1bmMiLCJsYXN0U25hcCIsImxhc3RSZWZyZXNoIiwiYmluZCIsInJlZnJlc2hQcmlvcml0eSIsInR3ZWVuU2Nyb2xsIiwic2NydWJEdXJhdGlvbiIsInNjcm9sbEJlaGF2aW9yIiwiX2dldENsb3Nlc3RMYWJlbCIsInN0IiwiZGlyZWN0aW9uYWwiLCJyZWZyZXNoZWRSZWNlbnRseSIsInZlbG9jaXR5IiwibmF0dXJhbEVuZCIsImluZXJ0aWEiLCJlbmRTY3JvbGwiLCJfc25hcCIsIl9vbkludGVycnVwdCIsIm9uSW50ZXJydXB0IiwiX29uQ29tcGxldGUiLCJzdFJldmVydCIsImNsYXNzTmFtZSIsInNwYWNlcklzTmF0aXZlIiwiY2xhc3NMaXN0IiwiY29udGVudCIsIm9sZE9uVXBkYXRlIiwib2xkUGFyYW1zIiwicHJldmlvdXMiLCJwcmV2UmVmcmVzaGluZyIsIl9zd2FwUGluT3V0Iiwic29mdCIsImlzVmVydGljYWwiLCJvdmVycmlkZSIsImN1clRyaWdnZXIiLCJjdXJQaW4iLCJvcHBvc2l0ZVNjcm9sbCIsInJldmVydGVkUGlucyIsIm90aGVyUGluT2Zmc2V0IiwicGFyc2VkRW5kIiwicGFyc2VkRW5kVHJpZ2dlciIsImVuZFRyaWdnZXIiLCJwaW5uZWRDb250YWluZXIiLCJ0cmlnZ2VySW5kZXgiLCJ1bnNoaWZ0IiwiX3BpblB1c2giLCJvbWl0T2Zmc2V0cyIsIl9jb3B5U3RhdGUiLCJfcGluT2Zmc2V0IiwiZW5kQW5pbWF0aW9uIiwibGFiZWxUb1Njcm9sbCIsImdldFRyYWlsaW5nIiwiZm9yY2VGYWtlIiwidG9nZ2xlU3RhdGUiLCJhY3Rpb24iLCJzdGF0ZUNoYW5nZWQiLCJpc0F0TWF4IiwiaXNUYWtpbmdBY3Rpb24iLCJjbGlwcGVkIiwibmV3U3RhcnQiLCJuZXdFbmQiLCJhbGxvd0FuaW1hdGlvbiIsIm9uS2lsbCIsImNsZWFySW50ZXJ2YWwiLCJ1c2VyQWdlbnQiLCJtbSIsImJvZHlTdHlsZSIsImJvcmRlciIsImJvcmRlclRvcFN0eWxlIiwiQW5pbWF0aW9uUHJvdG8iLCJzZXRJbnRlcnZhbCIsImhpZGRlbiIsImxpbWl0Q2FsbGJhY2tzIiwibXMiLCJzeW5jSW50ZXJ2YWwiLCJpZ25vcmVNb2JpbGVSZXNpemUiLCJhdXRvUmVmcmVzaEV2ZW50cyIsInNjcm9sbGVyUHJveHkiLCJjbGVhck1hdGNoTWVkaWEiLCJpc0luVmlld3BvcnQiLCJwb3NpdGlvbkluVmlld3BvcnQiLCJyZWZlcmVuY2VQb2ludCIsImtpbGxBbGwiLCJhbGxvd0xpc3RlbmVycyIsImxpc3RlbmVycyIsInNhdmVTdHlsZXMiLCJzYWZlIiwiY2xlYXJTY3JvbGxNZW1vcnkiLCJtYXhTY3JvbGwiLCJnZXRTY3JvbGxGdW5jIiwiaXNTY3JvbGxpbmciLCJzbmFwRGlyZWN0aW9uYWwiLCJiYXRjaCIsInZhcnNDb3B5IiwiaW50ZXJ2YWwiLCJiYXRjaE1heCIsInByb3h5Q2FsbGJhY2siLCJlbGVtZW50cyIsInRyaWdnZXJzIiwiX2lucHV0SXNGb2N1c2VkIiwiX2NsYW1wU2Nyb2xsQW5kR2V0RHVyYXRpb25NdWx0aXBsaWVyIiwiX2FsbG93TmF0aXZlUGFubmluZyIsInRvdWNoQWN0aW9uIiwiX292ZXJmbG93IiwiYXV0byIsIl9uZXN0ZWRTY3JvbGwiLCJfcmVmNSIsIm5vZGUiLCJfaXNTY3JvbGxUIiwic2Nyb2xsSGVpZ2h0IiwiY2xpZW50SGVpZ2h0IiwiX2lzU2Nyb2xsIiwib3ZlcmZsb3dZIiwib3ZlcmZsb3dYIiwic3RvcFByb3BhZ2F0aW9uIiwiX2lucHV0T2JzZXJ2ZXIiLCJpbnB1dHMiLCJfY2FwdHVyZUlucHV0cyIsIl9pbnB1dEV4cCIsImlzSW5wdXQiLCJvYnNlcnZlIiwibm9ybWFsaXplU2Nyb2xsIiwibm9ybWFsaXplciIsIm1heFkiLCJsYXN0UmVmcmVzaElEIiwic2tpcFRvdWNoTW92ZSIsInN0YXJ0U2Nyb2xsWCIsInN0YXJ0U2Nyb2xsWSIsIl92YXJzMiIsIm5vcm1hbGl6ZVNjcm9sbFgiLCJtb21lbnR1bSIsImFsbG93TmVzdGVkU2Nyb2xsIiwic21vb3RoZXIiLCJTY3JvbGxTbW9vdGhlciIsInNtb290aGVySW5zdGFuY2UiLCJpbml0aWFsU2NhbGUiLCJ2aXN1YWxWaWV3cG9ydCIsIm91dGVyV2lkdGgiLCJ3aGVlbFJlZnJlc2giLCJyZXNvbHZlTW9tZW50dW1EdXJhdGlvbiIsImlucHV0T2JzZXJ2ZXIiLCJyZXN1bWVUb3VjaE1vdmUiLCJzY3JvbGxDbGFtcFgiLCJzY3JvbGxDbGFtcFkiLCJ1cGRhdGVDbGFtcHMiLCJyZW1vdmVDb250ZW50T2Zmc2V0Iiwib25SZXNpemUiLCJpZ25vcmVEcmFnIiwicHJldlNjYWxlIiwiY3VycmVudFNjcm9sbCIsInZlbG9jaXR5WCIsInZlbG9jaXR5WSIsInhBcnJheSIsInlBcnJheSIsInlDbGFtcGVkIiwiX2dldFNjcm9sbE5vcm1hbGl6ZXIiLCJzcyIsInJlZiIsImhlYWRlckhvbWUiLCJtZXNzYWdlRm9ydCIsImxpc3Rlc0ljb25lcyIsIm1vZHVsYWlyZSIsImdhbW1lcyIsInByb2R1aXRzIiwiYWN0dWFsaXRlcyIsInRlbW9pZ25hZ2VzIiwiY29vcmRvbm5lZXMiLCJjb250YWN0IiwiaGVhZGVyVGl0cmVJbWFnZUNsb3VkIiwidGV4dCIsImhlYWRlclByb2R1Y3QiLCJ0ZXh0ZUNlbnRyZSIsImRldXhDb2xvbm5lcyIsImltYWdlIiwibGF5b3V0VGV4dGVJbWFnZSIsInRhYnMiLCJyZWFzc3VyYW5jZSIsImRldXhDb2xvbm5lc0ltYWdlIiwiZ2FsZXJpZSIsImRldXhQYXJhZ3JhcGhlc0JvdXRvbiIsImhlYWRlckdhbW1lIiwiZGV1eENvbG9ubmVzTGF5b3V0Qm91dG9uSW1hZ2UiLCJ0YWlsbGVzIiwidGFpbGxlc0RldXhDb2xvbm5lcyIsImxheW91dFRpdHJlVGV4dGVCb3V0b25JbWFnZSIsInBhcmFncmFwaGVHYXVjaGUiLCJsYXlvdXRWaWRlb1RleHRlIiwicGFyYWdyYXBoZUNlbnRyZSIsInZpZGVvIiwidGl0cmVQYXJhZ3JhcGhlR2F1Y2hlIiwiaGVhZGVyVGl0cmVEZXNjcmlwdGlvbiIsImFwcGVsIiwiYmFubmllcmVJbWFnZSIsInRpdHJlTG9uZ1RleHRJbWFnZSIsInZhbGV1cnMiLCJlcXVpcGUiLCJib3V0b24iLCJoZWFkZXJCbG9nIiwiaGVhZGVyUG9zdCIsImJsb2NrIiwicXVlcnlTZWxlY3RvciIsImJsb2NrQnRuIiwidGltZWxpbmVCdG4iLCJvcGFjaXR5IiwiYmxvY2tzIiwiYW5jaG9yIiwic2Nyb2xsSW50b1ZpZXciLCJiZWhhdmlvciIsInZpZXdwb3J0Tm9kZSIsInByZXZCdXR0b25Ob2RlIiwibmV4dEJ1dHRvbk5vZGUiLCJlbWJsYSIsIm5hdiIsIm5hdkljb24iLCJoZXJvRnVsbCIsImhlcm9JbWciLCJoZXJvT3ZlcmxheSIsImdhbGxlcnkiLCJnYWxsZXJ5SW5uZXIiLCJidXR0b25BY3RpdmUiLCJjb250ZW50QWN0aXZlIiwiYXR0cmlidXRlcyIsInRhYkluZGV4IiwiZWxSb290IiwiZWxzQnV0dG9uIiwiZWxzQ29udGVudCIsImNoYW5nZVRhYiIsImxvZyIsImNvbnRhaW5zIiwic2V0SGVpZ2h0T2ZIZXJvIiwibmF2SGVpZ2h0Iiwic2V0SGVpZ2h0T2ZPdmVybGF5Iiwib3ZlcmxheUhlaWdodCIsInByZXNzZWQiLCJjaGVja0JvdW5kYXJ5Iiwib3V0ZXIiLCJpbm5lciIsIm9mZnNldExlZnQiLCJjdXJzb3IiLCJvZmZzZXRYIiwic2xpZGVyIiwicHJldkJ0biIsIm5leHRCdG4iLCJudW1TbGlkZXMiLCJzbGlkZVdpZHRoIiwic2xpZGVNYXJnaW5SaWdodCIsIm1hcmdpblJpZ2h0IiwibW92ZVgiLCJmaXJzdENsb25lIiwiY2xvbmVOb2RlIiwibGFzdENsb25lIiwicHJlcGVuZCIsImFsbFNsaWRlcyIsImNvdW50ZXIiLCJ0cmFuc2l0aW9uIiwibXloaWRkZW50aGluZyIsIm9uY2xpY2siLCJ0b2dnbGUiXSwic291cmNlUm9vdCI6IiJ9